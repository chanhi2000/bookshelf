import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as m,d as n,f as a,a as u,b as v,t as b,n as o,g as p,w as c,r as l,o as f,e as i}from"./app-BVguHYKu.js";const g={},h={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},y={class:"table-of-contents"},C={class:"hint-container info"};function S(r,s){const t=l("VPCard"),e=l("router-link"),k=l("SiteInfo");return f(),m("div",null,[n("h1",h,[n("a",w,[n("span",null,b(r.$frontmatter.title)+" 관련",1)])]),a(t,o(p({title:"Kotlin > Article(s)",desc:"Article(s)",link:"/programming/java/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),n("nav",y,[n("ul",null,[n("li",null,[a(e,{to:"#converting-a-suspending-function-to-a-callback"},{default:c(()=>s[0]||(s[0]=[i("Converting a suspending function to a callback")])),_:1,__:[0]})]),n("li",null,[a(e,{to:"#converting-a-flow-to-a-callback-function"},{default:c(()=>s[1]||(s[1]=[i("Converting a flow to a callback function")])),_:1,__:[1]})]),n("li",null,[a(e,{to:"#conclusion"},{default:c(()=>s[2]||(s[2]=[i("Conclusion")])),_:1,__:[2]})])])]),s[6]||(s[6]=n("hr",null,null,-1)),a(k,{name:"Suspending functions or flows into callbacks",desc:"A guide on how to correctly convert suspending functions or flows into callback-based functions in Kotlin Coroutines.",url:"https://kt.academy/interop-coroutines-to-callback",logo:"https://kt.academy/logo.png",preview:"https://marcinmoskala.com/kt-academy-articles/promotion/interop_coroutines_to_callback.png"}),s[7]||(s[7]=n("p",null,"Many legacy APIs use callbacks to report results of asynchronous operations. In Kotlin, we can use suspending functions or flows to achieve the same effect in a more readable way. However, sometimes we need to convert these suspending functions or flows into callback-based APIs, especially when integrating with existing libraries or frameworks that expect callbacks. In this article, we will explore how to do that.",-1)),s[8]||(s[8]=n("p",null,"This article is a part of a series about interoperability between Kotlin Coroutines and other libraries.",-1)),n("div",C,[s[3]||(s[3]=n("p",{class:"hint-container-title"},"This series includes:",-1)),a(t,o(p({title:"Calling blocking functions from suspending functions",desc:"A guide on how to correctly convert blocking functions into suspending functions in Kotlin Coroutines.",link:"/kt.academy/interop-blocking-to-coroutines.md",logo:"https://kt.academy/logo.png",background:"rgba(243,139,49,0.2)"})),null,16),a(t,o(p({title:"How to turn callback functions into suspend functions or Flow",desc:"A guide on how to correctly convert callback-based functions into suspending functions or Flows in Kotlin Coroutines.",link:"/kt.academy/interop-callbacks-to-coroutines.md",logo:"https://kt.academy/logo.png",background:"rgba(243,139,49,0.2)"})),null,16),s[4]||(s[4]=n("ul",null,[n("li",null,[n("a",{href:"https://kt.academy/article/interop-coroutines-to-blocking",target:"_blank",rel:"noopener noreferrer"},"Turning suspending functions into blocking functions or CompletableFuture")])],-1)),a(t,o(p({title:"Suspending functions or flows into callbacks",desc:"A guide on how to correctly convert suspending functions or flows into callback-based functions in Kotlin Coroutines.",link:"/kt.academy/interop-coroutines-to-callback.md",logo:"https://kt.academy/logo.png",background:"rgba(243,139,49,0.2)"})),null,16),s[5]||(s[5]=n("ul",null,[n("li",null,[n("a",{href:"https://kt.academy/article/interop-flows-to-streams",target:"_blank",rel:"noopener noreferrer"},"Kotlin Flow to RxJava or Reactor and vice versa")]),n("li",null,[n("a",{href:"https://kt.academy/article/interop-coroutines-to-streams",target:"_blank",rel:"noopener noreferrer"},"Using Kotlin Coroutines with Java Streams")]),n("li",null,[n("a",{href:"https://kt.academy/article/interop-suspending-functions-flow",target:"_blank",rel:"noopener noreferrer"},"Flow from suspending functions and vice versa")])],-1))]),u(" TODO: VPCard "),s[9]||(s[9]=v(`<hr><h2 id="converting-a-suspending-function-to-a-callback" tabindex="-1"><a class="header-anchor" href="#converting-a-suspending-function-to-a-callback"><span>Converting a suspending function to a callback</span></a></h2><p>Suspending functions must be started in a coroutine. The simplest way to start a coroutine is to use <code>launch</code> on a coroutine scope. Once this suspending function is completed with a result, we can call a callback with this result. If the suspending function throws an exception, we can call a callback with the exception instead. To allow the process started by the suspending function to be cancelled, we can return <code>Job</code> from the <code>launch</code> call, which can be used to cancel the coroutine. This is the most basic way to convert a suspending function to a callback-based API.</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">​</span>
<span class="line"><span class="token keyword">val</span> scope <span class="token operator">=</span> <span class="token function">CoroutineScope</span><span class="token punctuation">(</span><span class="token function">SupervisorJob</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">​</span>
<span class="line"><span class="token keyword">fun</span> <span class="token function">fetchData</span><span class="token punctuation">(</span></span>
<span class="line">    onSuccess<span class="token operator">:</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> Unit<span class="token punctuation">,</span></span>
<span class="line">    onError<span class="token operator">:</span> <span class="token punctuation">(</span>Throwable<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> Unit<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token operator">:</span> Job <span class="token operator">=</span> scope<span class="token punctuation">.</span><span class="token function">launch</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">val</span> result <span class="token operator">=</span> <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">onSuccess</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> Throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">onError</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In real-life applications scope is usually provided by a dependency injection framework. We also often wrap our <code>Job</code> with some interface that exposes cancellation method. We might also define some wrapper function to simply transform a suspending function into a callback-based API.</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">class</span> <span class="token function">AnkiConnectorCallback</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">val</span> connector<span class="token operator">:</span> AnkiConnector<span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">val</span> scope<span class="token operator">:</span> CoroutineScope<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">fun</span> <span class="token function">checkConnection</span><span class="token punctuation">(</span></span>
<span class="line">        onSuccess<span class="token operator">:</span> <span class="token punctuation">(</span>Boolean<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> Unit<span class="token punctuation">,</span></span>
<span class="line">        onError<span class="token operator">:</span> <span class="token punctuation">(</span>Throwable<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> Unit<span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token operator">:</span> Cancellable <span class="token operator">=</span> scope<span class="token punctuation">.</span><span class="token function">asyncWithCallback</span><span class="token punctuation">(</span>onSuccess<span class="token punctuation">,</span> onError<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        connector<span class="token punctuation">.</span><span class="token function">checkConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">​</span>
<span class="line">    <span class="token keyword">fun</span> <span class="token function">pushDeck</span><span class="token punctuation">(</span></span>
<span class="line">        deckName<span class="token operator">:</span> String<span class="token punctuation">,</span></span>
<span class="line">        markdown<span class="token operator">:</span> String<span class="token punctuation">,</span></span>
<span class="line">        onSuccess<span class="token operator">:</span> <span class="token punctuation">(</span>AnkiConnectorResult<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> Unit<span class="token punctuation">,</span></span>
<span class="line">        onError<span class="token operator">:</span> <span class="token punctuation">(</span>Throwable<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> Unit<span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token operator">:</span> Cancellable <span class="token operator">=</span> scope<span class="token punctuation">.</span><span class="token function">asyncWithCallback</span><span class="token punctuation">(</span>onSuccess<span class="token punctuation">,</span> onError<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        connector<span class="token punctuation">.</span><span class="token function">pushDeck</span><span class="token punctuation">(</span>deckName<span class="token punctuation">,</span> markdown<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">​</span>
<span class="line"><span class="token keyword">fun</span> <span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> CoroutineScope<span class="token punctuation">.</span><span class="token function">asyncWithCallback</span><span class="token punctuation">(</span></span>
<span class="line">    onSuccess<span class="token operator">:</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> Unit<span class="token punctuation">,</span></span>
<span class="line">    onError<span class="token operator">:</span> <span class="token punctuation">(</span>Throwable<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> Unit<span class="token punctuation">,</span></span>
<span class="line">    body<span class="token operator">:</span> <span class="token keyword">suspend</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> T</span>
<span class="line"><span class="token punctuation">)</span><span class="token operator">:</span> Cancellable <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">val</span> job <span class="token operator">=</span> launch <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">       <span class="token keyword">val</span> result <span class="token operator">=</span> <span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">           <span class="token function">onSuccess</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></span>
<span class="line">       <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>t<span class="token operator">:</span> Throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">           <span class="token function">onError</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span></span>
<span class="line">       <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">Cancellable</span><span class="token punctuation">(</span>job<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">​</span>
<span class="line"><span class="token keyword">class</span> <span class="token function">Cancellable</span><span class="token punctuation">(</span><span class="token keyword">private</span> <span class="token keyword">val</span> job<span class="token operator">:</span> Job<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">fun</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        job<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="converting-a-flow-to-a-callback-function" tabindex="-1"><a class="header-anchor" href="#converting-a-flow-to-a-callback-function"><span>Converting a flow to a callback function</span></a></h2><p>We observe a flow using <code>collect</code> method, which is a suspending function, so it cannot be used in non-suspending code. To convert a flow to a callback-based API, we can the following wrapper function:</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token comment">/*</span>
<span class="line"> * This function allows you to subscribe to a Flow with a CoroutineScope.</span>
<span class="line"> * </span>
<span class="line"> * Flow gets completed when the coroutine scope is cancelled or when the Flow completes. </span>
<span class="line"> * Flow completes when it has an exception.</span>
<span class="line"> *</span>
<span class="line"> * @param scope The CoroutineScope in which the Flow will be collected.</span>
<span class="line"> * @param onEach A lambda function that will be called for each emitted item from the Flow.</span>
<span class="line"> * @param onError A lambda function that will be called if an error occurs during the collection of the Flow.</span>
<span class="line"> * @param onStart A lambda function that will be called when the Flow starts collecting.</span>
<span class="line"> * @param onCompletion A lambda function that will be called when the Flow completes (either successfully or with an error).</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">fun</span> <span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> Flow<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span></span>
<span class="line">    scope<span class="token operator">:</span> CoroutineScope<span class="token punctuation">,</span></span>
<span class="line">    onEach<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> Unit<span class="token punctuation">)</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span></span>
<span class="line">    onError<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Throwable<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> Unit<span class="token punctuation">)</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span></span>
<span class="line">    onStart<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> Unit<span class="token punctuation">)</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span></span>
<span class="line">    onCompletion<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> Unit<span class="token punctuation">)</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token operator">:</span> Job <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">this</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span> flow <span class="token operator">-&gt;</span> onEach<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span> flow<span class="token punctuation">.</span><span class="token function">onEach</span> <span class="token punctuation">{</span> <span class="token function">onEach</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token operator">?:</span> flow <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span> flow <span class="token operator">-&gt;</span> onStart<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span> flow<span class="token punctuation">.</span><span class="token function">onStart</span> <span class="token punctuation">{</span> <span class="token function">onStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token operator">?:</span> flow <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span> flow <span class="token operator">-&gt;</span> onCompletion<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span> flow<span class="token punctuation">.</span><span class="token function">onCompletion</span> <span class="token punctuation">{</span> <span class="token function">onCompletion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token operator">?:</span> flow <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span> flow <span class="token operator">-&gt;</span> onError<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span> flow<span class="token punctuation">.</span><span class="token function">catch</span> <span class="token punctuation">{</span> <span class="token function">onError</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token operator">?:</span> flow <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">launchIn</span><span class="token punctuation">(</span>scope<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can also define a wrapper class for a flow, to simplify the usage of this function.</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">class</span> FlowCallback<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">val</span> flow<span class="token operator">:</span> Flow<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">val</span> scope<span class="token operator">:</span> CoroutineScope<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">fun</span> <span class="token function">subscribe</span><span class="token punctuation">(</span></span>
<span class="line">        scope<span class="token operator">:</span> CoroutineScope<span class="token punctuation">,</span></span>
<span class="line">        onEach<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> Unit<span class="token punctuation">)</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span></span>
<span class="line">        onError<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Throwable<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> Unit<span class="token punctuation">)</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span></span>
<span class="line">        onStart<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> Unit<span class="token punctuation">)</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span></span>
<span class="line">        onCompletion<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> Unit<span class="token punctuation">)</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token operator">:</span> Job <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> flow</span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span> flow <span class="token operator">-&gt;</span> onEach<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span> flow<span class="token punctuation">.</span><span class="token function">onEach</span> <span class="token punctuation">{</span> <span class="token function">onEach</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token operator">?:</span> flow <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span> flow <span class="token operator">-&gt;</span> onStart<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span> flow<span class="token punctuation">.</span><span class="token function">onStart</span> <span class="token punctuation">{</span> <span class="token function">onStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token operator">?:</span> flow <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span> flow <span class="token operator">-&gt;</span> onCompletion<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span> flow<span class="token punctuation">.</span><span class="token function">onCompletion</span> <span class="token punctuation">{</span> <span class="token function">onCompletion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token operator">?:</span> flow <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span> flow <span class="token operator">-&gt;</span> onError<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span> flow<span class="token punctuation">.</span><span class="token function">catch</span> <span class="token punctuation">{</span> <span class="token function">onError</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token operator">?:</span> flow <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">launchIn</span><span class="token punctuation">(</span>scope<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="#conclusion"><span>Conclusion</span></a></h2><p>In this article, we explored how to convert suspending functions and flows into callback-based APIs. This is useful when integrating with legacy code or libraries that expect callbacks. We also discussed how to handle errors and cancellation in these conversions. By using the provided examples, you can easily adapt your suspending functions and flows to work with callback-based APIs in Kotlin.</p>`,15)),u(" TODO: add ARTICLE CARD "),a(t,o(p({title:"Suspending functions or flows into callbacks",desc:"A guide on how to correctly convert suspending functions or flows into callback-based functions in Kotlin Coroutines.",link:"https://chanhi2000.github.io/bookshelf/kt.academy/interop-coroutines-to-callback.html",logo:"https://kt.academy/logo.png",background:"rgba(243,139,49,0.2)"})),null,16)])}const A=d(g,[["render",S]]),E=JSON.parse('{"path":"/kt.academy/interop-coroutines-to-callback.html","title":"Suspending functions or flows into callbacks","lang":"en-US","frontmatter":{"lang":"en-US","title":"Suspending functions or flows into callbacks","description":"Article(s) > Suspending functions or flows into callbacks","icon":"iconfont icon-kotlin","category":["Java","Kotlin","Article(s)"],"tag":["blog","kt.academy","java","kotlin"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Suspending functions or flows into callbacks\\",\\"image\\":[\\"https://marcinmoskala.com/kt-academy-articles/promotion/interop_coroutines_to_callback.png\\"],\\"datePublished\\":\\"2025-08-11T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Marcin Moskała\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/kt.academy/interop-coroutines-to-callback.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Suspending functions or flows into callbacks"}],["meta",{"property":"og:description","content":"Article(s) > Suspending functions or flows into callbacks"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://marcinmoskala.com/kt-academy-articles/promotion/interop_coroutines_to_callback.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://marcinmoskala.com/kt-academy-articles/promotion/interop_coroutines_to_callback.png"}],["meta",{"name":"twitter:image:alt","content":"Suspending functions or flows into callbacks"}],["meta",{"property":"article:author","content":"Marcin Moskała"}],["meta",{"property":"article:tag","content":"kotlin"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:tag","content":"kt.academy"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2025-08-11T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Suspending functions or flows into callbacks"},{"property":"og:description","content":"Suspending functions or flows into callbacks"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/kt.academy/interop-coroutines-to-callback.html"}]],"prev":"/programming/java/articles/README.md","date":"2025-08-11T00:00:00.000Z","isOriginal":false,"author":"Marcin Moskała","cover":"https://marcinmoskala.com/kt-academy-articles/promotion/interop_coroutines_to_callback.png"},"git":{},"readingTime":{"minutes":3.62,"words":1087},"filePathRelative":"kt.academy/interop-coroutines-to-callback.md","copyright":{"author":"Marcin Moskała"}}');export{A as comp,E as data};
