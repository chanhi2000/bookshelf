import{_ as k}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as g,d as s,f as a,b as u,a as h,t as b,n as l,g as o,w as t,e,r as c,o as y}from"./app-BVguHYKu.js";const f={},x={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},A={class:"table-of-contents"},P={href:"https://nginx.org/",target:"_blank",rel:"noopener noreferrer"};function _(d,n){const i=c("VPCard"),p=c("router-link"),m=c("SiteInfo"),r=c("RouteLink"),v=c("VPIcon");return y(),g("div",null,[s("h1",x,[s("a",w,[s("span",null,b(d.$frontmatter.title)+" 관련",1)])]),a(i,l(o({title:"C# > Article(s)",desc:"Article(s)",link:"/programming/cs/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),a(i,l(o({title:"Docker > Article(s)",desc:"Article(s)",link:"/devops/docker/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),a(i,l(o({title:"NGINX > Article(s)",desc:"Article(s)",link:"/devops/nginx/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),a(i,l(o({title:"Node.js > Article(s)",desc:"Article(s)",link:"/programming/js-node/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",A,[s("ul",null,[s("li",null,[a(p,{to:"#the-test-api"},{default:t(()=>n[0]||(n[0]=[e("The Test API")])),_:1,__:[0]})]),s("li",null,[a(p,{to:"#yarp-configuration"},{default:t(()=>n[1]||(n[1]=[e("YARP Configuration")])),_:1,__:[1]})]),s("li",null,[a(p,{to:"#nginx-setup"},{default:t(()=>n[2]||(n[2]=[e("Nginx Setup")])),_:1,__:[2]})]),s("li",null,[a(p,{to:"#full-docker-compose-setup"},{default:t(()=>n[3]||(n[3]=[e("Full Docker Compose Setup")])),_:1,__:[3]})]),s("li",null,[a(p,{to:"#load-testing-with-k6"},{default:t(()=>n[4]||(n[4]=[e("Load Testing with k6")])),_:1,__:[4]})]),s("li",null,[a(p,{to:"#performance-results"},{default:t(()=>n[5]||(n[5]=[e("Performance Results")])),_:1,__:[5]}),s("ul",null,[s("li",null,[a(p,{to:"#throughput-analysis"},{default:t(()=>n[6]||(n[6]=[e("Throughput Analysis")])),_:1,__:[6]})]),s("li",null,[a(p,{to:"#latency-comparison"},{default:t(()=>n[7]||(n[7]=[e("Latency Comparison")])),_:1,__:[7]})])])]),s("li",null,[a(p,{to:"#hold-up-that-s-not-fair"},{default:t(()=>n[8]||(n[8]=[e("Hold Up - That's Not Fair")])),_:1,__:[8]})]),s("li",null,[a(p,{to:"#performance-results-after-tuning"},{default:t(()=>n[9]||(n[9]=[e("Performance Results - After Tuning")])),_:1,__:[9]}),s("ul",null,[s("li",null,[a(p,{to:"#throughput-analysis-1"},{default:t(()=>n[10]||(n[10]=[e("Throughput Analysis")])),_:1,__:[10]})]),s("li",null,[a(p,{to:"#latency-comparison-1"},{default:t(()=>n[11]||(n[11]=[e("Latency Comparison")])),_:1,__:[11]})])])]),s("li",null,[a(p,{to:"#key-takeaways"},{default:t(()=>n[12]||(n[12]=[e("Key Takeaways")])),_:1,__:[12]})])])]),n[25]||(n[25]=s("hr",null,null,-1)),a(m,{name:"YARP vs Nginx - A Quick Performance Comparison",desc:"In this article, we will compare the performance of YARP and Nginx, two popular reverse proxy solutions.",url:"https://milanjovanovic.tech/blog/yarp-vs-nginx-a-quick-performance-comparison",logo:"https://milanjovanovic.tech/profile_favicon.png",preview:"https://milanjovanovic.tech/blog-covers/mnw_144.png"}),s("p",null,[n[15]||(n[15]=e("When you're building .NET applications, choosing the right ")),n[16]||(n[16]=s("strong",null,"reverse proxy",-1)),n[17]||(n[17]=e(" can make a huge difference. Two popular options keep coming up: Microsoft's ")),a(r,{to:"/milanjovanovic.tech/milanjovanovic.tech/implementing-an-api-gateway-for-microservices-with-yarp.html"},{default:t(()=>n[13]||(n[13]=[s("strong",null,"YARP",-1)])),_:1,__:[13]}),n[18]||(n[18]=e(" (Yet Another Reverse Proxy) and the tried-and-true ")),s("a",P,[a(v,{icon:"iconfont icon-nginx"}),n[14]||(n[14]=e("Nginx"))]),n[19]||(n[19]=e("."))]),n[26]||(n[26]=u(`<p>Here&#39;s the thing - everyone talks about which one is &quot;better,&quot; but rarely do you see actual numbers. So I decided to put both through the same tests and see what happens.</p><p>I&#39;ll test both proxies using the exact same API, same hardware, and same load testing approach. No bias, just data.</p><hr><h2 id="the-test-api" tabindex="-1"><a class="header-anchor" href="#the-test-api"><span>The Test API</span></a></h2><p>I kept the test API super simple on purpose. This way, we&#39;re measuring proxy performance, not how fast the backend can process complex requests:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token class-name"><span class="token keyword">var</span></span> builder <span class="token operator">=</span> WebApplication<span class="token punctuation">.</span><span class="token function">CreateBuilder</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> app <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">MapGet</span><span class="token punctuation">(</span><span class="token string">&quot;/hello&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> Results<span class="token punctuation">.</span><span class="token function">Ok</span><span class="token punctuation">(</span><span class="token string">&quot;Hello world!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This basic endpoint means we&#39;re testing the proxy itself, not waiting for complex business logic to run.</p><hr><h2 id="yarp-configuration" tabindex="-1"><a class="header-anchor" href="#yarp-configuration"><span>YARP Configuration</span></a></h2><p>YARP is pretty nice to work with if you&#39;re already in the .NET world. The setup is straightforward:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token class-name"><span class="token keyword">var</span></span> builder <span class="token operator">=</span> WebApplication<span class="token punctuation">.</span><span class="token function">CreateBuilder</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">builder<span class="token punctuation">.</span>Services</span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">AddReverseProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">LoadFromConfig</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span>Configuration<span class="token punctuation">.</span><span class="token function">GetSection</span><span class="token punctuation">(</span><span class="token string">&quot;ReverseProxy&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> app <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">MapReverseProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11)),s("p",null,[n[22]||(n[22]=e("It's equally simple to configure ")),a(r,{to:"/milanjovanovic.tech/horizontally-scaling-aspnetcore-apis-with-yarp-load-balancing.html"},{default:t(()=>n[20]||(n[20]=[s("strong",null,"load balancing",-1)])),_:1,__:[20]}),n[23]||(n[23]=e(" or ")),a(r,{to:"/milanjovanovic.tech/implementing-api-gateway-authentication-with-yarp.html"},{default:t(()=>n[21]||(n[21]=[s("strong",null,"authentication",-1)])),_:1,__:[21]}),n[24]||(n[24]=e("."))]),n[27]||(n[27]=u(`<p>The routing setup is clean and uses a <code>**catch-all</code> pattern to forward everything:</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json"><pre><code class="language-json"><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;ReverseProxy&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;Routes&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">&quot;default&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">&quot;ClusterId&quot;</span><span class="token operator">:</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token property">&quot;Match&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">&quot;Path&quot;</span><span class="token operator">:</span> <span class="token string">&quot;{**catch-all}&quot;</span> <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;Clusters&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">&quot;hello&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">&quot;Destinations&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token property">&quot;destination1&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token property">&quot;Address&quot;</span><span class="token operator">:</span> <span class="token string">&quot;http://hello.api:8080&quot;</span></span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="nginx-setup" tabindex="-1"><a class="header-anchor" href="#nginx-setup"><span>Nginx Setup</span></a></h2><p>For Nginx, I went with Docker to keep things simple. The configuration does the same job as YARP:</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml"><pre><code class="language-yaml"><span class="line"><span class="token key atrule">nginx.proxy</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx<span class="token punctuation">:</span>alpine</span>
<span class="line">  <span class="token key atrule">ports</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token punctuation">-</span> <span class="token string">&#39;3001:80&#39;</span></span>
<span class="line">  <span class="token key atrule">volumes</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token punctuation">-</span> ./nginx<span class="token punctuation">-</span>proxy.conf<span class="token punctuation">:</span>/etc/nginx/nginx.conf<span class="token punctuation">:</span>ro</span>
<span class="line">  <span class="token key atrule">depends_on</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token punctuation">-</span> hello.api</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The Nginx config does exactly what YARP does - just with different syntax:</p><div class="language-conf line-numbers-mode" data-highlighter="prismjs" data-ext="conf"><pre><code class="language-conf"><span class="line">events {}</span>
<span class="line"></span>
<span class="line">http {</span>
<span class="line">    upstream backend {</span>
<span class="line">        server hello.api:8080;</span>
<span class="line">    }</span>
<span class="line"></span>
<span class="line">    server {</span>
<span class="line">        listen 80;</span>
<span class="line">        location / {</span>
<span class="line">            proxy_pass http://backend;</span>
<span class="line">        }</span>
<span class="line">    }</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="full-docker-compose-setup" tabindex="-1"><a class="header-anchor" href="#full-docker-compose-setup"><span>Full Docker Compose Setup</span></a></h2><p>Here&#39;s the complete <code>docker-compose.yml</code> that ties everything together:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="docker-compose.yaml"><span>docker-compose.yaml</span></div><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml"><pre><code class="language-yaml"><span class="line"><span class="token key atrule">services</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">hello.api</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">image</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>DOCKER_REGISTRY<span class="token punctuation">-</span><span class="token punctuation">}</span>helloapi</span>
<span class="line">    <span class="token key atrule">build</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">context</span><span class="token punctuation">:</span> .</span>
<span class="line">      <span class="token key atrule">dockerfile</span><span class="token punctuation">:</span> Hello.Api/Dockerfile</span>
<span class="line"></span>
<span class="line">  <span class="token key atrule">yarp.proxy</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">image</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>DOCKER_REGISTRY<span class="token punctuation">-</span><span class="token punctuation">}</span>yarpproxy</span>
<span class="line">    <span class="token key atrule">build</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">context</span><span class="token punctuation">:</span> .</span>
<span class="line">      <span class="token key atrule">dockerfile</span><span class="token punctuation">:</span> Yarp.Proxy/Dockerfile</span>
<span class="line">    <span class="token key atrule">ports</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> 3000<span class="token punctuation">:</span><span class="token number">8080</span></span>
<span class="line">    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> hello.api</span>
<span class="line"></span>
<span class="line">  <span class="token key atrule">nginx.proxy</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx<span class="token punctuation">:</span>alpine</span>
<span class="line">    <span class="token key atrule">ports</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token string">&#39;3001:80&#39;</span></span>
<span class="line">    <span class="token key atrule">volumes</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> ./nginx<span class="token punctuation">-</span>proxy.conf<span class="token punctuation">:</span>/etc/nginx/nginx.conf<span class="token punctuation">:</span>ro</span>
<span class="line">    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> hello.api</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><hr><h2 id="load-testing-with-k6" tabindex="-1"><a class="header-anchor" href="#load-testing-with-k6"><span>Load Testing with k6</span></a></h2><p>I used k6 to hit both proxies with the same load patterns. I repeated the test with different numbers of virtual users (VUs) to see how each proxy handles increasing traffic. This keeps things fair - same test, same conditions:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="YARP Test Script"><span>YARP Test Script</span></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">import</span> http <span class="token keyword">from</span> <span class="token string">&#39;k6/http&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> check <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;k6&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">let</span> options <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">scenarios</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">yarp</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">executor</span><span class="token operator">:</span> <span class="token string">&#39;per-vu-iterations&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">vus</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token comment">// 10, 50, 100, 200</span></span>
<span class="line">      <span class="token literal-property property">iterations</span><span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">exec</span><span class="token operator">:</span> <span class="token string">&#39;testYarp&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">startTime</span><span class="token operator">:</span> <span class="token string">&#39;0s&#39;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">testYarp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> res <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;http://localhost:3000/hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">check</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token string-property property">&#39;YARP: status 200&#39;</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">r</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> r<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="code-block-with-title"><div class="code-block-title-bar" data-title="Nginx Test Script"><span>Nginx Test Script</span></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">import</span> http <span class="token keyword">from</span> <span class="token string">&#39;k6/http&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> check <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;k6&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">let</span> options <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">scenarios</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">nginx</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">executor</span><span class="token operator">:</span> <span class="token string">&#39;per-vu-iterations&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">vus</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token comment">// 10, 50, 100, 200</span></span>
<span class="line">      <span class="token literal-property property">iterations</span><span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">exec</span><span class="token operator">:</span> <span class="token string">&#39;testNginx&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">startTime</span><span class="token operator">:</span> <span class="token string">&#39;0s&#39;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">testNginx</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> res <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;http://localhost:3001/hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">check</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token string-property property">&#39;NGINX: status 200&#39;</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">r</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> r<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><hr><h2 id="performance-results" tabindex="-1"><a class="header-anchor" href="#performance-results"><span>Performance Results</span></a></h2><p>Here&#39;s where things get interesting. The numbers show a clear pattern:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="output"><span>output</span></div><div class="language-plaintext line-numbers-mode" data-highlighter="prismjs" data-ext="plaintext"><pre><code class="language-plaintext"><span class="line">| VUs  | YARP RPS | NGINX RPS | YARP p90 Latency (ms) | NGINX p90 Latency (ms) | YARP p95 Latency (ms) | NGINX p95 Latency (ms) |</span>
<span class="line">|------|----------|-----------|-----------------------|------------------------|-----------------------|------------------------|</span>
<span class="line">| 10   | 12692    | 9756      | 1.04                  | 1.10                   | 1.06                  | 1.52                   |</span>
<span class="line">| 50   | 27080    | 10614     | 2.70                  | 5.23                   | 3.18                  | 5.68                   |</span>
<span class="line">| 100  | 32432    | 10324     | 4.66                  | 10.61                  | 5.43                  | 10.96                  |</span>
<span class="line">| 200  | 36662    | 10169     | 7.77                  | 21.23                  | 8.81                  | 21.92                  |</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p><strong>Request per second (RPS)</strong> is how many requests each proxy handled per second.</p><figure><img src="https://milanjovanovic.tech/blogs/mnw_144/rps_comparison.png?imwidth=3840" alt="YARP vs Nginx RPS comparison" tabindex="0" loading="lazy"><figcaption>YARP vs Nginx RPS comparison</figcaption></figure><p><strong>p90 latency</strong> is the time it took for 90% of requests to complete.</p><figure><img src="https://milanjovanovic.tech/blogs/mnw_144/p90_comparison.png?imwidth=3840" alt="YARP vs Nginx p90 latency comparison" tabindex="0" loading="lazy"><figcaption>YARP vs Nginx p90 latency comparison</figcaption></figure><p><strong>p95 latency</strong> is the time it took for 95% of requests to complete.</p><figure><img src="https://milanjovanovic.tech/blogs/mnw_144/p95_comparison.png?imwidth=3840" alt="YARP vs Nginx p95 latency comparison" tabindex="0" loading="lazy"><figcaption>YARP vs Nginx p95 latency comparison</figcaption></figure><h3 id="throughput-analysis" tabindex="-1"><a class="header-anchor" href="#throughput-analysis"><span>Throughput Analysis</span></a></h3><p>YARP really shines here. It handles way more requests - almost 3.6x more at 200 users. What&#39;s cool is how it scales up as you add more load. Nginx stays pretty much flat around 10k requests per second, but YARP keeps climbing from 12k all the way to 36k.</p><h3 id="latency-comparison" tabindex="-1"><a class="header-anchor" href="#latency-comparison"><span>Latency Comparison</span></a></h3><p>The latency story is even more impressive for YARP. At 200 users, YARP keeps response times under 8ms while Nginx hits 21ms. That&#39;s a big difference when you&#39;re trying to keep your app fast.</p><hr><h2 id="hold-up-that-s-not-fair" tabindex="-1"><a class="header-anchor" href="#hold-up-that-s-not-fair"><span>Hold Up - That&#39;s Not Fair</span></a></h2><p>Looking at these results, we&#39;re missing something important: <strong>this comparison isn&#39;t fair to Nginx</strong>.</p><p>The default Nginx configuration I used is fine for basic setups, but it&#39;s not optimized for high-throughput scenarios. Nginx uses conservative defaults that work everywhere but don&#39;t push performance limits.</p><p>So let me fix the Nginx configuration and re-run the tests.</p><p>Here&#39;s the updated Nginx config with some tweaks to improve performance:</p><div class="language-conf line-numbers-mode" data-highlighter="prismjs" data-ext="conf"><pre><code class="language-conf"><span class="line">worker_processes auto;</span>
<span class="line"></span>
<span class="line">events {</span>
<span class="line">    worker_connections 65536;</span>
<span class="line">    multi_accept on;</span>
<span class="line">    use epoll;</span>
<span class="line">}</span>
<span class="line"></span>
<span class="line">http {</span>
<span class="line">    sendfile on;</span>
<span class="line">    tcp_nopush on;</span>
<span class="line">    tcp_nodelay on;</span>
<span class="line">    keepalive_timeout 30;</span>
<span class="line">    keepalive_requests 1000;</span>
<span class="line">    types_hash_max_size 4096;</span>
<span class="line"></span>
<span class="line">    upstream backend {</span>
<span class="line">        server hello.api:8080;</span>
<span class="line">        keepalive 512;</span>
<span class="line">    }</span>
<span class="line"></span>
<span class="line">    server {</span>
<span class="line">        listen 80;</span>
<span class="line"></span>
<span class="line">        location / {</span>
<span class="line">            proxy_pass http://backend;</span>
<span class="line">            proxy_http_version 1.1;</span>
<span class="line">            proxy_set_header Connection &quot;&quot;;</span>
<span class="line">            proxy_set_header Host $host;</span>
<span class="line">            proxy_set_header X-Real-IP $remote_addr;</span>
<span class="line">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span>
<span class="line">            proxy_set_header X-Forwarded-Proto $scheme;</span>
<span class="line">        }</span>
<span class="line">    }</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="performance-results-after-tuning" tabindex="-1"><a class="header-anchor" href="#performance-results-after-tuning"><span>Performance Results - After Tuning</span></a></h2><p>Here are the results after re-running the tests:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="output"><span>output</span></div><div class="language-plaintext line-numbers-mode" data-highlighter="prismjs" data-ext="plaintext"><pre><code class="language-plaintext"><span class="line">| VUs  | YARP RPS | NGINX RPS | YARP p90 Latency (ms) | NGINX p90 Latency (ms) | YARP p95 Latency (ms) | NGINX p95 Latency (ms) |</span>
<span class="line">|------|----------|-----------|-----------------------|------------------------|-----------------------|------------------------|</span>
<span class="line">| 10   | 12692    | 17572     | 1.04                  | 0.58                   | 1.06                  | 0.74                   |</span>
<span class="line">| 50   | 27080    | 36687     | 2.70                  | 1.81                   | 3.18                  | 2.09                   |</span>
<span class="line">| 100  | 32432    | 43289     | 4.66                  | 3.18                   | 5.43                  | 3.88                   |</span>
<span class="line">| 200  | 36662    | 46850     | 7.77                  | 6.34                   | 8.81                  | 7.72                   |</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><figure><img src="https://milanjovanovic.tech/blogs/mnw_144/rps_comparison_tuned.png?imwidth=3840" alt="YARP vs Nginx RPS comparison" tabindex="0" loading="lazy"><figcaption>YARP vs Nginx RPS comparison</figcaption></figure><figure><img src="https://milanjovanovic.tech/blogs/mnw_144/p90_comparison_tuned.png?imwidth=3840" alt="YARP vs Nginx p90 latency comparison" tabindex="0" loading="lazy"><figcaption>YARP vs Nginx p90 latency comparison</figcaption></figure><figure><img src="https://milanjovanovic.tech/blogs/mnw_144/p95_comparison_tuned.png?imwidth=3840" alt="YARP vs Nginx p95 latency comparison" tabindex="0" loading="lazy"><figcaption>YARP vs Nginx p95 latency comparison</figcaption></figure><h3 id="throughput-analysis-1" tabindex="-1"><a class="header-anchor" href="#throughput-analysis-1"><span>Throughput Analysis</span></a></h3><p>Now this is more interesting. Nginx actually edges out YARP in raw throughput - hitting 46k requests per second vs YARP&#39;s 36k at 200 users. Both proxies scale well as load increases, but Nginx shows why it&#39;s been the go-to choice for high-traffic sites.</p><h3 id="latency-comparison-1" tabindex="-1"><a class="header-anchor" href="#latency-comparison-1"><span>Latency Comparison</span></a></h3><p>The latency story is pretty close. At lower loads, Nginx actually has better response times. At 200 users, both proxies keep response times reasonable - YARP at 7.77ms and Nginx at 6.34ms for p90 latency. The difference isn&#39;t huge either way.</p><hr><h2 id="key-takeaways" tabindex="-1"><a class="header-anchor" href="#key-takeaways"><span>Key Takeaways</span></a></h2><p><strong>Configuration matters more than you think</strong>. The initial results showed YARP crushing Nginx, but that was with Nginx&#39;s conservative defaults. Once properly tuned, Nginx shows why it&#39;s been powering the internet for years.</p><p><strong>Nginx wins on raw performance</strong>. With proper configuration, Nginx handles more requests and keeps latency slightly lower. That extra throughput matters when you&#39;re dealing with serious traffic.</p><p><strong>YARP offers better integration</strong>. Even though Nginx edges out performance, YARP feels natural in .NET projects. Same configuration style, same patterns, same tooling. Sometimes that developer experience is worth more than a few extra requests per second.</p><p><strong>Always tune your tools</strong>. This whole exercise shows why benchmarks with default configs can be misleading. If you&#39;re choosing between these two, make sure you&#39;re comparing optimized configurations, not defaults.</p><p>The choice isn&#39;t as clear-cut as I initially thought. Nginx wins on pure performance, but YARP wins on .NET integration. Pick based on what matters more for your specific situation.</p><hr>`,57)),h(" TODO: add ARTICLE CARD "),a(i,l(o({title:"YARP vs Nginx - A Quick Performance Comparison",desc:"In this article, we will compare the performance of YARP and Nginx, two popular reverse proxy solutions.",link:"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/yarp-vs-nginx-a-quick-performance-comparison.html",logo:"https://milanjovanovic.tech/profile_favicon.png",background:"rgba(79,70,229,0.2)"})),null,16)])}const j=k(f,[["render",_]]),Y=JSON.parse('{"path":"/milanjovanovic.tech/yarp-vs-nginx-a-quick-performance-comparison.html","title":"YARP vs Nginx - A Quick Performance Comparison","lang":"en-US","frontmatter":{"lang":"en-US","title":"YARP vs Nginx - A Quick Performance Comparison","description":"Article(s) > YARP vs Nginx - A Quick Performance Comparison","icon":"iconfont icon-csharp","category":["C#","DotNet","DevOps","Docker","NGINX","Node.js","Article(s)"],"tag":["blog","milanjovanovic.tech","cs","c#","csharp","dotnet","devops","docker","nginx","webserver","web-server","reverse-proxy","node","nodejs","node-js"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"YARP vs Nginx - A Quick Performance Comparison\\",\\"image\\":[\\"https://milanjovanovic.tech/blogs/mnw_144/rps_comparison.png?imwidth=3840\\",\\"https://milanjovanovic.tech/blogs/mnw_144/p90_comparison.png?imwidth=3840\\",\\"https://milanjovanovic.tech/blogs/mnw_144/p95_comparison.png?imwidth=3840\\",\\"https://milanjovanovic.tech/blogs/mnw_144/rps_comparison_tuned.png?imwidth=3840\\",\\"https://milanjovanovic.tech/blogs/mnw_144/p90_comparison_tuned.png?imwidth=3840\\",\\"https://milanjovanovic.tech/blogs/mnw_144/p95_comparison_tuned.png?imwidth=3840\\"],\\"datePublished\\":\\"2025-05-31T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Milan Jovanović\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/yarp-vs-nginx-a-quick-performance-comparison.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"YARP vs Nginx - A Quick Performance Comparison"}],["meta",{"property":"og:description","content":"Article(s) > YARP vs Nginx - A Quick Performance Comparison"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://milanjovanovic.tech/blog-covers/mnw_144.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://milanjovanovic.tech/blog-covers/mnw_144.png"}],["meta",{"name":"twitter:image:alt","content":"YARP vs Nginx - A Quick Performance Comparison"}],["meta",{"property":"article:author","content":"Milan Jovanović"}],["meta",{"property":"article:tag","content":"node-js"}],["meta",{"property":"article:tag","content":"nodejs"}],["meta",{"property":"article:tag","content":"node"}],["meta",{"property":"article:tag","content":"reverse-proxy"}],["meta",{"property":"article:tag","content":"web-server"}],["meta",{"property":"article:tag","content":"webserver"}],["meta",{"property":"article:tag","content":"nginx"}],["meta",{"property":"article:tag","content":"docker"}],["meta",{"property":"article:tag","content":"devops"}],["meta",{"property":"article:tag","content":"dotnet"}],["meta",{"property":"article:tag","content":"csharp"}],["meta",{"property":"article:tag","content":"c#"}],["meta",{"property":"article:tag","content":"cs"}],["meta",{"property":"article:tag","content":"milanjovanovic.tech"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2025-05-31T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > YARP vs Nginx - A Quick Performance Comparison"},{"property":"og:description","content":"YARP vs Nginx - A Quick Performance Comparison"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/yarp-vs-nginx-a-quick-performance-comparison.html"}]],"prev":"/programming/cs/articles/README.md","date":"2025-05-31T00:00:00.000Z","isOriginal":false,"author":"Milan Jovanović","cover":"https://milanjovanovic.tech/blog-covers/mnw_144.png"},"git":{},"readingTime":{"minutes":5.1,"words":1529},"filePathRelative":"milanjovanovic.tech/yarp-vs-nginx-a-quick-performance-comparison.md","copyright":{"author":"Milan Jovanović"}}');export{j as comp,Y as data};
