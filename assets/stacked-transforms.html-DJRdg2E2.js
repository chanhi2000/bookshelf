import{_ as k}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as g,d as s,f as t,b as i,a as f,t as v,n as r,g as c,e as a,w as b,r as o,o as h}from"./app-BVguHYKu.js";const y={},w={id:"frontmatter-title-관련",tabindex:"-1"},S={class:"header-anchor",href:"#frontmatter-title-관련"},x={href:"https://cssday.nl/",target:"_blank",rel:"noopener noreferrer"},I={href:"https://css.cafe/",target:"_blank",rel:"noopener noreferrer"},C={href:"https://nrk.no/",target:"_blank",rel:"noopener noreferrer"},T={href:"https://joshwcomeau.com/animation/partial-keyframes/",target:"_blank",rel:"noopener noreferrer"},A={href:"https://twitch.tv/chriscoyier",target:"_blank",rel:"noopener noreferrer"},X={href:"https://youtu.be/hL2FnCnVcb4",target:"_blank",rel:"noopener noreferrer"},j={href:"https://developer.mozilla.org/en-US/docs/Web/CSS/animation-composition",target:"_blank",rel:"noopener noreferrer"},P={href:"https://youtu.be/5HCMskfZf4U",target:"_blank",rel:"noopener noreferrer"},M={href:"https://en.wikipedia.org/wiki/Logo_(programming_language)",target:"_blank",rel:"noopener noreferrer"},R={href:"https://en.wikipedia.org/wiki/Logo_(programming_language)",target:"_blank",rel:"noopener noreferrer"},z={href:"https://frontendmasters.com/blog/wp-content/uploads/2025/07/lego-tc-logo-teaching-the-turtle_text.pdf",target:"_blank",rel:"noopener noreferrer"};function E(p,n){const l=o("VPCard"),u=o("SiteInfo"),e=o("VPIcon"),d=o("CodePen"),m=o("RouteLink");return h(),g("div",null,[s("h1",w,[s("a",S,[s("span",null,v(p.$frontmatter.title)+" 관련",1)])]),t(l,r(c({title:"CSS > Article(s)",desc:"Article(s)",link:"/programming/css/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),n[51]||(n[51]=s("nav",{class:"table-of-contents"},[s("ul")],-1)),n[52]||(n[52]=s("hr",null,null,-1)),t(u,{name:"Stacked Transforms",desc:"A look at what happens when you add a whole list of transforms to an element, and how that interacts with `animation-composition`. ",url:"https://frontendmasters.com/blog/stacked-transforms/",logo:"https://frontendmasters.com/favicon.ico",preview:"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/6457"}),n[53]||(n[53]=s("p",null,"I think the best way for me to show you what I want to show you is to make this blog post a bit like a story. So I’m gonna do that.",-1)),s("p",null,[n[3]||(n[3]=a("So I’m at ")),s("a",x,[t(e,{icon:"fas fa-globe"}),n[0]||(n[0]=a("CSS Day"))]),n[4]||(n[4]=a(" in Amsterdam this past month, and there was a lovely side event called ")),s("a",I,[t(e,{icon:"fas fa-globe"}),n[1]||(n[1]=a("CSS Café"))]),n[5]||(n[5]=a(". I’m 90% sure it was during a talk by Johannes Odland and a coworker of his at")),s("a",C,[t(e,{icon:"fas fa-globe"}),n[2]||(n[2]=a("NRK"))]),n[6]||(n[6]=a("(whose name I embarrassingly cannot remember) where they showed off something like an illustration of a buoy floating in the water with waves in front of it. Somehow, someway, the CSS property animation-composition was involved, and I was like ")),n[7]||(n[7]=s("em",null,"what the heck is that?",-1)),n[8]||(n[8]=a(" I took notes during the presentation, and my notes simply said “animation-composition”, which wasn’t exactly helpful."))]),s("p",null,[n[10]||(n[10]=a("I nearly forgot about it when I read Josh Comeau’s blog post ")),s("a",T,[t(e,{icon:"fas fa-globe"}),n[9]||(n[9]=a("Partial Keyframes"))]),n[11]||(n[11]=a(", where he talks about “dynamic, composable CSS keyframes”, which, as I recall was similar to what Johannes was talking about. There is some interesting stuff in Josh’s post — I liked the stuff about comma-separating multiple animations — but alas, nothing about ")),n[12]||(n[12]=s("code",null,"animation-composition",-1)),n[13]||(n[13]=a("."))]),s("p",null,[n[18]||(n[18]=a("So I figured I’d ")),s("a",A,[t(e,{icon:"fa-brands fa-twitch"}),n[14]||(n[14]=a("stream"))]),n[19]||(n[19]=a(" about it, and so ")),s("a",X,[t(e,{icon:"fa-brands fa-youtube"}),n[15]||(n[15]=a("I did that"))]),n[20]||(n[20]=a(", where I literally read the ")),s("a",j,[t(e,{icon:"fa-brands fa-firefox"}),n[16]||(n[16]=s("code",null,"animation-composition",-1)),n[17]||(n[17]=a(" docs on MDN"))]),n[21]||(n[21]=a(" and played with things. I found their basic/weird demo intriguing and learned from that. Say you’ve got a ")),n[22]||(n[22]=s("em",null,"thing",-1)),n[23]||(n[23]=a(" and it’s got some transfoms already on it:"))]),n[54]||(n[54]=i(`<div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.thing</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>50px<span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span>20deg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then you put a <code>@keyframes</code> animation on it also:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.thing</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>50px<span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span>20deg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">animation</span><span class="token punctuation">:</span> doAnimation 5s infinite alternate<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token atrule"><span class="token rule">@keyframes</span> doAnimation</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token selector">from</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>0<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token selector">to</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>100px<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container note"><p class="hint-container-title">Pop quiz</p><p>what is the <code>translateX()</code> value going to be at the beginning of that animation?</p></div><p>It’s not a trick question. If you intuition tells you that it’s going to be <code>translateX(0)</code>, you’re right. The “new” <code>transform</code> in the <code>@keyframes</code> is going to “wipe out” any existing <code>transform</code> on that element and replace it with what is described in the <code>@keyframes</code> animation.</p><p>That’s because the default behavior is <code>animation-composition: replace;</code>. It’s a perfectly fine default and likely what you’re used to doing.</p><p>But there are other possible values for <code>animation-composition</code> that behave differently, and we’ll look at those in a second. But first, the fact that <code>transform</code> can take a “space-separated” list of values is already kind of interesting. When you do <code>transform: translateX(50px) rotate(20deg);</code>, <em>both</em> of those values are going to apply. That’s also relatively intuitive once you know it’s possible.</p><p>What is less intuitive but very interesting is that you can keep going with more space-separated values, even <em>repeating</em> ones that are already there. And there I definitely learned something! Say we tack on another <code>translateX()</code> value onto it:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.thing</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>50px<span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span>20deg<span class="token punctuation">)</span> <span class="token function">translateX</span><span class="token punctuation">(</span>50px<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>My brain goes: <em>oh, it’s probably basically the same as</em> <code>translateX(100px) rotate(20deg);</code>. But that’s not true. The transforms apply <em>one at a time, and in order.</em> So what actually happens is:</p><figure><img src="https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/07/Screenshot-2025-07-15-at-10.54.15 AM.png?resize=1024%2C900&amp;ssl=1" alt="Illustration depicting three rectangles with arrows indicating movement and rotation, labeled with numbers 1, 2, and 3, on a dotted background." tabindex="0" loading="lazy"><figcaption>Illustration depicting three rectangles with arrows indicating movement and rotation, labeled with numbers 1, 2, and 3, on a dotted background.</figcaption></figure>`,11)),s("p",null,[n[25]||(n[25]=a("I’m starting to get this in my head, so I streamed ")),s("a",P,[t(e,{icon:"fa-brands fa-youtube"}),n[24]||(n[24]=a("again the next day"))]),n[26]||(n[26]=a(" and put it to work."))]),s("p",null,[n[30]||(n[30]=a("What popped into my head was a computer language called ")),s("a",M,[t(e,{icon:"fa-brands fa-wikipedia-w"}),n[27]||(n[27]=a("Logo"))]),n[31]||(n[31]=a(" that I played with as a kid in elementary school. Just look at the main image from ")),s("a",R,[t(e,{icon:"fa-brands fa-wikipedia-w"}),n[28]||(n[28]=a("the Wikipedia page"))]),n[32]||(n[32]=a(". And the homepage of ")),s("a",z,[t(e,{icon:"fas fa-file-pdf"}),n[29]||(n[29]=a("the manual"))]),n[33]||(n[33]=a(" is very nostoligic for me."))]),n[55]||(n[55]=s("figure",null,[s("img",{src:"https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/07/KochTurtleAnim.gif?resize=400%2C300&ssl=1",alt:"",tabindex:"0",loading:"lazy"}),s("figcaption")],-1)),n[56]||(n[56]=s("figure",null,[s("img",{src:"https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/07/Screenshot-2025-07-15-at-12.44.50 PM.png?resize=727%2C1024&ssl=1",alt:"Cover of the LEGO TC logo book titled 'Teaching the Turtle,' featuring a blue and red LEGO robotic structure on a baseplate with a computer in the background.",tabindex:"0",loading:"lazy"}),s("figcaption",null,"Cover of the LEGO TC logo book titled 'Teaching the Turtle,' featuring a blue and red LEGO robotic structure on a baseplate with a computer in the background.")],-1)),n[57]||(n[57]=s("p",null,"We can totally make a “turtle” move like that.",-1)),n[58]||(n[58]=s("p",null,[a("All I did here is put a couple of buttons on the page that append more "),s("code",null,"transform"),a(" values to this turtle element. And sure enough, it moves around just like the turtle of my childhood.")],-1)),t(d,{user:"chriscoyier","slug-hash":"RNPmRWP",title:"Mr. Turtle the Multi-Transform Hero","default-tab":["css","result"],theme:p.$isDarkmode?"dark":"light"},null,8,["theme"]),n[59]||(n[59]=i(`<p>But Mr. Turtle there doesn’t really have anything to do with <code>animation-composition</code>, which was the origin of this whole story. But it’s sets up understanding what <em>happens</em> with <code>animation-composition</code>. Remember this setup?</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.thing</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>50px<span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span>20deg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">animation</span><span class="token punctuation">:</span> doAnimation 5s infinite alternate<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token atrule"><span class="token rule">@keyframes</span> doAnimation</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token selector">from</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>0<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token selector">to</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>100px<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The big question is: <strong>what happens to the <code>transform</code> that is already on the element when the <code>@keyframes</code> run?</strong></p><p>If we add <code>animation-composition: add;</code> it adds what is going on in the <code>@keyframes</code> to what is already there, by appending to the end of the list, as it were.</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.thing</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>50px<span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span>20deg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">animation</span><span class="token punctuation">:</span> doAnimation 5s infinite alternate<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">animation-composition</span><span class="token punctuation">:</span> add<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token atrule"><span class="token rule">@keyframes</span> doAnimation</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token selector">from</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">/* starts as if: </span>
<span class="line">       transform: translateX(50px) rotate(20deg) translateX(0); */</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token selector">to</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>100px<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">/* ends as if:</span>
<span class="line">      transform: translateX(50px) rotate(20deg) translateX(100px); */</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If we did <code>animation-composition: accumulate;</code> it’s slightly different behavior. Rather than appending to the list of space-separated values, it increments the values if it finds a match.</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.thing</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>50px<span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span>20deg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">animation</span><span class="token punctuation">:</span> doAnimation 5s infinite alternate<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">animation-composition</span><span class="token punctuation">:</span> accumulate<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token atrule"><span class="token rule">@keyframes</span> doAnimation</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token selector">from</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">/* starts as if: </span>
<span class="line">       transform: translateX(50px) rotate(20deg); */</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token selector">to</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>100px<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">/* ends as if:</span>
<span class="line">      transform: translateX(150px) rotate(20deg) */</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7)),s("p",null,[n[35]||(n[35]=a("It’s not ")),n[36]||(n[36]=s("em",null,"just",-1)),n[37]||(n[37]=a()),n[38]||(n[38]=s("code",null,"transform",-1)),n[39]||(n[39]=a(" that behave this way, I just found it a useful way to grok it. (Which is also why I had space-separated ")),n[40]||(n[40]=s("code",null,"filter",-1)),n[41]||(n[41]=a()),t(m,{to:"/frontendmasters.com/blur1px-blur1px.html"},{default:b(()=>n[34]||(n[34]=[s("strong",null,"on the mind",-1)])),_:1,__:[34]}),n[42]||(n[42]=a(".) For instance, if a ")),n[43]||(n[43]=s("code",null,"@keyframes",-1)),n[44]||(n[44]=a(" was adjusting opacity and we used ")),n[45]||(n[45]=s("code",null,"add",-1)),n[46]||(n[46]=a(" or ")),n[47]||(n[47]=s("code",null,"accumulate",-1)),n[48]||(n[48]=a(", it would only ever ")),n[49]||(n[49]=s("em",null,"increase",-1)),n[50]||(n[50]=a(" an opacity value."))]),n[60]||(n[60]=i(`<div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.thing</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">opacity</span><span class="token punctuation">:</span> .5<span class="token punctuation">;</span></span>
<span class="line">  </span>
<span class="line">  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>50px<span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span>20deg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">animation</span><span class="token punctuation">:</span> doAnimation 2s infinite alternate<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">animation-composition</span><span class="token punctuation">:</span> add<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token atrule"><span class="token rule">@keyframes</span> doAnimation</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token selector">from</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">/* thing would never actually be 0 opacity, it would start at 0.5 and go up */</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token selector">to</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">opacity</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>So that’s that! Understanding how “stacked” transforms works is very interesting to me and I have a feeling will come in useful someday. And I feel the same way about <code>animation-composition</code>. You won’t need it until you need it.</p>`,2)),f(" TODO: add ARTICLE CARD "),t(l,r(c({title:"Stacked Transforms",desc:"A look at what happens when you add a whole list of transforms to an element, and how that interacts with `animation-composition`. ",link:"https://chanhi2000.github.io/bookshelf/frontendmasters.com/stacked-transforms.html",logo:"https://frontendmasters.com/favicon.ico",background:"rgba(188,75,52,0.2)"})),null,16)])}const B=k(y,[["render",E]]),N=JSON.parse('{"path":"/frontendmasters.com/stacked-transforms.html","title":"Stacked Transforms","lang":"en-US","frontmatter":{"lang":"en-US","title":"Stacked Transforms","description":"Article(s) > Stacked Transforms","icon":"fa-brands fa-css3-alt","category":["CSS","Article(s)"],"tag":["blog","frontendmasters.com","css"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Stacked Transforms\\",\\"image\\":[\\"https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/07/Screenshot-2025-07-15-at-10.54.15%E2%80%AFAM.png?resize=1024%2C900&ssl=1\\",\\"https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/07/KochTurtleAnim.gif?resize=400%2C300&ssl=1\\",\\"https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/07/Screenshot-2025-07-15-at-12.44.50%E2%80%AFPM.png?resize=727%2C1024&ssl=1\\"],\\"datePublished\\":\\"2025-07-15T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Chris Coyier\\",\\"url\\":\\"https://frontendmasters.com/blog/author/chriscoyier/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/frontendmasters.com/stacked-transforms.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Stacked Transforms"}],["meta",{"property":"og:description","content":"Article(s) > Stacked Transforms"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/6457"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/6457"}],["meta",{"name":"twitter:image:alt","content":"Stacked Transforms"}],["meta",{"property":"article:author","content":"Chris Coyier"}],["meta",{"property":"article:tag","content":"css"}],["meta",{"property":"article:tag","content":"frontendmasters.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2025-07-15T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Stacked Transforms"},{"property":"og:description","content":"Stacked Transforms"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/frontendmasters.com/stacked-transforms.html"}]],"prev":"/programming/css/articles/README.md","date":"2025-07-15T00:00:00.000Z","isOriginal":false,"author":[{"name":"Chris Coyier","url":"https://frontendmasters.com/blog/author/chriscoyier/"}],"cover":"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/6457"},"git":{},"readingTime":{"minutes":4.72,"words":1416},"filePathRelative":"frontendmasters.com/stacked-transforms.md","copyright":{"author":"Chris Coyier"}}');export{B as comp,N as data};
