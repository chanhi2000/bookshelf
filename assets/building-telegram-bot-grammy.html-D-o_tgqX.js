import{_ as k}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as b,d as s,f as t,b as p,a as v,t as f,n as u,g as d,w as o,e as a,r as i,o as h}from"./app-BVguHYKu.js";const y="/bookshelf/assets/image/blog.logrocket.com/building-telegram-bot-grammy/banner.png",w={},T={id:"frontmatter-title-관련",tabindex:"-1"},x={class:"header-anchor",href:"#frontmatter-title-관련"},A={class:"table-of-contents"},j={href:"https://telegram.org/",target:"_blank",rel:"noopener noreferrer"},I={href:"https://core.telegram.org/bots",target:"_blank",rel:"noopener noreferrer"},B={href:"https://telegram.org/tour/groups",target:"_blank",rel:"noopener noreferrer"},E={href:"https://telegram.org/tour/channels",target:"_blank",rel:"noopener noreferrer"},G={href:"https://t.me/MissRose_bot",target:"_blank",rel:"noopener noreferrer"},P={href:"https://t.me/vote",target:"_blank",rel:"noopener noreferrer"},Y={href:"https://t.me/TgTranslatorBot",target:"_blank",rel:"noopener noreferrer"},R={href:"https://t.me/GmailBot",target:"_blank",rel:"noopener noreferrer"},N={href:"https://t.me/GitHubbot",target:"_blank",rel:"noopener noreferrer"},M={href:"https://core.telegram.org/bots/payments#payments-for-physical-products",target:"_blank",rel:"noopener noreferrer"},S={href:"https://core.telegram.org/bots/webapps",target:"_blank",rel:"noopener noreferrer"},q={href:"https://core.telegram.org/bots/games",target:"_blank",rel:"noopener noreferrer"},F={href:"https://grammy.dev/",target:"_blank",rel:"noopener noreferrer"},O={href:"https://core.telegram.org/bots/api",target:"_blank",rel:"noopener noreferrer"},U={href:"https://ai.google.dev/gemini-api/docs",target:"_blank",rel:"noopener noreferrer"},H={href:"https://ai.google.dev/gemini-api/docs/models/gemini#gemini-1.5-flash",target:"_blank",rel:"noopener noreferrer"},C={class:"hint-container info"},L={href:"https://github.com/enyichiaagu/telegram-bot",target:"_blank",rel:"noopener noreferrer"},D={href:"https://t.me/BotFather",target:"_blank",rel:"noopener noreferrer"},V={href:"https://frontegg.com/blog/token-based-authentication",target:"_blank",rel:"noopener noreferrer"},z={href:"https://npmjs.com/package/@types/node",target:"_blank",rel:"noopener noreferrer"},K={href:"https://aistudio.google.com/app/apikey",target:"_blank",rel:"noopener noreferrer"},W={href:"https://npmjs.com/package/@google/generative-ai",target:"_blank",rel:"noopener noreferrer"},$={href:"https://grammy.dev/guide/errors",target:"_blank",rel:"noopener noreferrer"},J={href:"https://grammy.dev/hosting/comparison",target:"_blank",rel:"noopener noreferrer"},Z={href:"https://github.com/enyichiaagu/telegram-bot",target:"_blank",rel:"noopener noreferrer"};function Q(m,n){const c=i("VPCard"),l=i("router-link"),g=i("SiteInfo"),e=i("VPIcon"),r=i("RouteLink");return h(),b("div",null,[s("h1",T,[s("a",x,[s("span",null,f(m.$frontmatter.title)+" 관련",1)])]),t(c,u(d({title:"TypeScript > Article(s)",desc:"Article(s)",link:"/programming/ts/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",A,[s("ul",null,[s("li",null,[t(l,{to:"#use-cases-for-telegram-bots"},{default:o(()=>n[0]||(n[0]=[a("Use cases for Telegram bots")])),_:1,__:[0]})]),s("li",null,[t(l,{to:"#how-to-build-a-telegram-bot"},{default:o(()=>n[1]||(n[1]=[a("How to build a Telegram bot")])),_:1,__:[1]})]),s("li",null,[t(l,{to:"#how-to-set-up-grammy"},{default:o(()=>n[2]||(n[2]=[a("How to set up grammY")])),_:1,__:[2]})]),s("li",null,[t(l,{to:"#how-to-set-up-the-google-gemini-api"},{default:o(()=>n[3]||(n[3]=[a("How to set up the Google Gemini API")])),_:1,__:[3]})]),s("li",null,[t(l,{to:"#how-to-respond-to-text"},{default:o(()=>n[4]||(n[4]=[a("How to respond to text")])),_:1,__:[4]})]),s("li",null,[t(l,{to:"#how-to-respond-to-voice-messages"},{default:o(()=>n[5]||(n[5]=[a("How to respond to voice messages")])),_:1,__:[5]})]),s("li",null,[t(l,{to:"#how-to-respond-to-pictures"},{default:o(()=>n[6]||(n[6]=[a("How to respond to pictures")])),_:1,__:[6]})]),s("li",null,[t(l,{to:"#catching-errors-with-grammy"},{default:o(()=>n[7]||(n[7]=[a("Catching errors with grammY")])),_:1,__:[7]})]),s("li",null,[t(l,{to:"#deploying-the-telegram-bot"},{default:o(()=>n[8]||(n[8]=[a("Deploying the Telegram bot")])),_:1,__:[8]})]),s("li",null,[t(l,{to:"#wrapping-up"},{default:o(()=>n[9]||(n[9]=[a("Wrapping up")])),_:1,__:[9]})])])]),n[141]||(n[141]=s("hr",null,null,-1)),t(g,{name:"Building a Telegram bot with grammY",desc:"Build a Telegram bot with Node.js and grammY to automate text, audio, and image responses using the Telegram API and Google Gemini.",url:"https://blog.logrocket.com/building-telegram-bot-grammy",logo:"/assets/image/blog.logrocket.com/favicon.png",preview:"/assets/image/blog.logrocket.com/building-telegram-bot-grammy/banner.png"}),s("p",null,[n[11]||(n[11]=a("One feature that makes ")),s("a",j,[t(e,{icon:"fa-brands fa-telegram"}),n[10]||(n[10]=a("Telegram"))]),n[12]||(n[12]=a(" stand out from other messaging apps is how easy it is to build bots in it. Telegram bots are lightweight, programmable applications that run within the Telegram app. They use the Telegram interface to accept commands and display results, allowing users to seamlessly interact with them."))]),n[142]||(n[142]=s("figure",null,[s("img",{src:y,alt:"Building A Telegram Bot With GrammY",tabindex:"0",loading:"lazy"}),s("figcaption",null,"Building A Telegram Bot With GrammY")],-1)),s("p",null,[n[16]||(n[16]=a("Telegram bots don’t only run inside the app; they use the ")),s("a",I,[t(e,{icon:"fa-brands fa-telegram"}),n[13]||(n[13]=a("Telegram Bot API"))]),n[17]||(n[17]=a(" to perform tasks like messaging a user, joining ")),s("a",B,[t(e,{icon:"fa-brands fa-telegram"}),n[14]||(n[14]=a("groups"))]),n[18]||(n[18]=a(" or ")),s("a",E,[t(e,{icon:"fa-brands fa-telegram"}),n[15]||(n[15]=a("channels"))]),n[19]||(n[19]=a(", and more. Bots can do most things a human user of the app can do — with the help of the API. And because bots are computer programs, they can be written in any programming language, making them highly flexible and adaptable."))]),n[143]||(n[143]=s("p",null,"Because they’re programmable, Telegram bots can automate tasks, perform logical operations, and offer custom interaction interfaces that aren’t available to regular users. In Telegram, bots are easily distinguishable from human users.",-1)),n[144]||(n[144]=s("p",null,"This article starts by exploring the many use cases of Telegram bots. It then walks you through a tutorial on building a Telegram bot using TypeScript and Node.js.",-1)),n[145]||(n[145]=s("hr",null,null,-1)),n[146]||(n[146]=s("h2",{id:"use-cases-for-telegram-bots",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#use-cases-for-telegram-bots"},[s("span",null,"Use cases for Telegram bots")])],-1)),n[147]||(n[147]=s("p",null,"Here are some key benefits Telegram users gain from bots:",-1)),s("ul",null,[s("li",null,[n[23]||(n[23]=s("strong",null,"Improving",-1)),n[24]||(n[24]=a()),n[25]||(n[25]=s("strong",null,"the",-1)),n[26]||(n[26]=a()),n[27]||(n[27]=s("strong",null,"messaging experience",-1)),n[28]||(n[28]=a(": Telegram offers several bots designed to improve the messaging experience in the app. These bots help with tasks like moderating groups, setting up polls, and translating text. Examples include ")),s("a",G,[t(e,{icon:"fa-brands fa-telegram"}),n[20]||(n[20]=a("Rose"))]),n[29]||(n[29]=a(" for community moderation, ")),s("a",P,[t(e,{icon:"fa-brands fa-telegram"}),n[21]||(n[21]=a("VoteBot"))]),n[30]||(n[30]=a(" for polls, and ")),s("a",Y,[t(e,{icon:"fa-brands fa-telegram"}),n[22]||(n[22]=a("Translator"))]),n[31]||(n[31]=a(" for language translation within groups"))]),n[42]||(n[42]=s("li",null,[s("strong",null,"Customer service support"),a(": Telegram bots also make great chatbots for customer service. Businesses can set up bots to handle common customer inquiries, saving time and offering quick responses to users who already use the app. With the integration of AI-powered large language models, these bots can provide natural-sounding replies and handle complex queries")],-1)),s("li",null,[n[34]||(n[34]=s("strong",null,"Automated notifications",-1)),n[35]||(n[35]=a(": Telegram bots are a great platform to set up automated alerts from third-party applications like email, GitHub, or Trello. You can even configure these bots so users can reply directly to those notifications within Telegram without needing to open the third-party app that triggered the notification. Examples of bots like this are ")),s("a",R,[t(e,{icon:"fa-brands fa-telegram"}),n[32]||(n[32]=a("GmailBot"))]),n[36]||(n[36]=a(", ")),s("a",N,[t(e,{icon:"fa-brands fa-telegram"}),n[33]||(n[33]=a("GitHub"))]),n[37]||(n[37]=a(", and many others"))]),s("li",null,[n[39]||(n[39]=s("strong",null,"Facilitating payments",-1)),n[40]||(n[40]=a(": With Telegram bots, you can run a fully functional ")),s("a",M,[t(e,{icon:"fa-brands fa-telegram"}),n[38]||(n[38]=a("ecommerce store"))]),n[41]||(n[41]=a(". Telegram allows bot developers to generate invoices for customers and accept payments"))])]),s("p",null,[n[45]||(n[45]=a("Telegram bots have a wide range of uses, including serving as an alternative to mobile apps. Since they function similarly to ")),s("a",S,[t(e,{icon:"fa-brands fa-telegram"}),n[43]||(n[43]=a("apps"))]),n[46]||(n[46]=a(", they can even run ")),s("a",q,[t(e,{icon:"fa-brands fa-telegram"}),n[44]||(n[44]=a("games"))]),n[47]||(n[47]=a(". Developers can also use bots to quickly prototype CRUD applications"))]),n[148]||(n[148]=s("hr",null,null,-1)),n[149]||(n[149]=s("h2",{id:"how-to-build-a-telegram-bot",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#how-to-build-a-telegram-bot"},[s("span",null,"How to build a Telegram bot")])],-1)),s("p",null,[n[49]||(n[49]=a("The rest of the article will focus on how to build a custom telegram bot in Node.js. To follow along, you need knowledge of Node.js APIs and TypeScript. Make sure to have ")),t(r,{to:"/blog.logrocket.com/exploring-node-js-v20-features.html"},{default:o(()=>n[48]||(n[48]=[s("strong",null,"Node.js v20",-1)])),_:1,__:[48]}),n[50]||(n[50]=a(" or above installed."))]),n[150]||(n[150]=s("p",null,"The following tutorial is an implementation of a Telegram bot any Telegram user can chat with about anything. The chatbot will be able to respond to text, photo, and voice messages. Our project will be implemented using the following tools:",-1)),s("ul",null,[s("li",null,[s("a",F,[t(e,{icon:"fas fa-globe"}),n[51]||(n[51]=a("grammY"))]),n[53]||(n[53]=a(": A simple library for building Telegram bots. It runs on different JavaScript runtimes (Node.js and Deno). grammY’s API maps to the official ")),s("a",O,[t(e,{icon:"fa-brands fa-telegram"}),n[52]||(n[52]=a("Telegram HTTP Bot API"))]),n[54]||(n[54]=a(" so developers don’t miss out on any functionality when using this library"))]),s("li",null,[s("a",U,[t(e,{icon:"fa-brands fa-google"}),n[55]||(n[55]=a("Google Gemini"))]),n[58]||(n[58]=a(": Gemini is a set of generative AI models from Google. The tutorial uses the ")),s("a",H,[t(e,{icon:"fa-brands fa-google"}),n[56]||(n[56]=s("code",null,"gemini-1.5-flash",-1)),n[57]||(n[57]=a(" AI model"))]),n[59]||(n[59]=a(" to generate the responses sent to users. It also uses that model to respond to voice notes and images"))])]),s("div",C,[n[65]||(n[65]=s("p",{class:"hint-container-title"},"Info",-1)),s("p",null,[n[63]||(n[63]=a("The final source code of the project can be found in this ")),s("a",L,[n[60]||(n[60]=a("GitHub repository (")),t(e,{icon:"iconfont icon-github"}),n[61]||(n[61]=s("code",null,"enyichiaagu/telegram-bot",-1)),n[62]||(n[62]=a(")"))]),n[64]||(n[64]=a("."))])]),s("p",null,[n[67]||(n[67]=a("The first step to creating a new Telegram Bot is to message ")),s("a",D,[t(e,{icon:"fa-brands fa-telegram"}),n[66]||(n[66]=a("BotFather"))]),n[68]||(n[68]=a(" in the app. Open the Telegram App and give BotFather the ")),n[69]||(n[69]=s("code",null,"/start",-1)),n[70]||(n[70]=a(" command. BotFather will then provide a comprehensive menu of all the services it offers. Follow the menu to create a new bot."))]),n[151]||(n[151]=s("p",null,[a("For this example, the bot’s name is "),s("code",null,"Gemini AI Bot"),a(" with the username "),s("code",null,"gemini01_bot"),a(". You’ll have to create a unique username for your use case.")],-1)),s("p",null,[n[72]||(n[72]=a("Finally, BotFather will generate a bot token for you. This token is a unique ")),s("a",V,[t(e,{icon:"fas fa-globe"}),n[71]||(n[71]=a("authentication token"))]),n[73]||(n[73]=a(" for your new bot. Anyone with access to it can make changes to the bot, so be sure to copy it and store it somewhere safe — you’ll need it soon."))]),n[152]||(n[152]=p(`<hr><h2 id="how-to-set-up-grammy" tabindex="-1"><a class="header-anchor" href="#how-to-set-up-grammy"><span>How to set up grammY</span></a></h2><p>To get started with grammY in Node.js, first create the project folder. This tutorial will name the project <code>telegram-bot</code>:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">mkdir</span> telegram-bot</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Then, navigate into the project folder and initialize npm in the command line:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token builtin class-name">cd</span> telegram-bot</span>
<span class="line"><span class="token function">npm</span> init <span class="token parameter variable">-y</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,6)),s("p",null,[n[75]||(n[75]=a("Next, install grammY, TypeScript, and Node.js type definitions (")),s("a",z,[t(e,{icon:"fa-brands fa-npm"}),n[74]||(n[74]=s("code",null,"@types/node",-1))]),n[76]||(n[76]=a(") from npm:"))]),n[153]||(n[153]=p(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">npm</span> <span class="token function">install</span> grammy </span>
<span class="line"><span class="token comment"># Install grammY -- the bot library -- as a dependency</span></span>
<span class="line"><span class="token function">npm</span> <span class="token function">install</span> --save-dev typescript @types/node</span>
<span class="line"><span class="token comment"># This is necessary for developing TypeScript applications in Node.js</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Initialize TypeScript:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">npx tsc <span class="token parameter variable">--init</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,3)),s("p",null,[n[78]||(n[78]=a("Inside the newly created ")),t(e,{icon:"iconfont icon-json"}),n[79]||(n[79]=s("code",null,"tsconfig.json",-1)),n[80]||(n[80]=a(" file, set the configuration below. This makes sure the project can use ")),t(r,{to:"/blog.logrocket.com/es-modules-in-node-today.html"},{default:o(()=>n[77]||(n[77]=[s("strong",null,"ESmodules",-1)])),_:1,__:[77]}),n[81]||(n[81]=a(":"))]),n[154]||(n[154]=p(`<div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json"><pre><code class="language-json"><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    ...</span>
<span class="line">    <span class="token property">&quot;target&quot;</span><span class="token operator">:</span> <span class="token string">&quot;es2017&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;module&quot;</span><span class="token operator">:</span> <span class="token string">&quot;nodenext&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    ... </span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Set up the following file structure for the project:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="file structure"><span>file structure</span></div><div class="language-plaintext line-numbers-mode" data-highlighter="prismjs" data-ext="plaintext"><pre><code class="language-plaintext"><span class="line">├── bot.ts</span>
<span class="line">├── .env</span>
<span class="line">├── .gitignore</span>
<span class="line">├── node_modules</span>
<span class="line">├── package.json</span>
<span class="line">├── package-lock.json</span>
<span class="line">└── tsconfig.json</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,3)),s("p",null,[n[82]||(n[82]=a("Inside the ")),t(e,{icon:"iconfont icon-git"}),n[83]||(n[83]=s("code",null,".gitignore",-1)),n[84]||(n[84]=a(" file, exclude the following from git commits:"))]),n[155]||(n[155]=p(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">node_modules/</span>
<span class="line">.env</span>
<span class="line">bot.js</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),s("p",null,[n[85]||(n[85]=a("Finally, open the ")),t(e,{icon:"fas fa-file-lines"}),n[86]||(n[86]=s("code",null,".env",-1)),n[87]||(n[87]=a(" file and bind the Telegram Bot token to a constant:"))]),n[156]||(n[156]=p(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title=".env"><span>.env</span></div><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token assign-left variable">TELEGRAM_BOT_TOKEN</span><span class="token operator">=</span>xxxxx</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></div><p>With that done, the folder is now set up for the project.</p><hr><h2 id="how-to-set-up-the-google-gemini-api" tabindex="-1"><a class="header-anchor" href="#how-to-set-up-the-google-gemini-api"><span>How to set up the Google Gemini API</span></a></h2>`,4)),s("p",null,[n[89]||(n[89]=a("To get started with Google Gemini, you need to first create an API key. You can do so in the ")),s("a",K,[t(e,{icon:"fa-brands fa-google"}),n[88]||(n[88]=a("Google AI Studio"))]),n[90]||(n[90]=a("."))]),s("p",null,[n[91]||(n[91]=a("After obtaining the API key, open the ")),t(e,{icon:"fas fa-file-lines"}),n[92]||(n[92]=s("code",null,".env",-1)),n[93]||(n[93]=a(" file and bind the API key to a constant:"))]),n[157]||(n[157]=p(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title=".env"><span>.env</span></div><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token punctuation">..</span>.</span>
<span class="line"><span class="token assign-left variable">GEMINI_API_KEY</span><span class="token operator">=</span>xxxxx</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></div>`,1)),s("p",null,[n[97]||(n[97]=a("After that, install the ")),s("a",W,[n[94]||(n[94]=a("Google AI JavaScript SDK (")),t(e,{icon:"fa-brands fa-npm "}),n[95]||(n[95]=s("code",null,"@google/generative-ai",-1)),n[96]||(n[96]=a(")"))]),n[98]||(n[98]=a(":"))]),n[158]||(n[158]=p(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">npm</span> <span class="token function">install</span> @google/generative-ai </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,1)),s("p",null,[n[99]||(n[99]=a("With the library installed, open the ")),t(e,{icon:"iconfont icon-typescript"}),n[100]||(n[100]=s("code",null,"bot.ts",-1)),n[101]||(n[101]=a(" file and use the constants in the ")),t(e,{icon:"fas fa-file-lines"}),n[102]||(n[102]=s("code",null,".env",-1)),n[103]||(n[103]=a(" file to configure both Gemini and grammY:"))]),n[159]||(n[159]=p(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="bot.ts"><span>bot.ts</span></div><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Bot <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;grammy&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> GoogleGenerativeAI<span class="token punctuation">,</span> <span class="token keyword">type</span> <span class="token class-name">Part</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@google/generative-ai&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> User<span class="token punctuation">,</span> File <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;grammy/types&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token constant">BOT_API_SERVER</span> <span class="token operator">=</span> <span class="token string">&#39;https://api.telegram.org&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token constant">TELEGRAM_BOT_TOKEN</span><span class="token punctuation">,</span> <span class="token constant">GEMINI_API_KEY</span> <span class="token punctuation">}</span> <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token constant">TELEGRAM_BOT_TOKEN</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token constant">GEMINI_API_KEY</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;TELEGRAM_BOT_TOKEN and GEMINI_API_KEY must be provided!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> bot <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bot</span><span class="token punctuation">(</span><span class="token constant">TELEGRAM_BOT_TOKEN</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> genAI <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GoogleGenerativeAI</span><span class="token punctuation">(</span><span class="token constant">GEMINI_API_KEY</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> model <span class="token operator">=</span> genAI<span class="token punctuation">.</span><span class="token function">getGenerativeModel</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  model<span class="token operator">:</span> <span class="token string">&#39;gemini-1.5-flash&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  systemInstruction<span class="token operator">:</span></span>
<span class="line">    <span class="token string">&#39;You are a Telegram Chatbot. Maintain a friendly tone. Keep responses one paragraph short unless told otherwise. You have the ability to respond to audio and pictures.&#39;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> chat <span class="token operator">=</span> model<span class="token punctuation">.</span><span class="token function">startChat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,1)),s("p",null,[n[105]||(n[105]=a("As you can see from the ")),t(e,{icon:"iconfont icon-typescript"}),n[106]||(n[106]=s("code",null,"bot.ts",-1)),n[107]||(n[107]=a(" file, it also imported some ")),t(r,{to:"/blog.logrocket.com/types-vs-interfaces-typescript.html"},{default:o(()=>n[104]||(n[104]=[s("strong",null,"types",-1)])),_:1,__:[104]}),n[108]||(n[108]=a(" from ")),n[109]||(n[109]=s("code",null,"grammy/types",-1)),n[110]||(n[110]=a(", which will be important later. Also, observe the ")),n[111]||(n[111]=s("code",null,"systemInstruction",-1)),n[112]||(n[112]=a(" given in the Gemini Configuration. This lets you define consistent behavior for the responses to user queries in the chatbot."))]),n[160]||(n[160]=p(`<p>To get your first response using the Gemini API with the chatbot, set up a response to the bot with the <code>/start</code> command. It is the first command any user will give a bot:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="bot.ts"><span>bot.ts</span></div><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token operator">...</span></span>
<span class="line"></span>
<span class="line">bot<span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span><span class="token string">&#39;start&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> user<span class="token operator">:</span> User <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token operator">=</span> ctx<span class="token punctuation">.</span>from<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> fullName<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>user<span class="token operator">?.</span>first_name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>user<span class="token operator">?.</span>last_name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> prompt<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Welcome user with the fullname </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>fullName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> in one sentence.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> chat<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>prompt<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> ctx<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> parse_mode<span class="token operator">:</span> <span class="token string">&#39;Markdown&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">bot<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,2)),s("p",null,[n[113]||(n[113]=a("To make type checking and running the bot easier, set up your ")),t(e,{icon:"iconfont icon-json"}),n[114]||(n[114]=s("code",null,"package.json",-1)),n[115]||(n[115]=a(" with the following scripts:"))]),n[161]||(n[161]=p(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="package.json"><span>package.json</span></div><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json"><pre><code class="language-json"><span class="line"><span class="token punctuation">{</span></span>
<span class="line">...</span>
<span class="line">  <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;module&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">&quot;start&quot;</span><span class="token operator">:</span> <span class="token string">&quot;node --env-file=.env bot.js&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;watch&quot;</span><span class="token operator">:</span> <span class="token string">&quot;tsc -w&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;dev&quot;</span><span class="token operator">:</span> <span class="token string">&quot;node --env-file=.env --watch bot.js&quot;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">...</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Finally, use the following CLI command to start the application:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">npm</span> run <span class="token function">watch</span> <span class="token operator">&amp;</span> <span class="token function">npm</span> run dev</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,3)),s("p",null,[n[116]||(n[116]=a("The command type checks the ")),t(e,{icon:"iconfont icon-typescript"}),n[117]||(n[117]=s("code",null,"bot.ts",-1)),n[118]||(n[118]=a(" file on any changes, compiles the file, and then runs the resulting ")),n[119]||(n[119]=s("code",null,"bot.js",-1)),n[120]||(n[120]=a(" file. After running the command, test your telegram bot using the URL")),n[121]||(n[121]=s("code",null,"https://t.me/<BOT USERNAME>",-1)),n[122]||(n[122]=a(". Start the bot with the ")),n[123]||(n[123]=s("code",null,"/start",-1)),n[124]||(n[124]=a(" command and watch the bot respond. Make sure to keep the bot server running on your local host device:"))]),n[162]||(n[162]=s("figure",null,[s("img",{src:"https://blog.logrocket.com/wp-content/uploads/2025/02/Gemini-AI-bot-responding-start-command.png",alt:"The Gemini AI Bot Responding To The Start Command From A User",tabindex:"0",loading:"lazy"}),s("figcaption",null,"The Gemini AI Bot Responding To The Start Command From A User")],-1)),n[163]||(n[163]=s("hr",null,null,-1)),n[164]||(n[164]=s("h2",{id:"how-to-respond-to-text",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#how-to-respond-to-text"},[s("span",null,"How to respond to text")])],-1)),n[165]||(n[165]=s("p",null,"As stated earlier, this bot will respond to texts using the Google Gemini API. We’ll learn how to implement that in this section.",-1)),s("p",null,[n[125]||(n[125]=a("In the ")),t(e,{icon:"iconfont icon-typescript"}),n[126]||(n[126]=s("code",null,"bot.ts",-1)),n[127]||(n[127]=a(" file, add the following:"))]),n[166]||(n[166]=p(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="bot.ts"><span>bot.ts</span></div><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token operator">...</span></span>
<span class="line"></span>
<span class="line">bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;message:text&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> prompt<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> ctx<span class="token punctuation">.</span>message<span class="token punctuation">.</span>text<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> chat<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>prompt<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> ctx<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> parse_mode<span class="token operator">:</span> <span class="token string">&#39;Markdown&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">bot<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Here, grammY listens for a text message sent to the bot. After that, grammY sends that text message to Gemini and forwards Gemini’s response as a reply to the user. Here is the result:</p><figure><img src="https://blog.logrocket.com/wp-content/uploads/2025/02/telegram-bot-responding-text.png" alt="Telegram Bot Responding To Text From A User" tabindex="0" loading="lazy"><figcaption>Telegram Bot Responding To Text From A User</figcaption></figure><hr><h2 id="how-to-respond-to-voice-messages" tabindex="-1"><a class="header-anchor" href="#how-to-respond-to-voice-messages"><span>How to respond to voice messages</span></a></h2><p>After receiving an audio file, Google Gemini can transcribe it and give a response. This project will prompt Gemini to reply to the transcript of the audio file. A user can send audio using Telegram’s built-in voice message feature:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="bot.ts"><span>bot.ts</span></div><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token operator">...</span></span>
<span class="line">bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;message:voice&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> file<span class="token operator">:</span> File <span class="token operator">=</span> <span class="token keyword">await</span> ctx<span class="token punctuation">.</span><span class="token function">getFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> filePath<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token operator">=</span> file<span class="token punctuation">.</span>file_path<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>filePath<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> fileURL<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">BOT_API_SERVER</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/file/bot</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">TELEGRAM_BOT_TOKEN</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>filePath<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> fetchedResponse <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>fileURL<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> data<span class="token operator">:</span> ArrayBuffer <span class="token operator">=</span> <span class="token keyword">await</span> fetchedResponse<span class="token punctuation">.</span><span class="token function">arrayBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> base64Audio<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">&#39;base64&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> prompt<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> Part<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">      inlineData<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        mimeType<span class="token operator">:</span> <span class="token string">&#39;audio/ogg&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        data<span class="token operator">:</span> base64Audio<span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">      text<span class="token operator">:</span> <span class="token string">&#39;Please respond to the audio prompt.&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> chat<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>prompt<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> ctx<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> parse_mode<span class="token operator">:</span> <span class="token string">&#39;Markdown&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">bot<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Now the bot should be able to reply to voice messages:</p><figure><img src="https://blog.logrocket.com/wp-content/uploads/2025/02/telegram-bot-responding-voice-message.png" alt="Telegram Bot Responding To A User&#39;s Voice Message" tabindex="0" loading="lazy"><figcaption>Telegram Bot Responding To A User&#39;s Voice Message</figcaption></figure><hr><h2 id="how-to-respond-to-pictures" tabindex="-1"><a class="header-anchor" href="#how-to-respond-to-pictures"><span>How to respond to pictures</span></a></h2><p>Similar to audio files, Gemini can also interpret images. Here, the project will use grammY to place a listener for sent images. Then it will prompt Gemini to either use the photo caption as a prompt or describe what is in the photo (if it does not have a caption):</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="bot.ts"><span>bot.ts</span></div><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"></span>
<span class="line"><span class="token operator">...</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">MINE</span></span> <span class="token operator">=</span> <span class="token string">&#39;image/jpeg&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;image/png&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> ExtToMINE<span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token constant">MINE</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  jpeg<span class="token operator">:</span> <span class="token string">&#39;image/jpeg&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  jpg<span class="token operator">:</span> <span class="token string">&#39;image/jpeg&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  png<span class="token operator">:</span> <span class="token string">&#39;image/png&#39;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">bot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;message:photo&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> caption<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token operator">=</span> ctx<span class="token punctuation">.</span>message<span class="token punctuation">.</span>caption<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> photoFile<span class="token operator">:</span> File <span class="token operator">=</span> <span class="token keyword">await</span> ctx<span class="token punctuation">.</span><span class="token function">getFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> photoFilePath<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token operator">=</span> photoFile<span class="token punctuation">.</span>file_path<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>photoFilePath<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> photoURL<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">BOT_API_SERVER</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/file/bot</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">TELEGRAM_BOT_TOKEN</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>photoFilePath<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> fetchedResponse <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>photoURL<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> data<span class="token operator">:</span> ArrayBuffer <span class="token operator">=</span> <span class="token keyword">await</span> fetchedResponse<span class="token punctuation">.</span><span class="token function">arrayBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> base64Photo<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">&#39;base64&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">let</span> match<span class="token operator">:</span> RegExpMatchArray <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> photoFilePath<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[^.]+$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>match<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">let</span> photoExt<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> match<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> prompt<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> Part<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token punctuation">{</span> inlineData<span class="token operator">:</span> <span class="token punctuation">{</span> mimeType<span class="token operator">:</span> ExtToMINE<span class="token punctuation">[</span>photoExt<span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token operator">:</span> base64Photo <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">{</span> text<span class="token operator">:</span> caption <span class="token operator">??</span> <span class="token string">&#39;Describe what you see in the photo&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> chat<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>prompt<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> ctx<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> parse_mode<span class="token operator">:</span> <span class="token string">&#39;Markdown&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">bot<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Now, the Telegram chatbot can respond to images as well:</p><figure><img src="https://blog.logrocket.com/wp-content/uploads/2025/02/telegram-bot-responding-image.png" alt="Telegram Bot Responding To A Photo Sent By A User" tabindex="0" loading="lazy"><figcaption>Telegram Bot Responding To A Photo Sent By A User</figcaption></figure><hr><h2 id="catching-errors-with-grammy" tabindex="-1"><a class="header-anchor" href="#catching-errors-with-grammy"><span>Catching errors with grammY</span></a></h2>`,17)),s("p",null,[n[129]||(n[129]=a("One great benefit grammY offers is the ease of ")),s("a",$,[t(e,{icon:"fas fa-globe"}),n[128]||(n[128]=a("handling errors"))]),n[130]||(n[130]=a(". With the library, a developer can use the ")),n[131]||(n[131]=s("code",null,"bot.catch()",-1)),n[132]||(n[132]=a(" method to catch and handle whatever errors a bot application encounters. Below is a simple error-handling script in grammY:"))]),n[167]||(n[167]=p(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="bot.ts"><span>bot.ts</span></div><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"></span>
<span class="line"><span class="token operator">...</span></span>
<span class="line">bot<span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> ctx <span class="token operator">=</span> error<span class="token punctuation">.</span>ctx<span class="token punctuation">;</span></span>
<span class="line">  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> ctx<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span><span class="token string">&#39;Something went wrong. Try again!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">bot<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>The snippet above logs the error to the command line and then replies to a bot user with the message “Something went wrong. Try again.”</p><hr><h2 id="deploying-the-telegram-bot" tabindex="-1"><a class="header-anchor" href="#deploying-the-telegram-bot"><span>Deploying the Telegram bot</span></a></h2><p>For a Telegram bot to keep running at all times, it needs to be deployed to a host that is always up and active. The developer’s local host is most likely unreliable as it could go off at any time.</p>`,5)),s("p",null,[n[134]||(n[134]=a("The grammY documentation offers ")),s("a",J,[t(e,{icon:"fas fa-globe"}),n[133]||(n[133]=a("several guides"))]),n[135]||(n[135]=a(" for deploying a bot to different platforms. Fundamentally, a grammY application is a lightweight backend server (in Node.js or Deno), which means you can easily deploy it as you would deploy any other server. After deploying it, anybody can now interact with your Telegram bot at any point in time."))]),n[168]||(n[168]=s("hr",null,null,-1)),n[169]||(n[169]=s("h2",{id:"wrapping-up",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#wrapping-up"},[s("span",null,"Wrapping up")])],-1)),n[170]||(n[170]=s("p",null,"This article introduced Telegram bots and walked through the process of building one with Node.js. It began by exploring various use cases for bots, then covered how to obtain a bot token, set up a grammY project in Node.js, and get a Gemini API key. The tutorial then demonstrated how to use grammY and Google Gemini to respond to text, audio, and images.",-1)),s("p",null,[n[139]||(n[139]=a("As we’ve seen, Telegram bots can solve a wide range of problems, offering powerful automation and interaction capabilities. Use this guide as a starting point to experiment and build your own custom Telegram bot. You can find the complete source code for this project ")),s("a",Z,[n[136]||(n[136]=a("here (")),t(e,{icon:"iconfont icon-github"}),n[137]||(n[137]=s("code",null,"enyichiaagu/telegram-bot",-1)),n[138]||(n[138]=a(")"))]),n[140]||(n[140]=a("."))]),v(" TODO: add ARTICLE CARD "),t(c,u(d({title:"Building a Telegram bot with grammY",desc:"Build a Telegram bot with Node.js and grammY to automate text, audio, and image responses using the Telegram API and Google Gemini.",link:"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/building-telegram-bot-grammy.html",logo:"/assets/image/blog.logrocket.com/favicon.png",background:"rgba(112,76,182,0.2)"})),null,16)])}const nn=k(w,[["render",Q]]),sn=JSON.parse('{"path":"/blog.logrocket.com/building-telegram-bot-grammy.html","title":"Building a Telegram bot with grammY","lang":"en-US","frontmatter":{"lang":"en-US","title":"Building a Telegram bot with grammY","description":"Article(s) > Building a Telegram bot with grammY","icon":"iconfont icon-typescript","category":["TypeScript","Article(s)"],"tag":["blog","blog.logrocket.com","ts","typesccript"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Building a Telegram bot with grammY\\",\\"image\\":[\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/building-telegram-bot-grammy/banner.png\\",\\"https://blog.logrocket.com/wp-content/uploads/2025/02/Gemini-AI-bot-responding-start-command.png\\",\\"https://blog.logrocket.com/wp-content/uploads/2025/02/telegram-bot-responding-text.png\\",\\"https://blog.logrocket.com/wp-content/uploads/2025/02/telegram-bot-responding-voice-message.png\\",\\"https://blog.logrocket.com/wp-content/uploads/2025/02/telegram-bot-responding-image.png\\"],\\"datePublished\\":\\"2025-02-20T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Amazing Enyichi Agu\\",\\"url\\":\\"https://blog.logrocket.com/author/amazingenyichiagu/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/building-telegram-bot-grammy.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Building a Telegram bot with grammY"}],["meta",{"property":"og:description","content":"Article(s) > Building a Telegram bot with grammY"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/building-telegram-bot-grammy/banner.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/building-telegram-bot-grammy/banner.png"}],["meta",{"name":"twitter:image:alt","content":"Building a Telegram bot with grammY"}],["meta",{"property":"article:author","content":"Amazing Enyichi Agu"}],["meta",{"property":"article:tag","content":"typesccript"}],["meta",{"property":"article:tag","content":"ts"}],["meta",{"property":"article:tag","content":"blog.logrocket.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2025-02-20T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Building a Telegram bot with grammY"},{"property":"og:description","content":"Building a Telegram bot with grammY"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/building-telegram-bot-grammy.html"}]],"prev":"/programming/ts/articles/README.md","date":"2025-02-20T00:00:00.000Z","isOriginal":false,"author":[{"name":"Amazing Enyichi Agu","url":"https://blog.logrocket.com/author/amazingenyichiagu/"}],"cover":"/assets/image/blog.logrocket.com/building-telegram-bot-grammy/banner.png"},"git":{},"readingTime":{"minutes":8.8,"words":2639},"filePathRelative":"blog.logrocket.com/building-telegram-bot-grammy.md","copyright":{"author":"Amazing Enyichi Agu"}}');export{nn as comp,sn as data};
