import{_ as b}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as g,d as s,f as n,b as r,a as f,t as w,n as u,g as m,w as l,e as a,r as i,o as S}from"./app-BVguHYKu.js";const C="/bookshelf/assets/image/blog.logrocket.com/control-css-cascade-with-cascade-layers/banner.webp",x="/bookshelf/assets/image/blog.logrocket.com/control-css-cascade-with-cascade-layers/css-cascade-layers-browser-support.webp",T={},A={id:"frontmatter-title-관련",tabindex:"-1"},I={class:"header-anchor",href:"#frontmatter-title-관련"},j={class:"table-of-contents"},L={href:"https://w3.org/TR/css-cascade-5/#layering",target:"_blank",rel:"noopener noreferrer"},O={href:"https://drafts.csswg.org/css-cascade/#cascade-sort",target:"_blank",rel:"noopener noreferrer"},U={href:"https://w3.org/TR/css-cascade-5/",target:"_blank",rel:"noopener noreferrer"},P={href:"https://x.com/TerribleMia/",target:"_blank",rel:"noopener noreferrer"},R={href:"https://w3.org/TR/css-cascade-5/#cascade-layers",target:"_blank",rel:"noopener noreferrer"};function N(h,e){const d=i("VPCard"),t=i("router-link"),y=i("SiteInfo"),v=i("RouteLink"),c=i("VPIcon"),k=i("Tabs");return S(),g("div",null,[s("h1",A,[s("a",I,[s("span",null,w(h.$frontmatter.title)+" 관련",1)])]),n(d,u(m({title:"CSS > Article(s)",desc:"Article(s)",link:"/programming/css/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",j,[s("ul",null,[s("li",null,[n(t,{to:"#understanding-the-cascade"},{default:l(()=>e[0]||(e[0]=[a("Understanding the cascade")])),_:1,__:[0]})]),s("li",null,[n(t,{to:"#introducing-cascade-layers"},{default:l(()=>e[1]||(e[1]=[a("Introducing cascade layers")])),_:1,__:[1]})]),s("li",null,[n(t,{to:"#creating-cascade-layers-with-layer"},{default:l(()=>e[2]||(e[2]=[a("Creating cascade layers with @layer")])),_:1,__:[2]}),s("ul",null,[s("li",null,[n(t,{to:"#layer-order"},{default:l(()=>e[3]||(e[3]=[a("Layer order")])),_:1,__:[3]})]),s("li",null,[n(t,{to:"#layer-specificity"},{default:l(()=>e[4]||(e[4]=[a("Layer specificity")])),_:1,__:[4]})]),s("li",null,[n(t,{to:"#unlayered-styles-specificity"},{default:l(()=>e[5]||(e[5]=[a("Unlayered styles specificity")])),_:1,__:[5]})]),s("li",null,[n(t,{to:"#nesting-layers"},{default:l(()=>e[6]||(e[6]=[a("Nesting layers")])),_:1,__:[6]})]),s("li",null,[n(t,{to:"#cascade-algorithm-positioning"},{default:l(()=>e[7]||(e[7]=[a("Cascade algorithm positioning")])),_:1,__:[7]})])])]),s("li",null,[n(t,{to:"#polyfill"},{default:l(()=>e[8]||(e[8]=[a("Polyfill")])),_:1,__:[8]})]),s("li",null,[n(t,{to:"#browser-support"},{default:l(()=>e[9]||(e[9]=[a("Browser support")])),_:1,__:[9]})]),s("li",null,[n(t,{to:"#conclusion"},{default:l(()=>e[10]||(e[10]=[a("Conclusion")])),_:1,__:[10]})])])]),e[36]||(e[36]=s("hr",null,null,-1)),n(y,{name:"Control CSS cascade with cascade layers",desc:"Use the CSS cascade layers @layer at-rule to address conflicts between selector specificity and order of appearance.",url:"https://blog.logrocket.com/control-css-cascade-with-cascade-layers",logo:"/assets/image/blog.logrocket.com/favicon.png",preview:"/assets/image/blog.logrocket.com/control-css-cascade-with-cascade-layers/banner.webp"}),s("p",null,[e[12]||(e[12]=a("CSS is fairly easy for most developers to learn, but it can be ")),n(v,{to:"/blog.logrocket.com/why-your-css-fails.html"},{default:l(()=>e[11]||(e[11]=[s("strong",null,"unforgiving to those who lack proper structural plans for their code",-1)])),_:1,__:[11]}),e[13]||(e[13]=a(". This is primarily due to the cascade’s ferocious resistance to control."))]),e[37]||(e[37]=s("figure",null,[s("img",{src:C,alt:"Control CSS Cascade With Cascade Layers",tabindex:"0",loading:"lazy"}),s("figcaption",null,"Control CSS Cascade With Cascade Layers")],-1)),e[38]||(e[38]=s("p",null,"Some developers have been able to tame the cascade using methodologies such as inverted triangle CSS (ITCSS), object-oriented CSS (OOCSS), and the block element modifier (BEM). These methods allow a developer to write structural and logical codes that keep selector specificity as low as possible in an established order.",-1)),e[39]||(e[39]=s("p",null,"In most scenarios, these methodologies are effective, but they don’t completely address conflicts between selector specificity and order of appearance.",-1)),s("p",null,[e[15]||(e[15]=a("Thankfully, ")),s("a",L,[n(c,{icon:"iconfont icon-w3c"}),e[14]||(e[14]=a("cascade layers"))]),e[16]||(e[16]=a(" is coming to CSS. The new ")),e[17]||(e[17]=s("code",null,"@layer",-1)),e[18]||(e[18]=a(" at-rule aims to fully hand control of the cascade back to developers. With cascade layers, developers can decide how they would like to order layers and can more easily separate and access individual layers."))]),e[40]||(e[40]=r(`<p>In this article, we’ll introduce the cascade <code>@layer</code> at-rule, discuss how it works, and explore how this feature can be used to prevent or address conflicts between style rules.</p><hr><h2 id="understanding-the-cascade" tabindex="-1"><a class="header-anchor" href="#understanding-the-cascade"><span>Understanding the cascade</span></a></h2><p>The cascade is a core CSS algorithm that allows several stylesheets to influence a document’s presentation and define the resolution of competing property values assigned to elements within the document.</p><p>The cascade’s primary job is to assess an unordered list of CSS declarations for a given property in which the selector matches a particular element and also check for conflicting values. If the cascade identifies any conflicting values, it will sort them according to their declaration’s precedence and output a single cascading value to be applied to the element.</p><p>For example, the paragraph element in the following code has conflicting value pairs, <code>red</code> and <code>blue</code>:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token comment">/*&lt;p class=&quot;text&quot; id=&quot;text&quot;&gt;...&lt;/p&gt;*/</span></span>
<span class="line"></span>
<span class="line"><span class="token selector">.text</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token selector">#text</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In this type of situation, the cascade will have to determine which declaration takes precedence.</p>`,8)),s("p",null,[e[20]||(e[20]=a("To do so, the cascade will ")),s("a",O,[n(c,{icon:"fas fa-globe"}),e[19]||(e[19]=a("sort the declarations in descending order of priority"))]),e[21]||(e[21]=a(", according to the following criteria:"))]),e[41]||(e[41]=s("ul",null,[s("li",null,"Origin and importance"),s("li",null,"Encapsulation context"),s("li",null,"Style attributes"),s("li",null,"Specificity"),s("li",null,"Order of appearance")],-1)),e[42]||(e[42]=s("p",null,"The cascade checks each declaration against these criteria, determining which declaration has the greatest cascade weight. If a result is undecided for a particular criterion, the cascade will move on to the next.",-1)),e[43]||(e[43]=s("hr",null,null,-1)),e[44]||(e[44]=s("h2",{id:"introducing-cascade-layers",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#introducing-cascade-layers"},[s("span",null,"Introducing cascade layers")])],-1)),s("p",null,[e[26]||(e[26]=a("Cascade layers is a new CSS feature that is part of the ")),s("a",U,[n(c,{icon:"iconfont icon-w3c"}),e[22]||(e[22]=a("cascading inheritance level 5 specifications"))]),e[27]||(e[27]=a(". The feature was initially proposed by ")),s("a",P,[e[23]||(e[23]=a("Miriam Suzanne (")),n(c,{icon:"fa-brands fa-x-twitter"}),e[24]||(e[24]=s("code",null,"TerribleMia",-1)),e[25]||(e[25]=a(")"))]),e[28]||(e[28]=a(", a CSS spec author, in 2019. Cascade layers allows style rules to be split Into several layers using the @layer at-rule and also permits the order of specificity of the layers to be determined."))]),e[45]||(e[45]=r('<p>With cascade layers, there’s no need to worry about the specificity of each selector within a layer block or the order in which declarations are arranged in the stylesheet. This is because the browser will always respect the order of the cascade layers and ignore the specificity and order of appearance of the selectors. We’ll discuss this in more detail later in this article, and we’ll also look at some CSS layer order examples.</p><hr><h2 id="creating-cascade-layers-with-layer" tabindex="-1"><a class="header-anchor" href="#creating-cascade-layers-with-layer"><span>Creating cascade layers with <code>@layer</code></span></a></h2><p>The cascade layers <code>@layer</code> is a name-defining at-rule much like the CSS <code>@keyframe</code> and <code>@font-face</code> at-rules. It is the official syntax for defining cascade layers. It accepts an identifier or name that can be referenced and used to create a cascade layer block anywhere in the stylesheet.</p><p>Cascade layers can be defined in one of two ways using the <code>@layer</code> at-rule:</p>',5)),n(k,{data:[{id:"1."},{id:"2."}]},{title0:l(({value:p,isActive:o})=>e[29]||(e[29]=[a("1.")])),title1:l(({value:p,isActive:o})=>e[30]||(e[30]=[a("2.")])),tab0:l(({value:p,isActive:o})=>e[31]||(e[31]=[s("p",null,[a("Using URL imports with "),s("code",null,"@import"),a(" at-rule")],-1),s("div",{class:"language-css line-numbers-mode","data-highlighter":"prismjs","data-ext":"css"},[s("pre",null,[s("code",{class:"language-css"},[s("span",{class:"line"},[s("span",{class:"token atrule"},[s("span",{class:"token rule"},"@import"),s("span",{class:"token punctuation"},"("),a("reset.css"),s("span",{class:"token punctuation"},")"),a(),s("span",{class:"token function"},"layer"),s("span",{class:"token punctuation"},"("),a("reset"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";")])]),a(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"})])],-1),s("p",null,[a("This method appends the content of an external or third-party stylesheet whose relative URL is specified in the "),s("code",null,"@import"),a(" at-rule to a new or existing layer. For example, we can import and create a layer for a "),s("code",null,"reset"),a(" stylesheet as follows:")],-1),s("div",{class:"language-css line-numbers-mode","data-highlighter":"prismjs","data-ext":"css"},[s("pre",null,[s("code",{class:"language-css"},[s("span",{class:"line"},[s("span",{class:"token atrule"},[s("span",{class:"token rule"},"@import"),s("span",{class:"token punctuation"},"("),a("reset.css"),s("span",{class:"token punctuation"},")"),a(),s("span",{class:"token function"},"layer"),s("span",{class:"token punctuation"},"("),a("reset"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";")])]),a(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"})])],-1)])),tab1:l(({value:p,isActive:o})=>e[32]||(e[32]=[s("p",null,"Using layer blocks:",-1),s("div",{class:"language-css line-numbers-mode","data-highlighter":"prismjs","data-ext":"css"},[s("pre",null,[s("code",{class:"language-css"},[s("span",{class:"line"},[s("span",{class:"token atrule"},[s("span",{class:"token rule"},"@layer"),a(" reset")]),a(),s("span",{class:"token punctuation"},"{")]),a(`
`),s("span",{class:"line"},[a("  "),s("span",{class:"token selector"},"*"),a(),s("span",{class:"token punctuation"},"{")]),a(`
`),s("span",{class:"line"},[a("    "),s("span",{class:"token property"},"margin"),s("span",{class:"token punctuation"},":"),a(" 0"),s("span",{class:"token punctuation"},";")]),a(`
`),s("span",{class:"line"},[a("    "),s("span",{class:"token property"},"padding"),s("span",{class:"token punctuation"},":"),a(" 0"),s("span",{class:"token punctuation"},";")]),a(`
`),s("span",{class:"line"},[a("  "),s("span",{class:"token punctuation"},"}")]),a(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),a(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1)])),_:1}),e[46]||(e[46]=r(`<p>Layers can also be declared without imports or layer blocks, by instead using an identifier (name) that can be referenced later in the same layer-scope (stylesheet).</p><p>If a declared layer name matches that of an existing layer defined in the same layer scope, the nested style rules in the block will be appended to the existing layer:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token atrule"><span class="token rule">@layer</span> reset<span class="token punctuation">;</span></span></span>
<span class="line"><span class="token atrule"><span class="token rule">@layer</span> typography<span class="token punctuation">;</span></span></span>
<span class="line"><span class="token atrule"><span class="token rule">@layer</span> theme<span class="token punctuation">;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token atrule"><span class="token rule">@layer</span> reset</span> <span class="token punctuation">{</span> <span class="token comment">/* Appends to the reset layer */</span></span>
<span class="line">   <span class="token selector">*</span> <span class="token punctuation">{</span></span>
<span class="line">     <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="line">     <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token atrule"><span class="token rule">@layer</span> typography</span> <span class="token punctuation">{</span> <span class="token comment">/*Appends to the typography layer*/</span></span>
<span class="line">   ...</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token atrule"><span class="token rule">@layer</span> theme</span> <span class="token punctuation">{</span> <span class="token comment">/*Appends to the theme layer*/</span></span>
<span class="line">   ...</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token atrule"><span class="token rule">@layer</span> utilities</span> <span class="token punctuation">{</span> <span class="token comment">/*Creates a new layer*/</span></span>
<span class="line">  ...</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If a layer block’s identifier doesn’t match an existing layer, a new layer will be created.</p><p>Layers defined without an identifier are known as anonymous layers. They can’t be referenced as they do not have a name; therefore, extra style rules cannot be appended to this type of layer.</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token comment">/* Anonymous layer block */</span></span>
<span class="line"><span class="token atrule"><span class="token rule">@layer</span></span> <span class="token punctuation">{</span></span>
<span class="line">  …</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/* Anonymous @import layer */</span></span>
<span class="line"><span class="token atrule"><span class="token rule">@import</span><span class="token punctuation">(</span>reset.css<span class="token punctuation">)</span> layer<span class="token punctuation">;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="layer-order" tabindex="-1"><a class="header-anchor" href="#layer-order"><span>Layer order</span></a></h3><p>A layer’s priority is based on when it first appears in the stylesheet. For example, the layer order of the snippet we examined earlier would be as follows:</p><ol><li><code>reset</code></li><li><code>typography</code></li><li><code>theme</code></li></ol><p>When referencing the identifier of a layer later in the stylesheet, the order in which the layer appears does not matter. It is the initial appearance that determines a layer’s priority.</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token atrule"><span class="token rule">@layer</span> reset<span class="token punctuation">;</span></span> <span class="token comment">/*first layer*/</span></span>
<span class="line"><span class="token atrule"><span class="token rule">@layer</span> typography<span class="token punctuation">;</span></span> <span class="token comment">/*second layer*/</span></span>
<span class="line"><span class="token atrule"><span class="token rule">@layer</span> theme<span class="token punctuation">;</span></span> <span class="token comment">/*third layer*/</span></span>
<span class="line"></span>
<span class="line"><span class="token atrule"><span class="token rule">@layer</span> theme</span> <span class="token punctuation">{</span> <span class="token comment">/* Appends to third layer */</span></span>
<span class="line">  …</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token atrule"><span class="token rule">@layer</span> reset</span> <span class="token punctuation">{</span> <span class="token comment">/* Appends to first layer */</span></span>
<span class="line">  …</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token atrule"><span class="token rule">@layer</span> typography</span> <span class="token punctuation">{</span> <span class="token comment">/* Appends to second layer */</span></span>
<span class="line">  …</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As shown in this snippet, the layer order remains the same regardless of the order and location of which layers are referenced in the stylesheet.</p><p>A layer stack can also be created with a shorthand syntax that accepts multiple identifiers provided in a single line comma-separated rule:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token atrule"><span class="token rule">@layer</span> reset<span class="token punctuation">,</span> typography<span class="token punctuation">,</span> theme<span class="token punctuation">;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>This method has the same behavior as a multiple lines declaration order.</p><h3 id="layer-specificity" tabindex="-1"><a class="header-anchor" href="#layer-specificity"><span>Layer specificity</span></a></h3><p>When evaluating the layers criterion, the cascade will always pick the winning rule from a selector associated with a cascade layer that comes later in the layer order. This is because cascade layers are prioritized by order of appearance, just like traditional CSS declarations.</p><p>Let’s bring back the quintessential layer stack:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token atrule"><span class="token rule">@layer</span> reset<span class="token punctuation">,</span> typography<span class="token punctuation">,</span> theme<span class="token punctuation">;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>In this stack, style rules defined in the <code>typography</code> layer will take priority over the <code>reset</code> layer, while the <code>theme</code> layer styles will take priority over all the previous layers.</p><p>In other words, a simple later-declared layer will always take precedence and override an earlier-declared layer, even if the earlier-declared layer has a greater cascade weight. Here’s a practical example:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token comment">/*&lt;h2 class=”title” Id=”title”&gt;…&lt;/h2&gt;*/</span></span>
<span class="line"></span>
<span class="line"><span class="token atrule"><span class="token rule">@layer</span> typography</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token selector">h2 #title</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">color</span><span class="token punctuation">:</span> orange<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token atrule"><span class="token rule">@layer</span> headings</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token selector">.title</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">color</span><span class="token punctuation">:</span> #333<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Although the selector in the <code>typography</code> layer has a higher specificity than the selector in the <code>headings</code> layer, the latter still prevails because the layer it’s nested in is last in the layer order.</p><h3 id="unlayered-styles-specificity" tabindex="-1"><a class="header-anchor" href="#unlayered-styles-specificity"><span>Unlayered styles specificity</span></a></h3><p>Unlayered styles follow style rules outside of the cascade layers and take the highest priority over any layers in a stylesheet. As such, unlayered styles will always win out over styles nested within layers regardless of their specificity or order of appearance. This is because every unlayered style is automatically added to an implicit final layer, and therefore has the highest priority.</p><p>For example, consider this code:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token comment">/*&lt;p class=”subtitle”&gt;…&lt;/p&gt;*/</span></span>
<span class="line"></span>
<span class="line"><span class="token atrule"><span class="token rule">@layer</span> article</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token selector">.subtitle</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">Color</span><span class="token punctuation">:</span> red <span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token selector">p</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">color</span><span class="token punctuation">:</span> #333 <span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Even though the rule in the <code>article</code> layer has a more specific selector, it will be overridden by the less specific <code>P</code> selector. As a result, the paragraph element’s content will be gray instead of red.</p><p>The order in which the unlayered styles appear doesn’t affect their priority over layers. If the <code>P</code> selector in the example above is defined or placed before the <code>article</code> layer, the paragraph will still be gray.</p><p>Now, let’s add unlayered styles to the layer-scope of the model layer stack:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token atrule"><span class="token rule">@layer</span> reset<span class="token punctuation">,</span> typography<span class="token punctuation">,</span> theme<span class="token punctuation">;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token selector">h2</span> <span class="token punctuation">{</span> <span class="token comment">/*unlayered styles*/</span></span>
<span class="line">  …</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token atrule"><span class="token rule">@layer</span> reset</span> <span class="token punctuation">{</span></span>
<span class="line">  …</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token atrule"><span class="token rule">@layer</span> typography</span> <span class="token punctuation">{</span></span>
<span class="line">  …</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token atrule"><span class="token rule">@layer</span> theme</span> <span class="token punctuation">{</span></span>
<span class="line">  …</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The new layer order will be as follows:</p><ol><li><code>reset</code></li><li><code>typography</code></li><li><code>theme</code></li><li><code>unlayered styles</code></li></ol><p>However, this layer priority will be reversed in instances involving an <code>!important</code> flag. Competing styles with an <code>!important</code> flag in an earlier-defined layer will always be prioritized over styles with <code>!important</code> flags in a later-defined layer, as well as over unlayered styles.</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token atrule"><span class="token rule">@layer</span> reset</span> <span class="token punctuation">{</span> <span class="token comment">/*1st layer*/</span></span>
<span class="line">  <span class="token selector">h2</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">color</span><span class="token punctuation">:</span> black <span class="token important">!important</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token atrule"><span class="token rule">@layer</span> typography</span> <span class="token punctuation">{</span> <span class="token comment">/*2nd layer*/</span></span>
<span class="line">  <span class="token selector">h2</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">color</span><span class="token punctuation">:</span> #333 <span class="token important">!important</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token atrule"><span class="token rule">@layer</span> theme</span> <span class="token punctuation">{</span> <span class="token comment">/*3rd layer*/</span></span>
<span class="line">  <span class="token selector">h2</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">color</span><span class="token punctuation">:</span> pink <span class="token important">!important</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token selector">h2</span> <span class="token punctuation">{</span> <span class="token comment">/*1st unlayered style*/</span></span>
<span class="line">  <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token selector">h2</span> <span class="token punctuation">{</span> <span class="token comment">/*2nd unlayered style*/</span></span>
<span class="line">  <span class="token property">color</span><span class="token punctuation">:</span> red <span class="token important">!important</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The order of specificity in this example will be as follows:</p><ol><li><code>!mportant</code> <code>reset</code></li><li><code>!mportant</code> <code>typography</code></li><li><code>!mportant</code> <code>theme</code></li><li><code>!mportant</code> <code>unlayered style</code></li><li><code>unlayered style</code></li></ol><h3 id="nesting-layers" tabindex="-1"><a class="header-anchor" href="#nesting-layers"><span>Nesting layers</span></a></h3><p>Layer blocks can also be nested within other layers:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token atrule"><span class="token rule">@layer</span> theme</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token atrule"><span class="token rule">@layer</span> dark</span> <span class="token punctuation">{</span></span>
<span class="line">    ...</span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token atrule"><span class="token rule">@layer</span> light</span> <span class="token punctuation">{</span></span>
<span class="line">    ...</span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When a layer is nested within another layer, its identifier will become a combination of the parent’s identifier and the child’s identifier separated by a period.</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token atrule"><span class="token rule">@layer</span> typography</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token atrule"><span class="token rule">@layer</span> headings</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token atrule"><span class="token rule">@layer</span> typography.headings</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token selector">h2</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In this example, we append extra styles to the <code>headings</code> layer nested within the <code>typography</code> layer, using the <code>typography.headings</code> layer block.</p><p>Alternatively, nested layers can be defined upfront in a layer stack:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token atrule"><span class="token rule">@layer</span> theme</span><span class="token punctuation">{</span></span>
<span class="line">   <span class="token atrule"><span class="token rule">@layer</span> theme.dark theme.light<span class="token punctuation">;</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Nested layers are scoped within the nesting layer. As such, layers outside the parent layer can’t be referenced by a nested layer. Instead, a new layer with the same identifier will be created.</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token atrule"><span class="token rule">@layer</span> reset theme typography<span class="token punctuation">;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token atrule"><span class="token rule">@layer</span> typography</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token atrule"><span class="token rule">@layer</span> theme</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token selector">.dark</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">background-color</span><span class="token punctuation">:</span> #333<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>For example, in this code we tried to append extra styles to the <code>theme</code> layer with a nested <code>theme</code> layer block inside the <code>typography</code> layer. But, since a nested layer can only reference layers within its scope, a new <code>theme</code> layer was created instead.</p><p>The specificity behavior within layers is the same as the layer order specificity. Layers that come later in a nested layer stack will have the highest priority.</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token atrule"><span class="token rule">@layer</span> theme</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token selector">h2</span> <span class="token punctuation">{</span> <span class="token comment">/*nested unlayered style*/</span></span>
<span class="line">    <span class="token property">color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token atrule"><span class="token rule">@layer</span> dark</span> <span class="token punctuation">{</span> <span class="token comment">/*nested layer*/</span></span>
<span class="line">    <span class="token selector">h2</span> <span class="token punctuation">{</span></span>
<span class="line">       <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In this example, the <code>h2</code> selector will have a higher priority than the <code>theme.dark</code> layer selector, because styles outside a layer will always come last in the layer order.</p><h3 id="cascade-algorithm-positioning" tabindex="-1"><a class="header-anchor" href="#cascade-algorithm-positioning"><span>Cascade algorithm positioning</span></a></h3><p>Once cascade layers is fully supported, it will be positioned right before the specificity and order of appearance criteria in the CSS cascade algorithm, giving it higher precedence over these criteria.</p><ul><li>Origin and importance</li><li>Encapsulation context</li><li>Style attributes</li><li>Cascade layers</li><li>Specificity</li><li>Order of appearance</li></ul><p>In cases where the cascade evaluates competing rules in the layers criterion, and the winning rule is determined in the layer order, the algorithm won’t consider the specificity or order of appearance.</p><hr><h2 id="polyfill" tabindex="-1"><a class="header-anchor" href="#polyfill"><span>Polyfill</span></a></h2><p>New and experimental CSS features can generally be adopted or progressively integrated using polyfills or CSS properties like <code>@support</code>.</p><p>Unfortunately, at the time of this writing, there aren’t any polyfills available for cascade layers, and the <code>@support</code> property doesn’t currently work with this feature.</p><p>However, you can start experimenting and getting familiar with cascade layers using one of several browsers that currently support the feature.</p><hr><h2 id="browser-support" tabindex="-1"><a class="header-anchor" href="#browser-support"><span>Browser support</span></a></h2><p>The cascade layer feature is currently experimentally supported by default in these browsers:</p><ul><li>Chrome 99+</li><li>Firefox Nightly 97+</li><li>Safari Technology Preview 137+</li></ul><figure><img src="`+x+'" alt="CSS Cascade Layers Browser Support" tabindex="0" loading="lazy"><figcaption>CSS Cascade Layers Browser Support</figcaption></figure><hr><h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="#conclusion"><span>Conclusion</span></a></h2><p>In this article, we introduced cascade layers and explored layer order, layer specificity, unlayered styles, and nested layers. We also reviewed the cascade algorithm positioning and the current availability of polyfill and browser support for cascade layers.</p><p>With cascade layers, there’s no need to spend precious time wrestling with the specificity or order of appearance of CSS layers. Cascade layers provides more control over the cascade and curb intricacies, such as regressions and styles collision, in codebases.</p>',69)),s("p",null,[e[34]||(e[34]=a("Read more about cascade layers in the ")),s("a",R,[n(c,{icon:"iconfont icon-w3c"}),e[33]||(e[33]=a("official documentation"))]),e[35]||(e[35]=a("."))]),f(" TODO: add ARTICLE CARD "),n(d,u(m({title:"Control CSS cascade with cascade layers",desc:"Use the CSS cascade layers @layer at-rule to address conflicts between selector specificity and order of appearance.",link:"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/control-css-cascade-with-cascade-layers.html",logo:"/assets/image/blog.logrocket.com/favicon.png",background:"rgba(112,76,182,0.2)"})),null,16)])}const E=b(T,[["render",N]]),D=JSON.parse('{"path":"/blog.logrocket.com/control-css-cascade-with-cascade-layers.html","title":"Control CSS cascade with cascade layers","lang":"en-US","frontmatter":{"lang":"en-US","title":"Control CSS cascade with cascade layers","description":"Article(s) > Control CSS cascade with cascade layers","icon":"fa-brands fa-css3-alt","category":["CSS","Article(s)"],"tag":["blog","blog.logrocket.com","css"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Control CSS cascade with cascade layers\\",\\"image\\":[\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/control-css-cascade-with-cascade-layers/banner.webp\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/control-css-cascade-with-cascade-layers/css-cascade-layers-browser-support.webp\\"],\\"datePublished\\":\\"2022-02-16T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"David Omotayo\\",\\"url\\":\\"https://blog.logrocket.com/author/davidomotayo/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/control-css-cascade-with-cascade-layers.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Control CSS cascade with cascade layers"}],["meta",{"property":"og:description","content":"Article(s) > Control CSS cascade with cascade layers"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/control-css-cascade-with-cascade-layers/banner.webp"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/control-css-cascade-with-cascade-layers/banner.webp"}],["meta",{"name":"twitter:image:alt","content":"Control CSS cascade with cascade layers"}],["meta",{"property":"article:author","content":"David Omotayo"}],["meta",{"property":"article:tag","content":"css"}],["meta",{"property":"article:tag","content":"blog.logrocket.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2022-02-16T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Control CSS cascade with cascade layers"},{"property":"og:description","content":"Control CSS cascade with cascade layers"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/control-css-cascade-with-cascade-layers.html"}]],"prev":"/programming/css/articles/README.md","date":"2022-02-16T00:00:00.000Z","isOriginal":false,"author":[{"name":"David Omotayo","url":"https://blog.logrocket.com/author/davidomotayo/"}],"cover":"/assets/image/blog.logrocket.com/control-css-cascade-with-cascade-layers/banner.webp"},"git":{},"readingTime":{"minutes":7.83,"words":2349},"filePathRelative":"blog.logrocket.com/control-css-cascade-with-cascade-layers.md","copyright":{"author":"David Omotayo"}}');export{E as comp,D as data};
