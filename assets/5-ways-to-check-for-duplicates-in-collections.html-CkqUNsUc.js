import{_ as u}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as m,d as s,f as e,b as h,t as d,n as k,g,w as o,e as a,r as l,o as f}from"./app-BVguHYKu.js";const v={},w={id:"frontmatter-title-관련",tabindex:"-1"},y={class:"header-anchor",href:"#frontmatter-title-관련"},b={class:"table-of-contents"},x={href:"https://github.com/m-jovanovic/find-duplicates-benchmark",target:"_blank",rel:"noopener noreferrer"};function C(c,n){const i=l("VPCard"),t=l("router-link"),p=l("SiteInfo"),r=l("VPIcon");return f(),m("div",null,[s("h1",w,[s("a",y,[s("span",null,d(c.$frontmatter.title)+" 관련",1)])]),e(i,k(g({title:"C# > Article(s)",desc:"Article(s)",link:"/programming/cs/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",b,[s("ul",null,[s("li",null,[e(t,{to:"#check-for-duplicates-with-foreach-loop"},{default:o(()=>n[0]||(n[0]=[a("Check For Duplicates With ForEach Loop")])),_:1,__:[0]})]),s("li",null,[e(t,{to:"#check-for-duplicates-with-linq-any"},{default:o(()=>n[1]||(n[1]=[a("Check For Duplicates With LINQ Any")])),_:1,__:[1]})]),s("li",null,[e(t,{to:"#check-for-duplicates-with-linq-all"},{default:o(()=>n[2]||(n[2]=[a("Check For Duplicates With LINQ All")])),_:1,__:[2]})]),s("li",null,[e(t,{to:"#check-for-duplicates-with-linq-distinct"},{default:o(()=>n[3]||(n[3]=[a("Check For Duplicates With LINQ Distinct")])),_:1,__:[3]})]),s("li",null,[e(t,{to:"#check-for-duplicates-with-linq-tohashset"},{default:o(()=>n[4]||(n[4]=[a("Check For Duplicates With LINQ ToHashSet")])),_:1,__:[4]})]),s("li",null,[e(t,{to:"#benchmark-results"},{default:o(()=>n[5]||(n[5]=[a("Benchmark Results")])),_:1,__:[5]})])])]),n[11]||(n[11]=s("hr",null,null,-1)),e(p,{name:"5 Ways To Check For Duplicates In Collections, With Benchmarks",desc:"In this week's newsletter, we will take a look at five different ways to check if a collection contains duplicates. I'm going to explain the idea behind each algorithm, discuss the algorithm complexity (Big O Notation), and at the end, we'll look at some benchmark results.",url:"https://milanjovanovic.tech/blog/5-ways-to-check-for-duplicates-in-collections/",logo:"https://milanjovanovic.tech/profile_favicon.png",preview:"https://milanjovanovic.tech/blog-covers/mnw_010.png"}),n[12]||(n[12]=h(`<p>In this week&#39;s newsletter, we will take a look at five different ways to check if a collection <strong>contains duplicates</strong>.</p><p>I&#39;m going to explain the idea behind each <strong>algorithm</strong>, discuss the <strong>algorithm complexity</strong> (Big O Notation), and at the end, we&#39;ll look at some <strong>benchmark results</strong>.</p><p>The five approaches for finding a duplicate will use the:</p><ul><li><code>foreach</code> loop</li><li>LINQ <code>Any</code> method</li><li>LINQ <code>All</code> method</li><li>LINQ <code>Distinct</code> method</li><li>LINQ <code>ToHashSet</code> method</li></ul><p>Let&#39;s see how we can implement each approach!</p><hr><h2 id="check-for-duplicates-with-foreach-loop" tabindex="-1"><a class="header-anchor" href="#check-for-duplicates-with-foreach-loop"><span>Check For Duplicates With ForEach Loop</span></a></h2><p>The first implementation will use the <code>foreach</code> loop and the <code>HashSet</code> data structure.</p><p>Here&#39;s the code for the <code>ContainsDuplicates</code> method:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token generic-method"><span class="token function">ContainsDuplicates</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> enumerable<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">   <span class="token class-name">HashSet<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token keyword">set</span> <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">   <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> element <span class="token keyword">in</span> enumerable<span class="token punctuation">)</span></span>
<span class="line">   <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">set</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">{</span></span>
<span class="line">         <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">   <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The idea is simple:</p><ul><li>Loop through the collection</li><li>Add each element to the <code>HashSet</code></li><li>When <code>HashSet.Add</code> returns false we found a duplicate</li><li>If we loop through the entire collection there are no duplicates</li></ul><p>In terms of <strong>algorithm complexity</strong>, this would be <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mrow><mo fence="true">(</mo><mi>n</mi><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">O\\left(n\\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">n</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span> or linear complexity. sThis is because there&#39;s only one iteration through the collection.</p><p>Adding an element to a <code>HashSet</code> is a constant operation - <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mrow><mo fence="true">(</mo><mn>1</mn><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">O\\left(1\\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord">1</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span>. So it doesn&#39;t affect the overall complexity.</p><hr><h2 id="check-for-duplicates-with-linq-any" tabindex="-1"><a class="header-anchor" href="#check-for-duplicates-with-linq-any"><span>Check For Duplicates With LINQ Any</span></a></h2><p>We&#39;ll combine the idea from the previous implementation of using the <code>HashSet</code> and pair it with the LINQ <code>Any</code> method to iterate over the collection.</p><p>Here&#39;s the implementation for the <code>ContainsDuplicates</code> method:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token generic-method"><span class="token function">ContainsDuplicates</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> enumerable<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">   <span class="token class-name">HashSet<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token keyword">set</span> <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">   <span class="token keyword">return</span> enumerable<span class="token punctuation">.</span><span class="token function">Any</span><span class="token punctuation">(</span>element <span class="token operator">=&gt;</span> <span class="token operator">!</span><span class="token keyword">set</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can see this implementation is significantly shorter. But it works the same as the one with the <code>foreach</code> loop.</p><p>If any element in the collection satisfies the specified expression, <code>Any</code> will <em>short-circuit</em> and return <code>true</code>. Otherwise, it will iterate over the entire collection and return <code>false</code>.</p><p>We&#39;re still looking at linear complexity here, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mrow><mo fence="true">(</mo><mi>n</mi><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">O\\left(n\\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">n</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span>.</p><hr><h2 id="check-for-duplicates-with-linq-all" tabindex="-1"><a class="header-anchor" href="#check-for-duplicates-with-linq-all"><span>Check For Duplicates With LINQ All</span></a></h2><p>For our third implementation, we will use the opposite of the LINQ <code>Any</code> method - the LINQ <code>All</code> method.</p><p>Here&#39;s the implementation with LINQ <code>All</code>:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token generic-method"><span class="token function">ContainsDuplicates</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> enumerable<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">   <span class="token class-name">HashSet<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token keyword">set</span> <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">   <span class="token keyword">return</span> <span class="token operator">!</span>enumerable<span class="token punctuation">.</span><span class="token function">All</span><span class="token punctuation">(</span><span class="token keyword">set</span><span class="token punctuation">.</span>Add<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The idea here is a little different than in the previous implementation.</p><p><code>All</code> will return <code>true</code> if all elements in a collection satisfy the specified expression.</p><p>If at least one element doesn&#39;t satisfy the condition - in our case when a <strong>duplicate</strong> is found - it will <em>short-circuit</em> and return <code>false</code>.</p><p>This is still linear complexity, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mrow><mo fence="true">(</mo><mi>n</mi><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">O\\left(n\\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">n</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span>.</p><hr><h2 id="check-for-duplicates-with-linq-distinct" tabindex="-1"><a class="header-anchor" href="#check-for-duplicates-with-linq-distinct"><span>Check For Duplicates With LINQ Distinct</span></a></h2><p>So far, we&#39;ve seen a few implementations using the <code>HashSet</code> data structure. Now let&#39;s consider a different approach.</p><p>We can use the LINQ <code>Distinct</code> method to check for duplicates.</p><p>Here&#39;s the code for the <code>ContainsDuplicates</code> method:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token generic-method"><span class="token function">ContainsDuplicates</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> enumerable<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">return</span> enumerable<span class="token punctuation">.</span><span class="token function">Distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> enumerable<span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The idea is first find the <code>Distinct</code> elements and <code>Count</code> them, and then compare that to the number of all elements.</p><p>If the number of distinct elements is not equal to the number of all elements, we have a <strong>duplicate</strong> value.</p><p>In terms of <strong>algorithm complexity</strong>, this is still linear complexity.</p><p>But we have at least two iterations through the collection or three in the worst-case scenario.</p><p>We have one iteration for <code>Distinct</code> and one more iteration for the call to <code>Count</code> right after that. The last call to <code>Count</code> can return in constant time, if the collection is an <code>array</code> or <code>List</code>.</p><hr><h2 id="check-for-duplicates-with-linq-tohashset" tabindex="-1"><a class="header-anchor" href="#check-for-duplicates-with-linq-tohashset"><span>Check For Duplicates With LINQ ToHashSet</span></a></h2><p>For the last implementation we will use the LINQ <code>ToHashSet</code> method.</p><p>It takes a collection and creates a <code>HashSet</code> instance from it.</p><p>Here&#39;s what the <code>ContainsDuplicates</code> implementation looks like:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token generic-method"><span class="token function">ContainsDuplicates</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> enumerable<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">return</span> enumerable<span class="token punctuation">.</span><span class="token function">ToHashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Count <span class="token operator">!=</span> enumerable<span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We compare the number of elements in the <code>HashSet</code> to the number of elements in the collection.</p><p>If they are different, we have a <strong>duplicate</strong> value.</p><p>This is also linear complexity, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mrow><mo fence="true">(</mo><mi>n</mi><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">O\\left(n\\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">n</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span>.</p><hr><h2 id="benchmark-results" tabindex="-1"><a class="header-anchor" href="#benchmark-results"><span>Benchmark Results</span></a></h2><p>Now that we&#39;ve seen our implementations let&#39;s put them to the test.</p><p>I ran the benchmark for collections of varying sizes:</p><ul><li>100</li><li>1,000</li><li>10,000</li></ul><p>Each collection contains exactly one duplicate value located somewhere around the middle of the collection.</p><p>Here are the results:</p><figure><img src="https://www.milanjovanovic.tech/blogs/mnw_010/benchmark.png?imwidth=3840" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>The approach using the <code>foreach</code> loop comes out as the clear winner in terms of performance.</p><p>However, I would lean towards using the implementations with LINQ <code>Any</code> or <code>All</code> because of their simplicity.</p>`,61)),s("p",null,[n[9]||(n[9]=a("You can find the ")),s("a",x,[n[6]||(n[6]=a("source code for the benchmark (")),e(r,{icon:"iconfont icon-github"}),n[7]||(n[7]=s("code",null,"m-jovanovic/find-duplicates-benchmark",-1)),n[8]||(n[8]=a(")"))]),n[10]||(n[10]=a(" on my GitHub. Feel free to submit a PR with a faster implementation if you can think of one."))])])}const D=u(v,[["render",C]]),W=JSON.parse('{"path":"/milanjovanovic.tech/5-ways-to-check-for-duplicates-in-collections.html","title":"5 Ways To Check For Duplicates In Collections, With Benchmarks","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"5 Ways To Check For Duplicates In Collections, With Benchmarks","description":"Article(s) > 5 Ways To Check For Duplicates In Collections, With Benchmarks","icon":"iconfont icon-csharp","category":["C#","DotNet","Article(s)"],"tag":["blog","milanjovanovic.tech","cs","c#","csharp","dotnet"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"5 Ways To Check For Duplicates In Collections, With Benchmarks\\",\\"image\\":[\\"https://www.milanjovanovic.tech/blogs/mnw_010/benchmark.png?imwidth=3840\\"],\\"datePublished\\":\\"2022-11-05T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Milan Jovanović\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/5-ways-to-check-for-duplicates-in-collections.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"5 Ways To Check For Duplicates In Collections, With Benchmarks"}],["meta",{"property":"og:description","content":"Article(s) > 5 Ways To Check For Duplicates In Collections, With Benchmarks"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://milanjovanovic.tech/blog-covers/mnw_010.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://milanjovanovic.tech/blog-covers/mnw_010.png"}],["meta",{"name":"twitter:image:alt","content":"5 Ways To Check For Duplicates In Collections, With Benchmarks"}],["meta",{"property":"article:author","content":"Milan Jovanović"}],["meta",{"property":"article:tag","content":"dotnet"}],["meta",{"property":"article:tag","content":"csharp"}],["meta",{"property":"article:tag","content":"c#"}],["meta",{"property":"article:tag","content":"cs"}],["meta",{"property":"article:tag","content":"milanjovanovic.tech"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2022-11-05T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > 5 Ways To Check For Duplicates In Collections, With Benchmarks"},{"property":"og:description","content":"5 Ways To Check For Duplicates In Collections, With Benchmarks"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/5-ways-to-check-for-duplicates-in-collections.html"}]],"prev":"/programming/cs/articles/README.md","date":"2022-11-05T00:00:00.000Z","isOriginal":false,"author":"Milan Jovanović","cover":"https://milanjovanovic.tech/blog-covers/mnw_010.png"},"git":{},"readingTime":{"minutes":3.42,"words":1026},"filePathRelative":"milanjovanovic.tech/5-ways-to-check-for-duplicates-in-collections.md","copyright":{"author":"Milan Jovanović"}}');export{D as comp,W as data};
