import{_ as v}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as g,d as s,f as t,b as r,a as u,t as b,n as i,g as l,e as a,w as d,r as p,o as h}from"./app-BVguHYKu.js";const y={},w={id:"frontmatter-title-관련",tabindex:"-1"},f={class:"header-anchor",href:"#frontmatter-title-관련"},I={href:"https://neon.tech",target:"_blank",rel:"noopener noreferrer"},C={href:"https://supabase.com/",target:"_blank",rel:"noopener noreferrer"},P={href:"https://vercel.com",target:"_blank",rel:"noopener noreferrer"},D={class:"hint-container info"},R={href:"https://event-driven-io.github.io/Pongo/getting-started.html",target:"_blank",rel:"noopener noreferrer"};function S(k,n){const o=p("VPCard"),m=p("SiteInfo"),e=p("VPIcon"),c=p("RouteLink");return h(),g("div",null,[s("h1",w,[s("a",f,[s("span",null,b(k.$frontmatter.title)+" 관련",1)])]),t(o,i(l({title:"TypeScript > Article(s)",desc:"Article(s)",link:"/programming/ts/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),t(o,i(l({title:"Postgres > Article(s)",desc:"Article(s)",link:"/data-science/postgres/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),n[20]||(n[20]=s("nav",{class:"table-of-contents"},[s("ul")],-1)),n[21]||(n[21]=s("hr",null,null,-1)),t(m,{name:"Bootstrapping CRUD with Pongo",desc:"Event-Driven by Oskar Dudycz",url:"https://event-driven.io/en/crud_with_pongo",logo:"/assets/image/event-driven.io/favicon.jfif",preview:"https://event-driven.io/static/460a24d0a3770557e48cb10508656e1b/2a4de/2024-10-27-cover.png"}),n[22]||(n[22]=r('<p><strong>The leitmotif of this blog is the event-driven approach. I truly believe that it’s a way to keep our applications closer to business.</strong> By doing so, we can better reflect the business process in our system design and code. And that’s great, as it brings multiple benefits: easier evolution, resiliency, and better managed and traced workflows.</p><p>Still, sometimes you don’t need all of that.</p><p><strong>Sometimes you just need a <em>bag for data</em>, or the <em>CRUD</em> as most of us prefer to call it.</strong></p><p><strong>CRUD comes from the common set of operations we perform on our data: Create, Read, Update, and Delete. It’s an implementation style suited for Content Management Systems.</strong> The responsibility is to store and manage data. Of course, we wrap that with basic validation, consistency rules, and authorisation. We run simple business logic or enrich data with information available only on the backend. You just put some data and retrieve it. What you put is what you get.</p><p>In CRUD, you don’t have specific behaviour. What’s more, from the system side, this data doesn’t have much business context. That’s why implementations are generic. It only has meaning for the user who puts this data inside and retrieves it. The user interprets it upon reading and makes decisions outside of the system based on it.</p><p><strong>CRUD can also be a valid approach for proof of concepts.</strong> For instance, if we have a product idea, we bootstrap a basic application without an extensive set of business workflows, just basic data ingestion and visualisation, to ensure that there’s potential in this idea.</p><p>In general, there is nothing to be ashamed of when doing CRUD. It’s a valid implementation style but with limited use cases. If we choose it wisely, then it’s all fine.</p><p>We need also to remember that we should not set this decision in stone.</p><p>That’s why I like to match CRUD with <a href="https://event-driven.io/en/cqrs_facts_and_myths_explained/" target="_blank" rel="noopener noreferrer"><strong>CQRS</strong></a>. How come? Aren’t they contradicting? Not in my world!</p>',9)),u(" TODO: /event-driven.io/cqrs-facts-and-myths-explained.md "),n[23]||(n[23]=s("p",null,[s("strong",null,"CQRS stands for Command Query Responsibility Segregation."),a(" It’s a structural pattern. It tells us to slice our business application by the behaviour and then segregate them into two responsibilities:")],-1)),n[24]||(n[24]=s("ul",null,[s("li",null,"Command handling - business logic that can change state but should not be returning business data,"),s("li",null,"Query handling - returns data but does not change the state (_“Asking a question should not change the answer”).")],-1)),n[25]||(n[25]=s("p",null,"If those rules are fulfilled, our internal implementation can be CRUD, and we can apply CQRS principles. That’s essential for proof of concepts. We start with the simple, generic implementation and evolve it once new business requirements appear. As we already segregated our business functionality, we can adjust precisely the places that need to be changed. CRUD doesn’t have to be an unmaintainable amalgamate!",-1)),n[26]||(n[26]=s("p",null,"Still, no matter which way you choose, I believe that Pongo is a decent tool for CRUDs. My way or highway? Nah, I won’t tell you how to live!",-1)),n[27]||(n[27]=s("p",null,[s("strong",null,"Why Pongo?")],-1)),s("ul",null,[n[7]||(n[7]=s("li",null,"It’s a Node.js tool, so it’s a lightweight and accessible environment with a big, vibrant community. You should not have issues with potential hiring,",-1)),s("li",null,[n[3]||(n[3]=a("It runs on PostgreSQL, so it’s easy operational-wise, and it’s easy to set up your hosting in cloud providers, on-premise or services like ")),s("a",I,[t(e,{icon:"fas fa-globe"}),n[0]||(n[0]=a("Neon"))]),n[4]||(n[4]=a(", ")),s("a",C,[t(e,{icon:"iconfont icon-supabase"}),n[1]||(n[1]=a("Supabase"))]),n[5]||(n[5]=a(", ")),s("a",P,[t(e,{icon:"fas fa-globe"}),n[2]||(n[2]=a("Vercel"))]),n[6]||(n[6]=a(", etc."))]),n[8]||(n[8]=s("li",null,"MongoDB-like API is easy to learn and is well-known to many of us.",-1)),n[9]||(n[9]=s("li",null,"The document approach and denormalised data help make it easier to set up your data. It’s well suited for the CRUD model, where you want to store and retrieve data in the same form as you put it,",-1)),n[10]||(n[10]=s("li",null,"Pongo will get you covered with built-in migrations, so there is no need to care a lot about the database schema.",-1))]),n[28]||(n[28]=s("p",null,"All of that makes a good combination for fast bootstrapping.",-1)),s("div",D,[n[18]||(n[18]=s("p",{class:"hint-container-title"},"Info",-1)),n[19]||(n[19]=s("p",null,"For basics, you can check previous articles:",-1)),s("ul",null,[n[13]||(n[13]=s("li",null,[s("a",{href:"https://event-driven.io/en/introducting_pongo",target:"_blank",rel:"noopener noreferrer"},"Pongo - Mongo but on Postgres and with strong consistency benefits")],-1)),n[14]||(n[14]=s("li",null,[s("a",{href:"https://event-driven.io/en/pongo_behind_the_scenes/",target:"_blank",rel:"noopener noreferrer"},"Pongo behind the scenes")],-1)),s("li",null,[t(c,{to:"/event-driven.io/pongo-strongly-typed-client.html"},{default:d(()=>n[11]||(n[11]=[s("strong",null,"Pongo gets strongly-typed client, migrations, and command line tooling",-1)])),_:1,__:[11]})]),s("li",null,[t(c,{to:"/event-driven.io/sql-support-in-pongo.html"},{default:d(()=>n[12]||(n[12]=[s("strong",null,"Running a regular SQL on Pongo documents",-1)])),_:1,__:[12]})])]),s("p",null,[n[16]||(n[16]=a("And ")),s("a",R,[t(e,{icon:"fas fa-globe"}),n[15]||(n[15]=a("documentation"))]),n[17]||(n[17]=a("."))])]),n[29]||(n[29]=r(`<p>So pardon me, I won’t repeat myself, especially since you might have read them already. Let me show you some special sauce: Pongo command handling.</p><p><strong>The typical flow in CRUD for updating records looks as follows:</strong></p><ol><li>Validate the incoming request.</li><li>Read the current state.</li><li>Do necessary validation based on it.</li><li>Run business logic.</li><li>Update the state.</li><li>Store it.</li></ol><p><strong>Similarly, for deletion:</strong></p><ol><li>Validate the incoming request.</li><li>You read the current state.</li><li>Do the necessary validation, checking if you can delete it.</li><li>Delete it.</li></ol><p><strong>For creation, it’s even simpler; you just:</strong></p><ol><li>Validate the incoming request.</li><li>Generate the new state based on request data.</li><li>Store it.</li></ol><p><strong>If we’d like to be sneaky, we could wrap it in a single flow that covers all of those cases.</strong></p><ol><li>Validate the incoming request.</li><li>Read the current state.</li><li>If a state exists and you want to update it, do the necessary validation based on it.</li><li>Run business logic. Returning new state, updated state, or null if you want to delete the state.</li><li>Depending on the result of the business logic:</li></ol><ul><li>Create if state didn’t exist and result state is not null,</li><li>Update if state existed and result state is different and not null,</li><li>Delete if state existed and result state is null,</li><li>Do nothing otherwise, and safely handle idempotency.</li></ul><p>And guess what? That’s precisely what Pongo can do for you.</p><p>Let’s use our favourite Shopping Cart example. Types for it could look as follows:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">interface</span> <span class="token class-name">ProductItem</span> <span class="token punctuation">{</span></span>
<span class="line">  productId<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  quantity<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">PricedProductItem</span> <span class="token operator">=</span> ProductItem <span class="token operator">&amp;</span> <span class="token punctuation">{</span></span>
<span class="line">  unitPrice<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">ShoppingCart</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  _id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  clientId<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  productItems<span class="token operator">:</span> PricedProductItem<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">  productItemsCount<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line">  totalAmount<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line">  status<span class="token operator">:</span> <span class="token string">&#39;Opened&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;Confirmed&#39;</span><span class="token punctuation">;</span></span>
<span class="line">  openedAt<span class="token operator">:</span> Date<span class="token punctuation">;</span></span>
<span class="line">  confirmedAt<span class="token operator">?</span><span class="token operator">:</span> Date <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span></span>
<span class="line">  cancelledAt<span class="token operator">?</span><span class="token operator">:</span> Date <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>We could define the basic set of operations:</strong></p><ul><li>adding a product item - that’s possible to not confirmed or non-existing shopping cart,</li><li>removing a product item - that’s possible when we have enough products already in the not confirmed shopping cart,</li><li>confirming non-empty shopping cart (we can confirm it twice, handling idempotence safely),</li><li>cancelling opened shopping cart (we can cancel it twice, handling idempotence safely).</li></ul><p>The business logic could look as follows:</p><p>Adding product item:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">const</span> addProductItem <span class="token operator">=</span> <span class="token punctuation">(</span></span>
<span class="line">  command<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    clientId<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">    shoppingCartId<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">    productItem<span class="token operator">:</span> PricedProductItem<span class="token punctuation">;</span></span>
<span class="line">    now<span class="token operator">:</span> Date<span class="token punctuation">;</span></span>
<span class="line"> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  state<span class="token operator">:</span> ShoppingCart <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token operator">:</span> ShoppingCart <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">&amp;&amp;</span> state<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token string">&#39;Confirmed&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;Shopping Cart already closed&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> shoppingCartId<span class="token punctuation">,</span> clientId<span class="token punctuation">,</span> productItem<span class="token punctuation">,</span> now <span class="token punctuation">}</span> <span class="token operator">=</span> command<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> shoppingCart<span class="token operator">:</span> ShoppingCart <span class="token operator">=</span> state <span class="token operator">??</span> <span class="token punctuation">{</span></span>
<span class="line">    _id<span class="token operator">:</span> shoppingCartId<span class="token punctuation">,</span></span>
<span class="line">    clientId<span class="token punctuation">,</span></span>
<span class="line">    openedAt<span class="token operator">:</span> now<span class="token punctuation">,</span></span>
<span class="line">    status<span class="token operator">:</span> <span class="token string">&#39;Opened&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    productItems<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    totalAmount<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">    productItemsCount<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> currentProductItem <span class="token operator">=</span> shoppingCart<span class="token punctuation">.</span>productItems<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token punctuation">(</span>pi<span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line">          pi<span class="token punctuation">.</span>productId <span class="token operator">===</span> productItem<span class="token punctuation">.</span>productId <span class="token operator">&amp;&amp;</span></span>
<span class="line">          pi<span class="token punctuation">.</span>unitPrice <span class="token operator">===</span> productItem<span class="token punctuation">.</span>unitPrice<span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>currentProductItem <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    currentProductItem<span class="token punctuation">.</span>quantity <span class="token operator">+=</span> productItem<span class="token punctuation">.</span>quantity<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    shoppingCart<span class="token punctuation">.</span>productItems<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>productItem<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  shoppingCart<span class="token punctuation">.</span>totalAmount <span class="token operator">+=</span> productItem<span class="token punctuation">.</span>unitPrice <span class="token operator">*</span> productItem<span class="token punctuation">.</span>quantity<span class="token punctuation">;</span></span>
<span class="line">  shoppingCart<span class="token punctuation">.</span>productItemsCount <span class="token operator">+=</span> productItem<span class="token punctuation">.</span>quantity<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> shoppingCart<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Removing product item:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">const</span> removeProductItem <span class="token operator">=</span> <span class="token punctuation">(</span></span>
<span class="line">  command<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    productItem<span class="token operator">:</span> PricedProductItem<span class="token punctuation">;</span></span>
<span class="line">    now<span class="token operator">:</span> Date<span class="token punctuation">;</span></span>
<span class="line"> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  state<span class="token operator">:</span> ShoppingCart <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token operator">:</span> ShoppingCart <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> state<span class="token punctuation">.</span>status <span class="token operator">!==</span> <span class="token string">&#39;Opened&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;Shopping Cart is not opened&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> productItem <span class="token punctuation">}</span> <span class="token operator">=</span> command<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> currentProductItem <span class="token operator">=</span> state<span class="token punctuation">.</span>productItems<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token punctuation">(</span>pi<span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line">          pi<span class="token punctuation">.</span>productId <span class="token operator">===</span> productItem<span class="token punctuation">.</span>productId <span class="token operator">&amp;&amp;</span></span>
<span class="line">          pi<span class="token punctuation">.</span>unitPrice <span class="token operator">===</span> productItem<span class="token punctuation">.</span>unitPrice<span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span></span>
<span class="line">    currentProductItem <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">||</span></span>
<span class="line">    currentProductItem<span class="token punctuation">.</span>quantity <span class="token operator">&lt;</span> productItem<span class="token punctuation">.</span>quantity</span>
<span class="line">  <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;Not enough products in shopping carts&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  state<span class="token punctuation">.</span>totalAmount <span class="token operator">-=</span> productItem<span class="token punctuation">.</span>unitPrice <span class="token operator">*</span> productItem<span class="token punctuation">.</span>quantity<span class="token punctuation">;</span></span>
<span class="line">  state<span class="token punctuation">.</span>productItemsCount <span class="token operator">-=</span> productItem<span class="token punctuation">.</span>quantity<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> state<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Confirming</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">const</span> confirm <span class="token operator">=</span> <span class="token punctuation">(</span></span>
<span class="line">  command<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    now<span class="token operator">:</span> Date<span class="token punctuation">;</span></span>
<span class="line"> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  state<span class="token operator">:</span> ShoppingCart <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token operator">:</span> ShoppingCart <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;Shopping Cart is not opened&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>state<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token string">&#39;Confirmed&#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span> state<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>state<span class="token punctuation">.</span>productItems<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;Shopping Cart is empty&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> now <span class="token punctuation">}</span> <span class="token operator">=</span> command<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  state<span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token string">&#39;Confirmed&#39;</span><span class="token punctuation">;</span></span>
<span class="line">  state<span class="token punctuation">.</span>confirmedAt <span class="token operator">=</span> now<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> state<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Cancelling:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">const</span> cancel <span class="token operator">=</span> <span class="token punctuation">(</span>state<span class="token operator">:</span> ShoppingCart <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span> ShoppingCart <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> state<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token string">&#39;Confirmed&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;Cannot cancel confirmed Shopping Cart&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then we can make a basic Pongo setup:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> pongoClient <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@event-driven-io/pongo&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> connectionString <span class="token operator">=</span></span>
<span class="line">  <span class="token string">&quot;postgresql://dbuser:secretpassword@database.server.com:3211/mydb&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> pongo <span class="token operator">=</span> <span class="token function">pongoClient</span><span class="token punctuation">(</span>connectionString<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> pongoDb <span class="token operator">=</span> pongo<span class="token punctuation">.</span><span class="token function">db</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> shoppingCarts <span class="token operator">=</span> pongoDb<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">collection</span><span class="token generic class-name"><span class="token operator">&lt;</span>ShoppingCart<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;shoppingCarts&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And plug our code into some request processing pipeline (e.g. web api):</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">type</span> <span class="token class-name">AddProductItemRequest</span> <span class="token operator">=</span> Request<span class="token operator">&lt;</span></span>
<span class="line">  <span class="token punctuation">{</span> clientId<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> shoppingCartId<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token builtin">unknown</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">{</span> productId<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> quantity<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span></span>
<span class="line">  <span class="token string">&#39;/clients/:clientId/shopping-carts/current/product-items&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function">on</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>request<span class="token operator">:</span> AddProductItemRequest<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> command <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">      clientId<span class="token operator">:</span> request<span class="token punctuation">.</span>params<span class="token punctuation">.</span>clientId<span class="token punctuation">,</span></span>
<span class="line">      productItem<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        productId<span class="token operator">:</span> request<span class="token punctuation">.</span>body<span class="token punctuation">.</span>productId<span class="token punctuation">,</span></span>
<span class="line">        quantity<span class="token operator">:</span> request<span class="token punctuation">.</span>body<span class="token punctuation">.</span>quantity<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        unitPrice<span class="token operator">:</span> request<span class="token punctuation">.</span>body<span class="token punctuation">.</span>unitPrice<span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> shoppingCarts<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line">      <span class="token function">addProductItem</span><span class="token punctuation">(</span>command<span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">Ok</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>document<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>For all other endpoints the code will look the accordingly. Isn’t that nice?</p><p><strong>I think that’s a simple and quick way to sping up a new CRUD system, or bootstrap a new Proof of Concepts.</strong></p><p>Thoughts?</p>`,31)),u(" TODO: add ARTICLE CARD "),t(o,i(l({title:"Bootstrapping CRUD with Pongo",desc:"Event-Driven by Oskar Dudycz",link:"https://chanhi2000.github.io/bookshelf/event-driven.io/crud_with_pongo.html",logo:"/assets/image/event-driven.io/favicon.jfif",background:"rgba(255,255,0,0.2)"})),null,16)])}const U=v(y,[["render",S]]),x=JSON.parse('{"path":"/event-driven.io/crud-with-pongo.html","title":"Bootstrapping CRUD with Pongo","lang":"en-US","frontmatter":{"lang":"en-US","title":"Bootstrapping CRUD with Pongo","description":"Article(s) > Bootstrapping CRUD with Pongo","icon":"iconfont icon-typescript","category":["TypeScript","PostgreSQL","Article(s)"],"tag":["blog","event-driven.io","ts","typescript","sql","db","postgres","postgresql"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Bootstrapping CRUD with Pongo\\",\\"image\\":[\\"https://event-driven.io/static/460a24d0a3770557e48cb10508656e1b/2a4de/2024-10-27-cover.png\\"],\\"datePublished\\":\\"2024-10-27T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Oskar Dudycz\\",\\"url\\":\\"https://event-driven.io/en/about/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/event-driven.io/crud-with-pongo.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Bootstrapping CRUD with Pongo"}],["meta",{"property":"og:description","content":"Article(s) > Bootstrapping CRUD with Pongo"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://event-driven.io/static/460a24d0a3770557e48cb10508656e1b/2a4de/2024-10-27-cover.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://event-driven.io/static/460a24d0a3770557e48cb10508656e1b/2a4de/2024-10-27-cover.png"}],["meta",{"name":"twitter:image:alt","content":"Bootstrapping CRUD with Pongo"}],["meta",{"property":"article:author","content":"Oskar Dudycz"}],["meta",{"property":"article:tag","content":"postgresql"}],["meta",{"property":"article:tag","content":"postgres"}],["meta",{"property":"article:tag","content":"db"}],["meta",{"property":"article:tag","content":"sql"}],["meta",{"property":"article:tag","content":"typescript"}],["meta",{"property":"article:tag","content":"ts"}],["meta",{"property":"article:tag","content":"event-driven.io"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2024-10-27T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Bootstrapping CRUD with Pongo"},{"property":"og:description","content":"Bootstrapping CRUD with Pongo"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/event-driven.io/crud-with-pongo.html"}]],"prev":"/programming/ts/articles/README.md","date":"2024-10-27T00:00:00.000Z","isOriginal":false,"author":[{"name":"Oskar Dudycz","url":"https://event-driven.io/en/about/"}],"cover":"https://event-driven.io/static/460a24d0a3770557e48cb10508656e1b/2a4de/2024-10-27-cover.png"},"git":{},"readingTime":{"minutes":5.49,"words":1646},"filePathRelative":"event-driven.io/crud-with-pongo.md","copyright":{"author":"Oskar Dudycz"}}');export{U as comp,x as data};
