import{_ as k}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as h,d as n,f as a,b as v,a as g,t as y,n as r,g as c,w as e,e as o,r as l,o as b}from"./app-BVguHYKu.js";const w="/bookshelf/assets/image/code-maze.com/csharp-properties/03-Read_only_prop_error.png",f="/bookshelf/assets/image/code-maze.com/csharp-properties/04-Write_only_prop_error.png",_="/bookshelf/assets/image/code-maze.com/csharp-properties/05-Private_set_accessor_error.png",x="/bookshelf/assets/image/code-maze.com/csharp-properties/06-Auto-property_suggestion.png",P={},z={id:"frontmatter-title-관련",tabindex:"-1"},C={class:"header-anchor",href:"#frontmatter-title-관련"},I={class:"table-of-contents"},N={class:"hint-container details"},S={class:"hint-container info"},A={href:"https://github.com/CodeMazeBlog/csharp-intermediate-module/tree/properties",target:"_blank",rel:"noopener noreferrer"};function T(u,s){const i=l("VPCard"),p=l("router-link"),d=l("SiteInfo"),t=l("RouteLink"),m=l("VPIcon");return b(),h("div",null,[n("h1",z,[n("a",C,[n("span",null,y(u.$frontmatter.title)+" 관련",1)])]),a(i,r(c({title:"C# > Article(s)",desc:"Article(s)",link:"/programming/cs/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),n("nav",I,[n("ul",null,[n("li",null,[a(p,{to:"#property-syntax"},{default:e(()=>s[0]||(s[0]=[o("Property Syntax")])),_:1,__:[0]})]),n("li",null,[a(p,{to:"#read-only-and-write-only-properties"},{default:e(()=>s[1]||(s[1]=[o("Read-Only and Write-Only Properties")])),_:1,__:[1]})]),n("li",null,[a(p,{to:"#property-accessibility"},{default:e(()=>s[2]||(s[2]=[o("Property Accessibility")])),_:1,__:[2]})]),n("li",null,[a(p,{to:"#auto-implemented-properties"},{default:e(()=>s[3]||(s[3]=[o("Auto-Implemented Properties")])),_:1,__:[3]})]),n("li",null,[a(p,{to:"#conclusion"},{default:e(()=>s[4]||(s[4]=[o("Conclusion")])),_:1,__:[4]})])])]),s[31]||(s[31]=n("hr",null,null,-1)),a(d,{name:"C# Intermediate - Properties",desc:"In this article you are going to learn about Properties in C#, how to use them, different property types and about property accessibility.",url:"https://code-maze.com/csharp-properties/",logo:"/assets/image/code-maze.com/favicon.png",preview:"/assets/image/code-maze.com/csharp-properties/banner.png"}),s[32]||(s[32]=n("p",null,"A property is a member that provides a flexible tool to read and write the value of a private field. We use them as public data members but actually, they are specific methods called accessors.",-1)),s[33]||(s[33]=n("p",null,"In this article, we are going to talk more about properties and how to use them in C#.",-1)),n("details",N,[s[18]||(s[18]=n("summary",null,"This article is part of the series",-1)),n("ul",null,[n("li",null,[a(t,{to:"/code-maze.com/csharp-classes-constructors.html"},{default:e(()=>s[5]||(s[5]=[n("strong",null,"Classes and Constructors",-1)])),_:1,__:[5]})]),s[17]||(s[17]=n("li",null,"Properties (Current article)",-1)),n("li",null,[a(t,{to:"/code-maze.com/csharp-static-members-constants-extension-methods.html"},{default:e(()=>s[6]||(s[6]=[n("strong",null,"Static Members, Constants, and Extension Methods",-1)])),_:1,__:[6]})]),n("li",null,[a(t,{to:"/code-maze.com/csharp-anonymous-nullable-types.html"},{default:e(()=>s[7]||(s[7]=[n("strong",null,"Anonymous and Nullable Types",-1)])),_:1,__:[7]})]),n("li",null,[a(t,{to:"/code-maze.com/csharp-structures.html"},{default:e(()=>s[8]||(s[8]=[n("strong",null,"Structures",-1)])),_:1,__:[8]})]),n("li",null,[a(t,{to:"/code-maze.com/csharp-enumerations.html"},{default:e(()=>s[9]||(s[9]=[n("strong",null,"Enumerations",-1)])),_:1,__:[9]})]),n("li",null,[a(t,{to:"/code-maze.com/csharp-inheritance.html"},{default:e(()=>s[10]||(s[10]=[n("strong",null,"Inheritance",-1)])),_:1,__:[10]})]),n("li",null,[a(t,{to:"/code-maze.com/csharp-interfaces.html"},{default:e(()=>s[11]||(s[11]=[n("strong",null,"Interfaces",-1)])),_:1,__:[11]})]),n("li",null,[a(t,{to:"/code-maze.com/csharp-abstract-classes.html"},{default:e(()=>s[12]||(s[12]=[n("strong",null,"Abstract Classes",-1)])),_:1,__:[12]})]),n("li",null,[a(t,{to:"/code-maze.com/csharp-generics.html"},{default:e(()=>s[13]||(s[13]=[n("strong",null,"Generics",-1)])),_:1,__:[13]})]),n("li",null,[a(t,{to:"/code-maze.com/csharp-queue-stack-hashtable.html"},{default:e(()=>s[14]||(s[14]=[n("strong",null,"Queue, Stack, Hashtable",-1)])),_:1,__:[14]})]),n("li",null,[a(t,{to:"/code-maze.com/cshart-generic-list-dictionary.html"},{default:e(()=>s[15]||(s[15]=[n("strong",null,"Generic List and Dictionary",-1)])),_:1,__:[15]})]),n("li",null,[a(t,{to:"/code-maze.com/csharp-delegates.html"},{default:e(()=>s[16]||(s[16]=[n("strong",null,"Delegates",-1)])),_:1,__:[16]})])])]),n("p",null,[s[20]||(s[20]=o("If you want to see complete navigation of this tutorial, you can do that here ")),a(t,{to:"/code-maze.com/csharp-intermediate-tutorial-oop.html"},{default:e(()=>s[19]||(s[19]=[n("strong",null,"C# Intermediate Tutorial",-1)])),_:1,__:[19]}),s[21]||(s[21]=o("."))]),n("div",S,[s[27]||(s[27]=n("p",{class:"hint-container-title"},"Info",-1)),n("p",null,[s[25]||(s[25]=o("To download the source code, you can visit ")),n("a",A,[s[22]||(s[22]=o("Properties in C# Source Code (")),a(m,{icon:"iconfont icon-github"}),s[23]||(s[23]=n("code",null,"CodeMazeBlog/csharp-intermediate-module",-1)),s[24]||(s[24]=o(")"))]),s[26]||(s[26]=o("."))])]),s[34]||(s[34]=v(`<hr><h2 id="property-syntax" tabindex="-1"><a class="header-anchor" href="#property-syntax"><span>Property Syntax</span></a></h2><p>The syntax of a property declaration can be used in the following way:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">Access_Modifier <span class="token return-type class-name">Type</span> PropertyName</span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">get</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//read actions</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">set</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//write action</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As we can see, a property can contain two blocks of code. The get block contains statements that execute when we read from a property. The set block contains statements that execute when we write to a property:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">string</span></span> _name<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">string</span></span> _lastName<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name</span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _name<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">set</span> <span class="token punctuation">{</span> _name <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> LastName</span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _lastName<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">set</span> <span class="token punctuation">{</span> _lastName <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> lastName<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        _name <span class="token operator">=</span> name<span class="token punctuation">;</span></span>
<span class="line">        _lastName <span class="token operator">=</span> lastName<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">GetFullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> _name <span class="token operator">+</span> <span class="token char">&#39; &#39;</span> <span class="token operator">+</span> _lastName<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In the example above we see that our private fields are now exposed through the properties. If we want to read the value of the <code>_name</code> field all we have to do is to call the <code>Name</code> property with the <code>student</code> object. The same applies to the <code>_lastName</code> field. Moreover, if we want to set a value to our fields, all we have to do is to call a set block of our properties:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">class</span> <span class="token class-name">Program</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Doe&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name"><span class="token keyword">string</span></span> name <span class="token operator">=</span> student<span class="token punctuation">.</span>Name<span class="token punctuation">;</span> <span class="token comment">//call to a get block of the Name property</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">string</span></span> lastName <span class="token operator">=</span> student<span class="token punctuation">.</span>LastName<span class="token punctuation">;</span> <span class="token comment">// call to a get block of the LastName property</span></span>
<span class="line"></span>
<span class="line">        student<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">&quot;David&quot;</span><span class="token punctuation">;</span> <span class="token comment">//call to a set block of the Name property</span></span>
<span class="line">        student<span class="token punctuation">.</span>LastName <span class="token operator">=</span> <span class="token string">&quot;Dauni&quot;</span><span class="token punctuation">;</span> <span class="token comment">// call to a set block of the LastName property</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Our properties can have a complex code inside get or set blocks. They are not limited only to read a value or just to write a value. We can use conditions or method calls etc. in the get or set blocks:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> X</span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">get</span> </span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> _x<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">set</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        _x <span class="token operator">=</span> <span class="token function">CheckValue</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span>	</span>
<span class="line"></span>
<span class="line"><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">CheckValue</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> val<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">//code execution in here</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="read-only-and-write-only-properties" tabindex="-1"><a class="header-anchor" href="#read-only-and-write-only-properties"><span>Read-Only and Write-Only Properties</span></a></h2><p>We can declare a property that only has a <code>get</code> block and not the <code>set</code>. That kind of property is called Read-Only property. If we create a read-only property, we can only read the value of a private field. It is quite common to create a read-only property inside our class. What we want with it is to set it with the constructor method and then to use its value throughout the entire class, but never to set its value <strong>outside the constructor</strong>. If we try to set it, the compiler will throw an error:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name</span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _name<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+w+`" alt="Read only property error - Properties in C#" tabindex="0" loading="lazy"><figcaption>Read only property error - Properties in C#</figcaption></figure><p>In the same way, as we can create a read-only property, we can create a write-only property. That type of property has only the set block and not the get. It is not a common case to create write-only properties. Of course, if we need it, we can only set the values with this type of property and not read it:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name</span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">set</span> <span class="token punctuation">{</span> _name <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+f+`" alt="Write only property error - Properties in C#" tabindex="0" loading="lazy"><figcaption>Write only property error - Properties in C#</figcaption></figure><hr><h2 id="property-accessibility" tabindex="-1"><a class="header-anchor" href="#property-accessibility"><span>Property Accessibility</span></a></h2><p>We can specify an access modifier for our property (public, private…) if we want to restrict its availability. But in C# we can even override the accessibility of get or set accessors. So, what we can do is declare a public property which has the public get accessor and private set accessor. If our property is a public one, we don’t have to add the public keyword for the get accessor, it is going to be public anyway:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name</span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">     <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _name<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">     <span class="token keyword">private</span> <span class="token keyword">set</span> <span class="token punctuation">{</span> _name <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span> </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+_+`" alt="Privete set accessor - Properties in C#" tabindex="0" loading="lazy"><figcaption>Privete set accessor - Properties in C#</figcaption></figure><p>This means that we can read in all the classes from our Name property, but we can set it only within the <code>Student</code> class.</p><p>When we use an accessor overriding inside the property, we must pay attention to the following rules:</p><ul><li>We can change the accessibility level of only one accessor. There is no point in having both accessors modified. If we want to modify both accessors, we should just modify the property access level.</li><li>We can’t use access modifier on the get or set blocks that are less restrictive of the access modifier applied on a property itself. So, if our property is private, there is no point in having the public get or set block.</li></ul><hr><h2 id="auto-implemented-properties" tabindex="-1"><a class="header-anchor" href="#auto-implemented-properties"><span>Auto-Implemented Properties</span></a></h2><p>If no additional logic is required in a property accessor, we can use the auto-implemented properties for more readable and concise way of declaring properties. The auto-implemented property consists only of the get and set keywords, nothing more:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> LastName <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>When we declare the properties like this, the compiler creates a private field for us, which could be accessed only through the property’s get or set accessors.</p><p>So in our example instead of:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">string</span></span> _name<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name</span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _name<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">set</span> <span class="token punctuation">{</span> _name <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We can just write:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>In the Visual Studio, we are even going to get a suggestion to use an auto property:</p><figure><img src="`+x+'" alt="Property suggestion" tabindex="0" loading="lazy"><figcaption>Property suggestion</figcaption></figure><hr><h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="#conclusion"><span>Conclusion</span></a></h2><p>Excellent.</p><p>In this article, we have learned:</p><ul><li>About properties and it’s syntax</li><li>How to use read and write-only properties</li><li>How to modify the accessibility level of the property</li><li>The way to use auto-implemented properties</li></ul>',42)),n("p",null,[s[29]||(s[29]=o("In the next article, we are going to talk about ")),a(t,{to:"/code-maze.com/csharp-static-members-constants-extension-methods.html"},{default:e(()=>s[28]||(s[28]=[n("strong",null,"Static methods, static classes, and extension methods",-1)])),_:1,__:[28]}),s[30]||(s[30]=o(" as well."))]),g(" TODO: add ARTICLE CARD "),a(i,r(c({title:"C# Intermediate - Properties",desc:"In this article you are going to learn about Properties in C#, how to use them, different property types and about property accessibility.",link:"https://chanhi2000.github.io/bookshelf/code-maze.com/csharp-properties.html",logo:"/assets/image/code-maze.com/favicon.png",background:"rgba(22,22,22,0.2)"})),null,16)])}const R=k(P,[["render",T]]),M=JSON.parse('{"path":"/code-maze.com/csharp-properties.html","title":"C# Intermediate - Properties","lang":"en-US","frontmatter":{"lang":"en-US","title":"C# Intermediate - Properties","description":"Article(s) > C# Intermediate - Properties","icon":"iconfont icon-csharp","category":["C#","DotNet","Article(s)"],"tag":["blog","code-maze.com","cs","c#","csharp","dotnet"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"C# Intermediate - Properties\\",\\"image\\":[\\"https://chanhi2000.github.io/bookshelf/assets/image/code-maze.com/csharp-properties/03-Read_only_prop_error.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/code-maze.com/csharp-properties/04-Write_only_prop_error.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/code-maze.com/csharp-properties/05-Private_set_accessor_error.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/code-maze.com/csharp-properties/06-Auto-property_suggestion.png\\"],\\"datePublished\\":\\"2018-09-21T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Marinko Spasojević\\",\\"url\\":\\"https://code-maze.com/author/marinko/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/code-maze.com/csharp-properties.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"C# Intermediate - Properties"}],["meta",{"property":"og:description","content":"Article(s) > C# Intermediate - Properties"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://chanhi2000.github.io/bookshelf/assets/image/code-maze.com/csharp-properties/banner.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://chanhi2000.github.io/bookshelf/assets/image/code-maze.com/csharp-properties/banner.png"}],["meta",{"name":"twitter:image:alt","content":"C# Intermediate - Properties"}],["meta",{"property":"article:author","content":"Marinko Spasojević"}],["meta",{"property":"article:tag","content":"dotnet"}],["meta",{"property":"article:tag","content":"csharp"}],["meta",{"property":"article:tag","content":"c#"}],["meta",{"property":"article:tag","content":"cs"}],["meta",{"property":"article:tag","content":"code-maze.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2018-09-21T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > C# Intermediate - Properties"},{"property":"og:description","content":"C# Intermediate - Properties"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/code-maze.com/csharp-properties.html"}]],"prev":"/programming/cs/articles/README.md","date":"2018-09-21T00:00:00.000Z","isOriginal":false,"author":[{"name":"Marinko Spasojević","url":"https://code-maze.com/author/marinko/"}],"cover":"/assets/image/code-maze.com/csharp-properties/banner.png"},"git":{},"readingTime":{"minutes":4.37,"words":1311},"filePathRelative":"code-maze.com/csharp-properties.md","copyright":{"author":"Marinko Spasojević"}}');export{R as comp,M as data};
