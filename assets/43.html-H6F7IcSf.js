import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as m,d as e,f as a,b as c,t as g,n as k,g as b,w as p,e as s,r as i,o as h}from"./app-BVguHYKu.js";const v="/bookshelf/assets/image/meetup.nhncloud.com/xcodelogo.png",y={},f={id:"frontmatter-title-관련",tabindex:"-1"},j={class:"header-anchor",href:"#frontmatter-title-관련"},S={class:"table-of-contents"};function x(l,n){const r=i("VPCard"),o=i("router-link"),u=i("SiteInfo"),t=i("VPIcon");return h(),m("div",null,[e("h1",f,[e("a",j,[e("span",null,g(l.$frontmatter.title)+" 관련",1)])]),a(r,k(b({title:"Objective-C > Article(s)",desc:"Article(s)",link:"/programming/objc/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),e("nav",S,[e("ul",null,[e("li",null,[a(o,{to:"#_0-lightweight-generics"},{default:p(()=>n[0]||(n[0]=[s("0. Lightweight Generics")])),_:1,__:[0]})]),e("li",null,[a(o,{to:"#_1-syntax"},{default:p(()=>n[1]||(n[1]=[s("1. Syntax")])),_:1,__:[1]})]),e("li",null,[a(o,{to:"#_2-type-check"},{default:p(()=>n[2]||(n[2]=[s("2. Type check")])),_:1,__:[2]}),e("ul",null,[e("li",null,[a(o,{to:"#why"},{default:p(()=>n[3]||(n[3]=[s("Why?")])),_:1,__:[3]})])])]),e("li",null,[a(o,{to:"#_3-generics-구현"},{default:p(()=>n[4]||(n[4]=[s("3. Generics 구현")])),_:1,__:[4]})])])]),n[15]||(n[15]=e("hr",null,null,-1)),a(u,{name:"Objective-C Generics | NHN Cloud Meetup",desc:"Objective-C Generics",url:"https://meetup.nhncloud.com/posts/43",logo:"https://meetup.nhncloud.com/resources/img/favicon.ico",preview:"/assets/image/meetup.nhncloud.com/xcodelogo.png"}),n[16]||(n[16]=e("figure",null,[e("img",{src:v,alt:"",tabindex:"0",loading:"lazy"}),e("figcaption")],-1)),n[17]||(n[17]=e("p",null,"안녕하세요. 모바일기술개발팀 김태경 입니다.",-1)),n[18]||(n[18]=e("p",null,"얼마전에 WWDC를 통해 OS X 10.11 베타 와 iOS 9 베타가 공개되면서 XCode 7 베타 버전도 함께 공개되었는데요.",-1)),e("p",null,[n[5]||(n[5]=s("XCode 7 베타 버전 부터 추가된 ")),a(t,{icon:"iconfont icon-objective-c"}),n[6]||(n[6]=s("Objective-C의 Generics에 대해서 간단하게나마 공유해보고자 합니다 😄"))]),n[19]||(n[19]=c('<h2 id="_0-lightweight-generics" tabindex="-1"><a class="header-anchor" href="#_0-lightweight-generics"><span>0. Lightweight Generics</span></a></h2><p>Xcode 7 beta 부터 지원하며, Foundation Collection에 적용되어 있다. (<code>NSArray</code>, <code>NSMutableArray</code>, <code>NSSet</code>, <code>NSMutableSet</code>, <code>NSOrderedSet</code>, <code>NSMutableOrderedSet</code>, <code>NSDictionary</code>, <code>NSMutableDictionary</code>, <code>NSHashTable</code>, <code>NSMapTable</code>)</p><hr><h2 id="_1-syntax" tabindex="-1"><a class="header-anchor" href="#_1-syntax"><span>1. Syntax</span></a></h2>',4)),e("p",null,[n[7]||(n[7]=s(".")),a(t,{icon:"iconfont icon-objective-c"}),n[8]||(n[8]=s("Objective-C의 Generics는 다음과 같이 표현할 수 있다."))]),n[20]||(n[20]=c(`<div class="language-objc line-numbers-mode" data-highlighter="prismjs" data-ext="objc"><pre><code class="language-objc"><span class="line">NSArray<span class="token operator">&lt;</span>NSString<span class="token operator">*</span><span class="token operator">&gt;</span> <span class="token operator">*</span>strings <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>NSArray<span class="token operator">&lt;</span>NSString<span class="token operator">*</span><span class="token operator">&gt;</span> alloc<span class="token punctuation">]</span> init<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h2 id="_2-type-check" tabindex="-1"><a class="header-anchor" href="#_2-type-check"><span>2. Type check</span></a></h2>`,3)),e("p",null,[n[9]||(n[9]=s("안타깝게도 ")),a(t,{icon:"iconfont icon-objective-c"}),n[10]||(n[10]=s("Objective-C의 Generics는 타입 매개변수에 대한 검사가 ")),a(t,{icon:"fa-brands fa-java"}),n[11]||(n[11]=s("Java나 ")),a(t,{icon:"iconfont icon-csharp"}),n[12]||(n[12]=s("C#에 비해 엄격하지 못하다."))]),n[21]||(n[21]=e("p",null,[s("만약 "),e("code",null,"NSArray"),s(" 배열에 "),e("code",null,"NSNumber"),s(" 객체를 담으려고 하면 경고만 뜰 뿐 컴파일이 성공한다. 심지어 정상적으로 동작한다.")],-1)),n[22]||(n[22]=e("h3",{id:"why",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#why"},[e("span",null,"Why?")])],-1)),e("p",null,[n[13]||(n[13]=s(".")),a(t,{icon:"iconfont icon-objective-c"}),n[14]||(n[14]=s("Objective-C Generics의 구현은 id 타입을 이용하기 때문이다. 자세한건 아래 구현 예제를 참고하면 된다."))]),n[23]||(n[23]=c(`<hr><h2 id="_3-generics-구현" tabindex="-1"><a class="header-anchor" href="#_3-generics-구현"><span>3. Generics 구현</span></a></h2><p>클래스를 정의할 때 다음과 같이 정의할 수 있다.</p><div class="language-objc line-numbers-mode" data-highlighter="prismjs" data-ext="objc"><pre><code class="language-objc"><span class="line"><span class="token keyword">@interface</span> VPStack<span class="token operator">&lt;</span>__covariant ElemType<span class="token operator">&gt;</span> <span class="token punctuation">:</span> NSObject</span>
<span class="line"><span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>push<span class="token punctuation">:</span><span class="token punctuation">(</span>ElemType<span class="token punctuation">)</span>element<span class="token punctuation">;</span></span>
<span class="line"><span class="token operator">-</span><span class="token punctuation">(</span>ElemType<span class="token punctuation">)</span>pop<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">@end</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>하지만 구현부는 <code>id</code> 타입을 이용해 구현한다.</p><div class="language-objc line-numbers-mode" data-highlighter="prismjs" data-ext="objc"><pre><code class="language-objc"><span class="line"><span class="token keyword">@implementation</span> VPStack</span>
<span class="line"><span class="token operator">-</span><span class="token punctuation">(</span>instancetype<span class="token punctuation">)</span>init <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>push<span class="token punctuation">:</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>element <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token operator">-</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>pop <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">@end</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>이렇게 구현된 클래스는 다음과 같이 사용할 수 있다.</p><div class="language-objc line-numbers-mode" data-highlighter="prismjs" data-ext="objc"><pre><code class="language-objc"><span class="line">VPStack<span class="token operator">&lt;</span>NSString<span class="token operator">*</span><span class="token operator">&gt;</span><span class="token operator">*</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>VPStack<span class="token operator">&lt;</span>NSString<span class="token operator">*</span><span class="token operator">&gt;</span> alloc<span class="token punctuation">]</span> init<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">[</span>stack push<span class="token punctuation">:</span><span class="token string">@&quot;element1&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">[</span>stack push<span class="token punctuation">:</span><span class="token operator">@</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>세 번째 라인처럼 정의된 타입과 다른 타입을 넣을 경우, 다음과 같은 경고가 노출된다.</p><p>하지만 구현이 <code>id</code> 형으로 되어있기 때문에 정상동작한다.</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">Incompatible pointer types sending &#39;NSNumber *&#39; to parameter of type &#39;NSString *&#39;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,11))])}const O=d(y,[["render",x]]),w=JSON.parse('{"path":"/meetup.nhncloud.com/43.html","title":"Objective-C Generics","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Objective-C Generics","description":"Article(s) > Objective-C Generics","icon":"iconfont icon-objective-c","category":["Objective-C","Article(s)"],"tag":["blog","meetup.nhncloud.com","xcode","objective-c","objc"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Objective-C Generics\\",\\"image\\":[\\"https://chanhi2000.github.io/bookshelf/assets/image/meetup.nhncloud.com/xcodelogo.png\\"],\\"datePublished\\":\\"2015-11-30T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/meetup.nhncloud.com/43.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Objective-C Generics"}],["meta",{"property":"og:description","content":"Article(s) > Objective-C Generics"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://chanhi2000.github.io/bookshelf/assets/image/meetup.nhncloud.com/xcodelogo.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://chanhi2000.github.io/bookshelf/assets/image/meetup.nhncloud.com/xcodelogo.png"}],["meta",{"name":"twitter:image:alt","content":"Objective-C Generics"}],["meta",{"property":"article:tag","content":"objc"}],["meta",{"property":"article:tag","content":"objective-c"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"meetup.nhncloud.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2015-11-30T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Objective-C Generics"},{"property":"og:description","content":"Objective-C Generics"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/meetup.nhncloud.com/43.html"}]],"prev":"/programming/objc/articles/README.md","date":"2015-11-30T00:00:00.000Z","isOriginal":false,"cover":"/assets/image/meetup.nhncloud.com/xcodelogo.png"},"git":{},"readingTime":{"minutes":0.95,"words":285},"filePathRelative":"meetup.nhncloud.com/43.md"}');export{O as comp,w as data};
