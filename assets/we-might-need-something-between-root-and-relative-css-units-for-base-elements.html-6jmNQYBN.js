import{_ as v}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as h,d as s,f as e,b as i,a as b,t as g,n as r,g as d,w as t,e as a,r as o,o as f}from"./app-BVguHYKu.js";const y={},w={id:"frontmatter-title-관련",tabindex:"-1"},z={class:"header-anchor",href:"#frontmatter-title-관련"},x={class:"table-of-contents"},S={href:"https://jensimmons.com",target:"_blank",rel:"noopener noreferrer"},q={href:"https://webkit.org/blog/16831/line-height-units/",target:"_blank",rel:"noopener noreferrer"},C={href:"https://zellwk.com/blog/why-vertical-rhythms/",target:"_blank",rel:"noopener noreferrer"},T={href:"https://alistapart.com/article/axiomatic-css-and-lobotomized-owls/",target:"_blank",rel:"noopener noreferrer"},j={href:"https://heydonworks.com",target:"_blank",rel:"noopener noreferrer"},B={href:"https://css-tricks.com/snippets/css/a-guide-to-flexbox/",target:"_blank",rel:"noopener noreferrer"},W={href:"https://play.tailwindcss.com/jBfW6lrdMv?file=css",target:"_blank",rel:"noopener noreferrer"},I={href:"https://splendidlabz.com/solutions/styles/",target:"_blank",rel:"noopener noreferrer"},P={href:"https://splendidlabz.com/",target:"_blank",rel:"noopener noreferrer"},R={href:"https://splendidlabz.com/solutions/pro/?ref=css-tricks",target:"_blank",rel:"noopener noreferrer"};function E(k,n){const u=o("VPCard"),p=o("router-link"),m=o("SiteInfo"),l=o("VPIcon"),c=o("RouteLink");return f(),h("div",null,[s("h1",w,[s("a",z,[s("span",null,g(k.$frontmatter.title)+" 관련",1)])]),e(u,r(d({title:"CSS > Article(s)",desc:"Article(s)",link:"/programming/css/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",x,[s("ul",null,[s("li",null,[e(p,{to:"#let-me-give-you-an-example-prose"},{default:t(()=>n[0]||(n[0]=[a("Let me give you an example: Prose")])),_:1,__:[0]})]),s("li",null,[e(p,{to:"#here-s-a-second-example-card-component"},{default:t(()=>n[1]||(n[1]=[a("Here’s a second example: Card component")])),_:1,__:[1]})]),s("li",null,[e(p,{to:"#the-handy-in-between-unit"},{default:t(()=>n[2]||(n[2]=[a("The handy in-between unit")])),_:1,__:[2]})]),s("li",null,[e(p,{to:"#how-might-this-work"},{default:t(()=>n[3]||(n[3]=[a("How might this work?")])),_:1,__:[3]}),s("ul",null,[s("li",null,[e(p,{to:"#the-container-query-method"},{default:t(()=>n[4]||(n[4]=[a("The container query method")])),_:1,__:[4]})]),s("li",null,[e(p,{to:"#anchor-positioning-syntax"},{default:t(()=>n[5]||(n[5]=[a("Anchor positioning syntax")])),_:1,__:[5]})]),s("li",null,[e(p,{to:"#double-anchor"},{default:t(()=>n[6]||(n[6]=[a("Double anchor")])),_:1,__:[6]})])])]),s("li",null,[e(p,{to:"#putting-it-into-practice-today"},{default:t(()=>n[7]||(n[7]=[a("Putting it into practice today")])),_:1,__:[7]}),s("ul",null,[s("li",null,[e(p,{to:"#in-the-spirit-of-today"},{default:t(()=>n[8]||(n[8]=[a("In the spirit of today")])),_:1,__:[8]})]),s("li",null,[e(p,{to:"#putting-it-all-together"},{default:t(()=>n[9]||(n[9]=[a("Putting it all together")])),_:1,__:[9]})])])]),s("li",null,[e(p,{to:"#using-this-with-splendid-labz-today"},{default:t(()=>n[10]||(n[10]=[a("Using this with Splendid Labz today")])),_:1,__:[10]})]),s("li",null,[e(p,{to:"#what-do-you-think-about-this-unit-between-root-and-relative-values"},{default:t(()=>n[11]||(n[11]=[a("What do you think about this unit between root and relative values?")])),_:1,__:[11]})])])]),n[82]||(n[82]=s("hr",null,null,-1)),e(m,{name:"We Might Need Something Between Root and Relative CSS Units for “Base Elements”",desc:"I've come to realize that perhaps we need to have a unit between root and relative values. This would bring about a whole new possibility when creating reusable components.",url:"https://css-tricks.com/we-might-need-something-between-root-and-relative-css-units-for-base-elements",logo:"https://css-tricks/favicon.svg",preview:"https://i0.wp.com/css-tricks.com/wp-content/uploads/2019/10/random-number-slots.png"}),n[83]||(n[83]=i('<p>CSS provides us with root and relative values.</p><ul><li>Root values are like <code>rem</code> and <code>rlh</code> — they’re tied to the values written in the <code>:root</code> selector (the most common one would be the <code>html</code> element).</li><li>Relative values are like <code>em</code>, <code>lh</code>, <code>ch</code> and various others — they’re tied to the <code>font-size</code> in that specific element.</li></ul><p>I’ve come to realize that perhaps we need to have a unit between root and relative values. Having such a unit allows us to size things without complex <code>em</code> or <code>lh</code> calculations.</p><hr><h2 id="let-me-give-you-an-example-prose" tabindex="-1"><a class="header-anchor" href="#let-me-give-you-an-example-prose"><span>Let me give you an example: Prose</span></a></h2>',5)),s("p",null,[n[17]||(n[17]=a("Earlier this year, ")),s("a",S,[e(l,{icon:"fas fa-globe"}),n[12]||(n[12]=a("Jen Simmons"))]),n[18]||(n[18]=a(" wrote about ")),s("a",q,[e(l,{icon:"iconfont icon-webkit"}),n[13]||(n[13]=a("the using the ")),n[14]||(n[14]=s("code",null,"lh",-1)),n[15]||(n[15]=a(" unit"))]),n[19]||(n[19]=a(" to style ")),n[20]||(n[20]=s("code",null,"margin",-1)),n[21]||(n[21]=a(" and ")),n[22]||(n[22]=s("code",null,"padding",-1)),n[23]||(n[23]=a(" for better ")),s("a",C,[e(l,{icon:"fas fa-globe"}),n[16]||(n[16]=a("typographical vertical rhythm"))]),n[24]||(n[24]=a("."))]),n[84]||(n[84]=i(`<div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">p</span> <span class="token punctuation">{</span> <span class="token property">margin-block</span><span class="token punctuation">:</span> 1lh<span class="token punctuation">;</span> <span class="token punctuation">}</span> </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,1)),s("p",null,[n[27]||(n[27]=a("We can expand the concept a little further to include all other spaces around the text. One way of doing this is the ")),s("a",T,[e(l,{icon:"fas fa-globe"}),n[25]||(n[25]=a("“Lobotomized Owl” technique"))]),n[28]||(n[28]=a(" that ")),s("a",j,[e(l,{icon:"fas fa-globe"}),n[26]||(n[26]=a("Heydon Pickering"))]),n[29]||(n[29]=a(" popularized a while ago."))]),n[85]||(n[85]=i(`<div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">* + *</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">margin-top</span><span class="token punctuation">:</span> 1lh<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Today, we can also use the <code>:not(:first-child)</code> to achieve the same effect — and that might be a tad more readable.</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">*:not(:first-child)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">margin-top</span><span class="token punctuation">:</span> 1lh<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Often, we need to constrain these selectors so they don’t spill everywhere and break the rest of the page. One great class for this is <code>.prose</code>.</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.prose</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token selector">*:not(:first-child)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">margin-top</span><span class="token punctuation">:</span> 1lh<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This is simple and good — but what happens if you include typography of other sizes…? You’ll see this break down incredibly quickly (because <code>1lh</code> of a <code>&lt;h2&gt;</code> element can be incredibly big).</p><p>CodePen Embed Fallback https://codepen.io/zellwk/pen/dPoByEY Problem with lh</p>`,7)),s("p",null,[n[32]||(n[32]=a("One way around this issue is to use ")),s("a",B,[e(l,{icon:"iconfont icon-css-tricks"}),n[30]||(n[30]=a("Flexbox"))]),n[33]||(n[33]=a(" on the parent element. By doing so, we can set ")),n[34]||(n[34]=s("code",null,"gap",-1)),n[35]||(n[35]=a(" to ")),n[36]||(n[36]=s("code",null,"1lh",-1)),n[37]||(n[37]=a(" and we don’t have to deal with the value of ")),n[38]||(n[38]=s("code",null,"1lh",-1)),n[39]||(n[39]=a(" changing on the ")),n[40]||(n[40]=s("code",null,"h2",-1)),n[41]||(n[41]=a(" element. (Bonus, we also don’t have to deal with margin ")),e(c,{to:"/css-tricks.com/what-you-should-know-about-collapsing-margins.html"},{default:t(()=>n[31]||(n[31]=[s("em",null,[s("strong",null,"collapse")],-1)])),_:1,__:[31]}),n[42]||(n[42]=a(".)"))]),n[86]||(n[86]=i(`<div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.prose</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span> </span>
<span class="line">  <span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">gap</span><span class="token punctuation">:</span> 1lh<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>CodePen Embed Fallback https://codepen.io/zellwk/pen/PwqrwbO Simple Prose</p><p>But we introduce a new problem here: <strong>proximity confusion</strong>.</p><p>Content below <code>&lt;h2&gt;</code> belongs within the <code>&lt;h2&gt;</code>. <em>But content above the <code>&lt;h2&gt;</code> belongs with the previous section header.</em> We should, ideally, make the spacing different to clarify their relationship.</p><p>The simplest way is to add a little margin above the <code>&lt;h2&gt;</code>.</p><p>But we can’t add margin above <code>&lt;h2&gt;</code> with <code>lh</code> since the <code>lh</code> value on <code>&lt;h2&gt;</code> will be different from that of the surrounding elements.</p><p>CodePen Embed Fallback https://codepen.io/zellwk/pen/wBaLBeX Simple Prose Without Proximity Confusion, but not ideal</p><p>We have to use a little CSS trickery and <code>margin-bottom</code> (or the logical equivalent) on the element above the <code>&lt;h2&gt;</code>. Here, we simply set <code>margin-bottom</code> to <code>1lh</code> since we use Flexbox and don’t have to deal with margin collapse. (If you had to deal with margin collapse, you’d have to set <code>margin-bottom</code> to <code>2lh</code>.)</p><p>CodePen Embed Fallback https://codepen.io/zellwk/pen/JodQoJX Simple Prose Without Proximity Confusion</p><p>Is there a better way? Well, that’s what this article is about!</p><p>But before we go there, let’s consider a different UI that has similar problems so you can begin to see the greater ramifications of this problem (and the importance of the solution).</p><hr><h2 id="here-s-a-second-example-card-component" tabindex="-1"><a class="header-anchor" href="#here-s-a-second-example-card-component"><span>Here’s a second example: Card component</span></a></h2><p>Now let’s say we have a card component that’s divided into two parts, header and content.</p><p>In these kind of components, the header is often styled with a different <code>font-size</code> than the content.</p><figure><img src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/07/base-units-card.png?resize=1198%2C520&amp;ssl=1" alt="Card component example. Large black heading says Card Header. There is a border between the header and a paragraph of placeholder text." tabindex="0" loading="lazy"><figcaption>Card component example. Large black heading says Card Header. There is a border between the header and a paragraph of placeholder text.</figcaption></figure><p>To create such a card, the simplest markup may be:</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre><code class="language-html"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>card<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>title<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Card Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>content<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Card Content<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Unfortunately, we cannot use the <code>lh</code> unit to create the padding within the card — doing so causes the margin on the <code>&lt;h2&gt;</code> element to blow (incredibly) out of proportion!</p><p>CodePen Embed Fallback https://codepen.io/zellwk/pen/raVEada Card with lh — negative example</p><p>There are, of course, many ways to handle this type of situation.</p><p>One possible way is to change the markup such that the <code>&lt;h2&gt;</code> resides in a <code>&lt;header&gt;</code> element. When we do this, we can apply the padding on the <code>&lt;header&gt;</code>, bypassing the enlarged <code>1lh</code> problem.</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre><code class="language-html"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>card<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>title<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>Card Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>content<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Card Content<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>CodePen Embed Fallback https://codepen.io/zellwk/pen/bNdPNvm Card with lh — Change markup</p><p>While changing the markup solves the problem, it’s not ideal — since we probably don’t want to create an extra <code>header</code> element unless it’s necessary…</p><p>Well, another possible method is to use a root value like <code>rlh</code>. This allows <code>&lt;h2&gt;</code> and <code>content</code> to use the same base unit, and therefore, create the same padding.</p><p>CodePen Embed Fallback https://codepen.io/zellwk/pen/RNPzNLZ Card with rlh</p><p>But we still run into problems if the <code>.card</code> needs to scale to different <code>font-size</code> values. Imagine you want to make a smaller card — now <code>1rlh</code> isn’t going to look right since the padding value becomes too big in proportion to the content.</p><p>CodePen Embed Fallback</p><p>What can we do?</p><p>A simple solution is to change the <code>padding</code> value according to the supported variants of the component — but this kinda thing is sorta hard-coded and not very friendly…</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.card-sm</span> <span class="token punctuation">{</span> <span class="token property">--padding</span><span class="token punctuation">:</span> 0.75rlh<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token selector">.card-md</span> <span class="token punctuation">{</span> <span class="token property">--padding</span><span class="token punctuation">:</span> 1rlh<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token selector">.card-lg</span> <span class="token punctuation">{</span> <span class="token property">--padding</span><span class="token punctuation">:</span> 1.25rlh<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>CodePen Embed Fallback https://codepen.io/zellwk/pen/zxGVxjv Double card — broken</p><p>What’s the alternative?</p><p>This is where an intermediary between root and relative units might come in handy.</p><hr><h2 id="the-handy-in-between-unit" tabindex="-1"><a class="header-anchor" href="#the-handy-in-between-unit"><span>The handy in-between unit</span></a></h2><p>This section is purely speculative CSS to illustrate a point. We’ll follow up with a simple way to actually do this in practice today in a later section, so hang tight and follow along conceptually for now.</p><p>Let’s say we have a unit that takes it’s reference value from a specified element. We’ll call this a <code>base</code> unit, for lack of a better name.</p><ul><li>So, 1 <code>base</code> font-size unit could be <code>1bem</code>.</li><li>And 1 <code>base</code> line-height unit could be <code>1blh</code>.</li></ul><p>Pretty easy at this point.</p><p>Imagine we can style the cards with this base unit. Then we can simply use <code>1blh</code> to quantify the padding and everything else would be sized appropriately:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.card</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token selector">&gt; *</span> <span class="token punctuation">{</span> <span class="token property">padding</span><span class="token punctuation">:</span> 1blh<span class="token punctuation">;</span> <span class="token punctuation">}</span>  </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token selector">.card-sm</span> <span class="token punctuation">{</span> <span class="token property">font-size</span><span class="token punctuation">:</span> 0.8em<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token selector">.card-md</span> <span class="token punctuation">{</span> <span class="token property">font-size</span><span class="token punctuation">:</span> 1em<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token selector">.card-lg</span> <span class="token punctuation">{</span> <span class="token property">font-size</span><span class="token punctuation">:</span> 1.2em<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Hurrah?</p><p>Tying this back to the <code>.prose</code> example earlier, it could very well resolve the proximity confusion issue without complicating our selectors:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.prose</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token selector">h2:not(:first-child)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">margin-top</span><span class="token punctuation">:</span> 2blh<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="how-might-this-work" tabindex="-1"><a class="header-anchor" href="#how-might-this-work"><span>How might this work?</span></a></h2><p>For this function to be added easily to modern CSS, I could think of two possible ways:</p><ol><li>Attach that to container queries.</li><li>Define a syntax similar to anchor positioning.</li></ol><h3 id="the-container-query-method" tabindex="-1"><a class="header-anchor" href="#the-container-query-method"><span>The container query method</span></a></h3>`,51)),s("p",null,[n[44]||(n[44]=a("We already have stuff like ")),n[45]||(n[45]=s("code",null,"cqw",-1)),n[46]||(n[46]=a(" and ")),n[47]||(n[47]=s("code",null,"cqh",-1)),n[48]||(n[48]=a(" to denote ")),e(c,{to:"/css-tricks.com/css-container-queries.html#aa-container-length-units"},{default:t(()=>n[43]||(n[43]=[s("strong",null,"container width and container height values",-1)])),_:1,__:[43]}),n[49]||(n[49]=a(". It’s not too far of a cry to say we could have a ")),n[50]||(n[50]=s("code",null,"cqem",-1)),n[51]||(n[51]=a(" (container-query ")),n[52]||(n[52]=s("code",null,"em",-1)),n[53]||(n[53]=a(") unit or ")),n[54]||(n[54]=s("code",null,"cqlh",-1)),n[55]||(n[55]=a(" (container-query line-height)."))]),n[87]||(n[87]=i(`<p>There are downsides to this approach.</p><p>First, containers need to be defined in a parent element. This requires more markup and makes the code somewhat complex and unintuitive. This code below might be a possible implementation:</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre><code class="language-html"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>container<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>card<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>title<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Card Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>content<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Card Content<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.container</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">container-type</span><span class="token punctuation">:</span> inline-size<span class="token punctuation">;</span> </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token selector">.card</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token selector">&gt; *</span> <span class="token punctuation">{</span> <span class="token property">padding</span><span class="token punctuation">:</span> 1cqbl<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Dealing with nested containers isn’t much a problem, because we can always set the <code>container-name</code> we want to inherit from. But, there might be a collision if we want to use different container references for <code>cqbl</code> and <code>cqw</code>.</p><p>Imagine this:</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre><code class="language-html"><span class="line"><span class="token comment">&lt;!-- We might want to inherit the cqem or cqbl from here --&gt;</span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>container-base<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">&lt;!-- But we might need cqw or cqh from here --&gt;</span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>two-column-grid<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> </span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>card<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>card<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Kinda sucks to be limited by container collisions.</p><h3 id="anchor-positioning-syntax" tabindex="-1"><a class="header-anchor" href="#anchor-positioning-syntax"><span>Anchor positioning syntax</span></a></h3><p>In this case, we first decide the base we want to inherit from. We can call this a <code>base-anchor</code>, or something similar.</p><p>Here, we can explicitly set a base anchor name — or perhaps even leave it as <code>none</code> if we don’t wanna name it. Then the rest of the elements within could inherit from this base value immediately:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.card</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">base-anchor</span><span class="token punctuation">:</span> --card<span class="token punctuation">;</span> <span class="token comment">/* or perhaps none */</span></span>
<span class="line">  <span class="token selector">&gt; *</span> <span class="token punctuation">{</span> <span class="token property">padding</span><span class="token punctuation">:</span> 1blh<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If we need to refer to this anchor from a completely unrelated component, we can leverage the anchor name and simply do this:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.far-away-comp</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">base-name</span><span class="token punctuation">:</span> --card<span class="token punctuation">;</span> </span>
<span class="line">  <span class="token comment">/* Then use blh from here */</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="double-anchor" tabindex="-1"><a class="header-anchor" href="#double-anchor"><span>Double anchor</span></a></h3><p>One fascinating aspect I can think of is a potential double-anchor use case where the <code>base</code> component is able to inherit its <code>font-size</code> or value from yet another base or its parent element.</p><p>This flexibility lets us create component variations based on font sizes incredibly easily without needing to rely on complex <code>em</code> calculations.</p><p>Here’s an example of what I’m talking about:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.prose</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">base-anchor</span><span class="token punctuation">:</span> --prose<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">font-size</span><span class="token punctuation">:</span> 1em<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">line-height</span><span class="token punctuation">:</span> 1.5<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/* Inherits font-size from .prose */</span></span>
<span class="line"><span class="token comment">/* This is automatic if base-name is not provided */</span></span>
<span class="line"><span class="token selector">.card</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">base-anchor</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">base-name</span><span class="token punctuation">:</span> --prose<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">/* In this case, 1blh could be 1.5em */</span></span>
<span class="line">  <span class="token selector">&gt; *</span> <span class="token punctuation">{</span> <span class="token property">padding</span><span class="token punctuation">:</span> 1blh<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/* After inheriting the font size, since we have a base-anchor in the card, we adjust the font-size value accordingly, so: </span>
<span class="line">  - 1bem would mean 0.8em further in the card</span>
<span class="line">  - 1blh could then mean 0.8 * 1.5em = 1.2em </span>
<span class="line">*/</span></span>
<span class="line"><span class="token selector">.card.card-sm</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">font-size</span><span class="token punctuation">:</span> 0.8em<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Fascinating, yeah? This brings about a whole new possibility when creating reusable components.</p><hr><h2 id="putting-it-into-practice-today" tabindex="-1"><a class="header-anchor" href="#putting-it-into-practice-today"><span>Putting it into practice today</span></a></h2><p>Let me preface this section with the fact that <code>bem</code> and <code>blh</code> does not exist today. So whatever implementation I can come up with is simply an imperfect stop-gap measure.</p><p><strong>Today, we are certain that we can use the <code>em</code> unit for such a purpose</strong> — but this requires a little bit more calculation, since <code>em</code> is a relative, not a base unit.</p><p>The first step is to determine the <code>base</code> element — and the <code>base</code> font size — which we can do by setting the <code>base-size</code> property:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.card</span> <span class="token punctuation">{</span> </span>
<span class="line">  <span class="token property">--base-size</span><span class="token punctuation">:</span> 1em<span class="token punctuation">;</span> </span>
<span class="line">  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--base-size<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token selector">.card-sm</span> <span class="token punctuation">{</span> </span>
<span class="line">  <span class="token property">--base-size</span><span class="token punctuation">:</span> 0.8em<span class="token punctuation">;</span> </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We can then simulate the <code>bem</code> (base <code>em</code>) unit by dividing the intended <code>font-size</code> with the <code>base-size</code>:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.card</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token selector">h2</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">--font-size</span><span class="token punctuation">:</span> 2em<span class="token punctuation">;</span></span>
<span class="line">    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--font-size<span class="token punctuation">)</span> / <span class="token function">var</span><span class="token punctuation">(</span>--base-size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Unfortunately, the above code won’t work because we can’t perform a <code>calc()</code> division with a unit-ed value. So the best we can do to remove the units from <code>--base-size</code>.</p><p>When we do this, we need to perform another <code>calc()</code> on the base element to create the actual <code>font-size</code> property:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.card</span> <span class="token punctuation">{</span> </span>
<span class="line">  <span class="token property">--base-size</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span> </span>
<span class="line">  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--base-size<span class="token punctuation">)</span> * 1em<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then we perform the same <code>calc()</code> in the <code>&lt;h2&gt;</code> to create its font size:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.card</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token selector">h2</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">--font-size</span><span class="token punctuation">:</span> 2<span class="token punctuation">;</span></span>
<span class="line">    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--font-size<span class="token punctuation">)</span> / <span class="token function">var</span><span class="token punctuation">(</span>--base-size<span class="token punctuation">)</span> * 1em<span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This is all starting to get a little “ugh”.</p><p>Nobody wants to all these boilerplate code. So, this is best abstracted away with a mixin, or perhaps even a function. If you use Sass, you might imagine something like this:</p><div class="language-scss line-numbers-mode" data-highlighter="prismjs" data-ext="scss"><pre><code class="language-scss"><span class="line"><span class="token keyword">@mixin</span> <span class="token function">base-anchor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--base-size<span class="token punctuation">)</span> <span class="token operator">*</span> 1em<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,36)),s("p",null,[n[57]||(n[57]=a("If you use Tailwind, perhaps you can imagine the Tailwind utility to do the same. After all, ")),e(c,{to:"/css-tricks.com/tailwinds-apply-feature-is-better-than-it-sounds.html"},{default:t(()=>n[56]||(n[56]=[s("strong",null,"Tailwind utilities can be seen as convenient Sass mixins",-1)])),_:1,__:[56]}),n[58]||(n[58]=a("."))]),n[88]||(n[88]=i(`<div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token atrule"><span class="token rule">@utility</span> base-anchor</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--base-size<span class="token punctuation">)</span> * 1em<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We can then apply this utility into the base element. The code looks a little bit cleaner:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.card</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token atrule"><span class="token rule">@apply</span> base-anchor<span class="token punctuation">;</span></span> </span>
<span class="line">  <span class="token property">--base-size</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span> </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token selector">.card-sm</span> <span class="token punctuation">{</span> <span class="token property">--base-size</span><span class="token punctuation">:</span> 0.8<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>For the <code>&lt;h2&gt;</code>, we can create another utility to perform the calculation for us. It’ll look something like this:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token atrule"><span class="token rule">@utility</span> text-relative</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--text-size<span class="token punctuation">)</span> / <span class="token function">var</span><span class="token punctuation">(</span>--base-size<span class="token punctuation">)</span> * 1em<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We can then use the utility like this:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.card .title</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token atrule"><span class="token rule">@apply</span> text-relative<span class="token punctuation">;</span></span></span>
<span class="line">  <span class="token property">--text-size</span><span class="token punctuation">:</span> 2<span class="token punctuation">;</span> </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7)),s("p",null,[n[60]||(n[60]=a("Now, to calculate the ")),n[61]||(n[61]=s("code",null,"padding",-1)),n[62]||(n[62]=a(" of the card for the ")),n[63]||(n[63]=s("code",null,".title",-1)),n[64]||(n[64]=a(" element, we need to reverse the ")),n[65]||(n[65]=s("code",null,"font-size",-1)),n[66]||(n[66]=a(" to get the ")),n[67]||(n[67]=s("code",null,"base-size",-1)),n[68]||(n[68]=a(" value. This is best done with a ")),e(c,{to:"/css-tricks.com/functions-in-css.html"},{default:t(()=>n[59]||(n[59]=[s("strong",null,"CSS function",-1)])),_:1,__:[59]}),n[69]||(n[69]=a(", which is not widely supported today, but hopefully, soon!"))]),n[89]||(n[89]=i(`<div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token atrule"><span class="token rule">@function</span> <span class="token function">--bem</span><span class="token punctuation">(</span>--multiplier<span class="token punctuation">)</span></span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">result</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--text-size / <span class="token function">var</span><span class="token punctuation">(</span>--base-size<span class="token punctuation">)</span> * 1em * --multiplier<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We can then use <code>--bem</code> to calculate the padding on the card title:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.card .title</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">/* ... */</span></span>
<span class="line">  <span class="token property">padding-block</span><span class="token punctuation">:</span> <span class="token function">--bem</span><span class="token punctuation">(</span>0.5<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">padding-inline</span><span class="token punctuation">:</span> <span class="token function">--bem</span><span class="token punctuation">(</span>1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We mentioned above that the <code>lh</code> value works better for margin and padding since it preserves vertical rhythm. So, why not create a <code>--blh</code> function too?</p><p>In this case, we can add a <code>--leading</code> variable that the function can inherit from:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token atrule"><span class="token rule">@function</span> <span class="token function">--blh</span><span class="token punctuation">(</span>--multiplier<span class="token punctuation">,</span> --lh-multiplier<span class="token punctuation">)</span></span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">result</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token function">var</span><span class="token punctuation">(</span></span>
<span class="line">      --text-size / <span class="token function">var</span><span class="token punctuation">(</span>--base-size<span class="token punctuation">)</span> * 1em * --multiplier *</span>
<span class="line">        <span class="token function">var</span><span class="token punctuation">(</span>--lh-multiplier<span class="token punctuation">,</span> <span class="token function">var</span><span class="token punctuation">(</span>--leading<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then we can use <code>--blh</code> like this:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.card .title</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">/* ... */</span></span>
<span class="line">  <span class="token property">padding-block</span><span class="token punctuation">:</span> <span class="token function">--blh</span><span class="token punctuation">(</span>0.5<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">padding-inline</span><span class="token punctuation">:</span> <span class="token function">--blh</span><span class="token punctuation">(</span>1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="in-the-spirit-of-today" tabindex="-1"><a class="header-anchor" href="#in-the-spirit-of-today"><span>In the spirit of today</span></a></h3><p>We can’t use <code>--bem</code> and <code>--blh</code> in production because CSS Functions are not available all browsers yet. In the spirit of making <code>bem</code> work <em>right now</em>, we can create a utility, that calculates the <code>--base-font-size</code> from the <code>--font-size</code>.</p><p>Notice this new variable is called <code>--base-font-size</code>, not <code>--base-size</code>, since <code>--base-size</code> is already used. (We cannot overwrite the CSS variable.)</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token comment">/* I multiplied the value by 1em here to make it easy for you to use the value */</span></span>
<span class="line"><span class="token atrule"><span class="token rule">@utility</span> base-font-size</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">--base-font-size</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--base-size<span class="token punctuation">)</span> / <span class="token function">var</span><span class="token punctuation">(</span>--font-size<span class="token punctuation">)</span> * 1em<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We can also create a utility called <code>base-line-height</code> to get the value of the <code>line-height</code>. When we do this, it’s much easier if we also pass in a <code>--leading</code> variable:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token atrule"><span class="token rule">@utility</span> base-line-height</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">--base-leading</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--base-font-size<span class="token punctuation">)</span>* <span class="token function">var</span><span class="token punctuation">(</span>--leading<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then we can use <code>calc</code> on <code>--base-leading</code> to get the values we want:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.card .title</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token atrule"><span class="token rule">@apply</span> text-relative<span class="token punctuation">;</span></span></span>
<span class="line">  <span class="token atrule"><span class="token rule">@apply</span> base-font-size<span class="token punctuation">;</span></span></span>
<span class="line">  <span class="token atrule"><span class="token rule">@apply</span> base-line-height<span class="token punctuation">;</span></span></span>
<span class="line">  <span class="token property">--font-size</span><span class="token punctuation">:</span> 2<span class="token punctuation">;</span> </span>
<span class="line">  <span class="token property">padding-inline</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--base-line-height<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">padding-block</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--base-line-height<span class="token punctuation">)</span> * 0.5<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="putting-it-all-together" tabindex="-1"><a class="header-anchor" href="#putting-it-all-together"><span>Putting it all together</span></a></h3><p>Let’s first put together the necessary utilities and functions to make this happen today:</p><div class="language-scss line-numbers-mode" data-highlighter="prismjs" data-ext="scss"><pre><code class="language-scss"><span class="line"><span class="token comment">/* The necessary utilities */</span></span>
<span class="line"><span class="token atrule"><span class="token rule">@utility</span> base-anchor</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--base-size<span class="token punctuation">)</span> <span class="token operator">*</span> 1em<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token atrule"><span class="token rule">@utility</span> text-relative</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--font-size<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">var</span><span class="token punctuation">(</span>--base-size<span class="token punctuation">)</span> <span class="token operator">*</span> 1em<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/* To use this today */</span></span>
<span class="line"><span class="token atrule"><span class="token rule">@utility</span> base-font-size</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">--base-font-size</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--base-size<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">var</span><span class="token punctuation">(</span>--font-size<span class="token punctuation">)</span> <span class="token operator">*</span> 1em<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token atrule"><span class="token rule">@utility</span> base-line-height</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">--base-line-height</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--base-font-size<span class="token punctuation">)</span>* <span class="token function">var</span><span class="token punctuation">(</span>--leading<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/* Easier usage when CSS Functions become available */</span></span>
<span class="line"><span class="token keyword">@function</span> <span class="token function">--bem</span><span class="token punctuation">(</span>--multiplier<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">result</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--font-size <span class="token operator">/</span> <span class="token function">var</span><span class="token punctuation">(</span>--base-size<span class="token punctuation">)</span> <span class="token operator">*</span> 1em <span class="token operator">*</span> --multiplier<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">@function</span> <span class="token function">--blh</span><span class="token punctuation">(</span>--multiplier<span class="token punctuation">,</span> --lh-multiplier<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">result</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token function">var</span><span class="token punctuation">(</span></span>
<span class="line">      --font-size <span class="token operator">/</span> <span class="token function">var</span><span class="token punctuation">(</span>--base-size<span class="token punctuation">)</span> <span class="token operator">*</span> 1em <span class="token operator">*</span> --multiplier <span class="token operator">*</span></span>
<span class="line">        <span class="token function">var</span><span class="token punctuation">(</span>--lh-multiplier<span class="token punctuation">,</span> <span class="token function">var</span><span class="token punctuation">(</span>--leading<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,19)),s("p",null,[n[71]||(n[71]=a("Now here’s the ")),n[72]||(n[72]=s("code",null,".card",-1)),n[73]||(n[73]=a(" code to achieve the functionality in Tailwind we were talking about. ")),s("a",W,[e(l,{icon:"iconfont icon-tailwindcss"}),n[70]||(n[70]=a("You can see it at work here"))]),n[74]||(n[74]=a("."))]),n[90]||(n[90]=i(`<div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token comment">/* What we can actually use today */</span></span>
<span class="line"><span class="token selector">.card</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token atrule"><span class="token rule">@apply</span> base-anchor<span class="token punctuation">;</span></span></span>
<span class="line">  <span class="token property">--base-size</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">--leading</span><span class="token punctuation">:</span> 1.5<span class="token punctuation">;</span></span>
<span class="line">  </span>
<span class="line">  <span class="token selector">&gt; *</span> <span class="token punctuation">{</span> <span class="token property">padding</span><span class="token punctuation">:</span> 1lh<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token selector">.title</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token atrule"><span class="token rule">@apply</span> text-relative<span class="token punctuation">;</span></span></span>
<span class="line">    <span class="token atrule"><span class="token rule">@apply</span> base-font-size<span class="token punctuation">;</span></span></span>
<span class="line">    <span class="token atrule"><span class="token rule">@apply</span> base-line-height<span class="token punctuation">;</span></span></span>
<span class="line">    <span class="token property">--font-size</span><span class="token punctuation">:</span> 2<span class="token punctuation">;</span> </span>
<span class="line">    <span class="token property">padding-inline</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--base-line-height<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token property">padding-block</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--base-line-height<span class="token punctuation">)</span> * 0.5<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token selector">.card-sm</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">--base-size</span><span class="token punctuation">:</span> 0.8<span class="token punctuation">;</span></span>
<span class="line">  <span class="token selector">.title</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">--font-size</span><span class="token punctuation">:</span> 1.2<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/* What we can use when CSS Functions are available */</span></span>
<span class="line"><span class="token selector">.card</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token atrule"><span class="token rule">@apply</span> base-anchor<span class="token punctuation">;</span></span></span>
<span class="line">  <span class="token property">--base-size</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span></span>
<span class="line">  </span>
<span class="line">  <span class="token selector">&gt; *</span> <span class="token punctuation">{</span> <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">--blh</span><span class="token punctuation">(</span>1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token selector">.title</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token atrule"><span class="token rule">@apply</span> text-relative<span class="token punctuation">;</span></span></span>
<span class="line">    <span class="token property">--text-size</span><span class="token punctuation">:</span> 2<span class="token punctuation">;</span> </span>
<span class="line">    <span class="token property">padding-block</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">--blh</span><span class="token punctuation">(</span>0.5<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>It’s still not as pretty as the <code>bem</code> and <code>blh</code> versions I’ve shown you above, but at the very least, we achieve some sort of functionality, yeah? And it doesn’t look half bad!</p><hr><h2 id="using-this-with-splendid-labz-today" tabindex="-1"><a class="header-anchor" href="#using-this-with-splendid-labz-today"><span>Using this with Splendid Labz today</span></a></h2>`,4)),s("p",null,[s("a",I,[e(l,{icon:"fas fa-globe"}),n[75]||(n[75]=a("Splendid Styles"))]),n[77]||(n[77]=a(" — the branch of ")),s("a",P,[e(l,{icon:"fas fa-globe"}),n[76]||(n[76]=a("Splendid Labz"))]),n[78]||(n[78]=a(" that handles design and styles — contains the code you can use today."))]),n[91]||(n[91]=i(`<p>We also included the <code>--bem</code> and <code>--blh</code> versions if you wanna play with them as well.</p><p>To use Splendid Styles, just download the library, import the <code>base-font-size</code> file, and do what you’ve just seen the above!</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">npm</span> i @splendidlabz/styles</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line">@import <span class="token string">&#39;@splendidlabz/styles/typography/base-font-size.css&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>That’s it!</p>`,5)),s("p",null,[n[80]||(n[80]=a("Now, if you’re interested in all of the tools I’m been cooking up to make web development simpler, you can grab an early bird discount for ")),s("a",R,[e(l,{icon:"fas fa-globe"}),n[79]||(n[79]=a("the Splendid Pro package"))]),n[81]||(n[81]=a(" today — this is available to all CSS-Tricks readers!"))]),n[92]||(n[92]=i('<p>(I might add a lifetime option to the Styles package as it evolves to sufficiently. But it might be a year or so before that happens.)</p><p>Alright, enough promotion. Let’s come back here.</p><hr><h2 id="what-do-you-think-about-this-unit-between-root-and-relative-values" tabindex="-1"><a class="header-anchor" href="#what-do-you-think-about-this-unit-between-root-and-relative-values"><span>What do you think about this unit between root and relative values?</span></a></h2><p>I hesitate to call it “base” <code>em</code> because “base” can mean so many things. But it also sounds right at the same time.</p><ul><li>Does <code>bem</code> and <code>blh</code> make sense to you?</li><li>Do you think I’m thinking a wee bit too much for this design aspect?</li><li>Maybe you’ve got a better name for this?</li></ul><p>I’d love to hear from you so please feel free to share your thoughts below!</p>',7)),b(" TODO: add ARTICLE CARD "),e(u,r(d({title:"We Might Need Something Between Root and Relative CSS Units for “Base Elements”",desc:"I've come to realize that perhaps we need to have a unit between root and relative values. This would bring about a whole new possibility when creating reusable components.",link:"https://chanhi2000.github.io/bookshelf/css-tricks.com/we-might-need-something-between-root-and-relative-css-units-for-base-elements.html",logo:"https://css-tricks/favicon.svg",background:"rgba(17,17,17,0.2)"})),null,16)])}const L=v(y,[["render",E]]),U=JSON.parse('{"path":"/css-tricks.com/we-might-need-something-between-root-and-relative-css-units-for-base-elements.html","title":"We Might Need Something Between Root and Relative CSS Units for “Base Elements”","lang":"en-US","frontmatter":{"lang":"en-US","title":"We Might Need Something Between Root and Relative CSS Units for “Base Elements”","description":"Article(s) > We Might Need Something Between Root and Relative CSS Units for “Base Elements”","icon":"fa-brands fa-css3-alt","category":["CSS","Article(s)"],"tag":["blog","css-tricks.com","css"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"We Might Need Something Between Root and Relative CSS Units for “Base Elements”\\",\\"image\\":[\\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/07/base-units-card.png?resize=1198%2C520&ssl=1\\"],\\"datePublished\\":\\"2025-08-13T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Zell Liew\\",\\"url\\":\\"https://css-tricks.com/author/zellwk/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/css-tricks.com/we-might-need-something-between-root-and-relative-css-units-for-base-elements.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"We Might Need Something Between Root and Relative CSS Units for “Base Elements”"}],["meta",{"property":"og:description","content":"Article(s) > We Might Need Something Between Root and Relative CSS Units for “Base Elements”"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://i0.wp.com/css-tricks.com/wp-content/uploads/2019/10/random-number-slots.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://i0.wp.com/css-tricks.com/wp-content/uploads/2019/10/random-number-slots.png"}],["meta",{"name":"twitter:image:alt","content":"We Might Need Something Between Root and Relative CSS Units for “Base Elements”"}],["meta",{"property":"article:author","content":"Zell Liew"}],["meta",{"property":"article:tag","content":"css"}],["meta",{"property":"article:tag","content":"css-tricks.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2025-08-13T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > We Might Need Something Between Root and Relative CSS Units for “Base Elements”"},{"property":"og:description","content":"We Might Need Something Between Root and Relative CSS Units for “Base Elements”"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/css-tricks.com/we-might-need-something-between-root-and-relative-css-units-for-base-elements.html"}]],"prev":"/programming/css/articles/README.md","date":"2025-08-13T00:00:00.000Z","isOriginal":false,"author":[{"name":"Zell Liew","url":"https://css-tricks.com/author/zellwk/"}],"cover":"https://i0.wp.com/css-tricks.com/wp-content/uploads/2019/10/random-number-slots.png"},"git":{},"readingTime":{"minutes":11.25,"words":3374},"filePathRelative":"css-tricks.com/we-might-need-something-between-root-and-relative-css-units-for-base-elements.md","copyright":{"author":"Zell Liew"}}');export{L as comp,U as data};
