import{_ as m}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as v,d as s,f as e,b as i,a as g,t as h,n as r,g as u,w as o,e as a,r as c,o as b}from"./app-BVguHYKu.js";const w="/bookshelf/assets/image/blog.logrocket.com/javascript-generators-the-superior-async-await/banner.png",f={},y={id:"frontmatter-title-관련",tabindex:"-1"},j={class:"header-anchor",href:"#frontmatter-title-관련"},x={class:"table-of-contents"},T={href:"https://github.com/tj/co",target:"_blank",rel:"noopener noreferrer"},S={href:"https://github.com/thefrontside/effection",target:"_blank",rel:"noopener noreferrer"},E={href:"https://codeburst.io/a-simple-guide-to-es6-iterators-in-javascript-with-examples-189d052c3d8e",target:"_blank",rel:"noopener noreferrer"},A={href:"https://codeburst.io/a-simple-guide-to-es6-iterators-in-javascript-with-examples-189d052c3d8e",target:"_blank",rel:"noopener noreferrer"},C={href:"https://en.wikipedia.org/wiki/Structured_concurrency#:~:text=Structured%20concurrency%20is%20a%20programming,structured%20approach%20to%20concurrent%20programming",target:"_blank",rel:"noopener noreferrer"},J={href:"https://github.com/dagda1/task",target:"_blank",rel:"noopener noreferrer"};function P(d,n){const l=c("VPCard"),t=c("router-link"),k=c("SiteInfo"),p=c("VPIcon");return b(),v("div",null,[s("h1",y,[s("a",j,[s("span",null,h(d.$frontmatter.title)+" 관련",1)])]),e(l,r(u({title:"TypeScript > Article(s)",desc:"Article(s)",link:"/programming/ts/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",x,[s("ul",null,[s("li",null,[e(t,{to:"#the-dark-ages-async-await"},{default:o(()=>n[0]||(n[0]=[a("The dark ages (async/await)")])),_:1,__:[0]})]),s("li",null,[e(t,{to:"#suspend-and-resume"},{default:o(()=>n[1]||(n[1]=[a("Suspend and resume")])),_:1,__:[1]})]),s("li",null,[e(t,{to:"#the-essence-of-the-generator"},{default:o(()=>n[2]||(n[2]=[a("The essence of the generator")])),_:1,__:[2]})]),s("li",null,[e(t,{to:"#generators-as-threads-of-execution"},{default:o(()=>n[3]||(n[3]=[a("Generators as threads of execution")])),_:1,__:[3]})]),s("li",null,[e(t,{to:"#real-world-scenario"},{default:o(()=>n[4]||(n[4]=[a("Real-world scenario")])),_:1,__:[4]})]),s("li",null,[e(t,{to:"#it-is-time-for-the-revolution-that-never-happened"},{default:o(()=>n[5]||(n[5]=[a("It is time for the revolution that never happened")])),_:1,__:[5]})])])]),n[30]||(n[30]=s("hr",null,null,-1)),e(k,{name:"JavaScript generators: The superior async/await",desc:"Generator functions can solve a whole breed of problems that nothing else can. It's time for the revolution that never happened.",url:"https://blog.logrocket.com/javascript-generators-the-superior-async-await",logo:"/assets/image/blog.logrocket.com/favicon.png",preview:"/assets/image/blog.logrocket.com/javascript-generators-the-superior-async-await/banner.png"}),s("p",null,[n[7]||(n[7]=a("One of the biggest challenges in writing frontend code or Node.js code is dealing with asynchronicity. There was an original generator revolution when packages like ")),s("a",T,[e(p,{icon:"iconfont icon-github"}),n[6]||(n[6]=s("code",null,"tj/co",-1))]),n[8]||(n[8]=a(" allowed us to write synchronous looking async code with normal constructs like ")),n[9]||(n[9]=s("code",null,"try",-1)),n[10]||(n[10]=a(" and ")),n[11]||(n[11]=s("code",null,"catch",-1)),n[12]||(n[12]=a(":"))]),n[31]||(n[31]=i(`<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">co<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">yield</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;http://some.domain&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// handle</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="the-dark-ages-async-await" tabindex="-1"><a class="header-anchor" href="#the-dark-ages-async-await"><span>The dark ages (async/await)</span></a></h2><figure><img src="`+w+`" alt="js generators" tabindex="0" loading="lazy"><figcaption>js generators</figcaption></figure><p>Around this time, C# and .net started shipping the original <code>async...await</code> construct that flattened async code into a more familiar shape:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> downloading <span class="token operator">=</span> <span class="token function">DownloadDocsMainPageAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">   </span>
<span class="line">    <span class="token class-name"><span class="token keyword">int</span></span> bytesLoaded <span class="token operator">=</span> <span class="token keyword">await</span> downloading<span class="token punctuation">;</span></span>
<span class="line">    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp"><span class="token keyword">nameof</span><span class="token punctuation">(</span>Main<span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string">: Downloaded </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">bytesLoaded</span><span class="token punctuation">}</span></span><span class="token string"> bytes.&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Some very clever people decided that JavaScript should adopt <code>async...await</code> keywords into the JavaScript language. Babel and regenerator transpiled the keyword constructs into code that used generators to achieve the async workflow. Nodejs went one step further and made <code>async...await</code> a first-class language citizen.</p><p>What makes <code>async...await</code> code so appealing is that it looks synchronous. The code appears to stop and wait until a response returns or an error occurs. Code can be wrapped in a familiar <code>try..catch</code> block.</p><p><code>async...await</code> gained a lot of traction, and the generator revolution was overlooked for the more limited <code>async...await</code>.</p><hr><h2 id="suspend-and-resume" tabindex="-1"><a class="header-anchor" href="#suspend-and-resume"><span>Suspend and resume</span></a></h2><p>What makes JavaScript generator functions so different is that they do not initially execute, and instead they return an iterator object with a <code>next</code> function. Execution in the function can suspend and resume at exactly the point that it was suspended in between <code>next</code> calls.</p>`,12)),s("p",null,[n[14]||(n[14]=a("I have been using the npm package ")),s("a",S,[e(p,{icon:"iconfont icon-github"}),n[13]||(n[13]=s("code",null,"thefrontside/effection",-1))]),n[15]||(n[15]=a("for some time now."))]),n[32]||(n[32]=i(`<p>Effection utilizes the magic of generators to allow us to write code like this:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token function">run</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">&#39;ws://localhost:8080&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">yield</span> <span class="token function">throwOnErrorEvent</span><span class="token punctuation">(</span>socket<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">yield</span> <span class="token function">once</span><span class="token punctuation">(</span>socket<span class="token punctuation">,</span> <span class="token string">&quot;open&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">let</span> messages <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">once</span><span class="token punctuation">(</span>socket<span class="token punctuation">,</span> <span class="token string">&quot;message&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> message <span class="token operator">=</span> <span class="token keyword">yield</span> messages<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Got message:&#39;</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>There are some beautiful abstractions in the code above that ease the path to writing less code and simpler code.</p><p>For example:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">yield</span> <span class="token function">once</span><span class="token punctuation">(</span>socket<span class="token punctuation">,</span> <span class="token string">&quot;open&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>The above code states that execution cannot proceed until the websocket <code>open</code> event has occurred.</p><p>If we were doing this in normal JavaScript, it would look something like this:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> remove <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;open&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// proceed</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="the-essence-of-the-generator" tabindex="-1"><a class="header-anchor" href="#the-essence-of-the-generator"><span>The essence of the generator</span></a></h2><p>Let us take a quick recap on what makes generators so powerful.</p>`,11)),s("p",null,[n[18]||(n[18]=a("A generator function is an ")),s("a",E,[e(p,{icon:"fas fa-globe"}),n[16]||(n[16]=a("iterator"))]),n[19]||(n[19]=a(" that returns an object that we can call next on. A generator appears to be a function, but it behaves like an ")),s("a",A,[e(p,{icon:"fas fa-globe"}),n[17]||(n[17]=a("iterator"))]),n[20]||(n[20]=a("."))]),n[33]||(n[33]=i(`<p>What makes generators so powerful is their ability to suspend and resume execution.</p><p>The <code>everySingleEvenNumber</code> generator function below illustrates this capability:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">everySingleEvenNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">yield</span> i <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> gen <span class="token operator">=</span> <span class="token function">everySingleEvenNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>gen<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>gen<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>gen<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 6</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>gen<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 8</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>while (true)</code> construct looks like an infinite loop, but execution is suspended after each <code>yield</code> and only resumed when the iterator <code>next</code> function gets called in <code>the console.log</code> code.</p><p>The current value of the local <code>i</code> variable does not reset between each call and is maintained.</p><p>Generators differ from async/await, where execution vanishes and only returns when a promise resolves or rejects.</p><hr><h2 id="generators-as-threads-of-execution" tabindex="-1"><a class="header-anchor" href="#generators-as-threads-of-execution"><span>Generators as threads of execution</span></a></h2><p>The ability to suspend and resume functions opens up many more doors than async/await has shut closed in its rapid adoption.</p>`,9)),s("p",null,[n[22]||(n[22]=s("code",null,"effection",-1)),n[23]||(n[23]=a(" allows you to spawn separate processes as generator functions and take care of the teardown of all child processes started with effection. This technique is known as ")),s("a",C,[e(p,{icon:"fa-brands fa-wikipedia-w"}),n[21]||(n[21]=a("structured concurrency"))]),n[24]||(n[24]=a("."))]),n[34]||(n[34]=i(`<p>Effection exposes a <code>task</code> object that can <code>spawn</code> new <code>detached</code> processes:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token operator">*</span> <span class="token punctuation">(</span>task<span class="token operator">:</span> Task<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;in main&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  task<span class="token punctuation">.</span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">yield</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;awake&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">yield</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="real-world-scenario" tabindex="-1"><a class="header-anchor" href="#real-world-scenario"><span>Real-world scenario</span></a></h2><p>Below is a <code>flakyConnection</code> function that will not connect until the fifth attempt:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">let</span> attempt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">flakyConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Promise<span class="token operator">&lt;</span><span class="token punctuation">{</span> <span class="token literal-property property">connected</span><span class="token operator">:</span> boolean <span class="token punctuation">}</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token operator">&lt;</span><span class="token punctuation">{</span> <span class="token literal-property property">connected</span><span class="token operator">:</span> boolean <span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      attempt<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">connected</span><span class="token operator">:</span> attempt <span class="token operator">===</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To get a connection, a client will have to attempt five times before being successful. Good client code will also include a timeout and throw an exception if the operation takes too long.</p><p>Writing polling code that times out is annoying code to write, but effection and the suspend and resume qualities of generators make this a very nice experience:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token operator">*</span> <span class="token punctuation">(</span>parent<span class="token operator">:</span> Task<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  parent<span class="token punctuation">.</span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token operator">*</span> <span class="token punctuation">(</span>child<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    child<span class="token punctuation">.</span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;primed to throw an Error&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">yield</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">8000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;you are out of time!  Better luck next time.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">connection attempt </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>attempt<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">...</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">const</span> <span class="token punctuation">{</span> connected <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">flakyConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>connected<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;we are connected!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;no cigar, we try again&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">      <span class="token keyword">yield</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">yield</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A new process is attached to the <code>parent</code> task object made available through <code>main</code>.</p><p>The code below elegantly takes care of setting a timeout that will throw an exception if the client cannot connect after 8000 milliseconds:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">child<span class="token punctuation">.</span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;primed to throw an Error&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">yield</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">8000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;you are out of time!  Better luck next time.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The effection <code>sleep</code> function will suspend execution for 8000 milliseconds. If the parent process still exists after 8000 milliseconds, then it will throw an exception.</p><p>The code below will attempt to connect in 200 millisecond intervals until it is successful:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">connection attempt </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>attempt<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">...</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> connected <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">flakyConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>connected<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;we are connected!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;no cigar, we try again&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">yield</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This code above can keep executing until a connection occurs or the timeout exception throws at which stage effection will close down all child processes.</p><p>Running the above code results in this output:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="output"><span>output</span></div><div class="language-plaintext line-numbers-mode" data-highlighter="prismjs" data-ext="plaintext"><pre><code class="language-plaintext"><span class="line">primed to throw an Error</span>
<span class="line">connection attempt 1...</span>
<span class="line">no cigar, we try again</span>
<span class="line">connection attempt 2...</span>
<span class="line">no cigar, we try again</span>
<span class="line">connection attempt 3...</span>
<span class="line">no cigar, we try again</span>
<span class="line">connection attempt 4...</span>
<span class="line">we are connected!</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,18)),s("p",null,[n[28]||(n[28]=a("Here is a ")),s("a",J,[n[25]||(n[25]=a("repo (")),e(p,{icon:"iconfont icon-github"}),n[26]||(n[26]=s("code",null,"dagda1/task",-1)),n[27]||(n[27]=a(")"))]),n[29]||(n[29]=a(" with the above code."))]),n[35]||(n[35]=i(`<p>You can check if the timeout works by changing the timeout code to something like this:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">child<span class="token punctuation">.</span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;primed to throw an Error&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">yield</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">4000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;you are out of time!  Better luck next time.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The timeout occurring results in this output:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">primed to <span class="token keyword">throw</span> an Error</span>
<span class="line">connection attempt <span class="token number">1.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line">no cigar<span class="token punctuation">,</span> we <span class="token keyword">try</span> again</span>
<span class="line">connection attempt <span class="token number">2.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line">no cigar<span class="token punctuation">,</span> we <span class="token keyword">try</span> again</span>
<span class="line"><span class="token literal-property property">Error</span><span class="token operator">:</span> you are out <span class="token keyword">of</span> time<span class="token operator">!</span>  Better luck next time<span class="token punctuation">.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="it-is-time-for-the-revolution-that-never-happened" tabindex="-1"><a class="header-anchor" href="#it-is-time-for-the-revolution-that-never-happened"><span>It is time for the revolution that never happened</span></a></h2><p>I still use async/await for simple one-shot async tasks with no workflow, but it is a limited paradigm.</p><p>Generator functions can solve a whole breed of problems that nothing else can. Starting and resuming threads of execution is incredibly powerful, and generators have this functionality built-in and out of the box.</p><p>Jump in! The water is warm.</p>`,9)),g(" TODO: add ARTICLE CARD "),e(l,r(u({title:"JavaScript generators: The superior async/await",desc:"Generator functions can solve a whole breed of problems that nothing else can. It's time for the revolution that never happened.",link:"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/javascript-generators-the-superior-async-await.html",logo:"/assets/image/blog.logrocket.com/favicon.png",background:"rgba(112,76,182,0.2)"})),null,16)])}const N=m(f,[["render",P]]),B=JSON.parse('{"path":"/blog.logrocket.com/javascript-generators-the-superior-async-await.html","title":"JavaScript generators: The superior async/await","lang":"en-US","frontmatter":{"lang":"en-US","title":"JavaScript generators: The superior async/await","description":"Article(s) > JavaScript generators: The superior async/await","icon":"iconfont icon-typescript","category":["TypeScript","Article(s)"],"tag":["blog","blog.logrocket.com","typescript","ts"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JavaScript generators: The superior async/await\\",\\"image\\":[\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/javascript-generators-the-superior-async-await/banner.png\\"],\\"datePublished\\":\\"2021-04-14T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Paul Cowan\\",\\"url\\":\\"https://blog.logrocket.com/author/paulcowan/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/javascript-generators-the-superior-async-await.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"JavaScript generators: The superior async/await"}],["meta",{"property":"og:description","content":"Article(s) > JavaScript generators: The superior async/await"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/javascript-generators-the-superior-async-await/banner.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/javascript-generators-the-superior-async-await/banner.png"}],["meta",{"name":"twitter:image:alt","content":"JavaScript generators: The superior async/await"}],["meta",{"property":"article:author","content":"Paul Cowan"}],["meta",{"property":"article:tag","content":"ts"}],["meta",{"property":"article:tag","content":"typescript"}],["meta",{"property":"article:tag","content":"blog.logrocket.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2021-04-14T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > JavaScript generators: The superior async/await"},{"property":"og:description","content":"JavaScript generators: The superior async/await"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/javascript-generators-the-superior-async-await.html"}]],"prev":"/programming/ts/articles/README.md","date":"2021-04-14T00:00:00.000Z","isOriginal":false,"author":[{"name":"Paul Cowan","url":"https://blog.logrocket.com/author/paulcowan/"}],"cover":"/assets/image/blog.logrocket.com/javascript-generators-the-superior-async-await/banner.png"},"git":{},"readingTime":{"minutes":4.76,"words":1429},"filePathRelative":"blog.logrocket.com/javascript-generators-the-superior-async-await.md","copyright":{"author":"Paul Cowan"}}');export{N as comp,B as data};
