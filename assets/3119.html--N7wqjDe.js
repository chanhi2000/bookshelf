import{_ as h}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as f,d as e,f as o,b as p,a as w,t as y,n as c,g as m,w as i,e as n,r as l,o as k}from"./app-BVguHYKu.js";const b={},v={id:"frontmatter-title-관련",tabindex:"-1"},x={class:"header-anchor",href:"#frontmatter-title-관련"},P={class:"table-of-contents"},C={href:"https://github.com/python/cpython/blob/main/Objects/unicodeobject.c#L14354",target:"_blank",rel:"noopener noreferrer"},z={class:"hint-container note"},S={href:"https://ko.wikipedia.org/wiki/ISO/IEC_8859-1",target:"_blank",rel:"noopener noreferrer"},I={href:"https://ko.wikipedia.org/wiki/ISO/IEC_8859-1",target:"_blank",rel:"noopener noreferrer"};function E(g,t){const d=l("VPCard"),s=l("router-link"),r=l("SiteInfo"),a=l("VPIcon"),u=l("RouteLink");return k(),f("div",null,[e("h1",v,[e("a",x,[e("span",null,y(g.$frontmatter.title)+" 관련",1)])]),o(d,c(m({title:"Python > Article(s)",desc:"Article(s)",link:"/programming/py/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),e("nav",P,[e("ul",null,[e("li",null,[o(s,{to:"#문자열-슬라이싱-사용-방법"},{default:i(()=>t[0]||(t[0]=[n("문자열 슬라이싱 사용 방법")])),_:1,__:[0]})]),e("li",null,[o(s,{to:"#불변-문자열-객체"},{default:i(()=>t[1]||(t[1]=[n("불변 문자열 객체")])),_:1,__:[1]}),e("ul",null,[e("li",null,[o(s,{to:"#_1-빈-문자열-슬라이싱"},{default:i(()=>t[2]||(t[2]=[n("1. 빈 문자열 슬라이싱")])),_:1,__:[2]})]),e("li",null,[o(s,{to:"#_2-전체-문자열-슬라이싱"},{default:i(()=>t[3]||(t[3]=[n("2. 전체 문자열 슬라이싱")])),_:1,__:[3]})]),e("li",null,[o(s,{to:"#_3-부분-문자열-슬라이싱-새-객체-생성"},{default:i(()=>t[4]||(t[4]=[n("3. 부분 문자열 슬라이싱 (새 객체 생성)")])),_:1,__:[4]})])])]),e("li",null,[o(s,{to:"#슬라이싱-결과-객체의-메모리-관리-최적화"},{default:i(()=>t[5]||(t[5]=[n("슬라이싱 결과 객체의 메모리 관리, 최적화")])),_:1,__:[5]}),e("ul",null,[e("li",null,[o(s,{to:"#부분-슬라이스의-메모리-복사"},{default:i(()=>t[6]||(t[6]=[n("부분 슬라이스의 메모리 복사")])),_:1,__:[6]})]),e("li",null,[o(s,{to:"#빈-문자열과-단일-문자-캐싱"},{default:i(()=>t[7]||(t[7]=[n("빈 문자열과 단일 문자 캐싱")])),_:1,__:[7]})]),e("li",null,[o(s,{to:"#기타-메모리-관리-프리리스트"},{default:i(()=>t[8]||(t[8]=[n("기타 메모리 관리 (프리리스트)")])),_:1,__:[8]})])])]),e("li",null,[o(s,{to:"#예제로-보는-내부-처리-흐름"},{default:i(()=>t[9]||(t[9]=[n("예제로 보는 내부 처리 흐름")])),_:1,__:[9]})]),e("li",null,[o(s,{to:"#마치며"},{default:i(()=>t[10]||(t[10]=[n("마치며")])),_:1,__:[10]})])])]),t[42]||(t[42]=e("hr",null,null,-1)),o(r,{name:"한 번에 이해하는 파이썬 ‘문자열 자르기(Slicing)’",desc:"파이썬을 사용해 문자열의 일부분을 잘라내는 기본적인 사용법, 그리고 구체적인 작동 원리를 이해하는 것은 더욱 강력하고 유연한 코드를 작성하는 데 있어 결정적인 차이를 만듭니다. 이번 글에서는 파이썬의 문자열 슬라이싱의 기본 문법부터, C언어로 구현된 CPython의 내부 로직까지 살펴보겠습니다.",url:"https://yozm.wishket.com/magazine/detail/3119/",logo:"https://yozm.wishket.com/favicon.ico",preview:"https://yozm.wishket.com/media/news/3119/1.png"}),t[43]||(t[43]=p('<p>파이썬은 데이터를 분석하는 과정에서 목적에 따라, 데이터를 처리하기 위한 매우 편리하고 다양한 기능을 제공합니다. 그중에서도 문자열 자르기(슬라이싱, Slicing)은 데이터의 형태나 도메인과 관계없이 핵심적인 역할을 수행하죠. 사용자는 문자열 슬라이싱을 통해 문자열의 특정 부분을 효율적으로 추출하거나, 조작할 수 있으며, 이는 데이터 분석, 웹 애플리케이션 개발, 자동화 스크립트 등 다양한 영역에서 필수적인 기술로 쓰입니다.</p><p>파이썬을 사용해 문자열의 일부분을 잘라내는 기본적인 사용법, 그리고 구체적인 작동 원리를 이해하는 것은 더욱 강력하고 유연한 코드를 작성하는 데 있어 결정적인 차이를 만듭니다. 이번 글에서는 파이썬의 문자열 슬라이싱의 기본 문법부터, C언어로 구현된 CPython의 내부 로직까지 깊게 살펴보겠습니다.</p><figure><img src="https://wishket.com/media/news/3119/1.png" alt="출처: 작가, GPT로 생성" tabindex="0" loading="lazy"><figcaption>출처: 작가, GPT로 생성</figcaption></figure><hr><h2 id="문자열-슬라이싱-사용-방법" tabindex="-1"><a class="header-anchor" href="#문자열-슬라이싱-사용-방법"><span>문자열 슬라이싱 사용 방법</span></a></h2><p>우선 파이썬 문자열 슬라이싱은 콜론(:)을 사용하여, 문자열의 일부분을 선택하는 방식으로 이루어집니다. 기본적인 문법은 <code>오브젝트[시작:끝:증감]</code>** 형태를 가지며, 각 인덱스(요소)는 슬라이스의 범위를 정의하는 데 중요한 역할을 합니다.</p><p><strong>시작(start)</strong> 인덱스는 슬라이스가 시작되는 위치를 나타냅니다. 주의할 점으로, 이 위치에 해당하는 문자는 슬라이스 결과물에 포함됩니다. 만약 시작 인덱스가 생략되면 파이썬은 0을 값으로 사용, 즉, 문자열의 처음부터 슬라이스를 시작합니다.</p><p>이어서 <strong>끝(end)</strong> 인덱스는 슬라이스가 끝나는 위치를 나타냅니다. 시작 인덱스와의 차이점으로 이 위치에 해당하는 문자는 슬라이스 결과에 포함되지 않는다는 것입니다. 끝 인덱스가 주어지지 않는다면, 슬라이스는 문자열의 마지막 문자까지 포함합니다.</p><p>마지막으로 <strong>스텝(step)</strong> 값은 슬라이스 과정에서 문자를 건너뛸 간격을 지정합니다. 이 값은 선택 사항이며, 입력되지 않는다면 1을 기본값으로 사용하여 모든 문자를 순차적으로 선택합니다.</p><p>이어서 양수 및 음수 인덱스를 활용한 슬라이싱 예시를 보겠습니다.</p><ul><li><strong>양수 인덱스</strong>: 문자열의 처음부터 인덱싱하며, <code>0</code>부터 시작합니다. 예를 들어, 문자열 <code>s = “yozm.wishket.com”</code>에서 <code>s[5:12]</code>는 인덱스 <code>5</code>(&#39;w&#39;)부터 <code>11</code>(&#39;t&#39;)까지의 부분 문자열 <code>&quot;wishket&quot;</code>을 반환합니다.</li><li><strong>음수 인덱스</strong>: 문자열의 끝에서부터 인덱싱하며, <code>-1</code>부터 시작합니다. 예를 들어, 동일한 문자열 s에서 <code>s[-6:-1]</code>는 뒤에서 6번째 문자(&#39;e&#39;)부터 뒤에서 2번째 문자(&#39;o&#39;)까지의 부분 문자열 <code>&quot;et.co&quot;</code>를 반환합니다.</li></ul><figure><img src="https://wishket.com/media/news/3119/2.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>스텝을 사용하면 더욱 다양한 방식으로 문자열을 슬라이스할 수 있습니다.</p><ul><li>양수 스텝: <code>s[2:8:2]</code>는 인덱스 2부터 8까지 2개 간격으로 문자를 추출하여 &quot;z.i&quot;를 반환합니다.</li><li>음수 스텝: <code>s[6:1:-2]</code>는 인덱스 6부터 1까지 역순으로 2개 간격으로 문자를 추출하여 &quot;i.z&quot;를 반환합니다. 특히, <code>s[::-1]</code>를 사용하면 텍스트 전체를 역순으로 슬라이스하여 &quot;moc.tekhsiw.mzoy&quot;를 얻을 수 있습니다.</li></ul><figure><img src="https://wishket.com/media/news/3119/3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>문자열 슬라이싱은 실제 다양한 방식으로 활용될 수 있으며, 몇 가지 구체적인 예시는 다음과 같습니다.</p>',16)),e("ul",null,[e("li",null,[t[11]||(t[11]=n("특정 패턴 추출: 파일 경로에서 파일명이나 확장자를 추출하거나, URL에서 특정 부분을 분리하는 데 유용합니다. 예를 들어, 파일 경로 ")),o(a,{icon:"fas fa-folder-open"}),t[12]||(t[12]=e("code",null,"C:/Users/Public/Documents/",-1)),o(a,{icon:"fas fa-file-pdf"}),t[13]||(t[13]=e("code",null,"report.pdf",-1)),t[14]||(t[14]=n('에서 파일명 "report"를 추출하기 위해 슬라이싱을 활용할 수 있습니다.'))]),t[15]||(t[15]=e("li",null,[n("문자열 일부 수정 (새로운 문자열 생성): 파이썬 문자열은 "),e("strong",null,"불변"),n('(immutable)하므로, 슬라이싱을 통해 기존 문자열의 일부를 기반으로 새로운 문자열을 생성합니다. 예를 들어, 문자열 "Hello"의 첫 글자를 '),e("code",null,'"J"'),n("로 바꾸려면, "),e("code",null,'"J" + "Hello"[1:]'),n("와 같이 슬라이싱과 문자열 연결을 사용해야만 합니다.")],-1)),t[16]||(t[16]=e("li",null,[n("문자열 역순 만들기: 텍스트 분석이나 데이터 처리 시 문자열을 역순으로 정렬해야 하는 경우가 있습니다. 앞서 소개한 "),e("code",null,"[::-1]"),n(" 슬라이스를 사용하면 간편하게 문자열을 뒤집을 수 있습니다.")],-1))]),t[44]||(t[44]=p('<hr><h2 id="불변-문자열-객체" tabindex="-1"><a class="header-anchor" href="#불변-문자열-객체"><span>불변 문자열 객체</span></a></h2><p>불변이란 원래의 오브젝트의 내용을 변경할 수 없음을 의미합니다. 만약 <code>s = ‘www.wishket.com’</code> 이라는 코드를 실행하면 ‘yozm.wishket.com’에서 s의 내용이 변경되고, 문제가 발생하지 않기에 내용이 변경되는 것으로 오해할 수 있는데요. 이는 메모리에 <code>‘www.wishket.com’</code>이라는 문자열 오브젝트를 새롭게 만들고, 이 주소를 s에 새롭게 할당한 것입니다.</p><figure><img src="https://wishket.com/media/news/3119/4.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>그렇기에 문자열의 내부를 변경하면 의도한 대로 불변을 변경하는 과정에서의 오류를 확인할 수 있습니다.</p><figure><img src="https://wishket.com/media/news/3119/5.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>이 불변의 개념이 문자열 슬라이싱에서 중요한 이유는, 슬라이싱 또한 불변인 원본 문자열을 변경하지 않으면서, 문자열의 일부를 사용하여 새로운 문자열을 만드는 작업이기 때문입니다. 하지만 파이썬, 엄밀히는 CPython에서는 가능하면 메모리 복사를 피하고, 불필요한 객체 생성을 줄이기 위한 여러 최적화 전략들이 코드에 녹아있습니다. 이제 실제로 CPython이 이 슬라이싱을 처리하는 과정을 내부 코드와 함께 알아보겠습니다.</p><p>파이썬 텍스트 객체의 슬라이싱 연산은 객체의 <code>__getitem__</code> 메소드에 <code>slice</code> 객체를 전달하여 이루어집니다. 즉, 앞서 본 <code>s[5:12]</code>와 아래의 <code>slice</code> 객체를 사용하는 코드는 동일한 역할을 합니다.</p><figure><img src="https://wishket.com/media/news/3119/6.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',9)),e("p",null,[t[20]||(t[20]=n("CPython에서는 ")),t[21]||(t[21]=e("code",null,"unicode_subscript",-1)),t[22]||(t[22]=n("라는 함수를 통해 이 동작을 구현합니다. 이 함수는 인덱싱과 슬라이싱을 모두 처리하는데, 전달된 item이 정수 인덱스라면 개별 문자를 반환하고 ")),t[23]||(t[23]=e("code",null,"slice",-1)),t[24]||(t[24]=n(" 객체라면 하위 문자열을 반환하도록 되어 있습니다. (")),e("a",C,[t[17]||(t[17]=n("cpython 코드 원본 참고 (")),o(a,{icon:"iconfont icon-github"}),t[18]||(t[18]=e("code",null,"python/cpython",-1)),t[19]||(t[19]=n(")"))]),t[25]||(t[25]=n(")"))]),t[45]||(t[45]=p('<p>이어지는 코드는 슬라이싱하는 상황(<code>slice</code> 객체를 사용)의 핵심 로직 중 일부로, 먼저 슬라이스 범위에 해당하는 길이 <code>slicelength</code>를 계산한 다음, 이 값에 따라 세 갈래의 처리를 합니다.</p><figure><img src="https://wishket.com/media/news/3119/7.png" alt="Cpython 깃허브" tabindex="0" loading="lazy"><figcaption>Cpython 깃허브</figcaption></figure><h3 id="_1-빈-문자열-슬라이싱" tabindex="-1"><a class="header-anchor" href="#_1-빈-문자열-슬라이싱"><span>1. 빈 문자열 슬라이싱</span></a></h3><p>만약 <code>slicelength</code>가 0 이하라면 즉, 슬라이싱 결과가 빈 문자열이라면 <code>_Py_RETURN_UNICODE_EMPTY()</code>를 호출합니다. 이 함수는 이름에서 의미하듯 비어있는 unicode를 반환하는 함수인데, 전역적으로 미리 정의된 빈 문자열 객체를 반환합니다. 즉, 임의의 문자열 s에 대해 <code>s[1:1]</code>처럼 정의할 수 있는 빈 문자열 <code>“”</code>는 CPython에 미리 하나만 생성해 두고, 모든 곳에서 참조하는 싱글톤(singleton)이기 때문에, 불필요하게 매번 새로운 객체를 만들지 않습니다.</p><figure><img src="https://wishket.com/media/news/3119/8.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_2-전체-문자열-슬라이싱" tabindex="-1"><a class="header-anchor" href="#_2-전체-문자열-슬라이싱"><span>2. 전체 문자열 슬라이싱</span></a></h3><p><code>start == 0</code>, <code>step == 1</code> 그리고 원본 문자열의 길이와 <code>slicelength</code>가 같아 전체 문자열을 슬라이싱 하는 경우, 새로운 객체를 만들지 않고 원본 문자열 객체를 그대로 반환합니다. 이 방법 덕분에 아래와 같이 문자열을 같은 값으로 새롭게 정의하는 것은 다른 오브젝트로 계산되지만, 전체 문자열을 슬라이싱하는 정의 방식은 같은 오브젝트로 계산됩니다. 이를 통해 불필요한 메모리 복사를 아낄 수 있습니다.</p><figure><img src="https://wishket.com/media/news/3119/9.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_3-부분-문자열-슬라이싱-새-객체-생성" tabindex="-1"><a class="header-anchor" href="#_3-부분-문자열-슬라이싱-새-객체-생성"><span>3. 부분 문자열 슬라이싱 (새 객체 생성)</span></a></h3><p>앞서 다룬 두 가지 외의 일반적인 슬라이싱을 하는 경우로, 슬라이싱한 내용을 담은 새로운 문자열 객체를 생성합니다. 여기서도 한가지 눈여겨 볼 부분은 코드가 <code>step == 1</code>인 경우와 <code>step != 1</code>인 경우로 나뉘는 것입니다.</p><ul><li><strong><code>step == 1</code>인 경우</strong>: <code>PyUnicode_Substring</code>이라는 함수를 통해 원본 문자열의 <code>start</code>부터 <code>slicelenth</code>만큼을 읽어들여 새로운 오브젝트를 할당하고 해당 메모리에 문자열 데이터를 복사합니다.</li><li><strong><code>step != 1</code>인 경우</strong>: 먼저 <code>slicelength</code>만큼의 버퍼 영역을 메모리 할당한 뒤 원본 문자열에서 해당 인덱스의 문자들을 하나씩 복사합니다. 이어 버퍼로부터 문자열 객체를 생성하고, 버퍼를 해제합니다.</li></ul><figure><img src="https://wishket.com/media/news/3119/10.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://wishket.com/media/news/3119/11.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>다시 정리하면, 미리 “상수”처럼 정의된 빈 문자열을 반환하거나, 전체 문자열을 그대로 슬라이싱하여 원본 객체를 반환하는 경우가 아니라면 슬라이싱은 항상 새로운 문자열 객체를 생성하고, 내용 문자를 복사하여 채웁니다. 이는 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mrow><mo fence="true">(</mo><mi>n</mi><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">O\\left(n\\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">n</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span> 시간 복잡도를 갖습니다.</p>',14)),e("div",z,[t[29]||(t[29]=e("p",{class:"hint-container-title"},"Note",-1)),e("p",null,[t[27]||(t[27]=n("시간 복잡도에 대해서는 ")),o(u,{to:"/yozm.wishket.com/2266.html"},{default:i(()=>t[26]||(t[26]=[e("strong",null,"아티클",-1)])),_:1,__:[26]}),t[28]||(t[28]=n("을 참고하세요."))])]),t[46]||(t[46]=e("hr",null,null,-1)),t[47]||(t[47]=e("h2",{id:"슬라이싱-결과-객체의-메모리-관리-최적화",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#슬라이싱-결과-객체의-메모리-관리-최적화"},[e("span",null,"슬라이싱 결과 객체의 메모리 관리, 최적화")])],-1)),t[48]||(t[48]=e("p",null,"위에서 살펴본 구현으로부터, 슬라이싱 결과 문자열은 원본과 분리된 별도의 객체임을 알 수 있습니다. 따라서 전체 슬라이스의 예외를 빼면 원본 문자열 객체는 슬라이싱 후에도 참조 카운트가 변하지 않으며, 새로 만들어진 하위 문자열 객체의 수명이 독자적으로 관리됩니다. 이러한 설계에는 여러 가지 이유와 부가적인 내부 최적화가 존재합니다.",-1)),t[49]||(t[49]=e("h3",{id:"부분-슬라이스의-메모리-복사",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#부분-슬라이스의-메모리-복사"},[e("span",null,"부분 슬라이스의 메모리 복사")])],-1)),t[50]||(t[50]=e("p",null,"불변 객체인 문자열은 이론적으로는 뷰(view) 형태로 구현할 수도 있습니다. 예컨대 C나 Java의 일부 구현처럼, 원본 문자열 버퍼를 공유하면서 시작 오프셋과 길이만 따로 관리하는 방식도 생각해 볼 수 있습니다. 그러나 CPython은 이런 방식을 택하지 않았습니다. 왜냐하면 작은 부분 문자열이 큰 원본을 참조할 경우, 부분 문자열이 살아있는 한 거대한 원본 메모리를 해제하지 못해 메모리 누수를 유발할 수 있기 때문입니다.",-1)),o(r,{name:"Does string slicing perform copy in memory?",desc:"Does string slicing perform copy in memory? | stackoverflow",url:"https://stackoverflow.com/questions/64871329/does-string-slicing-perform-copy-in-memory/",logo:"https://cdn.sstatic.net/Sites/stackoverflow/Img/favicon.ico?v=ec617d715196",preview:"https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded"}),t[51]||(t[51]=e("p",null,"CPython의 가비지 컬렉션은 기본적으로 참조 카운트에 기반하므로, 부분 문자열이 원본을 참조하면 원본 객체는 참조 카운트가 남아 메모리가 유지됩니다. 따라서 작은 조각을 쓰기 위해 거대한 문자열 전체를 메모리에 붙잡아 두는 상황이 발생할 수 있습니다.",-1)),t[52]||(t[52]=e("p",null,"이러한 이유로 CPython은 안전하고 단순한 복사를 통한 구현을 선택했습니다.",-1)),t[53]||(t[53]=e("figure",null,[e("img",{src:"https://wishket.com/media/news/3119/12.png",alt:"",tabindex:"0",loading:"lazy"}),e("figcaption")],-1)),t[54]||(t[54]=e("h3",{id:"빈-문자열과-단일-문자-캐싱",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#빈-문자열과-단일-문자-캐싱"},[e("span",null,"빈 문자열과 단일 문자 캐싱")])],-1)),e("p",null,[t[31]||(t[31]=n("CPython은 특정 문자열들을 전역적으로 선언, 미리 캐싱하여 매번 새로 할당하지 않도록 최적화합니다. 대표적인 것이 앞서 살펴본 빈 문자열 ")),t[32]||(t[32]=e("code",null,'""',-1)),t[33]||(t[33]=n(" 그리고 추가로 자주 쓰이는 한 글자 문자열들입니다. 앞서 설명했듯, 빈 문자열은 ")),t[34]||(t[34]=e("code",null,"unicode_empty",-1)),t[35]||(t[35]=n("라는 전역 싱글톤 객체로 관리되며 슬라이싱 결과가 빈 문자열이면 이 객체를 반환합니다. 또한 ")),e("a",S,[o(a,{icon:"fa-brands fa-wikipedia-w"}),t[30]||(t[30]=n("라틴-1"))]),t[36]||(t[36]=n(" 범위 (U+0000 ~ U+00FF)의 단일 문자 문자열에 대해서는 미리 256개를 만들어 ")),t[37]||(t[37]=e("code",null,"unicode_latin1",-1)),t[38]||(t[38]=n(" 배열에 캐싱해 사용합니다."))]),t[55]||(t[55]=e("p",null,'예를 들어, 슬라이싱 결과가 "A"나 "5"처럼 한 글자인 경우, 그리고 그 문자의 코드 포인트가 0~255 사이라면 CPython은 새로운 객체를 만들지 않고 이미 준비된 해당 문자를 가리키는 문자열 객체를 반환합니다.',-1)),t[56]||(t[56]=e("p",null,[n("따라서 "),e("code",null,'"a"[0:1]'),n(", "),e("code",null,'"a"[::]'),n(" 등으로 'a'를 얻으면 항상 동일한 내부 객체를 참조하게 됩니다. 반면 "),e("code",null,"U+0100(256)"),n(" 이상의 문자에 대해서는 기본 설정상 캐싱 되지 않아 같은 문자라도 새로운 객체가 생성됩니다.")],-1)),t[57]||(t[57]=e("figure",null,[e("img",{src:"https://wishket.com/media/news/3119/13.png",alt:"CPython 깃허브",tabindex:"0",loading:"lazy"}),e("figcaption",null,"CPython 깃허브")],-1)),e("figure",null,[t[41]||(t[41]=e("img",{src:"https://wishket.com/media/news/3119/14.png",alt:'출처: 위키피디아 <VPIcon icon="fa-brands fa-wikipedia-w"/>ISO/IEC 8859-1',tabindex:"0",loading:"lazy"},null,-1)),e("figcaption",null,[t[40]||(t[40]=n("출처: 위키피디아 ")),e("a",I,[o(a,{icon:"fa-brands fa-wikipedia-w"}),t[39]||(t[39]=n("ISO/IEC 8859-1"))])])]),t[58]||(t[58]=p(`<h3 id="기타-메모리-관리-프리리스트" tabindex="-1"><a class="header-anchor" href="#기타-메모리-관리-프리리스트"><span>기타 메모리 관리 (프리리스트)</span></a></h3><p>CPython은 작은 Unicode 객체 생성을 빠르게 하기 위해 프리리스트(<code>freelist</code>)도 사용합니다. 일정 크기 이하(예: 길이 1~8)의 Unicode 객체들은 해제 시 완전히 메모리를 반환하지 않고 내부 free 리스트에 보관했다가, 새로운 문자열 생성 시 재사용하는 최적화가 있습니다. 이 방법은 슬라이싱뿐만 아니라 모든 작은 문자열 생성에 적용되며, 메모리 할당/해제의 오버헤드를 줄여줍니다. 다만 이 부분은 CPython의 내부 구현 최적화이며, 외부에서 직접적으로 확인하기는 어렵습니다.</p><figure><img src="https://wishket.com/media/news/3119/15.png" alt="CPython 깃허브" tabindex="0" loading="lazy"><figcaption>CPython 깃허브</figcaption></figure><hr><h2 id="예제로-보는-내부-처리-흐름" tabindex="-1"><a class="header-anchor" href="#예제로-보는-내부-처리-흐름"><span>예제로 보는 내부 처리 흐름</span></a></h2><p>위 내용을 바탕으로, 실제 파이썬 코드 예제가 내부에서 어떻게 처리되는지 다시 한번 따라가 보겠습니다. 예시로는 아래의 코드를 사용합니다.</p><figure><img src="https://wishket.com/media/news/3119/16.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>이 코드에 대한 CPython 내부 처리 과정은 다음과 같습니다.</p><div class="hint-container tip"><p class="hint-container-title">Example #1</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code class="language-python"><span class="line">sub1 <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>이 슬라이스는 문자열 전체(‘Python Substring Example’)를 반환하므로, <code>unicode_subscript</code> 함수에서 두 번째 조건에 부합합니다. 따라서 CPython은 <code>s</code> 객체 자체를 반환합니다. 결과적으로 <code>sub1</code> is s는 두 객체가 같은 객체이므로 <code>True</code>가 되고, <code>id(sub1)</code>과 <code>id(s)</code>도 동일합니다. 또한 새로운 메모리 할당이 일어나지 않으므로, 메모리 사용량 면에서도 이 연산은 저렴합니다(참조 카운트만 증가).</p></div><div class="hint-container tip"><p class="hint-container-title">Example #2</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code class="language-python"><span class="line">sub2 <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>부분 문자열 &quot;Substring&quot;을 추출하는 슬라이스입니다. 이 경우 <code>step=1</code>이지만 전체 길이가 아니므로, <code>unicode_subscript</code>는 새로운 Unicode 객체를 생성하게 됩니다. 내부적으로 <code>PyUnicode_FromUnicode(s-&gt;str + 7, 9)</code> (9글자 길이)가 호출되고, 원본 s의 데이터 중 7번 인덱스부터 9개의 문자를 메모리 복사하여 새 버퍼에 채웁니다. 이 버퍼로 <code>PyUnicodeObject</code> 구조체가 할당되어 <code>sub2</code>를 가리키게 됩니다. 이제 <code>sub2</code>는 <code>s</code>와 다른 객체이며(<code>sub2</code> is <code>s</code>는 <code>False</code>), <code>id(sub2)</code>도 다릅니다. 그러나 <code>sub2</code>의 내용은 &quot;Substring&quot;으로 원본의 해당 부분과 동일합니다. 원본 <code>s</code>와 <code>sub2</code>는 메모리를 공유하지 않으므로, 설령 이후에 s가 참조 회수가 없어 가비지 컬렉션 되어도 <code>sub2</code>는 독립적으로 내용을 유지합니다.</p></div><div class="hint-container tip"><p class="hint-container-title">Example #3</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code class="language-python"><span class="line">sub3 <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>이 슬라이스는 처음부터 끝까지 <code>step=2</code>로 (0, 2 , 4, ...) 문자를 취합니다. 구현상 <code>step != 1</code>이므로, CPython은 <code>slicelength</code>를 계산한 후 그 길이만큼 버퍼를 할당하고, 원본의 해당 인덱스 문자들을 하나씩 복사합니다. 이 예에서 <code>s</code>의 짝수 인덱스 문자를 모아 &quot;Pto usrn xml&quot; 같은 결과를 얻게 될 것입니다. 이 역시 새로운 객체 <code>sub3</code>를 생성하며, 메모리 복사가 발생합니다. 다만 <code>step=2</code>라 연속되지 않은 메모리 접근이지만, 여전히 복사 비용은 결과 문자열 길이에 비례합니다.</p></div><hr><h2 id="마치며" tabindex="-1"><a class="header-anchor" href="#마치며"><span>마치며</span></a></h2><p>이렇게 파이썬 문자열 슬라이싱의 기본적인 문법부터 시작하여, 인덱싱 방식, 파라미터의 역할, 문자열 불변성의 개념, 그리고 CPython 내부 구현까지 깊이 있게 살펴보았는데요.</p><p>문자열 슬라이싱은 파이썬에서 텍스트 데이터를 효율적으로 처리하기 위한 강력한 도구이며, 그 작동 원리를 정확히 이해하는 것은 사용자가 더욱 효과적이고 유연한 코드를 작성하는 데 필수적입니다. 기본 문법과 다양한 활용법을 숙지하고, 인덱싱 방식과 파라미터의 역할을 명확히 이해하며, 문자열의 불변성이라는 핵심 개념을 기억한다면, 파이썬을 이용한 문자열 조작 능력을 한 단계 더 향상시킬 수 있을 겁니다.</p><p>더 나아가 CPython 소스 코드 탐색을 통해, 슬라이싱의 내부 작동 방식을 이해한다면 파이썬 언어 자체에 대한 깊이 있는 통찰력을 얻을 수 있죠. 앞으로도 파이썬 문서, 튜토리얼, 그리고 다양한 문제 해결을 통해 문자열 슬라이싱을 포함한 프로그래밍 능력을 더욱 발전시킬 수 있길 기대합니다.</p>`,16)),w(" TODO: add ARTICLE CARD "),o(d,c(m({title:"한 번에 이해하는 파이썬 ‘문자열 자르기(Slicing)’",desc:"파이썬을 사용해 문자열의 일부분을 잘라내는 기본적인 사용법, 그리고 구체적인 작동 원리를 이해하는 것은 더욱 강력하고 유연한 코드를 작성하는 데 있어 결정적인 차이를 만듭니다. 이번 글에서는 파이썬의 문자열 슬라이싱의 기본 문법부터, C언어로 구현된 CPython의 내부 로직까지 살펴보겠습니다.",link:"https://chanhi2000.github.io/bookshelf/yozm.wishket.com/3119.html",logo:"https://yozm.wishket.com/favicon.ico",background:"rgba(84,7,224,0.2)"})),null,16)])}const R=h(b,[["render",E]]),U=JSON.parse('{"path":"/yozm.wishket.com/3119.html","title":"한 번에 이해하는 파이썬 ‘문자열 자르기(Slicing)’","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"한 번에 이해하는 파이썬 ‘문자열 자르기(Slicing)’","description":"Article(s) > 한 번에 이해하는 파이썬 ‘문자열 자르기(Slicing)’","icon":"fa-brands fa-python","category":["Python","Article(s)"],"tag":["blog","yozm.wishket.com","py","python"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"한 번에 이해하는 파이썬 ‘문자열 자르기(Slicing)’\\",\\"image\\":[\\"https://wishket.com/media/news/3119/1.png\\",\\"https://wishket.com/media/news/3119/2.png\\",\\"https://wishket.com/media/news/3119/3.png\\",\\"https://wishket.com/media/news/3119/4.png\\",\\"https://wishket.com/media/news/3119/5.png\\",\\"https://wishket.com/media/news/3119/6.png\\",\\"https://wishket.com/media/news/3119/7.png\\",\\"https://wishket.com/media/news/3119/8.png\\",\\"https://wishket.com/media/news/3119/9.png\\",\\"https://wishket.com/media/news/3119/10.png\\",\\"https://wishket.com/media/news/3119/11.png\\",\\"https://wishket.com/media/news/3119/12.png\\",\\"https://wishket.com/media/news/3119/13.png\\",\\"https://ko.wikipedia.org/wiki/ISO/IEC_8859-1\\",\\"https://wishket.com/media/news/3119/15.png\\",\\"https://wishket.com/media/news/3119/16.png\\"],\\"datePublished\\":\\"2025-05-12T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"애옹킴\\",\\"url\\":\\"https://yozm.wishket.com/magazine/@jhk0530/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/yozm.wishket.com/3119.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"한 번에 이해하는 파이썬 ‘문자열 자르기(Slicing)’"}],["meta",{"property":"og:description","content":"Article(s) > 한 번에 이해하는 파이썬 ‘문자열 자르기(Slicing)’"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://yozm.wishket.com/media/news/3119/1.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://yozm.wishket.com/media/news/3119/1.png"}],["meta",{"name":"twitter:image:alt","content":"한 번에 이해하는 파이썬 ‘문자열 자르기(Slicing)’"}],["meta",{"property":"article:author","content":"애옹킴"}],["meta",{"property":"article:tag","content":"python"}],["meta",{"property":"article:tag","content":"py"}],["meta",{"property":"article:tag","content":"yozm.wishket.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2025-05-12T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > 한 번에 이해하는 파이썬 ‘문자열 자르기(Slicing)’"},{"property":"og:description","content":"한 번에 이해하는 파이썬 ‘문자열 자르기(Slicing)’"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/yozm.wishket.com/3119.html"}]],"prev":"/programming/py/articles/README.md","date":"2025-05-12T00:00:00.000Z","isOriginal":false,"author":[{"name":"애옹킴","url":"https://yozm.wishket.com/magazine/@jhk0530/"}],"cover":"https://yozm.wishket.com/media/news/3119/1.png"},"git":{},"readingTime":{"minutes":1.97,"words":591},"filePathRelative":"yozm.wishket.com/3119.md","copyright":{"author":"애옹킴"}}');export{R as comp,U as data};
