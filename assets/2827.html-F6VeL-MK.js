import{_ as m}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as g,d as l,f as o,b as s,a as v,t as h,n as u,g as p,w as a,e as r,r as i,o as z}from"./app-BVguHYKu.js";const w={},k={id:"frontmatter-title-관련",tabindex:"-1"},y={class:"header-anchor",href:"#frontmatter-title-관련"},x={class:"table-of-contents"},G={id:"develop-branch",tabindex:"-1"},A={class:"header-anchor",href:"#develop-branch"},S={id:"release-branch",tabindex:"-1"},P={class:"header-anchor",href:"#release-branch"},E={id:"feature-ltp-branch",tabindex:"-1"},q={class:"header-anchor",href:"#feature-ltp-branch"},C={id:"_2-develop-branch-merge-및-dev-qa-zone-확인",tabindex:"-1"},R={class:"header-anchor",href:"#_2-develop-branch-merge-및-dev-qa-zone-확인"},M={id:"_4-release-branch로-merge",tabindex:"-1"},T={class:"header-anchor",href:"#_4-release-branch로-merge"},B={id:"develop-branch-1",tabindex:"-1"},V={class:"header-anchor",href:"#develop-branch-1"},j={id:"release-branch-1",tabindex:"-1"},I={class:"header-anchor",href:"#release-branch-1"};function D(f,n){const d=i("VPCard"),t=i("router-link"),e=i("VPIcon"),b=i("SiteInfo");return z(),g("div",null,[l("h1",k,[l("a",y,[l("span",null,h(f.$frontmatter.title)+" 관련",1)])]),o(d,u(p({title:"Git > Article(s)",desc:"Article(s)",link:"/programming/git/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),l("nav",x,[l("ul",null,[l("li",null,[o(t,{to:"#배경"},{default:a(()=>n[0]||(n[0]=[r("배경")])),_:1,__:[0]})]),l("li",null,[o(t,{to:"#빌드-배포-환경"},{default:a(()=>n[1]||(n[1]=[r("빌드 & 배포 환경")])),_:1,__:[1]})]),l("li",null,[o(t,{to:"#branch-전략이-왜-필요했나"},{default:a(()=>n[2]||(n[2]=[r("branch 전략이 왜 필요했나")])),_:1,__:[2]})]),l("li",null,[o(t,{to:"#현재-branch-모습"},{default:a(()=>n[3]||(n[3]=[r("현재 branch 모습")])),_:1,__:[3]}),l("ul",null,[l("li",null,[o(t,{to:"#feature-branch"},{default:a(()=>n[4]||(n[4]=[r("feature branch")])),_:1,__:[4]})]),l("li",null,[o(t,{to:"#develop-branch"},{default:a(()=>[o(e,{icon:"fas fa-code-branch"}),n[5]||(n[5]=r("develop branch"))]),_:1,__:[5]})]),l("li",null,[o(t,{to:"#release-branch"},{default:a(()=>[o(e,{icon:"fas fa-code-branch"}),n[6]||(n[6]=r("release branch"))]),_:1,__:[6]})]),l("li",null,[o(t,{to:"#feature-ltp-branch"},{default:a(()=>[o(e,{icon:"fas fa-code-branch"}),n[7]||(n[7]=r("feature-ltp branch"))]),_:1,__:[7]})])])]),l("li",null,[o(t,{to:"#branch를-이용한-수시-배포-프로세스"},{default:a(()=>n[8]||(n[8]=[r("branch를 이용한 수시 배포 프로세스")])),_:1,__:[8]}),l("ul",null,[l("li",null,[o(t,{to:"#_1-feature-branch-생성-및-local-zone-확인"},{default:a(()=>n[9]||(n[9]=[r("1. feature branch 생성 및 local zone 확인")])),_:1,__:[9]})]),l("li",null,[o(t,{to:"#_2-develop-branch-merge-및-dev-qa-zone-확인"},{default:a(()=>[n[10]||(n[10]=r("2, ")),o(e,{icon:"fas fa-code-branch"}),n[11]||(n[11]=r("develop branch merge 및 dev/qa zone 확인"))]),_:1,__:[10,11]})]),l("li",null,[o(t,{to:"#_3-pr-요청-및-코드-리뷰"},{default:a(()=>n[12]||(n[12]=[r("3. PR 요청 및 코드 리뷰")])),_:1,__:[12]})]),l("li",null,[o(t,{to:"#_4-release-branch로-merge"},{default:a(()=>[n[13]||(n[13]=r("④ ")),o(e,{icon:"fas fa-code-branch"}),n[14]||(n[14]=r("release branch로 merge"))]),_:1,__:[13,14]})]),l("li",null,[o(t,{to:"#_5-stg-zone-확인"},{default:a(()=>n[15]||(n[15]=[r("⑤ stg zone 확인")])),_:1,__:[15]})]),l("li",null,[o(t,{to:"#_6-운영-배포"},{default:a(()=>n[16]||(n[16]=[r("⑥ 운영 배포")])),_:1,__:[16]})])])]),l("li",null,[o(t,{to:"#요구사항-점검"},{default:a(()=>n[17]||(n[17]=[r("요구사항 점검")])),_:1,__:[17]}),l("ul",null,[l("li",null,[o(t,{to:"#_1-비정기-배포를-할-수-있어야-한다"},{default:a(()=>n[18]||(n[18]=[r("1. 비정기 배포를 할 수 있어야 한다.")])),_:1,__:[18]})]),l("li",null,[o(t,{to:"#_2-코드-리뷰"},{default:a(()=>n[19]||(n[19]=[r("2. 코드 리뷰")])),_:1,__:[19]})])])]),l("li",null,[o(t,{to:"#또-다른-고민과-해결"},{default:a(()=>n[20]||(n[20]=[r("또 다른 고민과 해결")])),_:1,__:[20]}),l("ul",null,[l("li",null,[o(t,{to:"#develop-branch-1"},{default:a(()=>[o(e,{icon:"fas fa-code-branch"}),n[21]||(n[21]=r("develop branch"))]),_:1,__:[21]})]),l("li",null,[o(t,{to:"#release-branch-1"},{default:a(()=>[o(e,{icon:"fas fa-code-branch"}),n[22]||(n[22]=r("release branch"))]),_:1,__:[22]})])])]),l("li",null,[o(t,{to:"#마치며"},{default:a(()=>n[23]||(n[23]=[r("마치며")])),_:1,__:[23]})])])]),n[189]||(n[189]=l("hr",null,null,-1)),o(b,{name:"개발팀을 위한 Git branch 전략, 정답 있을까?",desc:"한창 MSA(Microservices Architecture)로의 전환을 진행하는 중이었던 저희 팀은 새로운 branch 전략이 필요한 상황이었습니다. MSA로 전환하면서 기존 정기 배포 방식은 버리고 수시 배포를 하기로 결정했기 때문이었죠. Git-flow, Github-flow, Gitlab-flow를 포함해 여러 branch 전략을 살펴보았지만, 팀 환경에 꼭 맞는 branch 전략은 없었습니다. 그래서 팀의 요구 사항과 환경에 맞는 branch 전략을 직접 만들기로 결정했습니다.",url:"https://yozm.wishket.com/magazine/detail/2827/",logo:"https://yozm.wishket.com/favicon.ico",preview:"https://yozm.wishket.com/media/news/2827/2.webp"}),n[190]||(n[190]=s('<p>국내 IT 기업은 한국을 넘어 세계를 무대로 할 정도로 뛰어난 기술과 아이디어를 자랑합니다. 이들은 기업 블로그를 통해 이러한 정보를 공개하고 있습니다. 요즘IT는 각 기업의 특색 있고 유익한 콘텐츠를 소개하는 시리즈를 준비했습니다. 이들은 어떻게 사고하고, 어떤 방식으로 일하고 있을까요?</p><p>이번 글은 국내 대표 이커머스 기업 ‘SSG’의 공통서비스개발팀에서 ‘수시 배포를 위한 깃 브랜치(Git branch) 전략’을 소개합니다.</p><div class="hint-container info"><p class="hint-container-title">수시 배포를 위한 <code>git branch</code> 전략</p><p>안녕하세요. SSG공통서비스개발팀에서 백엔드 개발을 담당하고 있는 권태진입니다. 이번 글에서는 저희 팀에서 운영 중인 ‘수시 배포를 위한 Git branch 전략&#39;을 소개하려고 합니다. 이에 대한 내용을 찾는 분들에게 조금이나마 도움이 되었으면 합니다.</p></div><blockquote><p>이하 “Git branch 전략”과 “branch 전략”은 동일한 의미로 사용하도록 하겠습니다.</p></blockquote><figure><img src="https://yozm.wishket.com/media/news/2827/1.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h2 id="배경" tabindex="-1"><a class="header-anchor" href="#배경"><span>배경</span></a></h2><p>한창 MSA(Microservices Architecture)로의 전환을 진행하는 중이었던 저희 팀은 새로운 branch 전략이 필요한 상황이었습니다. MSA로 전환하면서 기존 정기 배포 방식은 버리고 수시 배포를 하기로 결정했기 때문이었죠. Git-flow, Github-flow, Gitlab-flow를 포함해 여러 branch 전략을 살펴보았지만, 팀 환경에 꼭 맞는 branch 전략은 없었습니다. 그래서 팀의 요구 사항과 환경에 맞는 branch 전략을 직접 만들기로 결정했습니다.</p><hr><h2 id="빌드-배포-환경" tabindex="-1"><a class="header-anchor" href="#빌드-배포-환경"><span>빌드 &amp; 배포 환경</span></a></h2><p>글의 이해를 돕기 위해 팀 개발 환경을 간략하게 설명하고 넘어가겠습니다. 현재 빌드&amp;배포는 Bamboo를 이용하고 있고, Kubernetes를 사용 중입니다.</p><p>그리고 zone이라고 부르는 4가지 환경이 있습니다.</p><ol><li>Dev: 주로 개발자들이 테스트를 진행하는 환경</li><li>QA: 주로 기획자와/QA가 테스트를 진행하는 환경</li><li>stg: 실제 운영 데이터를 사용하고 운영환경과 유사한 테스트 환경</li><li>prod: 실제 운영환경</li></ol><p>버전 관리 저장소 및 코드 리뷰 도구는 bitbucket을 사용하고 있습니다.</p><hr><h2 id="branch-전략이-왜-필요했나" tabindex="-1"><a class="header-anchor" href="#branch-전략이-왜-필요했나"><span>branch 전략이 왜 필요했나</span></a></h2><p>branch 전략 수립을 위해 요구사항을 먼저 정리할 필요가 있었습니다. 우리는 왜 branch 전략을 도입하려고 하는가에 대한 답이었죠. branch 전략은 “이게 좋다더라”, “남들이 이렇게 하니깐 우리도 이렇게 하자”가 아닌 필요에 의한 것이어야 합니다. 여러분들도 branch 전략을 만들어야 한다면, 우선 branch 전략이 왜 필요한지에 대해 먼저 답해보세요. 사실 필요 없다면 굳이 도입할 필요는 없으니 말이죠.</p><p>저희의 요구사항은 크게 두 가지였습니다.</p><ol><li>수시 배포를 할 수 있어야 한다.</li><li>운영 배포 전 코드 리뷰를 할 수 있어야 한다.</li></ol><p>이렇게 적고 보니깐 요구사항이 간단해 보입니다. 하지만 위 두 가지 요구사항을 만족하는 branch 전략을 단기간에 만들기는 어려운 일이었습니다. 이제 저희 팀에서 운영 중인 branch 종류를 먼저 설명하고, branch를 기반한 배포 프로세스를 얘기해 보겠습니다. 그리고 브랜치 전략 수립 시 고민했던 이슈와 이슈를 해결한 방법을 공유해 볼게요.</p><hr><h2 id="현재-branch-모습" tabindex="-1"><a class="header-anchor" href="#현재-branch-모습"><span>현재 branch 모습</span></a></h2><p>아래는 저희 팀에서 운영 중인 branch와 branch가 배포되는 zone을 간략히 표시한 그림입니다.</p><figure><img src="https://yozm.wishket.com/media/news/2827/2.webp" alt="그림1)  &amp; 배포zone" tabindex="0" loading="lazy"><figcaption>그림1) <code>git branch</code> &amp; 배포zone</figcaption></figure>',24)),l("p",null,[n[24]||(n[24]=r("그림1에 나와 있는 것처럼 저희 팀에서 운영 중인 브랜치는 ")),o(e,{icon:"fas fa-code-branch"}),n[25]||(n[25]=l("code",null,"develop",-1)),n[26]||(n[26]=r(", ")),o(e,{icon:"fas fa-code-branch"}),n[27]||(n[27]=l("code",null,"feature",-1)),n[28]||(n[28]=r(", ")),o(e,{icon:"fas fa-code-branch"}),n[29]||(n[29]=l("code",null,"release",-1)),n[30]||(n[30]=r(", ")),o(e,{icon:"fas fa-code-branch"}),n[31]||(n[31]=l("code",null,"feature-ltp",-1)),n[32]||(n[32]=r(" 크게 4가지입니다."))]),n[191]||(n[191]=l("h3",{id:"feature-branch",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#feature-branch"},[l("span",null,"feature branch")])],-1)),l("p",null,[n[35]||(n[35]=r("실제 개발을 하기 위해 생성하는 branch로 ")),l("strong",null,[o(e,{icon:"fas fa-code-branch"}),n[33]||(n[33]=l("code",null,"release",-1)),n[34]||(n[34]=r(" branch로부터 생성"))]),n[36]||(n[36]=r("합니다. 개발 작업은 특별한 이유가 없는 한 ")),o(e,{icon:"fas fa-code-branch"}),n[37]||(n[37]=l("code",null,"feature",-1)),n[38]||(n[38]=r(" branch에서 해야 합니다."))]),n[192]||(n[192]=s(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">git</span> checkout release</span>
<span class="line"><span class="token function">git</span> checkout <span class="token parameter variable">-b</span> feature/12345/jira-1</span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment">#feature branch는 &quot;feature/사번/jira번호&quot; 형태로 생성하기로 약속되어 있습니다.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),l("ul",null,[n[41]||(n[41]=l("li",null,[l("strong",null,"일정 기간만 존재"),r("하는 보조 branch입니다.")],-1)),l("li",null,[o(e,{icon:"fas fa-code-branch"}),n[39]||(n[39]=l("code",null,"feature",-1)),n[40]||(n[40]=r(" branch가 배포되는 환경은 local입니다."))])]),l("h3",G,[l("a",A,[l("span",null,[o(e,{icon:"fas fa-code-branch"}),n[42]||(n[42]=l("code",null,"develop",-1)),n[43]||(n[43]=r(" branch"))])])]),n[193]||(n[193]=l("p",null,"dev/qa zone으로 배포되는 branch입니다.",-1)),l("ul",null,[l("li",null,[n[46]||(n[46]=l("strong",null,"필요에 의해 삭제/재생성",-1)),n[47]||(n[47]=r(" 될 수 있으며, 재생성 시에는 ")),l("strong",null,[o(e,{icon:"fas fa-code-branch"}),n[44]||(n[44]=l("code",null,"release",-1)),n[45]||(n[45]=r(" branch로부터 생성"))]),n[48]||(n[48]=r("합니다."))]),l("li",null,[n[49]||(n[49]=r("feature branch merge를 통한 소스 변경을 권장하나 필요한 경우 ")),o(e,{icon:"fas fa-code-branch"}),n[50]||(n[50]=l("code",null,"develop",-1)),n[51]||(n[51]=r(" 브랜치로 직접 작업하는 것도 가능합니다."))]),l("li",null,[o(e,{icon:"fas fa-code-branch"}),n[52]||(n[52]=l("code",null,"develop",-1)),n[53]||(n[53]=r(" branch로 merge 하는 것은 작업자가 직접 수행합니다."))]),n[54]||(n[54]=l("li",null,"임시 코드, 특정 로직 확인을 위한 테스트 코드들도 자유롭게 추가할 수 있습니다.",-1))]),l("h3",S,[l("a",P,[l("span",null,[o(e,{icon:"fas fa-code-branch"}),n[55]||(n[55]=l("code",null,"release",-1)),n[56]||(n[56]=r(" branch"))])])]),n[194]||(n[194]=l("ul",null,[l("li",null,"stg/prod zone으로 배포되는 branch입니다."),l("li",null,[l("strong",null,"항상 유지"),r("되는 메인 branch입니다. 삭제하거나 재생성하지 않습니다.")]),l("li",null,[r("특수한 경우를 제외하고는 "),l("strong",null,"PR을 통한 소스 변경만 허용"),r("합니다.")]),l("li",null,"실제 서비스되는 변경 사항만 허용합니다.")],-1)),l("h3",E,[l("a",q,[l("span",null,[o(e,{icon:"fas fa-code-branch"}),n[57]||(n[57]=l("code",null,"feature-ltp",-1)),n[58]||(n[58]=r(" branch"))])])]),l("ul",null,[n[61]||(n[61]=l("li",null,"stg zone으로 배포되는 branch입니다.",-1)),n[62]||(n[62]=l("li",null,"필요에 의해 삭제/재생성 될 수 있습니다.",-1)),l("li",null,[o(e,{icon:"fas fa-code-branch"}),n[59]||(n[59]=l("code",null,"release",-1)),n[60]||(n[60]=r(" branch로부터 생성을 권장하나 반드시 그래야 하는 것은 아닙니다."))])]),n[195]||(n[195]=l("p",null,"feature-ltp branch에 관한 얘기는 뒤에서 좀 더 자세히 다루겠습니다. 우선은 특수한 목적을 가진 branch 정도만 기억해 주시면 될 것 같습니다. 주요한 특징을 뽑아서 요약하면 아래와 같습니다.",-1)),l("ul",null,[l("li",null,[l("strong",null,[o(e,{icon:"fas fa-code-branch"}),n[63]||(n[63]=l("code",null,"release",-1)),n[64]||(n[64]=r(" branch"))]),n[65]||(n[65]=r(": 메인 branch, PR을 통한 소스 변경만 허용, stg/prod zone 배포, 실서비스용 branch"))]),l("li",null,[l("strong",null,[o(e,{icon:"fas fa-code-branch"}),n[66]||(n[66]=l("code",null,"feature",-1)),n[67]||(n[67]=r(" branch"))]),n[68]||(n[68]=r(": 보조 branch, 실제 개발 작업을 진행하는 branch"))]),l("li",null,[l("strong",null,[o(e,{icon:"fas fa-code-branch"}),n[69]||(n[69]=l("code",null,"develop",-1)),n[70]||(n[70]=r(" branch"))]),n[71]||(n[71]=r(": 보조 branch, dev/qa zone 배포"))]),l("li",null,[l("strong",null,[o(e,{icon:"fas fa-code-branch"}),n[72]||(n[72]=l("code",null,"feature-ltp",-1)),n[73]||(n[73]=r(" branch"))]),n[74]||(n[74]=r(": 보조 branch, stg zone 배포, 특수한 목적을 가진 branch"))])]),n[196]||(n[196]=s(`<hr><h2 id="branch를-이용한-수시-배포-프로세스" tabindex="-1"><a class="header-anchor" href="#branch를-이용한-수시-배포-프로세스"><span>branch를 이용한 수시 배포 프로세스</span></a></h2><p>이제 branch가 어떤 과정을 거쳐 운영(prod zone)까지 배포되는지 살펴보겠습니다.</p><h3 id="_1-feature-branch-생성-및-local-zone-확인" tabindex="-1"><a class="header-anchor" href="#_1-feature-branch-생성-및-local-zone-확인"><span>1. feature branch 생성 및 local zone 확인</span></a></h3><p>개발할 사항이 생기면 가장 먼저 feature branch를 생성합니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">git</span> checkout release</span>
<span class="line"><span class="token function">git</span> checkout <span class="token parameter variable">-b</span> feature/12345/jira-1</span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># feature 브랜치는 &quot;feature/사번/jira번호&quot; 형태로 생성하기로 약속되어 있습니다.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6)),l("h3",C,[l("a",R,[l("span",null,[n[75]||(n[75]=r("2, ")),o(e,{icon:"fas fa-code-branch"}),n[76]||(n[76]=l("code",null,"develop",-1)),n[77]||(n[77]=r(" branch merge 및 dev/qa zone 확인"))])])]),l("p",null,[n[78]||(n[78]=r("feature branch에서 개발 작업을 완료하고 나면 feature branch를 ")),o(e,{icon:"fas fa-code-branch"}),n[79]||(n[79]=l("code",null,"develop",-1)),n[80]||(n[80]=r(" branch로 merge 합니다."))]),n[197]||(n[197]=s(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">git</span> checkout develop</span>
<span class="line"><span class="token function">git</span> merge feature/12345/jira-1</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),l("p",null,[n[81]||(n[81]=r("이때 merge는 작업자가 직접 하고 충돌이 나는 경우 충돌 해결 후 merge를 완료합니다. ")),o(e,{icon:"fas fa-code-branch"}),n[82]||(n[82]=l("code",null,"develop",-1)),n[83]||(n[83]=r(" branch로 merge가 되면 자동으로 빌드가 되고 빌드 된 결과가 dev/qa zone으로 배포됩니다. 배포 후 dev/qa zone에서 테스트를 진행합니다."))]),n[198]||(n[198]=l("h3",{id:"_3-pr-요청-및-코드-리뷰",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#_3-pr-요청-및-코드-리뷰"},[l("span",null,"3. PR 요청 및 코드 리뷰")])],-1)),l("p",null,[n[84]||(n[84]=r("dev/qa zone에서 테스트를 완료하면 1) stg zone을 거쳐 2) 운영 환경(prod zone)으로 배포합니다. stg/prod zone 배포에는 ")),o(e,{icon:"fas fa-code-branch"}),n[85]||(n[85]=l("code",null,"release",-1)),n[86]||(n[86]=r(" branch를 사용합니다. 운영에 반영되는 소스이니만큼 PR 후 코드 리뷰를 거쳐야 ")),o(e,{icon:"fas fa-code-branch"}),n[87]||(n[87]=l("code",null,"release",-1)),n[88]||(n[88]=r(" branch로 merge 할 수 있습니다. 앞서 언급 드린 것처럼 저희 팀은 bitbucket을 통해 PR 및 코드 리뷰를 진행하고 있습니다."))]),l("h3",M,[l("a",T,[l("span",null,[n[89]||(n[89]=r("④ ")),o(e,{icon:"fas fa-code-branch"}),n[90]||(n[90]=l("code",null,"release",-1)),n[91]||(n[91]=r(" branch로 merge"))])])]),l("p",null,[n[92]||(n[92]=r("코드 리뷰가 완료되면 bitbucket merge 버튼이 활성화되고 merge를 할 수 있습니다. (PR 없는 ")),o(e,{icon:"fas fa-code-branch"}),n[93]||(n[93]=l("code",null,"release",-1)),n[94]||(n[94]=r(" branch 변경은 허용하지 않으며 ")),o(e,{icon:"fas fa-code-branch"}),n[95]||(n[95]=l("code",null,"release",-1)),n[96]||(n[96]=r(" branch merge는 개발자가 직접 하지 않습니다.) merge 되면 ")),o(e,{icon:"fas fa-code-branch"}),n[97]||(n[97]=l("code",null,"release",-1)),n[98]||(n[98]=r(" branch는 자동으로 빌드가 되고 stg zone으로 배포됩니다."))]),n[199]||(n[199]=l("h3",{id:"_5-stg-zone-확인",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#_5-stg-zone-확인"},[l("span",null,"⑤ stg zone 확인")])],-1)),n[200]||(n[200]=l("p",null,"stg zone부터는 운영 데이터로 테스트가 가능하며 운영 배포 전 최종 테스트를 진행합니다. stg zone까지 테스트가 완료되었다면 이제 운영환경으로 배포가 가능합니다.",-1)),n[201]||(n[201]=l("h3",{id:"_6-운영-배포",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#_6-운영-배포"},[l("span",null,"⑥ 운영 배포")])],-1)),l("p",null,[n[99]||(n[99]=r("dev, qa, stg zone까지는 자동 빌드&자동 배포입니다. prod zone 배포는 자동으로 하지 않는데요. 자동 배포로 인한 혹시 모를 사고를 방지하기 위함입니다. prod zone 배포는 실제로 ")),o(e,{icon:"fas fa-code-branch"}),n[100]||(n[100]=l("code",null,"release",-1)),n[101]||(n[101]=r(" branch를 사용하는 것은 아니며, stg zone에서 생성된 이미지를 그대로 prod zone으로 복사한다고 보시면 됩니다. prod zone 배포를 마지막으로 전체 배포 프로세스가 완료되었습니다."))]),n[202]||(n[202]=l("hr",null,null,-1)),n[203]||(n[203]=l("h2",{id:"요구사항-점검",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#요구사항-점검"},[l("span",null,"요구사항 점검")])],-1)),n[204]||(n[204]=l("p",null,"저희 팀이 원했던 요구사항은 두 가지였습니다.",-1)),n[205]||(n[205]=l("ol",null,[l("li",null,"비정기 배포를 할 수 있어야 한다."),l("li",null,"운영 배포 전 코드 리뷰를 할 수 있어야 한다.")],-1)),n[206]||(n[206]=l("h3",{id:"_1-비정기-배포를-할-수-있어야-한다",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#_1-비정기-배포를-할-수-있어야-한다"},[l("span",null,"1. 비정기 배포를 할 수 있어야 한다.")])],-1)),l("p",null,[n[102]||(n[102]=r("비정기 배포를 하기 위해서는 서로 간의 변경 사항이 독립적이어야 했고, 나의 배포에 다른 누군가의 변경 사항이 같이 배포되는 일이 없어야 했습니다. 이 이슈 해결을 위해 저희는 먼저 branch를 분리했습니다. 배포용 branch인 ")),o(e,{icon:"fas fa-code-branch"}),n[103]||(n[103]=l("code",null,"release",-1)),n[104]||(n[104]=r(" branch와 개발을 위한 feature branch로 말이죠."))]),l("p",null,[n[105]||(n[105]=r("하지만 feature branch로 각자의 개발 작업을 분리했다고 해서, 다른 누군가의 변경 사항이 배포되지 않는다는 보장은 없었습니다. 운영 배포용 ")),o(e,{icon:"fas fa-code-branch"}),n[106]||(n[106]=l("code",null,"release",-1)),n[107]||(n[107]=r(" branch는 하나이기 때문에, 다른 누군가의 feature도 merge가 되어 있을 수 있기 때문이죠."))]),n[207]||(n[207]=l("p",null,"이 문제를 해결하기 위해 저희는 다음과 같은 규칙을 정했습니다.",-1)),l("ol",null,[l("li",null,[o(e,{icon:"fas fa-code-branch"}),n[108]||(n[108]=l("code",null,"release",-1)),n[109]||(n[109]=r(" branch에 반영된 내용은 가능한 한 빨리 운영에 배포하고 길어도 최대 하루를 넘기지 말 것 "))]),l("li",null,[o(e,{icon:"fas fa-code-branch"}),n[110]||(n[110]=l("code",null,"release",-1)),n[111]||(n[111]=r(" branch를 중/장기간 테스트해야 한다면 ")),o(e,{icon:"fas fa-code-branch"}),n[112]||(n[112]=l("code",null,"release",-1)),n[113]||(n[113]=r(" branch를 사용하지 말고 feature-ltp branch를 사용할 것"))])]),n[208]||(n[208]=l("p",null,"규칙을 정하면서 “그럼에도 다른 누군가의 변경 사항이 같이 배포되는 일이 생길 수 있을 것 같다”라는 고민은 계속되었습니다. 어쨌든 하루라는 기간 동안 서로 다른 누군가의 변경 사항이 동시에 있을 수 있기 때문이였죠. 고민 끝에 저희가 내린 해답은 우선 해보고 실제로 그런 일이 자주 발생한다면 그 때 방안을 다시 찾아보자였습니다. 이론과 실제는 다를 수 있고 저희가 고민했던 문제의 경우, 실제 발생했을 때 해결해도 큰 이슈가 될 일이 아니었기 때문이죠.",-1)),n[209]||(n[209]=l("p",null,"결론부터 말씀드리면 저희가 우려했던 “release 브랜치에 서로 다른 여러 명의 배포되지 않은 변경 사항이 존재하는 경우”는 거의 없었습니다. 오히려 수시 배포를 진행할 수 있다 보니, 배포되지 않은 소스가 머물러 있는 시간이 적었기 때문이죠.",-1)),n[210]||(n[210]=l("h3",{id:"_2-코드-리뷰",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#_2-코드-리뷰"},[l("span",null,"2. 코드 리뷰")])],-1)),n[211]||(n[211]=l("p",null,"코드 리뷰에 대해 고민되는 부분은 아래의 두 가지였습니다.",-1)),n[212]||(n[212]=l("ol",null,[l("li",null,"언제 코드 리뷰를 할 것인가?"),l("li",null,"코드 리뷰를 배포 프로세스에 자연스럽게 녹아들게 하려면 어떻게 해야 할까?")],-1)),l("p",null,[n[114]||(n[114]=r("branch의 종류가 완전히 정해지기 전에는 어떤 branch로 merge 하기 전(즉 어느 시점에)에 리뷰를 할 것이냐에 대한 고민이 많았습니다. 그러다 branch의 종류와 용도가 정해지면서 자연스럽게 1번의 문제가 해결되었습니다. ")),o(e,{icon:"fas fa-code-branch"}),n[115]||(n[115]=l("code",null,"release",-1)),n[116]||(n[116]=r(" branch가 실제 서비스되는 branch이므로, ")),o(e,{icon:"fas fa-code-branch"}),n[117]||(n[117]=l("code",null,"release",-1)),n[118]||(n[118]=r(" branch로 merge 하기 전에 코드 리뷰를 하면 되는 거였죠."))]),l("p",null,[n[122]||(n[122]=r("두 번째 문제는 bitbucket을 활용해서 해결했습니다. bitbucket에는 branch 별로 권한을 줄 수 있는 기능과 Merge 가능한 조건을 부여할 수 있는 기능이 있습니다. 위 ")),l("strong",null,[n[119]||(n[119]=r("두 기능을 활용하면 PR을 올린 후 코드 리뷰를 완료해야, ")),o(e,{icon:"fas fa-code-branch"}),n[120]||(n[120]=l("code",null,"release",-1)),n[121]||(n[121]=r(" branch로 merge 될 수 있도록 강제"))]),n[123]||(n[123]=r("할 수 있습니다. 코드 리뷰가 강제되기 때문에 배포 프로세스에 코드 리뷰 과정을 포함시킬 수 있었습니다."))]),n[213]||(n[213]=l("hr",null,null,-1)),n[214]||(n[214]=l("h2",{id:"또-다른-고민과-해결",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#또-다른-고민과-해결"},[l("span",null,"또 다른 고민과 해결")])],-1)),l("h3",B,[l("a",V,[l("span",null,[o(e,{icon:"fas fa-code-branch"}),n[124]||(n[124]=l("code",null,"develop",-1)),n[125]||(n[125]=r(" branch"))])])]),l("p",null,[n[126]||(n[126]=r("feature branch는 ")),o(e,{icon:"fas fa-code-branch"}),n[127]||(n[127]=l("code",null,"release",-1)),n[128]||(n[128]=r(" branch로부터 생성합니다. ")),o(e,{icon:"fas fa-code-branch"}),n[129]||(n[129]=l("code",null,"develop",-1)),n[130]||(n[130]=r(" branch도 ")),o(e,{icon:"fas fa-code-branch"}),n[131]||(n[131]=l("code",null,"release",-1)),n[132]||(n[132]=r(" branch로부터 생성되죠. feature branch가 ")),o(e,{icon:"fas fa-code-branch"}),n[133]||(n[133]=l("code",null,"develop",-1)),n[134]||(n[134]=r(" branch에서 생성된 게 아니다 보니, ")),o(e,{icon:"fas fa-code-branch"}),n[135]||(n[135]=l("code",null,"develop",-1)),n[136]||(n[136]=r(" branch로 merge를 하다 보면 ")),o(e,{icon:"fas fa-code-branch"}),n[137]||(n[137]=l("code",null,"develop",-1)),n[138]||(n[138]=r(" branch의 history는 알아보기 힘들게 되고, 소스 병합 시 충돌도 자주 발생하지 않을까 하는 우려가 있었습니다."))]),l("p",null,[n[139]||(n[139]=r("아래는 현재 ")),o(e,{icon:"fas fa-code-branch"}),n[140]||(n[140]=l("code",null,"develop",-1)),n[141]||(n[141]=r(" branch의 commit 그래프입니다."))]),l("figure",null,[n[145]||(n[145]=l("img",{src:"https://yozm.wishket.com/media/news/2827/3.webp",alt:'그림2) <VPIcon icon="fas fa-code-branch"/> branch commit graph',tabindex:"0",loading:"lazy"},null,-1)),l("figcaption",null,[n[142]||(n[142]=r("그림2) ")),o(e,{icon:"fas fa-code-branch"}),n[143]||(n[143]=l("code",null,"develop",-1)),n[144]||(n[144]=r(" branch commit graph"))])]),l("p",null,[n[146]||(n[146]=r("commit history의 일부분인데도 한눈에 history가 엉망인 걸 알 수 있습니다. 실제 충돌도 종종 발생하고 있고요. 우려했던 현상이 발생하고 있습니다. history가 엉망인 것은 작은 문제였지만, 잦은 충돌은 개발 생산성을 떨어뜨릴 수 있기 때문에 중요한 문제였습니다. 저희가 고민 끝에 내린 결론은 문제가 심해지면 ‘")),o(e,{icon:"fas fa-code-branch"}),n[147]||(n[147]=l("code",null,"develop",-1)),n[148]||(n[148]=r(" branch’를 새로 만들자였습니다."))]),l("p",null,[n[149]||(n[149]=r("어차피 저희에게 중요한 것은 ")),o(e,{icon:"fas fa-code-branch"}),n[150]||(n[150]=l("code",null,"release",-1)),n[151]||(n[151]=r(" branch이고 ")),o(e,{icon:"fas fa-code-branch"}),n[152]||(n[152]=l("code",null,"develop",-1)),n[153]||(n[153]=r(" branch는 “그렇게까지 중요하지 않다.”, “다시 만든다고 큰 문제가 생기지는 않을 것이다.”라고 생각했습니다. 문제가 될 만한 상황은 ")),o(e,{icon:"fas fa-code-branch"}),n[154]||(n[154]=l("code",null,"develop",-1)),n[155]||(n[155]=r(" branch로 테스트 중인 누군가의 코드가 삭제될 수도 있다는 것이었죠. 하지만 이 부분도 실상은 큰 문제가 안 되는 것이 ")),o(e,{icon:"fas fa-code-branch"}),n[156]||(n[156]=l("code",null,"develop",-1)),n[157]||(n[157]=r(" branch 재생성을 하기 전에 1차적으로 팀 내 공유하면 됐고, feature branch는 여전히 있기 때문에 ")),o(e,{icon:"fas fa-code-branch"}),n[158]||(n[158]=l("code",null,"develop",-1)),n[159]||(n[159]=r(" branch 재생성 후 feature branch를 다시 merge 하면 되는 일이었습니다."))]),l("p",null,[n[160]||(n[160]=r("그렇게 결정하고 운영하는 지금까지 누군가의 코드가 삭제된 경우는 없었습니다. 결정적으로 ")),o(e,{icon:"fas fa-code-branch"}),n[161]||(n[161]=l("code",null,"develop",-1)),n[162]||(n[162]=r(" branch를 재생성하는 일이 생각보다 자주 발생하지 않고 있습니다."))]),l("h3",j,[l("a",I,[l("span",null,[o(e,{icon:"fas fa-code-branch"}),n[163]||(n[163]=l("code",null,"release",-1)),n[164]||(n[164]=r(" branch"))])])]),l("p",null,[n[165]||(n[165]=r("브랜치 전략 만들 당시 ")),o(e,{icon:"fas fa-code-branch"}),n[166]||(n[166]=l("code",null,"release",-1)),n[167]||(n[167]=r(" branch에 대한 우려는 크게 두 가지였습니다."))]),n[215]||(n[215]=l("ul",null,[l("li",null,"첫째, 소스 충돌이 발생하는 상황이 자주 오지 않을까?"),l("li",null,"둘째, 소스 병합 정책을 무엇으로 가져갈까?")],-1)),l("p",null,[n[168]||(n[168]=r("서로 같은 소스를 수정하게 되는 경우 ")),o(e,{icon:"fas fa-code-branch"}),n[169]||(n[169]=l("code",null,"release",-1)),n[170]||(n[170]=r(" branch로 소스 병합 시 충돌이 발생할 수 있습니다. ")),o(e,{icon:"fas fa-code-branch"}),n[171]||(n[171]=l("code",null,"release",-1)),n[172]||(n[172]=r(" branch는 운영에 배포되는 소스들입니다. 충돌을 해결하는 과정에서 소스를 잘못 merge 하는 일이 생긴다면 장애로 이어질 수도 있습니다. 충돌이 자주 나게 되면 merge 과정에서 그러한 실수가 발생할 확률이 올라가게 되죠."))]),l("p",null,[n[173]||(n[173]=r("첫 번째 고민에 대한 해결은 우선 적용해 보자였습니다. (우선 적용해 보자가 좀 많네요.) “실제로 우리가 생각하는 것만큼 자주 충돌이 발생하지 않을 수도 있다.”, “팀원과 bitbucket을 믿어보자.”, “잦은 충돌로 문제가 생기면 그때 해결책을 깊게 고민해 보자”라는 생각이었습니다. 지금까지 운영하면서 ")),o(e,{icon:"fas fa-code-branch"}),n[174]||(n[174]=l("code",null,"release",-1)),n[175]||(n[175]=r(" branch로 merge가 잘못되어 문제가 생긴 경우가 없는 것을 보면, 옳은 선택이었던 것 같습니다. 이런 일이 왜 생기지 않는지 생각해 보면 수시 배포이기 때문에, 오히려 더 괜찮은 것 같습니다. 수시 배포 때문에 걱정했던 일이 사실은 수시 배포로 인해서 더 생기지 않고 있는 것이죠."))]),l("p",null,[n[176]||(n[176]=r("두 번째 고민은 소스 병합 정책을 merge로 할 건지 rebase로 할 건지였습니다. 이 고민도 우선은 merge로 결정하고, ")),o(e,{icon:"fas fa-code-branch"}),n[177]||(n[177]=l("code",null,"release",-1)),n[178]||(n[178]=r(" branch의 history가 어떻게 생기는지를 보고 수정해 가기로 했습니다. merge로 정책을 정하고 어느 정도 시간이 흐른 후, ")),o(e,{icon:"fas fa-code-branch"}),n[179]||(n[179]=l("code",null,"release",-1)),n[180]||(n[180]=r(" branch history를 보니 문제가 두 가지 있었습니다. ")),n[181]||(n[181]=l("strong",null,"① history가 깔끔하지 않은 점, ② 불필요한 커밋이 많은 점이었습니다.",-1))]),l("p",null,[n[182]||(n[182]=r("merge로 운영할 당시 ")),o(e,{icon:"fas fa-code-branch"}),n[183]||(n[183]=l("code",null,"release",-1)),n[184]||(n[184]=r(" branch의 commit history입니다."))]),l("figure",null,[n[188]||(n[188]=l("img",{src:"https://yozm.wishket.com/media/news/2827/4.webp",alt:'그림3) <VPIcon icon="fas fa-code-branch"/> branch commit(feat. merge)',tabindex:"0",loading:"lazy"},null,-1)),l("figcaption",null,[n[185]||(n[185]=r("그림3) ")),o(e,{icon:"fas fa-code-branch"}),n[186]||(n[186]=l("code",null,"release",-1)),n[187]||(n[187]=r(" branch commit(feat. merge)"))])]),o(e,{icon:"fas fa-code-branch"}),n[216]||(n[216]=s('<code>develop</code> branch의 history보다는 낫지만, 그럼에도 깔끔하다는 생각은 들지 않습니다. 그리고 의미 없는 commit들이 꽤 많았습니다. 이상적으로는 하나의 feature에 하나의 commit이 생성되어야 하지만, 하나의 feature에 하나의 commit을 만든다는 게 생각보다 쉽지 않습니다. 코드 리뷰 단계에서 코드를 수정해야 하거나, 그 외 생각지 못한 시점에 코드를 수정해야 하는 경우는 언제든 발생할 수 있으니 말이죠.<p>그래서 저희는 소스 병합 정책을 merge에서 squash + rabase로 변경했습니다. (소스 병합 정책은 bitbucket 설정에서 쉽게 변경 가능합니다.)</p><p>소스 병합 정책 변경 후 commit 그래프는 아래와 같습니다.</p><figure><img src="https://yozm.wishket.com/media/news/2827/5.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>저희가 원하는 대로 깔끔한 history 그래프가 만들어졌고 이후로도 쪽 이런 모습을 유지하고 있습니다.</p><hr><h2 id="마치며" tabindex="-1"><a class="header-anchor" href="#마치며"><span>마치며</span></a></h2><p>지금까지 저희 팀에서 운영 중인 수시 배포를 위한 Git branch 전략을 소개해 봤습니다. 사실 브랜치 전략에는 정답이 없는 것 같습니다. 전략을 만들 당시에도 이게 맞을까, 저게 맞을까 정답을 찾고자 많이 고민했고요. 결국 중요한 것은 정답이 아니라 우리의 상황에서 최선이 무엇인지를 찾는 것이었죠. 저희도 계속해서 부족한 부분을 수정해 나가고 있는 중입니다.</p><p>여러분도 branch 전략을 만들 때 정답이 아닌, 현 상황에 맞는 최선이 무엇인지를 고민해 보신다면 팀에 꼭 맞는 branch 전략을 만들 수 있을 거라 생각합니다.</p>',10)),o(b,{name:"git branch 전략 정답은 없지만…",desc:"수시 배포를 위한 git branch 전략",url:"https://medium.com/ssgtech/git-branch-%EC%A0%84%EB%9E%B5-%EC%A0%95%EB%8B%B5%EC%9D%80-%EC%97%86%EC%A7%80%EB%A7%8C-8a7d36c74cdc/",logo:"https://miro.medium.com/v2/5d8de952517e8160e40ef9841c781cdc14a5db313057fa3c3de41c6f5b494b19",preview:"https://miro.medium.com/v2/resize:fit:1200/1*d9H8YPaZM9_QrZfYBMNLFQ.png"}),v(" TODO: add ARTICLE CARD "),o(d,u(p({title:"개발팀을 위한 Git branch 전략, 정답 있을까?",desc:"한창 MSA(Microservices Architecture)로의 전환을 진행하는 중이었던 저희 팀은 새로운 branch 전략이 필요한 상황이었습니다. MSA로 전환하면서 기존 정기 배포 방식은 버리고 수시 배포를 하기로 결정했기 때문이었죠. Git-flow, Github-flow, Gitlab-flow를 포함해 여러 branch 전략을 살펴보았지만, 팀 환경에 꼭 맞는 branch 전략은 없었습니다. 그래서 팀의 요구 사항과 환경에 맞는 branch 전략을 직접 만들기로 결정했습니다.",link:"https://chanhi2000.github.io/bookshelf/yozm.wishket.com/2827.html",logo:"https://yozm.wishket.com/favicon.ico",background:"rgba(84,7,224,0.2)"})),null,16)])}const Z=m(w,[["render",D]]),K=JSON.parse('{"path":"/yozm.wishket.com/2827.html","title":"개발팀을 위한 Git branch 전략, 정답 있을까?","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"개발팀을 위한 Git branch 전략, 정답 있을까?","description":"Article(s) > 개발팀을 위한 Git branch 전략, 정답 있을까?","icon":"iconfont icon-git","category":["Git","Article(s)"],"tag":["blog","yozm.wishket.com","git"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"개발팀을 위한 Git branch 전략, 정답 있을까?\\",\\"image\\":[\\"https://yozm.wishket.com/media/news/2827/1.webp\\",\\"https://yozm.wishket.com/media/news/2827/2.webp\\",\\"https://yozm.wishket.com/media/news/2827/3.webp\\",\\"https://yozm.wishket.com/media/news/2827/4.webp\\",\\"https://yozm.wishket.com/media/news/2827/5.webp\\"],\\"datePublished\\":\\"2024-11-01T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"SSG TECH\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/yozm.wishket.com/2827.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"개발팀을 위한 Git branch 전략, 정답 있을까?"}],["meta",{"property":"og:description","content":"Article(s) > 개발팀을 위한 Git branch 전략, 정답 있을까?"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://yozm.wishket.com/media/news/2827/2.webp"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://yozm.wishket.com/media/news/2827/2.webp"}],["meta",{"name":"twitter:image:alt","content":"개발팀을 위한 Git branch 전략, 정답 있을까?"}],["meta",{"property":"article:author","content":"SSG TECH"}],["meta",{"property":"article:tag","content":"git"}],["meta",{"property":"article:tag","content":"yozm.wishket.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2024-11-01T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > 개발팀을 위한 Git branch 전략, 정답 있을까?"},{"property":"og:description","content":"개발팀을 위한 Git branch 전략, 정답 있을까?"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/yozm.wishket.com/2827.html"}]],"prev":"/programming/git/articles/README.md","date":"2024-11-01T00:00:00.000Z","isOriginal":false,"author":"SSG TECH","cover":"https://yozm.wishket.com/media/news/2827/2.webp"},"git":{},"readingTime":{"minutes":4.03,"words":1210},"filePathRelative":"yozm.wishket.com/2827.md","copyright":{"author":"SSG TECH"}}');export{Z as comp,K as data};
