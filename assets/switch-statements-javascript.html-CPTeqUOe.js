import{_ as h}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as g,d as n,f as e,b as p,a as v,t as b,n as r,g as u,w as t,e as a,r as l,o as f}from"./app-BVguHYKu.js";const w="/bookshelf/assets/image/blog.logrocket.com/switch-statements-javascript/banner.png",y={},q={id:"frontmatter-title-관련",tabindex:"-1"},x={class:"header-anchor",href:"#frontmatter-title-관련"},j={class:"table-of-contents"},A={href:"https://blog.logrocket.com/ux-design/writing-clear-error-messages-ux-guidelines-examples/",target:"_blank",rel:"noopener noreferrer"};function S(d,s){const c=l("VPCard"),o=l("router-link"),k=l("SiteInfo"),i=l("RouteLink"),m=l("VPIcon");return f(),g("div",null,[n("h1",q,[n("a",x,[n("span",null,b(d.$frontmatter.title)+" 관련",1)])]),e(c,r(u({title:"JavaScript > Article(s)",desc:"Article(s)",link:"/programming/js/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),n("nav",j,[n("ul",null,[n("li",null,[e(o,{to:"#what-is-a-switch-statement"},{default:t(()=>s[0]||(s[0]=[a("What is a switch statement?")])),_:1,__:[0]})]),n("li",null,[e(o,{to:"#basic-syntax-of-switch-statements"},{default:t(()=>s[1]||(s[1]=[a("Basic syntax of switch statements")])),_:1,__:[1]})]),n("li",null,[e(o,{to:"#use-cases-for-switch-statements"},{default:t(()=>s[2]||(s[2]=[a("Use cases for switch statements")])),_:1,__:[2]}),n("ul",null,[n("li",null,[e(o,{to:"#mapping-values-to-actions"},{default:t(()=>s[3]||(s[3]=[a("Mapping values to actions")])),_:1,__:[3]})]),n("li",null,[e(o,{to:"#replacing-multiple-if-else-statements"},{default:t(()=>s[4]||(s[4]=[a("Replacing multiple if...else statements")])),_:1,__:[4]})])])]),n("li",null,[e(o,{to:"#fallthrough-behavior-in-switch-statements"},{default:t(()=>s[5]||(s[5]=[a("Fallthrough behavior in switch statements")])),_:1,__:[5]})]),n("li",null,[e(o,{to:"#switch-vs-if-else-which-should-you-use"},{default:t(()=>s[6]||(s[6]=[a("Switch vs. if...else: Which should you use?")])),_:1,__:[6]})]),n("li",null,[e(o,{to:"#advanced-alternatives-object-literals"},{default:t(()=>s[7]||(s[7]=[a("Advanced alternatives: Object literals")])),_:1,__:[7]})]),n("li",null,[e(o,{to:"#best-practices-for-using-switch-statements"},{default:t(()=>s[8]||(s[8]=[a("Best practices for using switch statements")])),_:1,__:[8]}),n("ul",null,[n("li",null,[e(o,{to:"#always-include-a-default-case"},{default:t(()=>s[9]||(s[9]=[a("Always include a default case")])),_:1,__:[9]})]),n("li",null,[e(o,{to:"#use-break-to-avoid-fallthrough"},{default:t(()=>s[10]||(s[10]=[a("Use break to avoid fallthrough")])),_:1,__:[10]})]),n("li",null,[e(o,{to:"#keep-it-readable"},{default:t(()=>s[11]||(s[11]=[a("Keep it readable")])),_:1,__:[11]})]),n("li",null,[e(o,{to:"#use-descriptive-case-values"},{default:t(()=>s[12]||(s[12]=[a("Use descriptive case values")])),_:1,__:[12]})])])]),n("li",null,[e(o,{to:"#common-switch-case-pitfalls-and-how-to-avoid-them"},{default:t(()=>s[13]||(s[13]=[a("Common switch case pitfalls and how to avoid them")])),_:1,__:[13]}),n("ul",null,[n("li",null,[e(o,{to:"#forgetting-the-break-statement"},{default:t(()=>s[14]||(s[14]=[a("Forgetting the break statement")])),_:1,__:[14]})]),n("li",null,[e(o,{to:"#overusing-switch-statements"},{default:t(()=>s[15]||(s[15]=[a("Overusing switch statements")])),_:1,__:[15]})]),n("li",null,[e(o,{to:"#ignoring-the-default-case"},{default:t(()=>s[16]||(s[16]=[a("Ignoring the default case")])),_:1,__:[16]})])])]),n("li",null,[e(o,{to:"#conclusion"},{default:t(()=>s[17]||(s[17]=[a("Conclusion")])),_:1,__:[17]})])])]),s[49]||(s[49]=n("hr",null,null,-1)),e(k,{name:"A practical guide to switch statements in JavaScript",desc:"Learn the basics of the switch case syntax, typical use cases like mapping values, and the often-confusing fallthrough behavior.",url:"https://blog.logrocket.com/switch-statements-javascript",logo:"/assets/image/blog.logrocket.com/favicon.png",preview:"/assets/image/blog.logrocket.com/switch-statements-javascript/banner.png"}),s[50]||(s[50]=p('<p>It’s easy to feel overwhelmed by the different ways to approach decision-making in your JavaScript code, especially when working with conditional logic. Like everyone else, you might start with <code>if...else</code> statements.</p><figure><img src="'+w+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>But as your logic grows more complex, you’ll discover the <code>switch</code> statement in JavaScript is simply better for handling multiple conditions in a clean and readable way.</p><p>In this article, I’ll walk you through the ins and outs of <code>switch</code> statements: the basics of syntax, typical use cases like mapping values, a deep dive into the often-confusing fallthrough behavior, and how to manage it effectively with or without <code>break</code> statements.</p><hr><h2 id="what-is-a-switch-statement" tabindex="-1"><a class="header-anchor" href="#what-is-a-switch-statement"><span>What is a switch statement?</span></a></h2><p>A <code>switch</code> statement is a control flow mechanism that enables your program to execute different blocks of code based on the value of a given expression. You can think of <code>switch</code> statements as a traffic controller; you provide a value, and the <code>switch</code> statement efficiently directs the execution flow to the appropriate code block, handling multiple potential conditions with ease.</p>',7)),n("p",null,[s[19]||(s[19]=a("This structure is particularly beneficial when you’re dealing with numerous specific cases, as it can make your code cleaner and more organized compared to a long chain of ")),e(i,{to:"/blog.logrocket.com/ternary-operator-javascript.html"},{default:t(()=>s[18]||(s[18]=[n("strong",null,"if...else",-1)])),_:1,__:[18]}),s[20]||(s[20]=a(" statements."))]),s[51]||(s[51]=p(`<hr><h2 id="basic-syntax-of-switch-statements" tabindex="-1"><a class="header-anchor" href="#basic-syntax-of-switch-statements"><span>Basic syntax of <code>switch</code> statements</span></a></h2><p>At its core, the <code>switch</code> case in JS evaluates an expression once and then compares that result against a series of defined cases. Each case corresponds to a potential match, and the associated block of code is executed when a match is found. If none of the cases match, an optional <code>default</code> block can be used to handle any unexpected values or conditions.</p><p>Here’s the basic structure of a <code>switch</code> statement:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">switch</span> <span class="token punctuation">(</span>expression<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">case</span> <span class="token literal-property property">value1</span><span class="token operator">:</span></span>
<span class="line">    <span class="token comment">// Code to execute if expression === value1</span></span>
<span class="line">    <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">case</span> <span class="token literal-property property">value2</span><span class="token operator">:</span></span>
<span class="line">    <span class="token comment">// Code to execute if expression === value2</span></span>
<span class="line">    <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">default</span><span class="token operator">:</span></span>
<span class="line">    <span class="token comment">// Code to execute if no cases match</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The key elements of a <code>switch</code> statement are:</p><ul><li><code>expression</code>: The value or condition you’re evaluating</li><li><code>case</code>: Each case checks if the expression matches a specific value</li><li><code>break</code>: Stops the execution of the switch block once a match is found. Without it, the code will “fall through” to the next case (more on this later)</li><li><code>default</code>: Optionally handles any situation where no case matches</li></ul><hr><h2 id="use-cases-for-switch-statements" tabindex="-1"><a class="header-anchor" href="#use-cases-for-switch-statements"><span>Use cases for <code>switch</code> statements</span></a></h2><h3 id="mapping-values-to-actions" tabindex="-1"><a class="header-anchor" href="#mapping-values-to-actions"><span>Mapping values to actions</span></a></h3>`,10)),n("p",null,[s[22]||(s[22]=a("One common scenario for using a ")),s[23]||(s[23]=n("code",null,"switch",-1)),s[24]||(s[24]=a(" case in JS is when you need to map a set of input values to corresponding outputs or actions. For example, consider a function that handles user input or ")),e(i,{to:"/blog.logrocket.com/guide-state-management-next-js.html"},{default:t(()=>s[21]||(s[21]=[n("strong",null,"managing state",-1)])),_:1,__:[21]}),s[25]||(s[25]=a(" in a game:"))]),s[52]||(s[52]=p(`<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">let</span> direction <span class="token operator">=</span> <span class="token string">&quot;left&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">switch</span> <span class="token punctuation">(</span>direction<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">case</span> <span class="token string">&quot;up&quot;</span><span class="token operator">:</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Moving up&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">case</span> <span class="token string">&quot;down&quot;</span><span class="token operator">:</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Moving down&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">case</span> <span class="token string">&quot;left&quot;</span><span class="token operator">:</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Moving left&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">case</span> <span class="token string">&quot;right&quot;</span><span class="token operator">:</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Moving right&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">default</span><span class="token operator">:</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Invalid direction&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>By separating each possible <code>direction</code> into its case, the intent of the code is immediately obvious. It’s easy to add or remove cases without disrupting the overall structure.</p><h3 id="replacing-multiple-if-else-statements" tabindex="-1"><a class="header-anchor" href="#replacing-multiple-if-else-statements"><span>Replacing multiple <code>if...else</code> statements</span></a></h3><p>If you’ve ever written a bunch of <code>if...else</code> checks, you know how messy they can get. For example:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">let</span> day <span class="token operator">=</span> <span class="token string">&quot;Monday&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>day <span class="token operator">===</span> <span class="token string">&quot;Monday&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Start of the workweek&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>day <span class="token operator">===</span> <span class="token string">&quot;Friday&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Almost the weekend!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>day <span class="token operator">===</span> <span class="token string">&quot;Saturday&quot;</span> <span class="token operator">||</span> day <span class="token operator">===</span> <span class="token string">&quot;Sunday&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Weekend vibes!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Midweek days&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A <code>switch</code> can tidy this up nicely:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// Equivalent switch statement</span></span>
<span class="line"><span class="token keyword">switch</span> <span class="token punctuation">(</span>day<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">case</span> <span class="token string">&quot;Monday&quot;</span><span class="token operator">:</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Start of the workweek&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">case</span> <span class="token string">&quot;Friday&quot;</span><span class="token operator">:</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Almost the weekend!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">case</span> <span class="token string">&quot;Saturday&quot;</span><span class="token operator">:</span></span>
<span class="line">  <span class="token keyword">case</span> <span class="token string">&quot;Sunday&quot;</span><span class="token operator">:</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Weekend vibes!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">default</span><span class="token operator">:</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Midweek days&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As you can see, the switch statement groups the different conditions under one variable, making the logic clearer and easier to read than several <code>if...else</code> blocks. It also handles multiple cases (like “Saturday” and “Sunday”) neatly by allowing them to share the same output without repeating code.</p><hr><h2 id="fallthrough-behavior-in-switch-statements" tabindex="-1"><a class="header-anchor" href="#fallthrough-behavior-in-switch-statements"><span>Fallthrough behavior in <code>switch</code> statements</span></a></h2><p>One of the most notable quirks of a <code>switch</code> statement is fallthrough. If you don’t include a <code>break</code> (or another exit statement) in a <code>switch</code> statement, the code will continue to the next case — even if it doesn’t match.</p><p>While this can be a handy shortcut in some scenarios, it can also lead to unintended results if you forget to use <code>break</code> where it’s needed.</p><p>Let’s look at an example of fallthrough behavior being useful. In the following example, we want the same code to run for grades <code>A</code>, <code>B</code>, and <code>C</code>. By omitting <code>break</code> until after <code>C</code>, we conveniently group these cases:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">let</span> grade <span class="token operator">=</span> <span class="token string">&quot;A&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">switch</span> <span class="token punctuation">(</span>grade<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">case</span> <span class="token string">&quot;A&quot;</span><span class="token operator">:</span></span>
<span class="line">  <span class="token keyword">case</span> <span class="token string">&quot;B&quot;</span><span class="token operator">:</span></span>
<span class="line">  <span class="token keyword">case</span> <span class="token string">&quot;C&quot;</span><span class="token operator">:</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;You passed!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">case</span> <span class="token string">&quot;D&quot;</span><span class="token operator">:</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;You barely passed...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">case</span> <span class="token string">&quot;F&quot;</span><span class="token operator">:</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;You failed.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">default</span><span class="token operator">:</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Invalid grade&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Here, if <code>grade</code> is <code>A</code>, <code>B</code>, or <code>C</code>, the same block of code will execute. The same message — <code>You passed!</code> — is displayed. This is a clean way to group multiple cases.</p><p>On the flip side, here’s an example of unintentional fallthroughs causing unexpected behaviors:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">let</span> fruit <span class="token operator">=</span> <span class="token string">&quot;apple&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">switch</span> <span class="token punctuation">(</span>fruit<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">case</span> <span class="token string">&quot;apple&quot;</span><span class="token operator">:</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Apples are $0.50&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">case</span> <span class="token string">&quot;orange&quot;</span><span class="token operator">:</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Oranges are $0.75&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">case</span> <span class="token string">&quot;banana&quot;</span><span class="token operator">:</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Bananas are $0.25&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">default</span><span class="token operator">:</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Invalid fruit&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Output:</span></span>
<span class="line"><span class="token comment">// Apples are $0.50</span></span>
<span class="line"><span class="token comment">// Oranges are $0.75</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Since there’s no <code>break</code> after the <code>apple</code> case, the code “falls through” and executes the <code>orange</code> case as well, even though <code>fruit is &quot;apple&quot;</code>. This might not be what you intended!</p><hr><h2 id="switch-vs-if-else-which-should-you-use" tabindex="-1"><a class="header-anchor" href="#switch-vs-if-else-which-should-you-use"><span>Switch vs. <code>if...else</code>: Which should you use?</span></a></h2><p>The choice between a <code>switch</code> statement and an <code>if...else</code> chain often depends on the complexity of the conditions you’re evaluating. Here’s a table comparing them in detail:</p><p>| Aspect | <code>switch</code> statement | <code>if...else</code> statement | | Use case | Best when you are comparing the same expression against multiple specific values | Best when conditions are complex, involve ranges, or require evaluation of different expressions | | Condition complexity | Ideal for simple equality checks | More flexible, accommodating complex conditions such as ranges or compound logic (e.g., <code>if</code> (<code>x &gt; 10 &amp;&amp; x &lt; 20</code>) | | Code readability | Offers a cleaner, more organized structure when dealing with many fixed-value cases, making the code easier to follow | Can become harder to read when multiple conditions are chained together, especially with nested or compound conditions | | Evaluation | Evaluates a single expression once and compares it against defined cases | Evaluates each condition independently, which can be beneficial if different expressions need to be checked | | Default behavior | Includes an optional <code>default</code> case to handle unmatched values, providing a clear fallback | Typically uses a final <code>else</code> block to catch any conditions that aren’t met by the preceding <code>if</code> and <code>else &gt;if</code> statements | | Flexibility | Limited to checking the equality of a single expression | Highly flexible, allowing for a broader range of logical conditions and comparisons beyond mere equality |</p><hr><h2 id="advanced-alternatives-object-literals" tabindex="-1"><a class="header-anchor" href="#advanced-alternatives-object-literals"><span>Advanced alternatives: Object literals</span></a></h2><p>Although <code>switch</code> statements can be handy in many cases, there are other elegant JavaScript alternatives, like object literals. Object literals can simplify your code, reduce the risk of bugs caused by fallthrough, and make it easier to add or remove actions down the road. Here’s an example:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> actions <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function-variable function">play</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Playing the music&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function-variable function">pause</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Pausing the music&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function-variable function">stop</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Stopping the music&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function-variable function">rewind</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Rewinding the music&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> command <span class="token operator">=</span> <span class="token string">&quot;play&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">actions<span class="token punctuation">[</span>command<span class="token punctuation">]</span> <span class="token operator">?</span> actions<span class="token punctuation">[</span>command<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Invalid command&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This approach is more concise and avoids the pitfalls of fallthrough. It’s also easier to extend; just add a new key-value pair to the object. If we consider the earlier example of mapping day numbers to day names, it can be rewritten with object literals as:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">function</span> <span class="token function">getDayName</span><span class="token punctuation">(</span><span class="token parameter">dayNumber</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> dayNames <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token number">0</span><span class="token operator">:</span> <span class="token string">&#39;Sunday&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token number">1</span><span class="token operator">:</span> <span class="token string">&#39;Monday&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token number">2</span><span class="token operator">:</span> <span class="token string">&#39;Tuesday&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token number">3</span><span class="token operator">:</span> <span class="token string">&#39;Wednesday&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token number">4</span><span class="token operator">:</span> <span class="token string">&#39;Thursday&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token number">5</span><span class="token operator">:</span> <span class="token string">&#39;Friday&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token number">6</span><span class="token operator">:</span> <span class="token string">&#39;Saturday&#39;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> dayNames<span class="token punctuation">[</span>dayNumber<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token string">&#39;Invalid day&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getDayName</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Outputs: Wednesday</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This method is not only shorter but also scales well when you simply need to map a set of keys to values. However, note that object literals are best used when dealing with direct mappings rather than when executing complex logic for each case.</p><hr><h2 id="best-practices-for-using-switch-statements" tabindex="-1"><a class="header-anchor" href="#best-practices-for-using-switch-statements"><span>Best practices for using <code>switch</code> statements</span></a></h2><p>The following tactics will help you deploy <code>switch</code> statements to your advantage:</p><h3 id="always-include-a-default-case" tabindex="-1"><a class="header-anchor" href="#always-include-a-default-case"><span>Always include a <code>default</code> case</span></a></h3><p>A <code>default</code> case ensures that your code can handle unexpected or unrecognized values gracefully. This acts as a safety net; if none of the specified cases match, your program can still execute a fallback code block.</p><h3 id="use-break-to-avoid-fallthrough" tabindex="-1"><a class="header-anchor" href="#use-break-to-avoid-fallthrough"><span>Use <code>break</code> to avoid fallthrough</span></a></h3><p>Unless you intentionally want the execution to fall through to the next case, always include a break statement at the end of each case. This prevents unintentional behavior and makes your code logic clearer.</p><h3 id="keep-it-readable" tabindex="-1"><a class="header-anchor" href="#keep-it-readable"><span>Keep it readable</span></a></h3>`,37)),n("p",null,[s[28]||(s[28]=a("If your ")),s[29]||(s[29]=n("code",null,"switch",-1)),s[30]||(s[30]=a(" statement grows too long or complex, consider ")),e(i,{to:"/blog.logrocket.com/leveraging-cody-ai-better-more-efficient-code.html"},{default:t(()=>s[26]||(s[26]=[n("strong",null,"refactoring your code",-1)])),_:1,__:[26]}),s[31]||(s[31]=a(" into smaller, manageable functions or using an object literal. This improves readability and makes your code easier to ")),e(i,{to:"/blog.logrocket.com/master-javascript-debugging-web-apps.html"},{default:t(()=>s[27]||(s[27]=[n("strong",null,"maintain and debug",-1)])),_:1,__:[27]}),s[32]||(s[32]=a("."))]),s[53]||(s[53]=p('<h3 id="use-descriptive-case-values" tabindex="-1"><a class="header-anchor" href="#use-descriptive-case-values"><span>Use descriptive case values</span></a></h3><p>Choose meaningful and descriptive values in your case statements. This self-documenting approach makes it easier for anyone reading the code to understand the purpose behind each case, ultimately leading to better maintainability.</p><hr><h2 id="common-switch-case-pitfalls-and-how-to-avoid-them" tabindex="-1"><a class="header-anchor" href="#common-switch-case-pitfalls-and-how-to-avoid-them"><span>Common switch case pitfalls and how to avoid them</span></a></h2><p>On the flip side, avoid these common switch case pitfalls:</p><h3 id="forgetting-the-break-statement" tabindex="-1"><a class="header-anchor" href="#forgetting-the-break-statement"><span>Forgetting the <code>break</code> statement</span></a></h3><p>As mentioned earlier, forgetting to include a break statement can lead to unintended fallthrough. Always double-check your <code>switch</code> statements to ensure each case ends with a break (unless a fallthrough is intentional).</p><h3 id="overusing-switch-statements" tabindex="-1"><a class="header-anchor" href="#overusing-switch-statements"><span>Overusing <code>switch</code> statements</span></a></h3><p>While <code>switch</code> statements are useful, they’re not always the best choice. If you find yourself writing a <code>switch</code> statement with dozens of cases, consider refactoring your code. Object literals or even a series of <code>if...else</code> statements might be more appropriate.</p><h3 id="ignoring-the-default-case" tabindex="-1"><a class="header-anchor" href="#ignoring-the-default-case"><span>Ignoring the <code>default</code> case</span></a></h3>',10)),n("p",null,[s[34]||(s[34]=a("The ")),s[35]||(s[35]=n("code",null,"default",-1)),s[36]||(s[36]=a(" case is your safety net. It ensures that your code handles unexpected values gracefully. Always include a ")),s[37]||(s[37]=n("code",null,"default",-1)),s[38]||(s[38]=a(" case, even if it’s just to log an ")),n("a",A,[e(m,{icon:"fas fa-globe"}),s[33]||(s[33]=a("error message"))]),s[39]||(s[39]=a("."))]),s[54]||(s[54]=n("hr",null,null,-1)),s[55]||(s[55]=n("h2",{id:"conclusion",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#conclusion"},[n("span",null,"Conclusion")])],-1)),n("p",null,[s[41]||(s[41]=a("The ")),s[42]||(s[42]=n("code",null,"switch",-1)),s[43]||(s[43]=a(" case in JS is a valuable addition to your ")),e(i,{to:"/blog.logrocket.com/six-things-you-may-not-know-about-javascript.html"},{default:t(()=>s[40]||(s[40]=[n("strong",null,"JavaScript",-1)])),_:1,__:[40]}),s[44]||(s[44]=a(" toolkit, offering a streamlined and organized way to handle multiple conditions. By using a ")),s[45]||(s[45]=n("code",null,"switch",-1)),s[46]||(s[46]=a(" statement, you can simplify your code structure, especially when mapping values to specific actions or replacing cumbersome ")),s[47]||(s[47]=n("code",null,"if...else",-1)),s[48]||(s[48]=a(" chains."))]),s[56]||(s[56]=n("p",null,[a("Remember, while "),n("code",null,"switch"),a(" statements can make your code cleaner, they require careful handling of fallthrough and consistent use of break and "),n("code",null,"default"),a(" cases to prevent unintended behavior.")],-1)),v(" TODO: add ARTICLE CARD "),e(c,r(u({title:"A practical guide to switch statements in JavaScript",desc:"Learn the basics of the switch case syntax, typical use cases like mapping values, and the often-confusing fallthrough behavior.",link:"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/switch-statements-javascript.html",logo:"/assets/image/blog.logrocket.com/favicon.png",background:"rgba(112,76,182,0.2)"})),null,16)])}const C=h(y,[["render",S]]),J=JSON.parse('{"path":"/blog.logrocket.com/switch-statements-javascript.html","title":"A practical guide to switch statements in JavaScript","lang":"en-US","frontmatter":{"lang":"en-US","title":"A practical guide to switch statements in JavaScript","description":"Article(s) > A practical guide to switch statements in JavaScript","icon":"fa-brands fa-js","category":["JavaScript","Article(s)"],"tag":["blog","blog.logrocket.com","js","javascript"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"A practical guide to switch statements in JavaScript\\",\\"image\\":[\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/switch-statements-javascript/banner.png\\"],\\"datePublished\\":\\"2025-02-26T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Fimber Elemuwa\\",\\"url\\":\\"https://blog.logrocket.com/author/fimberelemuwa/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/switch-statements-javascript.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"A practical guide to switch statements in JavaScript"}],["meta",{"property":"og:description","content":"Article(s) > A practical guide to switch statements in JavaScript"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/switch-statements-javascript/banner.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/switch-statements-javascript/banner.png"}],["meta",{"name":"twitter:image:alt","content":"A practical guide to switch statements in JavaScript"}],["meta",{"property":"article:author","content":"Fimber Elemuwa"}],["meta",{"property":"article:tag","content":"javascript"}],["meta",{"property":"article:tag","content":"js"}],["meta",{"property":"article:tag","content":"blog.logrocket.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2025-02-26T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > A practical guide to switch statements in JavaScript"},{"property":"og:description","content":"A practical guide to switch statements in JavaScript"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/switch-statements-javascript.html"}]],"prev":"/programming/js/articles/README.md","date":"2025-02-26T00:00:00.000Z","isOriginal":false,"author":[{"name":"Fimber Elemuwa","url":"https://blog.logrocket.com/author/fimberelemuwa/"}],"cover":"/assets/image/blog.logrocket.com/switch-statements-javascript/banner.png"},"git":{},"readingTime":{"minutes":6.53,"words":1959},"filePathRelative":"blog.logrocket.com/switch-statements-javascript.md","copyright":{"author":"Fimber Elemuwa"}}');export{C as comp,J as data};
