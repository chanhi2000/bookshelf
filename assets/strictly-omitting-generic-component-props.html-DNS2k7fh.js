import{_ as u}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as m,d as n,f as e,b as p,t as g,n as k,g as h,w as l,e as a,r as t,o as y}from"./app-BVguHYKu.js";const v="/bookshelf/assets/image/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/removing-color-type-definition.png",b="/bookshelf/assets/image/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/default-color-type.png",f="/bookshelf/assets/image/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/componentpropswithoutref-type.png",w="/bookshelf/assets/image/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/componentpropswithoutref-and-textprops.png",x="/bookshelf/assets/image/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/vowelsinohans.png",T={},C={id:"frontmatter-title-관련",tabindex:"-1"},R={class:"header-anchor",href:"#frontmatter-title-관련"},P={class:"table-of-contents"},j={href:"https://stackoverflow.com/questions/67142430/why-color-appears-as-html-attribute-on-a-div",target:"_blank",rel:"noopener noreferrer"};function S(c,s){const i=t("VPCard"),o=t("router-link"),r=t("SiteInfo"),d=t("VPIcon");return y(),m("div",null,[n("h1",C,[n("a",R,[n("span",null,g(c.$frontmatter.title)+" 관련",1)])]),e(i,k(h({title:"Build strongly typed polymorphic components with React and TypeScript",desc:"Learn how to build strongly typed polymorphic React components with TypeScript, using familiar Chakra UI and MUI component props as guides.",link:"/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/README.md",logo:"/assets/image/blog.logrocket.com/favicon.png",background:"rgba(112,76,182,0.2)"})),null,16),n("nav",P,[n("ul",null,[n("li",null,[e(o,{to:"#two-potential-solutions"},{default:l(()=>s[0]||(s[0]=[a("Two potential solutions")])),_:1,__:[0]})]),n("li",null,[e(o,{to:"#removing-types-from-react-componentpropswithoutref-c"},{default:l(()=>s[1]||(s[1]=[a("Removing types from React.ComponentPropsWithoutRef<C>")])),_:1,__:[1]})])])]),s[7]||(s[7]=n("hr",null,null,-1)),e(r,{name:"Build strongly typed polymorphic components with React and TypeScript",desc:"Learn how to build strongly typed polymorphic React components with TypeScript, using familiar Chakra UI and MUI component props as guides.",url:"https://blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript#strictly-omitting-generic-component-props",logo:"/assets/image/blog.logrocket.com/favicon.png",preview:"/assets/image/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/banner.png"}),s[8]||(s[8]=p(`<p>There’s just one thing I’m not particularly comfortable with: <code>color</code> turns out to also be a valid attribute for numerous HTML tags, as was the case pre-HTML5. So, if we removed <code>color</code> from our type definition, it’ll be accepted as any valid string.</p><p>See below:</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">type</span> <span class="token class-name">TextProps<span class="token operator">&lt;</span><span class="token constant">C</span> <span class="token keyword">extends</span> React<span class="token punctuation">.</span>ElementType<span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">as</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">C</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// remove color from the definition here</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+v+`" alt="Removing The Color Type Definition" tabindex="0" loading="lazy"><figcaption>Removing The Color Type Definition</figcaption></figure><p>Now, if you go ahead to use <code>Text</code> as before, it’s equally valid:</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span></span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>violet<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Hello world</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Text</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>The only difference here is how it is typed. <code>color</code> is now represented by the following definition:</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line">color<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="`+b+'" alt="The Default Color Type" tabindex="0" loading="lazy"><figcaption>The Default Color Type</figcaption></figure><p>Again, this is NOT a definition we wrote in our types!</p>',10)),n("p",null,[s[3]||(s[3]=a("This is a default HTML typing, where ")),s[4]||(s[4]=n("code",null,"color",-1)),s[5]||(s[5]=a(" is a valid attribute for most HTML elements. See ")),n("a",j,[e(d,{icon:"fa-brands fa-stack-overflow"}),s[2]||(s[2]=a("this Stack Overflow question"))]),s[6]||(s[6]=a(" for some more context."))]),s[9]||(s[9]=p(`<hr><h2 id="two-potential-solutions" tabindex="-1"><a class="header-anchor" href="#two-potential-solutions"><span>Two potential solutions</span></a></h2><p>Now, there are two ways to go here. The first one is to keep our initial solution, where we explicitly declared the <code>color</code> prop:</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">type</span> <span class="token class-name">TextProps<span class="token operator">&lt;</span><span class="token constant">C</span> <span class="token keyword">extends</span> React<span class="token punctuation">.</span>ElementType<span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">as</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">C</span><span class="token punctuation">;</span></span>
<span class="line">  color<span class="token operator">?</span><span class="token operator">:</span> Rainbow <span class="token operator">|</span> <span class="token string">&quot;black&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 👈 look here</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The second option arguably provides some more type safety. To achieve this, you must realize where the previous default <code>color</code> definition came from: the <code>React.ComponentPropsWithoutRef&lt;C&gt;</code>. This is what adds other props based on what the type of <code>as</code> is.</p><p>So, with this information, we can explicitly remove any definition that exists in our component types from <code>React.ComponentPropsWithoutRef&lt;C&gt;</code>.</p><p>This can be tough to understand before you see it in action, so let’s take it step by step.</p><p><code>React.ComponentPropsWithoutRef&lt;C&gt;</code>, as stated earlier, contains every other valid prop based on the type of <code>as</code>, e.g., <code>href</code>, <code>color</code>, etc., where these types have all of their own definitions, e.g., <code>color?: string | undefined</code>, etc.:</p><figure><img src="`+f+'" alt="The  Type" tabindex="0" loading="lazy"><figcaption>The <code>ComponentPropsWithoutRef</code> Type</figcaption></figure><p>It is possible that some values that exist in <code>React.ComponentPropsWithoutRef&lt;C&gt;</code> also exist in our component props type definition. In our case, <code>color</code> exists in both!</p><figure><img src="'+w+`" alt=" And TextProps" tabindex="0" loading="lazy"><figcaption><code>ComponentPropsWithoutRef</code> And TextProps</figcaption></figure><p>Instead of relying on our <code>color</code> definition to override what’s coming from <code>React.ComponentPropsWithoutRef&lt;C&gt;</code>, we will explicitly remove any type that also exists in our component types definition.</p><figure><img src="https://i.imgur.com/Vd2YT3K.png" alt="Removing existing props from " tabindex="0" loading="lazy"><figcaption>Removing existing props from <code>ComponentPropsWithoutRef</code></figcaption></figure><p>So, if any type exists in our component types definition, we will explicitly remove those types from <code>React.ComponentPropsWithoutRef&lt;C&gt;</code>.</p><hr><h2 id="removing-types-from-react-componentpropswithoutref-c" tabindex="-1"><a class="header-anchor" href="#removing-types-from-react-componentpropswithoutref-c"><span>Removing types from <code>React.ComponentPropsWithoutRef&lt;C&gt;</code></span></a></h2><p>Here’s what we had before:</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">type</span> <span class="token class-name">Props <span class="token operator">&lt;</span><span class="token constant">C</span> <span class="token keyword">extends</span> React<span class="token punctuation">.</span>ElementType<span class="token operator">&gt;</span></span> <span class="token operator">=</span> </span>
<span class="line">React<span class="token punctuation">.</span>PropsWithChildren<span class="token operator">&lt;</span>TextProps<span class="token operator">&lt;</span><span class="token constant">C</span><span class="token operator">&gt;&gt;</span> <span class="token operator">&amp;</span> </span>
<span class="line">React<span class="token punctuation">.</span>ComponentPropsWithoutRef<span class="token operator">&lt;</span><span class="token constant">C</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Instead of having an intersection type where we add everything that comes from <code>React.ComponentPropsWithoutRef&lt;C&gt;</code>, we will be more selective. We will use the <code>Omit</code> and <code>keyof</code> TypeScript utility types to perform some TypeScript magic.</p><p>Take a look:</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token comment">// before </span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">Props <span class="token operator">&lt;</span><span class="token constant">C</span> <span class="token keyword">extends</span> React<span class="token punctuation">.</span>ElementType<span class="token operator">&gt;</span></span> <span class="token operator">=</span> </span>
<span class="line">React<span class="token punctuation">.</span>PropsWithChildren<span class="token operator">&lt;</span>TextProps<span class="token operator">&lt;</span><span class="token constant">C</span><span class="token operator">&gt;&gt;</span> <span class="token operator">&amp;</span> </span>
<span class="line">React<span class="token punctuation">.</span>ComponentPropsWithoutRef<span class="token operator">&lt;</span><span class="token constant">C</span><span class="token operator">&gt;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// after</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">Props <span class="token operator">&lt;</span><span class="token constant">C</span> <span class="token keyword">extends</span> React<span class="token punctuation">.</span>ElementType<span class="token operator">&gt;</span></span> <span class="token operator">=</span> </span>
<span class="line">React<span class="token punctuation">.</span>PropsWithChildren<span class="token operator">&lt;</span>TextProps<span class="token operator">&lt;</span><span class="token constant">C</span><span class="token operator">&gt;&gt;</span> <span class="token operator">&amp;</span>   </span>
<span class="line">Omit<span class="token operator">&lt;</span>React<span class="token punctuation">.</span>ComponentPropsWithoutRef<span class="token operator">&lt;</span><span class="token constant">C</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token keyword">keyof</span> TextProps<span class="token operator">&lt;</span><span class="token constant">C</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This is the important bit:</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line">Omit<span class="token operator">&lt;</span>React<span class="token punctuation">.</span>ComponentPropsWithoutRef<span class="token operator">&lt;</span><span class="token constant">C</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token keyword">keyof</span> TextProps<span class="token operator">&lt;</span><span class="token constant">C</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>Omit</code> takes in two generics. The first is an object type, and the second is a union of types you’d like to “omit” from the object type.</p><p>Here’s my favorite example. Consider a <code>Vowel</code> object type as follows:</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">type</span> <span class="token class-name">Vowels</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  a<span class="token operator">:</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  e<span class="token operator">:</span> <span class="token string">&#39;e&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  i<span class="token operator">:</span> <span class="token string">&#39;i&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  o<span class="token operator">:</span> <span class="token string">&#39;o&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  u<span class="token operator">:</span> <span class="token string">&#39;u&#39;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This is an object type of key and value. Let’s say that I wanted to derive a new type from <code>Vowels</code> called <code>VowelsInOhans</code>.</p><p>Well, I do know that the name <code>Ohans</code> contains two vowels, <code>o</code> and <code>a</code>. Instead of manually declaring these:</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">type</span> <span class="token class-name">VowelsInOhans</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  a<span class="token operator">:</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  o<span class="token operator">:</span> <span class="token string">&#39;o&#39;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>I can go ahead to leverage <code>Omit</code> as follows:</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">type</span> <span class="token class-name">VowelsInOhans</span> <span class="token operator">=</span> Omit<span class="token operator">&lt;</span>Vowels<span class="token punctuation">,</span> <span class="token string">&#39;e&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;i&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;u&#39;</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="`+x+`" alt="The VowelsInOhans Type Using Omit" tabindex="0" loading="lazy"><figcaption>The VowelsInOhans Type Using Omit</figcaption></figure><p><code>Omit</code> will “omit” the <code>e</code>, <code>i</code> and <code>u</code> keys from the object type <code>Vowels</code>.</p><p>On the other hand, <a href="/blog.logrocket.com/how-to-use-keyof-operator-typescript/" target="_blank" rel="noopener noreferrer"><strong>TypeScript’s <code>keyof</code> operator</strong></a> works as you would imagine. Think of <code>Object.keys</code> in JavaScript: given an <code>object</code> type, <code>keyof</code> will return a union type of the keys of the object.</p><p>Phew! That’s a mouthful. Here’s an example:</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">type</span> <span class="token class-name">Vowels</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  a<span class="token operator">:</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  e<span class="token operator">:</span> <span class="token string">&#39;e&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  i<span class="token operator">:</span> <span class="token string">&#39;i&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  o<span class="token operator">:</span> <span class="token string">&#39;o&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  u<span class="token operator">:</span> <span class="token string">&#39;u&#39;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">Vowel</span> <span class="token operator">=</span> <span class="token keyword">keyof</span> Vowels </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now, <code>Vowel</code> will be a union type of the keys of <code>Vowels</code>, i.e.:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line">type Vowel <span class="token operator">=</span> <span class="token string">&#39;a&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;e&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;i&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;o&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;u&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>If you put these together and take a second look at our solution, it’ll all come together nicely:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line">Omit<span class="token operator">&lt;</span>React<span class="token punctuation">.</span>ComponentPropsWithoutRef<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">C</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">, keyof TextProps</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">C</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">&gt;;</span>
<span class="line"></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>keyof TextProps&lt;C&gt;</code> returns a union type of the keys of our component props. This is in turn passed to <code>Omit</code> to omit them from <code>React.ComponentPropsWithoutRef&lt;C&gt;</code>.</p><p>Sweet! 🕺</p><p>To finish, let’s go ahead and actually pass the <code>color</code> prop down to the rendered element:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> Text <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token constant">C</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>ElementType</span> <span class="token operator">=</span> <span class="token string">&quot;span&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">as</span><span class="token punctuation">,</span></span>
<span class="line">  color<span class="token punctuation">,</span> <span class="token comment">// 👈 look here</span></span>
<span class="line">  children<span class="token punctuation">,</span></span>
<span class="line">  <span class="token operator">...</span>restProps</span>
<span class="line"><span class="token punctuation">}</span><span class="token operator">:</span> Props<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">C</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">) =&gt; </span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> Component <span class="token operator">=</span> <span class="token keyword">as</span> <span class="token operator">||</span> <span class="token string">&quot;span&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 👇 compose an inline style object</span></span>
<span class="line">  <span class="token keyword">const</span> style <span class="token operator">=</span> color <span class="token operator">?</span> <span class="token punctuation">{</span> <span class="token literal-property property">style</span><span class="token operator">:</span> <span class="token punctuation">{</span> color <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 👇 pass the inline style to the rendered element</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Component</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>restProps<span class="token punctuation">}</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>style<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Component</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token plain-text">;</span>
<span class="line"></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,44))])}const V=u(T,[["render",S]]),I=JSON.parse('{"path":"/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/strictly-omitting-generic-component-props.html","title":"Strictly omitting generic component props","lang":"en-US","frontmatter":{"lang":"en-US","title":"Strictly omitting generic component props","description":"Article(s) > (8/10) Build strongly typed polymorphic components with React and TypeScript","category":["Node.js","React.js","Article(s)"],"tag":["blog","blog.logrocket.com","node","nodejs","node-js","react","reactjs","react-js"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Strictly omitting generic component props\\",\\"image\\":[\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/removing-color-type-definition.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/default-color-type.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/componentpropswithoutref-type.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/componentpropswithoutref-and-textprops.png\\",\\"https://i.imgur.com/Vd2YT3K.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/vowelsinohans.png\\"],\\"datePublished\\":\\"2022-05-25T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Ohans Emmanuel\\",\\"url\\":\\"https://blog.logrocket.com/author/ohansemmanuel/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/strictly-omitting-generic-component-props.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Strictly omitting generic component props"}],["meta",{"property":"og:description","content":"Article(s) > (8/10) Build strongly typed polymorphic components with React and TypeScript"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/banner.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/banner.png"}],["meta",{"name":"twitter:image:alt","content":"Strictly omitting generic component props"}],["meta",{"property":"article:author","content":"Ohans Emmanuel"}],["meta",{"property":"article:tag","content":"react-js"}],["meta",{"property":"article:tag","content":"reactjs"}],["meta",{"property":"article:tag","content":"react"}],["meta",{"property":"article:tag","content":"node-js"}],["meta",{"property":"article:tag","content":"nodejs"}],["meta",{"property":"article:tag","content":"node"}],["meta",{"property":"article:tag","content":"blog.logrocket.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2022-05-25T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > (8/10) Build strongly typed polymorphic components with React and TypeScript"},{"property":"og:description","content":"Strictly omitting generic component props"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript//strictly-omitting-generic-component-props.html"}]],"date":"2022-05-25T00:00:00.000Z","isOriginal":false,"author":[{"name":"Ohans Emmanuel","url":"https://blog.logrocket.com/author/ohansemmanuel/"}],"cover":"/assets/image/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/banner.png"},"git":{},"readingTime":{"minutes":3.72,"words":1117},"filePathRelative":"blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/strictly-omitting-generic-component-props.md","copyright":{"author":"Ohans Emmanuel"}}');export{V as comp,I as data};
