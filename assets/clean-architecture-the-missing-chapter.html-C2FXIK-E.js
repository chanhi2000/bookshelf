import{_ as y}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as g,d as s,f as e,b as o,a as b,t as f,n as d,g as m,w as t,e as a,r as l,o as w}from"./app-BVguHYKu.js";const P={},A={id:"frontmatter-title-·ÑÄ·Ö™·Ü´·ÑÖ·Öß·Ü´",tabindex:"-1"},C={class:"header-anchor",href:"#frontmatter-title-·ÑÄ·Ö™·Ü´·ÑÖ·Öß·Ü´"},_={class:"table-of-contents"};function T(h,n){const c=l("VPCard"),i=l("router-link"),k=l("SiteInfo"),p=l("RouteLink"),v=l("Tabs");return w(),g("div",null,[s("h1",A,[s("a",C,[s("span",null,f(h.$frontmatter.title)+" Í¥ÄÎ†®",1)])]),e(c,d(m({title:"C# > Article(s)",desc:"Article(s)",link:"/programming/cs/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),e(c,d(m({title:"System Design > Article(s)",desc:"Article(s)",link:"/academics/system-design/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",_,[s("ul",null,[s("li",null,[e(i,{to:"#the-problem-with-traditional-layering"},{default:t(()=>n[0]||(n[0]=[a("The Problem With Traditional Layering")])),_:1,__:[0]}),s("ul",null,[s("li",null,[e(i,{to:"#why-layer-based-organization-fails"},{default:t(()=>n[1]||(n[1]=[a("Why Layer-Based Organization Fails")])),_:1,__:[1]})]),s("li",null,[e(i,{to:"#the-real-intent-of-layers"},{default:t(()=>n[2]||(n[2]=[a("The Real Intent of Layers")])),_:1,__:[2]})])])]),s("li",null,[e(i,{to:"#better-approaches-to-code-organization"},{default:t(()=>n[3]||(n[3]=[a("Better Approaches to Code Organization")])),_:1,__:[3]}),s("ul",null,[s("li",null,[e(i,{to:"#package-by-feature"},{default:t(()=>n[4]||(n[4]=[a("Package by Feature")])),_:1,__:[4]})]),s("li",null,[e(i,{to:"#package-by-component"},{default:t(()=>n[5]||(n[5]=[a("Package by Component")])),_:1,__:[5]})]),s("li",null,[e(i,{to:"#which-one-should-you-choose"},{default:t(()=>n[6]||(n[6]=[a("Which One Should You Choose?")])),_:1,__:[6]})])])]),s("li",null,[e(i,{to:"#practical-examples"},{default:t(()=>n[7]||(n[7]=[a("Practical Examples")])),_:1,__:[7]}),s("ul",null,[s("li",null,[e(i,{to:"#the-traditional-way"},{default:t(()=>n[8]||(n[8]=[a("The Traditional Way")])),_:1,__:[8]})]),s("li",null,[e(i,{to:"#the-clean-way"},{default:t(()=>n[9]||(n[9]=[a("The Clean Way")])),_:1,__:[9]})])])]),s("li",null,[e(i,{to:"#best-practices-and-limitations"},{default:t(()=>n[10]||(n[10]=[a("Best Practices and Limitations")])),_:1,__:[10]}),s("ul",null,[s("li",null,[e(i,{to:"#the-limits-of-encapsulation"},{default:t(()=>n[11]||(n[11]=[a("The Limits of Encapsulation")])),_:1,__:[11]})]),s("li",null,[e(i,{to:"#the-trade-offs"},{default:t(()=>n[12]||(n[12]=[a("The Trade-offs")])),_:1,__:[12]})]),s("li",null,[e(i,{to:"#a-pragmatic-approach"},{default:t(()=>n[13]||(n[13]=[a("A Pragmatic Approach")])),_:1,__:[13]})])])]),s("li",null,[e(i,{to:"#conclusion"},{default:t(()=>n[14]||(n[14]=[a("Conclusion")])),_:1,__:[14]})])])]),n[31]||(n[31]=s("hr",null,null,-1)),e(k,{name:"Clean Architecture: The Missing Chapter",desc:"Clean Architecture's famous diagram is often misinterpreted as a project structure, leading developers to create artificial technical layers that scatter business logic across their codebase. Learn what the diagram really means and how to properly organize your code around business capabilities using components and clear boundaries.",url:"https://milanjovanovic.tech/blog/clean-architecture-the-missing-chapter",logo:"https://milanjovanovic.tech/profile_favicon.png",preview:"https://milanjovanovic.tech/blog-covers/mnw_114.png"}),n[32]||(n[32]=o(`<p>I see the same mistake happen over and over again.</p><p>Developers discover Clean Architecture, get excited about its principles, and then... they turn the famous Clean Architecture diagram into a project structure.</p><p>But here&#39;s the thing: <strong>Clean Architecture is not about folders</strong>. It&#39;s about dependencies.</p><p>Simon Brown wrote a &quot;missing chapter&quot; for Uncle Bob&#39;s Clean Architecture book that addresses exactly this issue. Yet somehow, this crucial message got lost along the way.</p><p>Today, I&#39;ll show you what Uncle Bob&#39;s Clean Architecture diagram really means and how you should actually organize your code. We&#39;ll look at practical examples that you can use in your projects right now.</p><p>Let&#39;s clear up this common misconception once and for all.</p><hr><h2 id="the-problem-with-traditional-layering" tabindex="-1"><a class="header-anchor" href="#the-problem-with-traditional-layering"><span>The Problem With Traditional Layering</span></a></h2><p>Almost every .NET developer has built a solution that looks like this:</p><ul><li><code>MyApp.Web</code> for controllers and views</li><li><code>MyApp.Business</code> for services and business logic</li><li><code>MyApp.Data</code> for repositories and data access</li></ul><p>It&#39;s the default approach. It&#39;s what we see in tutorials. It&#39;s what we teach juniors.</p><p>And it&#39;s completely wrong.</p><h3 id="why-layer-based-organization-fails" tabindex="-1"><a class="header-anchor" href="#why-layer-based-organization-fails"><span>Why Layer-Based Organization Fails</span></a></h3><p>When you organize code by technical layers, you scatter related components across multiple projects. A single feature, like managing policies, ends up spread across your entire codebase:</p><ul><li>Policies controller in the Web layer</li><li>Policy service in the Business layer</li><li>Policy repository in the Data layer</li></ul><p>Here&#39;s what you&#39;ll see when looking at the folder structure:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="file structure"><span>file structure</span></div><div class="language-plaintext line-numbers-mode" data-highlighter="prismjs" data-ext="plaintext"><pre><code class="language-plaintext"><span class="line">üìÅ MyApp.Web</span>
<span class="line">|__ üìÅ Controllers</span>
<span class="line">    |__ #Ô∏è‚É£ PoliciesController.cs</span>
<span class="line">üìÅ MyApp.Business</span>
<span class="line">|__ üìÅ Services</span>
<span class="line">    |__ #Ô∏è‚É£ PolicyService.cs</span>
<span class="line">üìÅ MyApp.Data</span>
<span class="line">|__ üìÅ Repositories</span>
<span class="line">    |__ #Ô∏è‚É£ PolicyRepository.cs</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Here&#39;s a visual representation of the layer-based architecture:</p><figure><img src="https://milanjovanovic.tech/blogs/mnw_114/layered_architecture.png?imwidth=640" alt="Feature Scattering in Layer-Based Architecture." tabindex="0" loading="lazy"><figcaption>Feature Scattering in Layer-Based Architecture.</figcaption></figure><p>This fragmentation creates several problems:</p><ol><li><strong>Violates Common Closure Principle</strong> - Classes that change together should stay together. When your &quot;Policies&quot; feature changes, you&#39;re touching three different projects.</li><li><strong>Hidden dependencies</strong> - Public interfaces everywhere make it possible to bypass layers. Nothing stops a controller from directly accessing a repository.</li><li><strong>No business intent</strong> - Opening your solution tells you nothing about what the application does. It only shows technical implementation details.</li><li><strong>Harder maintenance</strong> - Making changes requires jumping between multiple projects.</li></ol><p>The worst part? This approach doesn&#39;t even achieve what it promises. Despite the separate projects, you often end up with a &quot;big ball of mud&quot; because public access modifiers allow any class to reference any other class.</p><h3 id="the-real-intent-of-layers" tabindex="-1"><a class="header-anchor" href="#the-real-intent-of-layers"><span>The Real Intent of Layers</span></a></h3><p>Clean Architecture&#39;s circles were never meant to represent projects or folders. They represent different levels of policy, with dependencies pointing inward toward business rules.</p><p>You can achieve this without splitting your code into artificial technical layers.</p><p>Let me show you a better way.</p><hr><h2 id="better-approaches-to-code-organization" tabindex="-1"><a class="header-anchor" href="#better-approaches-to-code-organization"><span>Better Approaches to Code Organization</span></a></h2><p>Instead of splitting your code by technical layers, you have two better options: <strong>package by feature</strong> or <strong>package by component</strong>.</p><p>Let&#39;s look at both.</p><h3 id="package-by-feature" tabindex="-1"><a class="header-anchor" href="#package-by-feature"><span>Package by Feature</span></a></h3><p>Organizing by feature is a solid option. Each feature gets its own namespace and contains everything needed to implement that feature.</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="file structure"><span>file structure</span></div><div class="language-plaintext line-numbers-mode" data-highlighter="prismjs" data-ext="plaintext"><pre><code class="language-plaintext"><span class="line">üìÅ MyApp.Policies</span>
<span class="line">|__ üìÅ RenewPolicy</span>
<span class="line">    |__ #Ô∏è‚É£ RenewPolicyCommand.cs</span>
<span class="line">    |__ #Ô∏è‚É£ RenewPolicyHandler.cs</span>
<span class="line">    |__ #Ô∏è‚É£ PolicyValidator.cs</span>
<span class="line">    |__ #Ô∏è‚É£ PolicyRepository.cs</span>
<span class="line">|__ üìÅ ViewPolicyHistory</span>
<span class="line">    |__ #Ô∏è‚É£ PolicyHistoryQuery.cs</span>
<span class="line">    |__ #Ô∏è‚É£ PolicyHistoryHandler.cs</span>
<span class="line">    |__ #Ô∏è‚É£ PolicyHistoryViewModel.cs</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Here&#39;s a diagram representing this structure:</p><figure><img src="https://milanjovanovic.tech/blogs/mnw_114/feature_folder_architecture.png?imwidth=640" alt="Vertical slice architecture for package by feature organization." tabindex="0" loading="lazy"><figcaption>Vertical slice architecture for package by feature organization.</figcaption></figure><p>This approach:</p><ul><li>Makes features explicit</li><li>Keeps related code together</li><li>Simplifies navigation</li><li>Makes it easier to maintain and modify features</li></ul>`,37)),s("p",null,[n[16]||(n[16]=a("If you want to learn more, check out my article about ")),e(p,{to:"/milanjovanovic.tech/vertical-slice-architecture.html"},{default:t(()=>n[15]||(n[15]=[s("strong",null,"vertical slice architecture",-1)])),_:1,__:[15]}),n[17]||(n[17]=a("."))]),n[33]||(n[33]=s("h3",{id:"package-by-component",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#package-by-component"},[s("span",null,"Package by Component")])],-1)),n[34]||(n[34]=s("p",null,"A component is a cohesive group of related functionality with a well-defined interface. Component-based organization is more coarse-grained than feature folders. Think of it as a mini application that handles one specific business capability.",-1)),s("p",null,[n[19]||(n[19]=a("This is very similar to how I define modules in a ")),e(p,{to:"/milanjovanovic.tech/what-is-a-modular-monolith.html"},{default:t(()=>n[18]||(n[18]=[s("strong",null,"modular monolith",-1)])),_:1,__:[18]}),n[20]||(n[20]=a("."))]),n[35]||(n[35]=o(`<p>Here&#39;s what a component-based organization looks like:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="file structure"><span>file structure</span></div><div class="language-plaintext line-numbers-mode" data-highlighter="prismjs" data-ext="plaintext"><pre><code class="language-plaintext"><span class="line">üìÅ MyApp.Web</span>
<span class="line">|__ üìÅ Controllers</span>
<span class="line">    |__ #Ô∏è‚É£ PoliciesController.cs</span>
<span class="line">üìÅ MyApp.Policies</span>
<span class="line">|__ #Ô∏è‚É£ PoliciesComponent.cs     // Public interface</span>
<span class="line">|__ #Ô∏è‚É£ PolicyService.cs         // Implementation detail</span>
<span class="line">|__ #Ô∏è‚É£ PolicyRepository.cs      // Implementation detail</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>The key difference? Only <code>PoliciesComponent</code> is public. Everything else is internal to the component.</p><figure><img src="https://milanjovanovic.tech/blogs/mnw_114/component_architecture.png?imwidth=640" alt="Feature Scattering in Layer-Based Architecture." tabindex="0" loading="lazy"><figcaption>Feature Scattering in Layer-Based Architecture.</figcaption></figure><p>This means:</p><ul><li>No bypassing layers</li><li>Clear dependencies</li><li>Real encapsulation</li><li>Business intent visible in the structure</li></ul><h3 id="which-one-should-you-choose" tabindex="-1"><a class="header-anchor" href="#which-one-should-you-choose"><span>Which One Should You Choose?</span></a></h3>`,7)),e(v,{data:[{id:"Package by Feature"},{id:"Package by Component"}],active:0},{title0:t(({value:r,isActive:u})=>n[21]||(n[21]=[a("Package by Feature")])),title1:t(({value:r,isActive:u})=>n[22]||(n[22]=[a("Package by Component")])),tab0:t(({value:r,isActive:u})=>n[23]||(n[23]=[s("p",null,[a("Choose "),s("strong",null,"Package by Feature"),a(" when:")],-1),s("ul",null,[s("li",null,"You have many small, independent features"),s("li",null,"Your features don't share much code"),s("li",null,"You want maximum flexibility")],-1)])),tab1:t(({value:r,isActive:u})=>n[24]||(n[24]=[s("p",null,[a("Choose "),s("strong",null,"Package by Component"),a(" when:")],-1),s("ul",null,[s("li",null,"You have clear business capabilities"),s("li",null,"You want strong encapsulation"),s("li",null,"You might split into microservices later")],-1)])),_:1}),n[36]||(n[36]=o(`<p>Both approaches achieve what Clean Architecture really wants: proper dependency management and business focus.</p><p>Here&#39;s a side-by-side comparison of these architectural approaches:</p><figure><img src="https://milanjovanovic.tech/blogs/mnw_114/architecture_comparison.png?imwidth=3840" alt="Comparison between layered, vertical slice and component architectural approaches." tabindex="0" loading="lazy"><figcaption>Comparison between layered, vertical slice and component architectural approaches.</figcaption></figure><p>Greyed-out types are internal to the defining assembly.</p><p>In the Missing Chapter of Clean Architecture, Simon Brown argues strongly for package by component. The key insight is that components are the natural way to slice a system. They represent complete business capabilities, not just technical features.</p><p>My recommendation? Start with package by component. Within the component, organize around features.</p><hr><h2 id="practical-examples" tabindex="-1"><a class="header-anchor" href="#practical-examples"><span>Practical Examples</span></a></h2><p>Let&#39;s transform a typical layered application into a clean, component-based structure. We&#39;ll use an insurance policy system as an example.</p><h3 id="the-traditional-way" tabindex="-1"><a class="header-anchor" href="#the-traditional-way"><span>The Traditional Way</span></a></h3><p>Here&#39;s how most developers structure their solution:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="MyApp.*.cs"><span>MyApp.*.cs</span></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token comment">// MyApp.Data</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IPolicyRepository</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>Policy<span class="token punctuation">&gt;</span></span> <span class="token function">GetByIdAsync</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> policyNumber<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token return-type class-name">Task</span> <span class="token function">SaveAsync</span><span class="token punctuation">(</span><span class="token class-name">Policy</span> policy<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// MyApp.Business</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PolicyService</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IPolicyService</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IPolicyRepository</span> _repository<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token function">PolicyService</span><span class="token punctuation">(</span><span class="token class-name">IPolicyRepository</span> repository<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        _repository <span class="token operator">=</span> repository<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">RenewPolicyAsync</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> policyNumber<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> policy <span class="token operator">=</span> <span class="token keyword">await</span> _repository<span class="token punctuation">.</span><span class="token function">GetByIdAsync</span><span class="token punctuation">(</span>policyNumber<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// Business logic here</span></span>
<span class="line">        <span class="token keyword">await</span> _repository<span class="token punctuation">.</span><span class="token function">SaveAsync</span><span class="token punctuation">(</span>policy<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// MyApp.Web</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PoliciesController</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ControllerBase</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IPolicyService</span> _policyService<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token function">PoliciesController</span><span class="token punctuation">(</span><span class="token class-name">IPolicyService</span> policyService<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        _policyService <span class="token operator">=</span> policyService<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpPost</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;renew/{policyNumber}&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>IActionResult<span class="token punctuation">&gt;</span></span> <span class="token function">RenewPolicy</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> policyNumber<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">await</span> _policyService<span class="token punctuation">.</span><span class="token function">RenewPolicyAsync</span><span class="token punctuation">(</span>policyNumber<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">Ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>The problem? Everything is public. Any class can bypass the service and go straight to the repository.</p><h3 id="the-clean-way" tabindex="-1"><a class="header-anchor" href="#the-clean-way"><span>The Clean Way</span></a></h3><p>Here&#39;s the same functionality organized as a proper component:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token comment">// The only public contract</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IPoliciesComponent</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token return-type class-name">Task</span> <span class="token function">RenewPolicyAsync</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> policyNumber<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Everything below is internal to the component</span></span>
<span class="line"><span class="token keyword">internal</span> <span class="token keyword">class</span> <span class="token class-name">PoliciesComponent</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IPoliciesComponent</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IRenewPolicyHandler</span> _renewPolicyHandler<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Public constructor for DI</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token function">PoliciesComponent</span><span class="token punctuation">(</span><span class="token class-name">IRenewPolicyHandler</span> renewPolicyHandler<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        _renewPolicyHandler <span class="token operator">=</span> renewPolicyHandler<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">RenewPolicyAsync</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> policyNumber<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">await</span> _renewPolicyHandler<span class="token punctuation">.</span><span class="token function">HandleAsync</span><span class="token punctuation">(</span>policyNumber<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">internal</span> <span class="token keyword">interface</span> <span class="token class-name">IRenewPolicyHandler</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token return-type class-name">Task</span> <span class="token function">HandleAsync</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> policyNumber<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">internal</span> <span class="token keyword">class</span> <span class="token class-name">RenewPolicyHandler</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IRenewPolicyHandler</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IPolicyRepository</span> _repository<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">internal</span> <span class="token function">RenewPolicyHandler</span><span class="token punctuation">(</span><span class="token class-name">IPolicyRepository</span> repository<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        _repository <span class="token operator">=</span> repository<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">HandleAsync</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> policyNumber<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> policy <span class="token operator">=</span> <span class="token keyword">await</span> _repository<span class="token punctuation">.</span><span class="token function">GetByIdAsync</span><span class="token punctuation">(</span>policyNumber<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// Business logic for policy renewal here</span></span>
<span class="line">        <span class="token keyword">await</span> _repository<span class="token punctuation">.</span><span class="token function">SaveAsync</span><span class="token punctuation">(</span>policy<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">internal</span> <span class="token keyword">interface</span> <span class="token class-name">IPolicyRepository</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>Policy<span class="token punctuation">&gt;</span></span> <span class="token function">GetByIdAsync</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> policyNumber<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token return-type class-name">Task</span> <span class="token function">SaveAsync</span><span class="token punctuation">(</span><span class="token class-name">Policy</span> policy<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The key improvements are:</p><ol><li><strong>Single public interface</strong> - Only <code>IPoliciesComponent</code> is public. Everything else is internal.</li><li><strong>Protected dependencies</strong> - No way to bypass the component and access the repository directly.</li><li><strong>Clear dependencies</strong> - All dependencies flow inward through the component.</li><li><strong>Proper encapsulation</strong> - Implementation details are truly hidden.</li></ol><p>This is how you would register the services with dependency injection:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddScoped</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IPoliciesComponent<span class="token punctuation">,</span> PoliciesComponent<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddScoped</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IRenewPolicyHandler<span class="token punctuation">,</span> RenewPolicyHandler<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddScoped</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IPolicyRepository<span class="token punctuation">,</span> SqlPolicyRepository<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This structure enforces Clean Architecture principles through compiler-checked boundaries, not just conventions.</p><p>The compiler won&#39;t let you bypass the component&#39;s public interface. That&#39;s much stronger than hoping developers follow the rules.</p><hr><h2 id="best-practices-and-limitations" tabindex="-1"><a class="header-anchor" href="#best-practices-and-limitations"><span>Best Practices and Limitations</span></a></h2><p>Let&#39;s discuss something that is often overlooked: the practical limitations of enforcing Clean Architecture in .NET.</p><h3 id="the-limits-of-encapsulation" tabindex="-1"><a class="header-anchor" href="#the-limits-of-encapsulation"><span>The Limits of Encapsulation</span></a></h3><p>The <code>internal</code> keyword in .NET provides protection within a single assembly. Here&#39;s what that means in practice:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token comment">// In a single project:</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IPoliciesComponent</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span> <span class="token comment">// Public contract</span></span>
<span class="line"><span class="token keyword">internal</span> <span class="token keyword">class</span> <span class="token class-name">PoliciesComponent</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IPoliciesComponent</span></span> <span class="token punctuation">{</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">internal</span> <span class="token keyword">class</span> <span class="token class-name">PolicyRepository</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Someone could still do this:</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BadPoliciesComponent</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IPoliciesComponent</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token function">BadPoliciesComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// Nothing stops them from creating a bad implementation</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>While <code>internal</code> helps, it doesn&#39;t prevent all architectural violations.</p><h3 id="the-trade-offs" tabindex="-1"><a class="header-anchor" href="#the-trade-offs"><span>The Trade-offs</span></a></h3><p>Some teams split their code into separate assemblies for stronger encapsulation:</p><div class="language-plaintext line-numbers-mode" data-highlighter="prismjs" data-ext="plaintext"><pre><code class="language-plaintext"><span class="line">MyCompany.Policies.Core.dll</span>
<span class="line">MyCompany.Policies.Infrastructure.dll</span>
<span class="line">MyCompany.Policies.Api.dll</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This comes with trade-offs:</p><ol><li><strong>More complex build process</strong> - Multiple projects need to be compiled and referenced.</li><li><strong>Harder navigation</strong> - Jumping between assemblies in the IDE is slower.</li><li><strong>Deployment complexity</strong> - More DLLs to manage and deploy.</li></ol><h3 id="a-pragmatic-approach" tabindex="-1"><a class="header-anchor" href="#a-pragmatic-approach"><span>A Pragmatic Approach</span></a></h3><p>Here&#39;s what I recommend:</p><ol><li><strong>Use a single assembly</strong><ul><li>Keep related code together</li><li>Use <code>internal</code> for implementation details</li><li>Make only the component interfaces public</li><li>Add <code>sealed</code> to prevent inheritance when possible</li></ul></li><li><strong>Enforce through architecture testing</strong><ul><li>Add architecture tests to verify dependencies</li><li>Automatically check for architectural violations</li><li>Fail the build if someone bypasses the rules</li></ul></li></ol><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Fact</span></span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Controllers_Should_Only_Depend_On_Component_Interfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> Types<span class="token punctuation">.</span><span class="token function">InAssembly</span><span class="token punctuation">(</span>Assembly<span class="token punctuation">.</span><span class="token function">GetExecutingAssembly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">That</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">ResideInNamespace</span><span class="token punctuation">(</span><span class="token string">&quot;MyApp.Controllers&quot;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">Should</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">OnlyDependOn</span><span class="token punctuation">(</span>type <span class="token operator">=&gt;</span></span>
<span class="line">            type<span class="token punctuation">.</span>Name<span class="token punctuation">.</span><span class="token function">EndsWith</span><span class="token punctuation">(</span><span class="token string">&quot;Component&quot;</span><span class="token punctuation">)</span> <span class="token operator">||</span></span>
<span class="line">            type<span class="token punctuation">.</span>Name<span class="token punctuation">.</span><span class="token function">StartsWith</span><span class="token punctuation">(</span><span class="token string">&quot;IPolicy&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">GetResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    result<span class="token punctuation">.</span>IsSuccessful<span class="token punctuation">.</span><span class="token function">Should</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">BeTrue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,38)),s("p",null,[n[26]||(n[26]=a("Want to learn more about enforcing architecture through testing? Check out my article on ")),e(p,{to:"/milanjovanovic.tech/enforcing-software-architecture-with-architecture-tests.html"},{default:t(()=>n[25]||(n[25]=[s("strong",null,"architecture testing",-1)])),_:1,__:[25]}),n[27]||(n[27]=a("."))]),n[37]||(n[37]=o('<p>Remember: Clean Architecture is about managing dependencies, not about achieving perfect encapsulation. Use the tools the language gives you, but don&#39;t over-complicate things chasing an impossible ideal.</p><hr><h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="#conclusion"><span>Conclusion</span></a></h2><p>Clean Architecture isn&#39;t about projects, folders, or perfect encapsulation.</p><p>It&#39;s about:</p><ul><li>Organizing code around business capabilities</li><li>Managing dependencies effectively</li><li>Keeping related code together</li><li>Making boundaries explicit</li></ul><p>Start with a single project. Use components. Make interfaces public and implementations internal. Add architecture tests if you need more control.</p><p>And remember: <strong>pragmatism beats purism</strong>. Your architecture should help you ship features faster, not slow you down with artificial constraints.</p>',8)),s("p",null,[n[29]||(n[29]=a("Want to learn more? Check out my ")),e(p,{to:"/milanjovanovic.tech/pragmatic-clean-architecture/"},{default:t(()=>n[28]||(n[28]=[s("strong",null,"Pragmatic Clean Architecture",-1)])),_:1,__:[28]}),n[30]||(n[30]=a(" course, where I'll show you how to build maintainable applications with proper boundaries, clear dependencies, and business-focused components."))]),n[38]||(n[38]=s("p",null,"That's all for today. Stay awesome, and I'll see you next week.",-1)),n[39]||(n[39]=s("hr",null,null,-1)),b(" TODO: add ARTICLE CARD "),e(c,d(m({title:"Clean Architecture: The Missing Chapter",desc:"Clean Architecture's famous diagram is often misinterpreted as a project structure, leading developers to create artificial technical layers that scatter business logic across their codebase. Learn what the diagram really means and how to properly organize your code around business capabilities using components and clear boundaries.",link:"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/clean-architecture-the-missing-chapter.html",logo:"https://milanjovanovic.tech/profile_favicon.png",background:"rgba(79,70,229,0.2)"})),null,16)])}const j=y(P,[["render",T]]),M=JSON.parse('{"path":"/milanjovanovic.tech/clean-architecture-the-missing-chapter.html","title":"Clean Architecture: The Missing Chapter","lang":"en-US","frontmatter":{"lang":"en-US","title":"Clean Architecture: The Missing Chapter","description":"Article(s) > Clean Architecture: The Missing Chapter","icon":"iconfont icon-csharp","category":["C#","DotNet","Desgin","System","Article(s)"],"tag":["blog","milanjovanovic.tech","cs","c#","csharp","dotnet","design","system"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Clean Architecture: The Missing Chapter\\",\\"image\\":[\\"https://milanjovanovic.tech/blogs/mnw_114/layered_architecture.png?imwidth=640\\",\\"https://milanjovanovic.tech/blogs/mnw_114/feature_folder_architecture.png?imwidth=640\\",\\"https://milanjovanovic.tech/blogs/mnw_114/component_architecture.png?imwidth=640\\",\\"https://milanjovanovic.tech/blogs/mnw_114/architecture_comparison.png?imwidth=3840\\"],\\"datePublished\\":\\"2024-11-02T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Milan Jovanoviƒá\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/clean-architecture-the-missing-chapter.html"}],["meta",{"property":"og:site_name","content":"üìöBookshelf"}],["meta",{"property":"og:title","content":"Clean Architecture: The Missing Chapter"}],["meta",{"property":"og:description","content":"Article(s) > Clean Architecture: The Missing Chapter"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://milanjovanovic.tech/blog-covers/mnw_114.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://milanjovanovic.tech/blog-covers/mnw_114.png"}],["meta",{"name":"twitter:image:alt","content":"Clean Architecture: The Missing Chapter"}],["meta",{"property":"article:author","content":"Milan Jovanoviƒá"}],["meta",{"property":"article:tag","content":"system"}],["meta",{"property":"article:tag","content":"design"}],["meta",{"property":"article:tag","content":"dotnet"}],["meta",{"property":"article:tag","content":"csharp"}],["meta",{"property":"article:tag","content":"c#"}],["meta",{"property":"article:tag","content":"cs"}],["meta",{"property":"article:tag","content":"milanjovanovic.tech"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2024-11-02T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Clean Architecture: The Missing Chapter"},{"property":"og:description","content":"Clean Architecture: The Missing Chapter"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/clean-architecture-the-missing-chapter.html"}]],"prev":"/programming/cs/articles/README.md","date":"2024-11-02T00:00:00.000Z","isOriginal":false,"author":"Milan Jovanoviƒá","cover":"https://milanjovanovic.tech/blog-covers/mnw_114.png"},"git":{},"readingTime":{"minutes":6.34,"words":1902},"filePathRelative":"milanjovanovic.tech/clean-architecture-the-missing-chapter.md","copyright":{"author":"Milan Jovanoviƒá"}}');export{j as comp,M as data};
