import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as u,d as s,f as a,b as d,t as k,n as m,g as v,w as p,r as o,o as g,e as t}from"./app-BVguHYKu.js";const y={},h={id:"frontmatter-title-관련",tabindex:"-1"},b={class:"header-anchor",href:"#frontmatter-title-관련"},w={class:"table-of-contents"};function I(i,n){const l=o("VPCard"),e=o("router-link"),c=o("SiteInfo");return g(),u("div",null,[s("h1",h,[s("a",b,[s("span",null,k(i.$frontmatter.title)+" 관련",1)])]),a(l,m(v({title:"C# > Article(s)",desc:"Article(s)",link:"/programming/cs/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",w,[s("ul",null,[s("li",null,[a(e,{to:"#simple-mapping"},{default:p(()=>n[0]||(n[0]=[t("Simple Mapping")])),_:1,__:[0]})]),s("li",null,[a(e,{to:"#dapper-one-to-one-relationship-mapping"},{default:p(()=>n[1]||(n[1]=[t("Dapper One To One Relationship Mapping")])),_:1,__:[1]})]),s("li",null,[a(e,{to:"#dapper-one-to-many-relationship-mapping"},{default:p(()=>n[2]||(n[2]=[t("Dapper One To Many Relationship Mapping")])),_:1,__:[2]})]),s("li",null,[a(e,{to:"#in-summary"},{default:p(()=>n[3]||(n[3]=[t("In Summary")])),_:1,__:[3]})])])]),n[4]||(n[4]=s("hr",null,null,-1)),a(c,{name:"Mastering Dapper Relationship Mappings",desc:"Dapper is a lightweight object-relational mapper in .NET. It's popular because it's easy to use and fast at the same time. Dapper extends the IDbConnection interface with methods for sending SQL queries to the database. But, because of the nature of SQL, mapping the result into an object model can be tricky.",url:"https://milanjovanovic.tech/blog/mastering-dapper-relationship-mappings/",logo:"https://milanjovanovic.tech/profile_favicon.png",preview:"https://milanjovanovic.tech/blog-covers/mnw_050.png"}),n[5]||(n[5]=d(`<p><strong>Dapper</strong> is a lightweight <strong>object-relational mapper</strong> in .NET. It&#39;s popular because it&#39;s easy to use and fast at the same time.</p><p>Dapper extends the <code>IDbConnection</code> interface with methods for sending SQL queries to the database.</p><p>But, because of the nature of SQL, mapping the result into an object model can be tricky.</p><p>So in this week&#39;s newsletter, I&#39;ll teach you how to map:</p><ul><li>Simple queries</li><li>One-to-one relationships</li><li>One-to-many relationships</li><li>Many-to-many relationships</li></ul><p>Let&#39;s dive in!</p><hr><h2 id="simple-mapping" tabindex="-1"><a class="header-anchor" href="#simple-mapping"><span>Simple Mapping</span></a></h2><p>Let&#39;s first see how to do a <strong>simple mapping</strong> using Dapper.</p><p>Writing a query with Dapper has three parts:</p><ul><li>Creating an <code>IDbConnection</code> instance</li><li>Writing the SQL query</li><li>Calling a method that Dapper exposes</li></ul><p>We will write a SQL query to load a set of <code>LineItem</code> objects for a specific <code>Order</code>.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LineItem</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">long</span></span> LineItemId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">init</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">long</span></span> OrderId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">init</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">decimal</span></span> Price <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">init</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Currency <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">init</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">decimal</span></span> Quantity <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">init</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Here&#39;s the SQL query returning the result we need:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">SELECT</span> Id <span class="token keyword">AS</span> LineItemId<span class="token punctuation">,</span> OrderId<span class="token punctuation">,</span> Price<span class="token punctuation">,</span> Currency<span class="token punctuation">,</span> Quantity</span>
<span class="line"><span class="token keyword">FROM</span> LineItems</span>
<span class="line"><span class="token keyword">WHERE</span> OrderId <span class="token operator">=</span> <span class="token variable">@OrderId</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>I&#39;m parameterizing the <code>Order</code> identifier using the <code>@OrderId</code> syntax. This is a Dapper convention. It&#39;s important that you use <strong>parameterized queries</strong> to <strong>avoid SQL injection attacks</strong>.</p><p>The mapping is straightforward in this case because we are only returning one type from the database.</p><p>We call the <code>QueryAsync</code> method and specify <code>LineItem</code> as the return type. Make sure to pass in the arguments for this method, the SQL query, and the <code>OrderId</code> parameter. I prefer creating anonymous objects for Dapper parameters.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> connection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SqlConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> lineItems <span class="token operator">=</span> <span class="token keyword">await</span> connection<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">QueryAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>LineItem<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span></span>
<span class="line">    sql<span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">new</span> <span class="token punctuation">{</span> OrderId <span class="token operator">=</span> orderId <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That&#39;s everything you need for a simple mapping.</p><hr><h2 id="dapper-one-to-one-relationship-mapping" tabindex="-1"><a class="header-anchor" href="#dapper-one-to-one-relationship-mapping"><span>Dapper One To One Relationship Mapping</span></a></h2><p>What if the object we want to return from the SQL query contains a <strong>nested object</strong>?</p><p>Here&#39;s an updated <code>LineItem</code> type that also contains a <code>Product</code> inside.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LineItem</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">long</span></span> LineItemId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">init</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">long</span></span> OrderId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">init</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">decimal</span></span> Price <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">init</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Currency <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">init</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">decimal</span></span> Quantity <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">init</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">Product</span> Product <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">init</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Product</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">long</span></span> ProductId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">init</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">init</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now you need to return two types in the same query.</p><p>Here&#39;s the updated SQL query with a join on the <code>Products</code> table:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">SELECT</span> li<span class="token punctuation">.</span>Id <span class="token keyword">AS</span> LineItemId<span class="token punctuation">,</span> li<span class="token punctuation">.</span>OrderId<span class="token punctuation">,</span> li<span class="token punctuation">.</span>Price<span class="token punctuation">,</span> li<span class="token punctuation">.</span>Currency<span class="token punctuation">,</span> li<span class="token punctuation">.</span>Quantity<span class="token punctuation">,</span></span>
<span class="line">       p<span class="token punctuation">.</span>Id <span class="token keyword">AS</span> ProductId<span class="token punctuation">,</span> p<span class="token punctuation">.</span>Name</span>
<span class="line"><span class="token keyword">FROM</span> LineItems li</span>
<span class="line"><span class="token keyword">JOIN</span> Products p <span class="token keyword">ON</span> p<span class="token punctuation">.</span>Id <span class="token operator">=</span> li<span class="token punctuation">.</span>ProductId</span>
<span class="line"><span class="token keyword">WHERE</span> li<span class="token punctuation">.</span>OrderId <span class="token operator">=</span> <span class="token variable">@OrderId</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This query is more complicated because we need to use Dapper&#39;s <strong>multi-mapping</strong> feature.</p><p>In the <code>QueryAsync</code> method, we specify both <code>LineItem</code> and <code>Product</code> as return types and <code>LineItem</code> as the final return type for the method.</p><p>We must also tell Dapper how to map the <code>LineItem</code> and <code>Product</code> from the result set into a single <code>LineItem</code> object.</p><p>And we need to specify the <code>splitOn</code> argument, which tells Dapper where one object ends and the next begins.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> connection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SqlConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> lineItems <span class="token operator">=</span> <span class="token keyword">await</span> connection<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">QueryAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>LineItem<span class="token punctuation">,</span> Product<span class="token punctuation">,</span> LineItem<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span></span>
<span class="line">    sql<span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">(</span>lineItem<span class="token punctuation">,</span> product<span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        lineItem<span class="token punctuation">.</span>Product <span class="token operator">=</span> product<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> lineItem<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">new</span> <span class="token punctuation">{</span> OrderId <span class="token operator">=</span> orderId <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token named-parameter punctuation">splitOn</span><span class="token punctuation">:</span> <span class="token string">&quot;ProductId&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We write more code to make this work, but it should be easy to wrap your head around it.</p><hr><h2 id="dapper-one-to-many-relationship-mapping" tabindex="-1"><a class="header-anchor" href="#dapper-one-to-many-relationship-mapping"><span>Dapper One To Many Relationship Mapping</span></a></h2><p>Another frequent situation is mapping a <strong>one-to-many relationship</strong> from SQL into an object model.</p><p>Because you are joining two tables, the result set will contain duplicate data on the &quot;one&quot; side of the relationship.</p><p>For this example, let&#39;s use an <code>Order</code> with a list of <code>LineItem</code> objects.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Order</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">long</span></span> OrderId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">init</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>LineItem<span class="token punctuation">&gt;</span></span> LineItems <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">init</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LineItem</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">long</span></span> LineItemId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">init</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">long</span></span> OrderId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">init</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">decimal</span></span> Price <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">init</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Currency <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">init</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">decimal</span></span> Quantity <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">init</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Here&#39;s the SQL query returning the data we need from the database:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">SELECT</span> o<span class="token punctuation">.</span>Id <span class="token keyword">AS</span> OrderId<span class="token punctuation">,</span></span>
<span class="line">       li<span class="token punctuation">.</span>Id <span class="token keyword">AS</span> LineItemId<span class="token punctuation">,</span> li<span class="token punctuation">.</span>OrderId<span class="token punctuation">,</span> li<span class="token punctuation">.</span>Price<span class="token punctuation">,</span> li<span class="token punctuation">.</span>Currency<span class="token punctuation">,</span> li<span class="token punctuation">.</span>Quantity</span>
<span class="line"><span class="token keyword">FROM</span> Orders o</span>
<span class="line"><span class="token keyword">JOIN</span> LineItems li <span class="token keyword">ON</span> li<span class="token punctuation">.</span>OrderId <span class="token operator">=</span> o<span class="token punctuation">.</span>Id</span>
<span class="line"><span class="token keyword">WHERE</span> o<span class="token punctuation">.</span>Id <span class="token operator">=</span> <span class="token variable">@OrderId</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We&#39;re going to get back duplicate <code>Order</code> data because of the <code>JOIN</code>. But we only want to return one <code>Order</code> with all the line items.</p><p>The Dapper mapping function only gives us the <code>Order</code> and <code>LineItem</code> for the current row in the result set.</p><p>One way to solve this is to use a <code>Dictionary</code> to store the <code>Order</code> and reuse it inside the mapping.</p><ul><li>Store the <code>Order</code> in the dictionary if it&#39;s not there</li><li>If it is there, add the <code>LineItem</code> to the existing <code>Order</code> instance</li></ul><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> connection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SqlConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> ordersDictionary <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">long</span><span class="token punctuation">,</span> Order<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">await</span> connection<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">QueryAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Order<span class="token punctuation">,</span> LineItem<span class="token punctuation">,</span> Order<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span></span>
<span class="line">    sql<span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">(</span>order<span class="token punctuation">,</span> lineItem<span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>ordersDictionary<span class="token punctuation">.</span><span class="token function">TryGetValue</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span>OrderId<span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token class-name"><span class="token keyword">var</span></span> existingOrder<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            order <span class="token operator">=</span> existingOrder<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">else</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            ordersDictionary<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span>OrderId<span class="token punctuation">,</span> order<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        order<span class="token punctuation">.</span>LineItems<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>lineItem<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> order<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">new</span> <span class="token punctuation">{</span> OrderId <span class="token operator">=</span> orderId <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token named-parameter punctuation">splitOn</span><span class="token punctuation">:</span> <span class="token string">&quot;LineItemId&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> mappedOrder <span class="token operator">=</span> ordersDictionary<span class="token punctuation">[</span>orderId<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A <strong>many-to-many relationship</strong> would use the same idea, except you&#39;ll need two dictionaries for each side of the relationship.</p><hr><h2 id="in-summary" tabindex="-1"><a class="header-anchor" href="#in-summary"><span>In Summary</span></a></h2><p><strong>Dapper</strong> is a fantastic library for writing fast database queries using SQL.</p><p>Because of how SQL works, mapping into an object model is sometimes complicated.</p><p>There are four common scenarios:</p><ul><li>Simple mapping - a flat structure mapped directly from SQL to an object</li><li>One-to-one mapping - provide a mapping function to connect two objects</li><li>One-to-many mapping - manage a dictionary for the &quot;one&quot; side of the relationship</li><li>Many-to-many mapping - same as above, except you need a dictionary for both sides of the relationship</li></ul><p>Now you have a cheat sheet for mapping relationships with Dapper.</p><p>Hope this was helpful.</p><p>I&#39;ll see you next week!</p>`,57))])}const L=r(y,[["render",I]]),D=JSON.parse('{"path":"/milanjovanovic.tech/mastering-dapper-relationship-mappings.html","title":"Mastering Dapper Relationship Mappings","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Mastering Dapper Relationship Mappings","description":"Article(s) > Mastering Dapper Relationship Mappings","icon":"iconfont icon-csharp","category":["C#","DotNet","Article(s)"],"tag":["blog","milanjovanovic.tech","cs","c#","csharp","dotnet"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Mastering Dapper Relationship Mappings\\",\\"image\\":[\\"https://milanjovanovic.tech/blog-covers/mnw_050.png\\"],\\"datePublished\\":\\"2023-08-12T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Milan Jovanović\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/mastering-dapper-relationship-mappings.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Mastering Dapper Relationship Mappings"}],["meta",{"property":"og:description","content":"Article(s) > Mastering Dapper Relationship Mappings"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://milanjovanovic.tech/blog-covers/mnw_050.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://milanjovanovic.tech/blog-covers/mnw_050.png"}],["meta",{"name":"twitter:image:alt","content":"Mastering Dapper Relationship Mappings"}],["meta",{"property":"article:author","content":"Milan Jovanović"}],["meta",{"property":"article:tag","content":"dotnet"}],["meta",{"property":"article:tag","content":"csharp"}],["meta",{"property":"article:tag","content":"c#"}],["meta",{"property":"article:tag","content":"cs"}],["meta",{"property":"article:tag","content":"milanjovanovic.tech"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2023-08-12T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Mastering Dapper Relationship Mappings"},{"property":"og:description","content":"Mastering Dapper Relationship Mappings"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/mastering-dapper-relationship-mappings.html"}]],"prev":"/programming/cs/articles/README.md","date":"2023-08-12T00:00:00.000Z","isOriginal":false,"author":"Milan Jovanović","cover":"https://milanjovanovic.tech/blog-covers/mnw_050.png"},"git":{},"readingTime":{"minutes":3.76,"words":1128},"filePathRelative":"milanjovanovic.tech/mastering-dapper-relationship-mappings.md","copyright":{"author":"Milan Jovanović"}}');export{L as comp,D as data};
