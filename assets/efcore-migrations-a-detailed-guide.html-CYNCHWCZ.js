import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as k,d as s,f as e,b as i,t as m,n as g,g as v,w as o,e as a,r as l,o as b}from"./app-BVguHYKu.js";const h={},y={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},f={class:"table-of-contents"},q={href:"https://learn.microsoft.com/en-us/ef/core/managing-schemas/migrations",target:"_blank",rel:"noopener noreferrer"},E={href:"https://learn.microsoft.com/en-us/ef/core/cli",target:"_blank",rel:"noopener noreferrer"},C={href:"https://learn.microsoft.com/en-us/ef/core/cli/powershell",target:"_blank",rel:"noopener noreferrer"},M={href:"https://learn.microsoft.com/en-us/ef/core/managing-schemas/migrations/applying#bundles",target:"_blank",rel:"noopener noreferrer"},I={href:"https://github.com/fluentmigrator/fluentmigrator",target:"_blank",rel:"noopener noreferrer"},T={href:"https://github.com/DbUp/DbUp",target:"_blank",rel:"noopener noreferrer"},N={href:"https://erikbra.github.io/grate/",target:"_blank",rel:"noopener noreferrer"},S={href:"https://flywaydb.org/",target:"_blank",rel:"noopener noreferrer"};function D(c,n){const r=l("VPCard"),t=l("router-link"),u=l("SiteInfo"),p=l("VPIcon");return b(),k("div",null,[s("h1",y,[s("a",w,[s("span",null,m(c.$frontmatter.title)+" 관련",1)])]),e(r,g(v({title:"C# > Article(s)",desc:"Article(s)",link:"/programming/cs/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",f,[s("ul",null,[s("li",null,[e(t,{to:"#creating-migrations"},{default:o(()=>n[0]||(n[0]=[a("Creating Migrations")])),_:1,__:[0]})]),s("li",null,[e(t,{to:"#customizing-migrations"},{default:o(()=>n[1]||(n[1]=[a("Customizing Migrations")])),_:1,__:[1]})]),s("li",null,[e(t,{to:"#migration-sql-scripts"},{default:o(()=>n[2]||(n[2]=[a("Migration SQL Scripts")])),_:1,__:[2]})]),s("li",null,[e(t,{to:"#applying-migrations"},{default:o(()=>n[3]||(n[3]=[a("Applying Migrations")])),_:1,__:[3]}),s("ul",null,[s("li",null,[e(t,{to:"#command-line-tools"},{default:o(()=>n[4]||(n[4]=[a("Command-line Tools")])),_:1,__:[4]})]),s("li",null,[e(t,{to:"#applying-migrations-through-code"},{default:o(()=>n[5]||(n[5]=[a("Applying Migrations through Code")])),_:1,__:[5]})]),s("li",null,[e(t,{to:"#migration-bundles"},{default:o(()=>n[6]||(n[6]=[a("Migration Bundles")])),_:1,__:[6]})])])]),s("li",null,[e(t,{to:"#additional-database-migration-tools"},{default:o(()=>n[7]||(n[7]=[a("Additional Database Migration Tools")])),_:1,__:[7]})]),s("li",null,[e(t,{to:"#ef-core-migrations-best-practices"},{default:o(()=>n[8]||(n[8]=[a("EF Core Migrations Best Practices")])),_:1,__:[8]})])])]),n[28]||(n[28]=s("hr",null,null,-1)),e(u,{name:"EF Core Migrations: A Detailed Guide",desc:"In this newsletter, we'll break down the essentials of EF Migrations. We'll explore creating migrations, SQL scripts, applying migrations, migration tooling, and more.",url:"https://milanjovanovic.tech/blog/efcore-migrations-a-detailed-guide/",logo:"https://milanjovanovic.tech/profile_favicon.png",preview:"https://milanjovanovic.tech/blog-covers/mnw_090.png"}),n[29]||(n[29]=i('<p>Managing database schemas as your applications grow can quickly become a headache. Manual changes are error-prone and time-consuming. This can easily lead to inconsistencies between development and production environments. I&#39;ve seen these issues firsthand on countless projects, and it&#39;s not pretty. How can we do better?</p><p>Enter Entity Framework (EF) Migrations, a powerful tool that lets you version your database schemas.</p><p>Imagine this: Instead of writing SQL scripts, you define your changes in code. Need to add a column? Rename a table? No problem - EF Migrations has you covered. It tracks every modification to the data model. You can review, test, and apply changes confidently, even across different environments.</p><p>In this newsletter, we&#39;ll break down the essentials of EF Migrations:</p><ul><li><strong>Creating Migrations</strong>: Defining and generating migrations that capture your schema changes.</li><li><strong>Migration SQL Scripts</strong>: Understanding the SQL generated by your migrations and how to use it.</li><li><strong>Applying Migrations</strong>: Different ways to apply migrations to your database.</li><li><strong>Migration Tools</strong>: Exploring additional tools and frameworks for managing database migration.</li><li><strong>EF Migration Best Practices:</strong>: I&#39;ll share my recommendations from using EF for years.</li></ul><p>We have many examples to cover, so let&#39;s dive in.</p><hr><h2 id="creating-migrations" tabindex="-1"><a class="header-anchor" href="#creating-migrations"><span>Creating Migrations</span></a></h2>',8)),s("p",null,[n[10]||(n[10]=a("If you're completely new to EF migrations, I recommend checking out the ")),s("a",q,[e(p,{icon:"fa-brands fa-microsoft"}),n[9]||(n[9]=a("EF migrations docs"))]),n[11]||(n[11]=a(" to grasp the fundamentals. Moving forward, I'll assume you have some prior knowledge of EF Core."))]),n[30]||(n[30]=i(`<p>We&#39;ll need an entity and a database context before we can create migrations with EF.</p><p>Let&#39;s define a simple <code>Product</code> entity:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Product</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span><span class="token punctuation">?</span></span> Description <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">decimal</span></span> Price <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We will also need a <code>DbContext</code> implementation, so let&#39;s define the <code>AppDbContext</code> class. In the <code>OnModelCreating</code> method, we&#39;re going to configure the <code>Product</code> entity.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppDbContext</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">DbContext</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token function">AppDbContext</span><span class="token punctuation">(</span><span class="token class-name">DbContextOptions<span class="token punctuation">&lt;</span>AppDbContext<span class="token punctuation">&gt;</span></span> options<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnModelCreating</span><span class="token punctuation">(</span><span class="token class-name">ModelBuilder</span> modelBuilder<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        modelBuilder<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Entity</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Product<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>builder <span class="token operator">=&gt;</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            builder<span class="token punctuation">.</span><span class="token function">ToTable</span><span class="token punctuation">(</span><span class="token string">&quot;Products&quot;</span><span class="token punctuation">,</span> tableBuilder <span class="token operator">=&gt;</span></span>
<span class="line">            <span class="token punctuation">{</span></span>
<span class="line">                tableBuilder<span class="token punctuation">.</span><span class="token function">HasCheckConstraint</span><span class="token punctuation">(</span></span>
<span class="line">                    <span class="token string">&quot;CK_Price_NotNegative&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                    <span class="token named-parameter punctuation">sql</span><span class="token punctuation">:</span> <span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp"><span class="token keyword">nameof</span><span class="token punctuation">(</span>Product<span class="token punctuation">.</span>Price<span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string"> &gt; 0&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            builder<span class="token punctuation">.</span><span class="token function">HasKey</span><span class="token punctuation">(</span>p <span class="token operator">=&gt;</span> p<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            builder<span class="token punctuation">.</span><span class="token function">Property</span><span class="token punctuation">(</span>p <span class="token operator">=&gt;</span> p<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">HasMaxLength</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            builder<span class="token punctuation">.</span><span class="token function">Property</span><span class="token punctuation">(</span>p <span class="token operator">=&gt;</span> p<span class="token punctuation">.</span>Description<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">HasMaxLength</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            builder<span class="token punctuation">.</span><span class="token function">Property</span><span class="token punctuation">(</span>p <span class="token operator">=&gt;</span> p<span class="token punctuation">.</span>Price<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">HasPrecision</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            builder<span class="token punctuation">.</span><span class="token function">HasIndex</span><span class="token punctuation">(</span>p <span class="token operator">=&gt;</span> p<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IsUnique</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Let&#39;s break down a few of the methods we&#39;re using:</p><ul><li><code>ToTable</code> - Configures the table name for the specific entity. It also allows us to provide <code>TableBuilder</code> delegate. We can use it to configure a check constraint using <code>HasCheckConstraint</code>.</li><li><code>HasKey</code> - Configures the table&#39;s primary key. EF will also pick up the <code>Id</code> property by convention, so this step is optional.</li><li><code>HasProperty</code> - Represents the entry point for configuring individual properties of the entity.</li><li><code>HasIndex</code> - Defines an index on the specified property (or properties). We can also declare that the index should be unique by calling <code>IsUnique</code>.</li></ul><p>We&#39;re now ready to create our first migration. I&#39;m going to use the PowerShell syntax:</p><div class="language-powershell line-numbers-mode" data-highlighter="prismjs" data-ext="powershell"><pre><code class="language-powershell"><span class="line"><span class="token function">Add-Migration</span> Create_Database</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>This will create the first database migration called <code>Create_Database</code>. The migration will apply the configuration we defined in the <code>OnModelCreating</code> method. It contains the <code>Up</code> and <code>Down</code> methods, allowing us to apply or revert changes to the database.</p><p>Note that some operations are destructive (like removing a column) and can&#39;t be easily reverted. It&#39;s up to you to examine the generated migration and prevent any possible data loss.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">using</span> <span class="token namespace">Microsoft<span class="token punctuation">.</span>EntityFrameworkCore<span class="token punctuation">.</span>Migrations</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">using</span> <span class="token namespace">Npgsql<span class="token punctuation">.</span>EntityFrameworkCore<span class="token punctuation">.</span>PostgreSQL<span class="token punctuation">.</span>Metadata</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">partial</span> <span class="token keyword">class</span> <span class="token class-name">Create_Database</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Migration</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Up</span><span class="token punctuation">(</span><span class="token class-name">MigrationBuilder</span> migrationBuilder<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        migrationBuilder<span class="token punctuation">.</span><span class="token function">CreateTable</span><span class="token punctuation">(</span></span>
<span class="line">            <span class="token named-parameter punctuation">name</span><span class="token punctuation">:</span> <span class="token string">&quot;Products&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token named-parameter punctuation">columns</span><span class="token punctuation">:</span> table <span class="token operator">=&gt;</span> <span class="token keyword">new</span></span>
<span class="line">            <span class="token punctuation">{</span></span>
<span class="line">                Id <span class="token operator">=</span> table<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Column</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token named-parameter punctuation">type</span><span class="token punctuation">:</span> <span class="token string">&quot;integer&quot;</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">nullable</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span></span>
<span class="line">                    <span class="token punctuation">.</span><span class="token function">Annotation</span><span class="token punctuation">(</span><span class="token string">&quot;Npgsql:ValueGenerationStrategy&quot;</span><span class="token punctuation">,</span> NpgsqlValueGenerationStrategy<span class="token punctuation">.</span>IdentityByDefaultColumn<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                Name <span class="token operator">=</span> table<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Column</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token named-parameter punctuation">type</span><span class="token punctuation">:</span> <span class="token string">&quot;character varying(100)&quot;</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">maxLength</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">nullable</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                Description <span class="token operator">=</span> table<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Column</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token named-parameter punctuation">type</span><span class="token punctuation">:</span> <span class="token string">&quot;character varying(1000)&quot;</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">maxLength</span><span class="token punctuation">:</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">nullable</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                Price <span class="token operator">=</span> table<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Column</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">decimal</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token named-parameter punctuation">type</span><span class="token punctuation">:</span> <span class="token string">&quot;numeric(18,2)&quot;</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">precision</span><span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">scale</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">nullable</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token named-parameter punctuation">constraints</span><span class="token punctuation">:</span> table <span class="token operator">=&gt;</span></span>
<span class="line">            <span class="token punctuation">{</span></span>
<span class="line">                table<span class="token punctuation">.</span><span class="token function">PrimaryKey</span><span class="token punctuation">(</span><span class="token string">&quot;PK_Products&quot;</span><span class="token punctuation">,</span> x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                table<span class="token punctuation">.</span><span class="token function">CheckConstraint</span><span class="token punctuation">(</span><span class="token string">&quot;CK_Price_NotNegative&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Price &gt; 0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        migrationBuilder<span class="token punctuation">.</span><span class="token function">CreateIndex</span><span class="token punctuation">(</span></span>
<span class="line">            <span class="token named-parameter punctuation">name</span><span class="token punctuation">:</span> <span class="token string">&quot;IX_Products_Name&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token named-parameter punctuation">table</span><span class="token punctuation">:</span> <span class="token string">&quot;Products&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token named-parameter punctuation">column</span><span class="token punctuation">:</span> <span class="token string">&quot;Name&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token named-parameter punctuation">unique</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Down</span><span class="token punctuation">(</span><span class="token class-name">MigrationBuilder</span> migrationBuilder<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        migrationBuilder<span class="token punctuation">.</span><span class="token function">DropTable</span><span class="token punctuation">(</span></span>
<span class="line">            <span class="token named-parameter punctuation">name</span><span class="token punctuation">:</span> <span class="token string">&quot;Products&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="customizing-migrations" tabindex="-1"><a class="header-anchor" href="#customizing-migrations"><span>Customizing Migrations</span></a></h2><p>We can also modify the migration files if we need to apply some custom changes.</p><p>A notable example is renaming a column. Let&#39;s say we rename the <code>Description</code> property to <code>ShortDescription</code>. In some EF versions, this would result in the following migration:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">migrationBuilder<span class="token punctuation">.</span><span class="token function">DropColumn</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token named-parameter punctuation">name</span><span class="token punctuation">:</span> <span class="token string">&quot;Description&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token named-parameter punctuation">table</span><span class="token punctuation">:</span> <span class="token string">&quot;Customers&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">migrationBuilder<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddColumn</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token named-parameter punctuation">name</span><span class="token punctuation">:</span> <span class="token string">&quot;ShortDescription&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token named-parameter punctuation">table</span><span class="token punctuation">:</span> <span class="token string">&quot;Products&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token named-parameter punctuation">nullable</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>What&#39;s the problem here? By calling <code>DropColumn</code> first, we will remove the column from the database and lose valuable data.</p><p>What we actually want to do is rename the existing column. So, we can modify the migration file to use the <code>RenameColumn</code> method:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">migrationBuilder<span class="token punctuation">.</span><span class="token function">RenameColumn</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token named-parameter punctuation">name</span><span class="token punctuation">:</span> <span class="token string">&quot;Description&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token named-parameter punctuation">table</span><span class="token punctuation">:</span> <span class="token string">&quot;Products&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token named-parameter punctuation">newName</span><span class="token punctuation">:</span> <span class="token string">&quot;ShortDescription&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Another example is executing custom SQL commands from your migrations. Custom SQL commands are helpful when we can&#39;t express something through the EF fluent API. I&#39;ve used it in the past to migrate data from one column to another or define a complex index.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">partial</span> <span class="token keyword">class</span> <span class="token class-name">Update_Products</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Migration</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Up</span><span class="token punctuation">(</span><span class="token class-name">MigrationBuilder</span> migrationBuilder<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        migrationBuilder<span class="token punctuation">.</span><span class="token function">Sql</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;YOUR CUSTOM SQL HERE&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Down</span><span class="token punctuation">(</span><span class="token class-name">MigrationBuilder</span> migrationBuilder<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// You are also responsible for reverthing any changes.</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="migration-sql-scripts" tabindex="-1"><a class="header-anchor" href="#migration-sql-scripts"><span>Migration SQL Scripts</span></a></h2><p>You can use the <code>Script-Migration</code> command to generate SQL scripts from your migrations. This is useful for reviewing changes before applying them to the database. SQL scripts allow us to execute migrations in environments without direct access to the EF tooling.</p><p>Remember, you are responsible for preventing any data loss when executing EF migrations. Review the migrations carefully before applying them to the database.</p><p>Here are a few ways you can execute the <code>Script-Migration</code> command:</p><div class="language-powershell line-numbers-mode" data-highlighter="prismjs" data-ext="powershell"><pre><code class="language-powershell"><span class="line">Script-Migration</span>
<span class="line"></span>
<span class="line">Script-Migration &lt;FromMigration&gt;</span>
<span class="line"></span>
<span class="line">Script-Migration &lt;FromMigration&gt; &lt;ToMigration&gt;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>&lt;FromMigration&gt;</code> argument should be the name of the last migration applied to the database. It&#39;s your responsibility to apply the script appropriately, and only to databases in the correct migration state.</p><p>Here&#39;s what the SQL script for the <code>Create_Database</code> migration looks like:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token string">&quot;__EFMigrationsHistory&quot;</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token string">&quot;MigrationId&quot;</span> <span class="token keyword">character</span> <span class="token keyword">varying</span><span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;ProductVersion&quot;</span> <span class="token keyword">character</span> <span class="token keyword">varying</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">CONSTRAINT</span> <span class="token string">&quot;PK___EFMigrationsHistory&quot;</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token string">&quot;MigrationId&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">START</span> <span class="token keyword">TRANSACTION</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token string">&quot;Products&quot;</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token string">&quot;Id&quot;</span> <span class="token keyword">integer</span> GENERATED <span class="token keyword">BY</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">AS</span> <span class="token keyword">IDENTITY</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;Name&quot;</span> <span class="token keyword">character</span> <span class="token keyword">varying</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;Description&quot;</span> <span class="token keyword">character</span> <span class="token keyword">varying</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;Price&quot;</span> <span class="token keyword">numeric</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">CONSTRAINT</span> <span class="token string">&quot;PK_Products&quot;</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token string">&quot;Id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">CONSTRAINT</span> <span class="token string">&quot;CK_Price_NotNegative&quot;</span> <span class="token keyword">CHECK</span> <span class="token punctuation">(</span>Price <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">UNIQUE</span> <span class="token keyword">INDEX</span> <span class="token string">&quot;IX_Products_Name&quot;</span> <span class="token keyword">ON</span> <span class="token string">&quot;Products&quot;</span> <span class="token punctuation">(</span><span class="token string">&quot;Name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token string">&quot;__EFMigrationsHistory&quot;</span> <span class="token punctuation">(</span><span class="token string">&quot;MigrationId&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ProductVersion&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&#39;20240516095344_Create_Database&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;8.0.5&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">COMMIT</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can also specify an <code>-Idempotent</code> argument to the <code>Script-Migration</code> command. The <code>Script-Migration</code> command will generate SQL scripts that only apply migrations that haven&#39;t been applied already. This is useful if you&#39;re not sure what the last migration applied to the database.</p><div class="language-powershell line-numbers-mode" data-highlighter="prismjs" data-ext="powershell"><pre><code class="language-powershell"><span class="line">Script-Migration <span class="token operator">-</span>Idempotent</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Here&#39;s what the idempotent SQL script looks like:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token string">&quot;__EFMigrationsHistory&quot;</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token string">&quot;MigrationId&quot;</span> <span class="token keyword">character</span> <span class="token keyword">varying</span><span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;ProductVersion&quot;</span> <span class="token keyword">character</span> <span class="token keyword">varying</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">CONSTRAINT</span> <span class="token string">&quot;PK___EFMigrationsHistory&quot;</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token string">&quot;MigrationId&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">START</span> <span class="token keyword">TRANSACTION</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">DO</span> $EF$</span>
<span class="line"><span class="token keyword">BEGIN</span></span>
<span class="line">    <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token number">1</span> <span class="token keyword">FROM</span> <span class="token string">&quot;__EFMigrationsHistory&quot;</span> <span class="token keyword">WHERE</span> <span class="token string">&quot;MigrationId&quot;</span> <span class="token operator">=</span> <span class="token string">&#39;20240516095344_Create_Database&#39;</span><span class="token punctuation">)</span> <span class="token keyword">THEN</span></span>
<span class="line">    <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token string">&quot;Products&quot;</span> <span class="token punctuation">(</span></span>
<span class="line">        <span class="token string">&quot;Id&quot;</span> <span class="token keyword">integer</span> GENERATED <span class="token keyword">BY</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">AS</span> <span class="token keyword">IDENTITY</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">&quot;Name&quot;</span> <span class="token keyword">character</span> <span class="token keyword">varying</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">&quot;Description&quot;</span> <span class="token keyword">character</span> <span class="token keyword">varying</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">&quot;Price&quot;</span> <span class="token keyword">numeric</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token keyword">CONSTRAINT</span> <span class="token string">&quot;PK_Products&quot;</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token string">&quot;Id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token keyword">CONSTRAINT</span> <span class="token string">&quot;CK_Price_NotNegative&quot;</span> <span class="token keyword">CHECK</span> <span class="token punctuation">(</span>Price <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">END</span> <span class="token keyword">IF</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">END</span> $EF$<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">DO</span> $EF$</span>
<span class="line"><span class="token keyword">BEGIN</span></span>
<span class="line">    <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token number">1</span> <span class="token keyword">FROM</span> <span class="token string">&quot;__EFMigrationsHistory&quot;</span> <span class="token keyword">WHERE</span> <span class="token string">&quot;MigrationId&quot;</span> <span class="token operator">=</span> <span class="token string">&#39;20240516095344_Create_Database&#39;</span><span class="token punctuation">)</span> <span class="token keyword">THEN</span></span>
<span class="line">    <span class="token keyword">CREATE</span> <span class="token keyword">UNIQUE</span> <span class="token keyword">INDEX</span> <span class="token string">&quot;IX_Products_Name&quot;</span> <span class="token keyword">ON</span> <span class="token string">&quot;Products&quot;</span> <span class="token punctuation">(</span><span class="token string">&quot;Name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">END</span> <span class="token keyword">IF</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">END</span> $EF$<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">DO</span> $EF$</span>
<span class="line"><span class="token keyword">BEGIN</span></span>
<span class="line">    <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token number">1</span> <span class="token keyword">FROM</span> <span class="token string">&quot;__EFMigrationsHistory&quot;</span> <span class="token keyword">WHERE</span> <span class="token string">&quot;MigrationId&quot;</span> <span class="token operator">=</span> <span class="token string">&#39;20240516095344_Create_Database&#39;</span><span class="token punctuation">)</span> <span class="token keyword">THEN</span></span>
<span class="line">    <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token string">&quot;__EFMigrationsHistory&quot;</span> <span class="token punctuation">(</span><span class="token string">&quot;MigrationId&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ProductVersion&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&#39;20240516095344_Create_Database&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;8.0.5&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">END</span> <span class="token keyword">IF</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">END</span> $EF$<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">COMMIT</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="applying-migrations" tabindex="-1"><a class="header-anchor" href="#applying-migrations"><span>Applying Migrations</span></a></h2><p>How do we apply EF migrations to the database?</p><p>We have a few options:</p><ul><li>SQL scripts</li><li>Command-line tools</li><li>Apply migrations through code</li><li>Migration bundles</li></ul><p>We discussed SQL scripts in the previous section, so I won&#39;t mention them again.</p><h3 id="command-line-tools" tabindex="-1"><a class="header-anchor" href="#command-line-tools"><span>Command-line Tools</span></a></h3><p>The most common approach to applying database migrations is using the CLI. You can use either the <code>dotnet ef</code> tool or the PowerShell commands. For example, you can execute the <code>Update-Database</code> command from PowerShell to apply any pending migrations.</p><div class="language-powershell line-numbers-mode" data-highlighter="prismjs" data-ext="powershell"><pre><code class="language-powershell"><span class="line"><span class="token function">Update-Database</span> <span class="token operator">-</span>Migration &lt;ToMigration&gt; <span class="token operator">-</span>Connection &lt;ConnectionString&gt;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Here are the documentation links if you want to learn more:</p>`,45)),s("ul",null,[s("li",null,[s("a",E,[e(p,{icon:"fa-brands fa-microsoft"}),n[12]||(n[12]=a("EF Core CLI documentation"))])]),s("li",null,[s("a",C,[e(p,{icon:"fa-brands fa-microsoft"}),n[13]||(n[13]=a("EF Core PowerShell documentation"))])])]),n[31]||(n[31]=i(`<h3 id="applying-migrations-through-code" tabindex="-1"><a class="header-anchor" href="#applying-migrations-through-code"><span>Applying Migrations through Code</span></a></h3><p>Here&#39;s a helper method for applying database migrations. It uses an <code>IServiceScope</code> to resolve a <code>DbContext</code> instance and uses it to call the <code>Migrate</code> method.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token generic-method"><span class="token function">ApplyMigration</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TDbContext<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">IServiceScope</span> scope<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">where</span> <span class="token class-name">TDbContext</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">DbContext</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">using</span> <span class="token class-name">TDbContext</span> context <span class="token operator">=</span> scope<span class="token punctuation">.</span>ServiceProvider</span>
<span class="line">        <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetRequiredService</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TDbContext<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    context<span class="token punctuation">.</span>Database<span class="token punctuation">.</span><span class="token function">Migrate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can apply migrations when the application is starting. I <strong>don&#39;t recommend</strong> using this approach for production environments. Migration can fail, concurrency issues exist, and rolling back migrations is challenging. However, this approach can be helpful in local development and when scaffolding databases for integration testing.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token class-name"><span class="token keyword">var</span></span> builder <span class="token operator">=</span> WebApplication<span class="token punctuation">.</span><span class="token function">CreateBuilder</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> app <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>app<span class="token punctuation">.</span>Environment<span class="token punctuation">.</span><span class="token function">IsDevelopment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">using</span> <span class="token class-name">IServiceScope</span> scope <span class="token operator">=</span> app<span class="token punctuation">.</span>ApplicationServices<span class="token punctuation">.</span><span class="token function">CreateScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token generic-method"><span class="token function">ApplyMigration</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>AppDbContext<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>scope<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="migration-bundles" tabindex="-1"><a class="header-anchor" href="#migration-bundles"><span>Migration Bundles</span></a></h3><p>Migration bundles are executable files that you can use to apply database migrations. They&#39;re self-contained and can be executed from CI pipelines.</p><p>You can use the <code>Bundle-Migration</code> command to create a migration bundle:</p><div class="language-powershell line-numbers-mode" data-highlighter="prismjs" data-ext="powershell"><pre><code class="language-powershell"><span class="line">Bundle-Migration <span class="token operator">-</span>Connection &lt;ConnectionString&gt;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,9)),s("p",null,[n[14]||(n[14]=a("This will create an ")),e(p,{icon:"fas fa-gears"}),n[15]||(n[15]=s("code",null,"efbundle.exe",-1)),n[16]||(n[16]=a(" file that we can run to apply any pending database migrations."))]),s("p",null,[n[18]||(n[18]=a("I recommend reading the ")),s("a",M,[e(p,{icon:"fa-brands fa-microsoft"}),n[17]||(n[17]=a("migration bundles documentation"))]),n[19]||(n[19]=a(" to learn more."))]),n[32]||(n[32]=s("hr",null,null,-1)),n[33]||(n[33]=s("h2",{id:"additional-database-migration-tools",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#additional-database-migration-tools"},[s("span",null,"Additional Database Migration Tools")])],-1)),n[34]||(n[34]=s("p",null,"What can you do if you don't want to use EF Core migrations?",-1)),n[35]||(n[35]=s("p",null,"I wanted to mention some additional tools you can use for database schema versioning and running migrations:",-1)),s("ul",null,[s("li",null,[s("a",I,[e(p,{icon:"iconfont icon-github"}),n[20]||(n[20]=s("code",null,"fluentmigrator/fluentmigrator",-1))]),n[21]||(n[21]=a(": A migration framework for .NET with a fluent API for defining migrations."))]),s("li",null,[s("a",T,[e(p,{icon:"iconfont icon-github"}),n[22]||(n[22]=s("code",null,"DbUp/DbUp",-1))]),n[23]||(n[23]=a(": A lightweight library for applying SQL scripts to databases."))]),s("li",null,[s("a",N,[e(p,{icon:"fas fa-globe"}),n[24]||(n[24]=a("Grate"))]),n[25]||(n[25]=a(": An automated database deployment (change management) system that relies on SQL scripts."))]),s("li",null,[s("a",S,[e(p,{icon:"fas fa-globe"}),n[26]||(n[26]=a("Flyway"))]),n[27]||(n[27]=a(": An open-source database migration tool that simplifies the management and versioning of database schema changes."))])]),n[36]||(n[36]=i('<p>We won&#39;t do a deep dive on these tools, but I recommend you check out their documentation.</p><hr><h2 id="ef-core-migrations-best-practices" tabindex="-1"><a class="header-anchor" href="#ef-core-migrations-best-practices"><span>EF Core Migrations Best Practices</span></a></h2><p>I want to wrap up this issue with a few tips from my experience of working with EF Core migrations over the years:</p><ul><li><strong>Use meaningful migration names</strong>: Don&#39;t name migrations with dates or generic descriptions. Use clear, descriptive names that indicate the purpose of the migration. Good examples: <code>AddProductsTable</code>, <code>RenameDescriptionToShortDescription</code>. This makes it much easier to understand your migration history and find specific changes.</li><li><strong>Keep migrations small and focused</strong>: Avoid creating massive migrations containing multiple unrelated changes. Smaller migrations are easier to review, test, and troubleshoot if something goes wrong. Aim for one migration per feature or logical change.</li><li><strong>Test migrations thoroughly</strong>: Before applying migrations to production, test them in a development or staging environment. Development and staging environments should mirror your production setup as closely as possible. This will help catch any unexpected issues or data loss risks before they affect real users.</li><li><strong>Beware of destructive changes</strong>: Some operations, like dropping columns or tables, can lead to irreversible data loss. Carefully consider the consequences before including such changes in migrations. Provide a way to migrate data or create a backup plan.</li><li><strong>Avoid merge conflicts</strong>: Solving merge conflicts for EF migration snapshots can be a real headache. Be mindful of this when working in a team that creates many database migrations. It&#39;s recommended to always be up-to-date with the latest migration before creating a new one. This should minimize the chance of creating merge conflicts.</li></ul><p>My preferred approach to applying migrations is using SQL scripts. Depending on the project scope and complexity, we could do this manually or through a tool that automates the process. This allows me to review the migration and identify any potential problems.</p><p>I hope this was helpful!</p><p>Thanks for reading, and I&#39;ll see you next week.</p>',8))])}const P=d(h,[["render",D]]),F=JSON.parse('{"path":"/milanjovanovic.tech/efcore-migrations-a-detailed-guide.html","title":"EF Core Migrations: A Detailed Guide","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"EF Core Migrations: A Detailed Guide","description":"Article(s) > EF Core Migrations: A Detailed Guide","icon":"iconfont icon-csharp","category":["C#","DotNet","Article(s)"],"tag":["blog","milanjovanovic.tech","cs","c#","csharp","dotnet"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"EF Core Migrations: A Detailed Guide\\",\\"image\\":[\\"https://milanjovanovic.tech/blog-covers/mnw_090.png\\"],\\"datePublished\\":\\"2024-05-18T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Milan Jovanović\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/efcore-migrations-a-detailed-guide.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"EF Core Migrations: A Detailed Guide"}],["meta",{"property":"og:description","content":"Article(s) > EF Core Migrations: A Detailed Guide"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://milanjovanovic.tech/blog-covers/mnw_090.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://milanjovanovic.tech/blog-covers/mnw_090.png"}],["meta",{"name":"twitter:image:alt","content":"EF Core Migrations: A Detailed Guide"}],["meta",{"property":"article:author","content":"Milan Jovanović"}],["meta",{"property":"article:tag","content":"dotnet"}],["meta",{"property":"article:tag","content":"csharp"}],["meta",{"property":"article:tag","content":"c#"}],["meta",{"property":"article:tag","content":"cs"}],["meta",{"property":"article:tag","content":"milanjovanovic.tech"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2024-05-18T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > EF Core Migrations: A Detailed Guide"},{"property":"og:description","content":"EF Core Migrations: A Detailed Guide"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/efcore-migrations-a-detailed-guide.html"}]],"prev":"/programming/cs/articles/README.md","date":"2024-05-18T00:00:00.000Z","isOriginal":false,"author":"Milan Jovanović","cover":"https://milanjovanovic.tech/blog-covers/mnw_090.png"},"git":{},"readingTime":{"minutes":7.26,"words":2179},"filePathRelative":"milanjovanovic.tech/efcore-migrations-a-detailed-guide.md","copyright":{"author":"Milan Jovanović"}}');export{P as comp,F as data};
