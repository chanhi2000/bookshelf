import{_ as v}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as g,d as s,f as e,b as o,a as b,t as h,n as r,g as d,w as t,e as a,r as i,o as y}from"./app-BVguHYKu.js";const f={},w={id:"frontmatter-title-관련",tabindex:"-1"},q={class:"header-anchor",href:"#frontmatter-title-관련"},j={class:"table-of-contents"},S={href:"https://quartz-scheduler.net/",target:"_blank",rel:"noopener noreferrer"},J={href:"https://quartz-scheduler.net/documentation/quartz-3.x/tutorial/crontriggers.html",target:"_blank",rel:"noopener noreferrer"},T={href:"https://quartz-scheduler.net/documentation/quartz-3.x/tutorial/job-stores.html",target:"_blank",rel:"noopener noreferrer"},z={href:"https://github.com/quartznet/quartznet/tree/main/database/tables",target:"_blank",rel:"noopener noreferrer"};function x(k,n){const u=i("VPCard"),p=i("router-link"),m=i("SiteInfo"),c=i("RouteLink"),l=i("VPIcon");return y(),g("div",null,[s("h1",w,[s("a",q,[s("span",null,h(k.$frontmatter.title)+" 관련",1)])]),e(u,r(d({title:"C# > Article(s)",desc:"Article(s)",link:"/programming/cs/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",j,[s("ul",null,[s("li",null,[e(p,{to:"#setting-up-quartz-with-asp-net-core"},{default:t(()=>n[0]||(n[0]=[a("Setting Up Quartz With ASP.NET Core")])),_:1,__:[0]})]),s("li",null,[e(p,{to:"#defining-and-scheduling-jobs"},{default:t(()=>n[1]||(n[1]=[a("Defining and Scheduling Jobs")])),_:1,__:[1]})]),s("li",null,[e(p,{to:"#scheduling-recurring-jobs"},{default:t(()=>n[2]||(n[2]=[a("Scheduling Recurring Jobs")])),_:1,__:[2]})]),s("li",null,[e(p,{to:"#job-persistence-setup"},{default:t(()=>n[3]||(n[3]=[a("Job Persistence Setup")])),_:1,__:[3]}),s("ul",null,[s("li",null,[e(p,{to:"#durable-jobs"},{default:t(()=>n[4]||(n[4]=[a("Durable Jobs")])),_:1,__:[4]})])])]),s("li",null,[e(p,{to:"#summary"},{default:t(()=>n[5]||(n[5]=[a("Summary")])),_:1,__:[5]})])])]),n[34]||(n[34]=s("hr",null,null,-1)),e(m,{name:"Scheduling Background Jobs With Quartz in .NET (advanced concepts)",desc:"Quartz.NET is a powerful job scheduling library, but integrating it properly with ASP.NET Core requires careful consideration. Here's what I learned about setting up Quartz.NET with proper observability, persistence, and job scheduling patterns.",url:"https://milanjovanovic.tech/blog/scheduling-background-jobs-with-quartz-in-dotnet-advanced-concepts",logo:"https://milanjovanovic.tech/profile_favicon.png",preview:"https://milanjovanovic.tech/blog-covers/mnw_121.png"}),s("p",null,[n[8]||(n[8]=a("Most ASP.NET Core applications need to handle ")),e(c,{to:"/milanjovanovic.tech/running-background-tasks-in-asp-net-core.html"},{default:t(()=>n[6]||(n[6]=[a("background processing")])),_:1,__:[6]}),n[9]||(n[9]=a(" - from sending reminder emails to running cleanup tasks. While there are many ways to implement background jobs, ")),s("a",S,[e(l,{icon:"fas fa-globe"}),n[7]||(n[7]=a("Quartz.NET"))]),n[10]||(n[10]=a(" stands out with its robust scheduling capabilities, persistence options, and production-ready features."))]),n[35]||(n[35]=o(`<p>In this article, we&#39;ll look at:</p><ul><li>Setting up Quartz.NET with ASP.NET Core and proper observability</li><li>Implementing both on-demand and recurring jobs</li><li>Configuring persistent storage with PostgreSQL</li><li>Handling job data and monitoring execution</li></ul><p>Let&#39;s start with the basic setup and build our way up to a production-ready configuration.</p><hr><h2 id="setting-up-quartz-with-asp-net-core" tabindex="-1"><a class="header-anchor" href="#setting-up-quartz-with-asp-net-core"><span>Setting Up Quartz With ASP.NET Core</span></a></h2><p>First, let&#39;s set up Quartz with proper instrumentation.</p><p>We&#39;ll need to install some NuGet packages:</p><div class="language-powershell line-numbers-mode" data-highlighter="prismjs" data-ext="powershell"><pre><code class="language-powershell"><span class="line"><span class="token function">Install-Package</span> Quartz<span class="token punctuation">.</span>Extensions<span class="token punctuation">.</span>Hosting</span>
<span class="line"><span class="token function">Install-Package</span> Quartz<span class="token punctuation">.</span>Serialization<span class="token punctuation">.</span>Json</span>
<span class="line"></span>
<span class="line"><span class="token comment"># This might be in prerelease</span></span>
<span class="line"><span class="token function">Install-Package</span> OpenTelemetry<span class="token punctuation">.</span>Instrumentation<span class="token punctuation">.</span>Quartz</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Next, we&#39;ll configure the Quartz services and OpenTelemetry instrumentation and start the scheduler:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddQuartz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Add Quartz.NET as a hosted service</span></span>
<span class="line">builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddQuartzHostedService</span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    options<span class="token punctuation">.</span>WaitForJobsToComplete <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddOpenTelemetry</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">WithTracing</span><span class="token punctuation">(</span>tracing <span class="token operator">=&gt;</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        tracing</span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">AddHttpClientInstrumentation</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">AddAspNetCoreInstrumentation</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">AddQuartzInstrumentation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">UseOtlpExporter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This is all we need at the start.</p><hr><h2 id="defining-and-scheduling-jobs" tabindex="-1"><a class="header-anchor" href="#defining-and-scheduling-jobs"><span>Defining and Scheduling Jobs</span></a></h2>`,13)),s("p",null,[n[12]||(n[12]=a("To define a ")),e(c,{to:"/milanjovanovic.tech/scheduling-background-jobs-with-quartz-net.html"},{default:t(()=>n[11]||(n[11]=[a("background job")])),_:1,__:[11]}),n[13]||(n[13]=a(", you have to implement the ")),n[14]||(n[14]=s("code",null,"IJob",-1)),n[15]||(n[15]=a(" interface. All job implementations run as scoped services, so you can inject dependencies as needed. Quartz allows you to pass data to a job using the ")),n[16]||(n[16]=s("code",null,"JobDataMap",-1)),n[17]||(n[17]=a(" dictionary. It's recommended to only use primitive types for job data to avoid serialization issues."))]),n[36]||(n[36]=o(`<p>When executing the job, there are a few ways to fetch job data:</p><ul><li><code>JobDataMap</code> - a dictionary of key-value pairs <ul><li><code>JobExecutionContext.JobDetail.JobDataMap</code> - job-specific data</li><li><code>JobExecutionContext.Trigger.TriggerDataMap</code> - trigger-specific data</li></ul></li><li><code>MergedJobDataMap</code> - combines job data with trigger data</li></ul><p>It&#39;s a best practice to use <code>MergedJobDataMap</code> to retrieve job data.</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="EmailReminderJob.cs"><span>EmailReminderJob.cs</span></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmailReminderJob</span><span class="token punctuation">(</span><span class="token class-name">ILogger<span class="token punctuation">&lt;</span>EmailReminderJob<span class="token punctuation">&gt;</span></span> logger<span class="token punctuation">,</span> <span class="token class-name">IEmailService</span> emailService<span class="token punctuation">)</span> <span class="token punctuation">:</span> IJob</span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">string</span></span> Name <span class="token operator">=</span> <span class="token keyword">nameof</span><span class="token punctuation">(</span>EmailReminderJob<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">Execute</span><span class="token punctuation">(</span><span class="token class-name">IJobExecutionContext</span> context<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// Best practice: Prefer using MergedJobDataMap</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> data <span class="token operator">=</span> context<span class="token punctuation">.</span>MergedJobDataMap<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// Get job data - note that this isn&#39;t strongly typed</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">?</span></span> userId <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span><span class="token string">&quot;userId&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">?</span></span> message <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">try</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">await</span> emailService<span class="token punctuation">.</span><span class="token function">SendReminderAsync</span><span class="token punctuation">(</span>userId<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            logger<span class="token punctuation">.</span><span class="token function">LogInformation</span><span class="token punctuation">(</span><span class="token string">&quot;Sent reminder to user {UserId}: {Message}&quot;</span><span class="token punctuation">,</span> userId<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            logger<span class="token punctuation">.</span><span class="token function">LogError</span><span class="token punctuation">(</span>ex<span class="token punctuation">,</span> <span class="token string">&quot;Failed to send reminder to user {UserId}&quot;</span><span class="token punctuation">,</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">// Rethrow to let Quartz handle retry logic</span></span>
<span class="line">            <span class="token keyword">throw</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>One thing to note: <code>JobDataMap</code> isn&#39;t strongly typed. This is a limitation we have to live with, but we can mitigate it by:</p><ol><li>Using constants for key names</li><li>Validating data early in the <code>Execute</code> method</li><li>Creating wrapper services for job scheduling</li></ol><p>Now, let&#39;s discuss scheduling jobs.</p><p>Here&#39;s how to schedule one-time reminders:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">record</span> <span class="token class-name">ScheduleReminderRequest</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">string</span></span> UserId<span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">string</span></span> Message<span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">DateTime</span> ScheduleTime</span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Schedule a one-time reminder</span></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">MapPost</span><span class="token punctuation">(</span><span class="token string">&quot;/api/reminders/schedule&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token class-name">ISchedulerFactory</span> schedulerFactory<span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">ScheduleReminderRequest</span> request<span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> scheduler <span class="token operator">=</span> <span class="token keyword">await</span> schedulerFactory<span class="token punctuation">.</span><span class="token function">GetScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> jobData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JobDataMap</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token punctuation">{</span> <span class="token string">&quot;userId&quot;</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span>UserId <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">{</span> <span class="token string">&quot;message&quot;</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span>Message <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> job <span class="token operator">=</span> JobBuilder<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Create</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>EmailReminderJob<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">WithIdentity</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;reminder-</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">Guid<span class="token punctuation">.</span><span class="token function">NewGuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">,</span> <span class="token string">&quot;email-reminders&quot;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">SetJobData</span><span class="token punctuation">(</span>jobData<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> trigger <span class="token operator">=</span> TriggerBuilder<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">WithIdentity</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;trigger-</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">Guid<span class="token punctuation">.</span><span class="token function">NewGuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">,</span> <span class="token string">&quot;email-reminders&quot;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">StartAt</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>ScheduleTime<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">await</span> scheduler<span class="token punctuation">.</span><span class="token function">ScheduleJob</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> trigger<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> Results<span class="token punctuation">.</span><span class="token function">Ok</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token punctuation">{</span> scheduled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> scheduledTime <span class="token operator">=</span> request<span class="token punctuation">.</span>ScheduleTime <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token function">WithName</span><span class="token punctuation">(</span><span class="token string">&quot;ScheduleReminder&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token function">WithOpenApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The endpoint schedules one-time email reminders using Quartz. It creates a job with user data, sets up a trigger for the specified time, and schedules them together. The <code>EmailReminderJob</code> receives a unique identity in the <code>email-reminders</code> group.</p><p>Here&#39;s a sample request you can use to test this out:</p><div class="language-plaintext line-numbers-mode" data-highlighter="prismjs" data-ext="plaintext"><pre><code class="language-plaintext"><span class="line">POST /api/reminders/schedule</span>
<span class="line">{</span>
<span class="line">    &quot;userId&quot;: &quot;user123&quot;,</span>
<span class="line">    &quot;message&quot;: &quot;Important meeting!&quot;,</span>
<span class="line">    &quot;scheduleTime&quot;: &quot;2024-12-17T15:00:00&quot;</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="scheduling-recurring-jobs" tabindex="-1"><a class="header-anchor" href="#scheduling-recurring-jobs"><span>Scheduling Recurring Jobs</span></a></h2>`,14)),s("p",null,[n[19]||(n[19]=a("For recurring background jobs, you can use ")),s("a",J,[e(l,{icon:"fas fa-globe"}),n[18]||(n[18]=a("cron schedules"))]),n[20]||(n[20]=a(":"))]),n[37]||(n[37]=o(`<div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">record</span> <span class="token class-name">RecurringReminderRequest</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">string</span></span> UserId<span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">string</span></span> Message<span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">string</span></span> CronExpression</span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Schedule a recurring reminder</span></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">MapPost</span><span class="token punctuation">(</span><span class="token string">&quot;/api/reminders/schedule/recurring&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token class-name">ISchedulerFactory</span> schedulerFactory<span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">RecurringReminderRequest</span> request<span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> scheduler <span class="token operator">=</span> <span class="token keyword">await</span> schedulerFactory<span class="token punctuation">.</span><span class="token function">GetScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> jobData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JobDataMap</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token punctuation">{</span> <span class="token string">&quot;userId&quot;</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span>UserId <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">{</span> <span class="token string">&quot;message&quot;</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span>Message <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> job <span class="token operator">=</span> JobBuilder<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Create</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>EmailReminderJob<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">WithIdentity</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;recurring-</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">Guid<span class="token punctuation">.</span><span class="token function">NewGuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">,</span> <span class="token string">&quot;recurring-reminders&quot;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">SetJobData</span><span class="token punctuation">(</span>jobData<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> trigger <span class="token operator">=</span> TriggerBuilder<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">WithIdentity</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;recurring-trigger-</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">Guid<span class="token punctuation">.</span><span class="token function">NewGuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">,</span> <span class="token string">&quot;recurring-reminders&quot;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">WithCronSchedule</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>CronExpression<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">await</span> scheduler<span class="token punctuation">.</span><span class="token function">ScheduleJob</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> trigger<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> Results<span class="token punctuation">.</span><span class="token function">Ok</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token punctuation">{</span> scheduled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> cronExpression <span class="token operator">=</span> request<span class="token punctuation">.</span>CronExpression <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token function">WithName</span><span class="token punctuation">(</span><span class="token string">&quot;ScheduleRecurringReminder&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token function">WithOpenApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Cron triggers are more powerful than simple triggers. They allow you to define complex schedules like &quot;every weekday at 10 AM&quot; or &quot;every 15 minutes&quot;. Quartz supports cron expressions with seconds, minutes, hours, days, months, and years.</p><p>Here&#39;s a sample request if you want to test this:</p><div class="language-plaintext line-numbers-mode" data-highlighter="prismjs" data-ext="plaintext"><pre><code class="language-plaintext"><span class="line">POST /api/reminders/schedule/recurring</span>
<span class="line">{</span>
<span class="line">    &quot;userId&quot;: &quot;user123&quot;,</span>
<span class="line">    &quot;message&quot;: &quot;Daily standup&quot;,</span>
<span class="line">    &quot;cronExpression&quot;: &quot;0 0 10 ? * MON-FRI&quot;</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="job-persistence-setup" tabindex="-1"><a class="header-anchor" href="#job-persistence-setup"><span>Job Persistence Setup</span></a></h2>`,6)),s("p",null,[n[22]||(n[22]=a("By default, Quartz uses in-memory storage, which means your jobs are lost when the application restarts. For production environments, you'll want to use a persistent store. Quartz supports several ")),s("a",T,[e(l,{icon:"fas fa-globe"}),n[21]||(n[21]=a("database providers"))]),n[23]||(n[23]=a(", including SQL Server, PostgreSQL, MySQL, and Oracle."))]),n[38]||(n[38]=o(`<p>Let&#39;s look at how to set up persistent storage with proper schema isolation:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddQuartz</span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    options<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddJob</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>EmailReminderJob<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>c <span class="token operator">=&gt;</span> c</span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">StoreDurably</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">WithIdentity</span><span class="token punctuation">(</span>EmailReminderJob<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    options<span class="token punctuation">.</span><span class="token function">UsePersistentStore</span><span class="token punctuation">(</span>persistenceOptions <span class="token operator">=&gt;</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        persistenceOptions<span class="token punctuation">.</span><span class="token function">UsePostgres</span><span class="token punctuation">(</span>cfg <span class="token operator">=&gt;</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            cfg<span class="token punctuation">.</span>ConnectionString <span class="token operator">=</span> connectionString<span class="token punctuation">;</span></span>
<span class="line">            cfg<span class="token punctuation">.</span>TablePrefix <span class="token operator">=</span> <span class="token string">&quot;scheduler.qrtz_&quot;</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token named-parameter punctuation">dataSourceName</span><span class="token punctuation">:</span> <span class="token string">&quot;reminders&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Database name</span></span>
<span class="line"></span>
<span class="line">        persistenceOptions<span class="token punctuation">.</span><span class="token function">UseNewtonsoftJsonSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        persistenceOptions<span class="token punctuation">.</span>UseProperties <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A few important things to note here:</p>`,3)),s("ul",null,[n[29]||(n[29]=s("li",null,[a("The "),s("code",null,"TablePrefix"),a(" setting helps organize Quartz tables in your database - in this case, placing them in a dedicated "),s("code",null,"scheduler"),a(" schema")],-1)),n[30]||(n[30]=s("li",null,"You'll need to run the appropriate database scripts to create these tables",-1)),s("li",null,[n[27]||(n[27]=a("Each database provider has its own ")),s("a",z,[n[24]||(n[24]=a("setup scripts (")),e(l,{icon:"iconfont icon-github"}),n[25]||(n[25]=s("code",null,"quartznet/quartznet",-1)),n[26]||(n[26]=a(")"))]),n[28]||(n[28]=a(" - check the Quartz documentation for your chosen provider"))])]),n[39]||(n[39]=o(`<h3 id="durable-jobs" tabindex="-1"><a class="header-anchor" href="#durable-jobs"><span>Durable Jobs</span></a></h3><p>Notice how we&#39;re configuring the <code>EmailReminderJob</code> with <code>StoreDurably</code>? This is a powerful pattern that lets you define your jobs once and reuse them with different triggers. Here&#39;s how to schedule a stored job:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">ScheduleReminder</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> userId<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> message<span class="token punctuation">,</span> <span class="token class-name">DateTime</span> scheduledTime<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> scheduler <span class="token operator">=</span> <span class="token keyword">await</span> _schedulerFactory<span class="token punctuation">.</span><span class="token function">GetScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Reference the stored job by its identity</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> jobKey <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JobKey</span><span class="token punctuation">(</span>EmailReminderJob<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> trigger <span class="token operator">=</span> TriggerBuilder<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">ForJob</span><span class="token punctuation">(</span>jobKey<span class="token punctuation">)</span>  <span class="token comment">// Reference the durable job</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">WithIdentity</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;trigger-</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">Guid<span class="token punctuation">.</span><span class="token function">NewGuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">UsingJobData</span><span class="token punctuation">(</span><span class="token string">&quot;userId&quot;</span><span class="token punctuation">,</span> userId<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">UsingJobData</span><span class="token punctuation">(</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">StartAt</span><span class="token punctuation">(</span>scheduledTime<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">await</span> scheduler<span class="token punctuation">.</span><span class="token function">ScheduleJob</span><span class="token punctuation">(</span>trigger<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Note: just passing the trigger</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This approach has several benefits:</p><ul><li>Job definitions are centralized in your startup configuration</li><li>You can&#39;t accidentally schedule a job that hasn&#39;t been properly configured</li><li>Job configurations are consistent across all schedules</li></ul><hr><h2 id="summary" tabindex="-1"><a class="header-anchor" href="#summary"><span>Summary</span></a></h2><p>Getting <strong>Quartz</strong> set up properly in .NET involves more than just adding the NuGet package.</p><p>Pay attention to:</p><ol><li>Proper job definition and data handling with <code>JobDataMap</code></li><li>Setting up both one-time and recurring job schedules</li><li>Configuring persistent storage with proper schema isolation</li><li>Using durable jobs to maintain consistent job definitions</li></ol>`,10)),s("p",null,[n[32]||(n[32]=a("Each of these elements contributes to a reliable background processing system that can grow with your application's needs. A good example of using background jobs is when you want to ")),e(c,{to:"/milanjovanovic.tech/building-async-apis-in-aspnetcore-the-right-way.html"},{default:t(()=>n[31]||(n[31]=[a("build asynchronous APIs")])),_:1,__:[31]}),n[33]||(n[33]=a("."))]),n[40]||(n[40]=s("p",null,"Good luck out there, and I'll see you next week.",-1)),n[41]||(n[41]=s("hr",null,null,-1)),b(" TODO: add ARTICLE CARD "),e(u,r(d({title:"Scheduling Background Jobs With Quartz in .NET (advanced concepts)",desc:"Quartz.NET is a powerful job scheduling library, but integrating it properly with ASP.NET Core requires careful consideration. Here's what I learned about setting up Quartz.NET with proper observability, persistence, and job scheduling patterns.",link:"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/scheduling-background-jobs-with-quartz-in-dotnet-advanced-concepts.html",logo:"https://milanjovanovic.tech/profile_favicon.png",background:"rgba(79,70,229,0.2)"})),null,16)])}const N=v(f,[["render",x]]),Q=JSON.parse('{"path":"/milanjovanovic.tech/scheduling-background-jobs-with-quartz-in-dotnet-advanced-concepts.html","title":"Scheduling Background Jobs With Quartz in .NET (advanced concepts)","lang":"en-US","frontmatter":{"lang":"en-US","title":"Scheduling Background Jobs With Quartz in .NET (advanced concepts)","description":"Article(s) > Scheduling Background Jobs With Quartz in .NET (advanced concepts)","icon":"iconfont icon-csharp","category":["C#","DotNet","Article(s)"],"tag":["blog","milanjovanovic.tech","cs","c#","csharp","dotnet"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Scheduling Background Jobs With Quartz in .NET (advanced concepts)\\",\\"image\\":[\\"https://milanjovanovic.tech/blog-covers/mnw_121.png\\"],\\"datePublished\\":\\"2024-12-21T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Milan Jovanović\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/scheduling-background-jobs-with-quartz-in-dotnet-advanced-concepts.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Scheduling Background Jobs With Quartz in .NET (advanced concepts)"}],["meta",{"property":"og:description","content":"Article(s) > Scheduling Background Jobs With Quartz in .NET (advanced concepts)"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://milanjovanovic.tech/blog-covers/mnw_121.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://milanjovanovic.tech/blog-covers/mnw_121.png"}],["meta",{"name":"twitter:image:alt","content":"Scheduling Background Jobs With Quartz in .NET (advanced concepts)"}],["meta",{"property":"article:author","content":"Milan Jovanović"}],["meta",{"property":"article:tag","content":"dotnet"}],["meta",{"property":"article:tag","content":"csharp"}],["meta",{"property":"article:tag","content":"c#"}],["meta",{"property":"article:tag","content":"cs"}],["meta",{"property":"article:tag","content":"milanjovanovic.tech"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2024-12-21T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Scheduling Background Jobs With Quartz in .NET (advanced concepts)"},{"property":"og:description","content":"Scheduling Background Jobs With Quartz in .NET (advanced concepts)"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/scheduling-background-jobs-with-quartz-in-dotnet-advanced-concepts.html"}]],"prev":"/programming/cs/articles/README.md","date":"2024-12-21T00:00:00.000Z","isOriginal":false,"author":"Milan Jovanović","cover":"https://milanjovanovic.tech/blog-covers/mnw_121.png"},"git":{},"readingTime":{"minutes":4.69,"words":1407},"filePathRelative":"milanjovanovic.tech/scheduling-background-jobs-with-quartz-in-dotnet-advanced-concepts.md","copyright":{"author":"Milan Jovanović"}}');export{N as comp,Q as data};
