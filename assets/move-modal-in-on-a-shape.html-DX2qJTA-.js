import{_ as k}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as f,d as s,f as e,b as i,a as u,t as b,n as d,g as m,w as t,e as a,r as o,o as y}from"./app-BVguHYKu.js";const w={},M={id:"frontmatter-title-관련",tabindex:"-1"},q={class:"header-anchor",href:"#frontmatter-title-관련"},C={class:"table-of-contents"},x={href:"https://css-tricks.com/move-modal-path/",target:"_blank",rel:"noopener noreferrer"},S={href:"https://codepen.io/chriscoyier/pen/NgNymx",target:"_blank",rel:"noopener noreferrer"},I={href:"https://oddbird.net/2025/04/17/winging-it-18/",target:"_blank",rel:"noopener noreferrer"},j={href:"https://zellwk.com/blog/making-sense-of-starting-style/#:~:text=Since%20DRY%20(Don%E2%80%99t%20Repeat%20Yourself)%20is%20one%20of%20the%20major%20programming%20principles%2C%20it%20can%20feel%20like%20we%E2%80%99re%20going%20against%20everything%20we%20know%20to%20be%20right%20and%20good",target:"_blank",rel:"noopener noreferrer"};function T(h,n){const c=o("VPCard"),p=o("router-link"),g=o("SiteInfo"),l=o("VPIcon"),r=o("RouteLink"),v=o("VidStack");return y(),f("div",null,[s("h1",M,[s("a",q,[s("span",null,b(h.$frontmatter.title)+" 관련",1)])]),e(c,d(m({title:"CSS > Article(s)",desc:"Article(s)",link:"/programming/css/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",C,[s("ul",null,[s("li",null,[e(p,{to:"#_1-use-a-dialog"},{default:t(()=>n[0]||(n[0]=[a("1. Use a Dialog")])),_:1,__:[0]})]),s("li",null,[e(p,{to:"#_2-progressively-enhanced-dialog-open-and-close"},{default:t(()=>n[1]||(n[1]=[a("2. Progressively Enhanced Dialog Open and Close")])),_:1,__:[1]})]),s("li",null,[e(p,{to:"#_3-open-close-animation-while-still-using-display-none"},{default:t(()=>n[2]||(n[2]=[a("3. Open & Close Animation while still using display: none;")])),_:1,__:[2]})]),s("li",null,[e(p,{to:"#_4-using-shape-for-the-movement"},{default:t(()=>n[3]||(n[3]=[a("4. Using shape() for the movement")])),_:1,__:[3]})]),s("li",null,[e(p,{to:"#_5-preferring-less-motion"},{default:t(()=>n[4]||(n[4]=[a("5. Preferring Less Motion")])),_:1,__:[4]})])])]),n[38]||(n[38]=s("hr",null,null,-1)),e(g,{name:"Move Modal in on a… shape()",desc:"Years ago I did a demo where a modal was triggered open and it came flying in on a curved path. I always thought that was kinda cool. Time has chugged on, and I thought I’d revisit that with a variety of improved web platform technology.",url:"https://frontendmasters.com/blog/move-modal-in-on-a-shape/",logo:"https://frontendmasters.com/favicon.ico",preview:"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/5917"}),s("p",null,[s("a",x,[e(l,{icon:"fas fa-globe"}),n[5]||(n[5]=a("Years ago"))]),n[9]||(n[9]=a(" I did ")),s("a",S,[n[6]||(n[6]=a("a demo (")),e(l,{icon:"fa-brands fa-codepen"}),n[7]||(n[7]=s("code",null,"chriscoyier",-1)),n[8]||(n[8]=a(")"))]),n[10]||(n[10]=a(" where a modal was triggered open and it came flying in on a curved path. I always thought that was kinda cool. Time has chugged on, and I thought I’d revisit that with a variety of improved web platform technology."))]),s("ol",null,[n[18]||(n[18]=s("li",null,[a("Instead of a "),s("code",null,"<div>"),a(" it’ll be a proper "),s("code",null,"<dialog>"),a(".")],-1)),s("li",null,[n[12]||(n[12]=a("We’ll set it up to work with no JavaScript at all. But we’ll fall back to using the JavaScript methods ")),n[13]||(n[13]=s("code",null,".showModal()",-1)),n[14]||(n[14]=a(" and ")),n[15]||(n[15]=s("code",null,".close()",-1)),n[16]||(n[16]=a(" to support browsers that don’t support the ")),s("a",I,[e(l,{icon:"fas fa-globe"}),n[11]||(n[11]=a("invoker"))]),n[17]||(n[17]=a(" command stuff."))]),n[19]||(n[19]=i("<li>We’ll use <code>@starting-style</code>, which is arguably more verbose, but allows for opening and closing animations while allowing the <code>&lt;dialog&gt;</code> to be <code>display: none;</code> when closed which is better than it was before where the dialog was always in the accessibility tree.</li><li>Instead of <code>path()</code> for the <code>offset-path</code>, which forced us into pixels, we’ll use <code>shape()</code> which allows us to use the viewport better. But we’ll still fall back to <code>path()</code>.</li><li>We’ll continue accounting for <code>prefers-reduced-motion</code> however we need to.</li>",3))]),n[39]||(n[39]=i('<p>Here’s where the refactor ends up:</p><p>CodePen Embed Fallback https://codepen.io/chriscoyier/pen/GggQrQq Move Modal In on Path (Next Gen!)</p><hr><h2 id="_1-use-a-dialog" tabindex="-1"><a class="header-anchor" href="#_1-use-a-dialog"><span>1. Use a Dialog</span></a></h2><p>The <code>&lt;dialog&gt;</code> element is the correct semantic choice for this kind of UI, generally. But particularly if you are wanting to force the user to interact with the dialog before doing anything else (i.e. a “modal”) then <code>&lt;dialog&gt;</code> is particularly good as it moves then traps focus within the dialog.</p><hr><h2 id="_2-progressively-enhanced-dialog-open-and-close" tabindex="-1"><a class="header-anchor" href="#_2-progressively-enhanced-dialog-open-and-close"><span>2. Progressively Enhanced Dialog Open and Close</span></a></h2>',7)),s("p",null,[e(r,{to:"/frontendmasters.com/lessons-learned-from-recreating-a-styled-dialog.html#no-invokers-yes-invokers"},{default:t(()=>n[20]||(n[20]=[s("strong",null,"I only just learned",-1)])),_:1,__:[20]}),n[21]||(n[21]=a(" you can open a modal (in the proper “modal” state) without any JavaScript using invokers."))]),n[40]||(n[40]=i(`<p>So you can do an “open” button like this, where <code>command</code> is the literal command you have to call to open the modal and the <code>commandfor</code> matches the <code>id</code> of the dialog.</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre><code class="language-html"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span></span>
<span class="line">  <span class="token attr-name">command</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>show-modal<span class="token punctuation">&quot;</span></span></span>
<span class="line">  <span class="token attr-name">commandfor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>my-dialog<span class="token punctuation">&quot;</span></span></span>
<span class="line"><span class="token punctuation">&gt;</span></span></span>
<span class="line">  Open Modal</span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You may want to include <code>popovertarget=&quot;my-dialog&quot;</code> as well, which is a still-no-JS fallback that will open the modal in a non-modal state (no focus trap) in browsers that don’t support invokers yet. Buttttttttt, we’re going to need a JavaScript fallback anyway, so let’s skip it.</p><p>Here’s how a close button can be:</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre><code class="language-html"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span></span>
<span class="line">  <span class="token attr-name">command</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>close<span class="token punctuation">&quot;</span></span></span>
<span class="line">  <span class="token attr-name">commandfor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>my-dialog<span class="token punctuation">&quot;</span></span></span>
<span class="line"><span class="token punctuation">&gt;</span></span></span>
<span class="line">  Close</span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>For browsers that don’t support that, we’ll use the <code>&lt;dialog&gt;</code> element’s JavaScript API to do the job instead (use whatever selectors you need):</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// For browsers that don&#39;t support the command/invokes/popup anything yet.</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;button&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>commandForElement <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> dialog <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;#my-dialog&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> openButton <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;#open-button&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> closeButton <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;#close-button&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  openButton<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    dialog<span class="token punctuation">.</span><span class="token function">showModal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  closeButton<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    dialog<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>At this point, we’ve got a proper dialog that opens and closes.</p><hr><h2 id="_3-open-close-animation-while-still-using-display-none" tabindex="-1"><a class="header-anchor" href="#_3-open-close-animation-while-still-using-display-none"><span>3. Open &amp; Close Animation while still using <code>display: none;</code></span></a></h2><p>One thing about <code>&lt;dialog&gt;</code> is that when it’s not open, it’s <code>display: none;</code> automatically, without you having to add any additional styles to do that. Then when you open it (via invoker, method, or adding an <code>open</code> attribute), it becomes <code>display: block;</code> automatically.</p><p>For the past forever in CSS, it hasn’t been possible to run animations on elements between <code>display: none</code> and other display values. The element instantly disappears, so when would that animation happen anyway? Well now you can. If you <code>transition</code> the <code>display</code> property and use the <code>allow-discrete</code> keyword, it will ensure that property “flips” when appropriate. That is, it will immediately appear when transitioning <em>away</em> from being hidden and delay flipping until the end of the transition when transitioning into being hidden.</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">dialog</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">transition</span><span class="token punctuation">:</span> display 1.1s allow-discrete<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>But we’ll be adding to that transition, which is fine! For instance, to animate opacity <strong>on the way both in and out</strong>, we can do it like this:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">dialog</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">transition</span><span class="token punctuation">:</span></span>
<span class="line">    display 1.1s allow-discrete<span class="token punctuation">,</span></span>
<span class="line">    opacity 1.1s ease-out<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token selector">&amp;[open]</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">opacity</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span></span>
<span class="line">    <span class="token atrule"><span class="token rule">@starting-style</span></span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15)),s("p",null,[n[23]||(n[23]=a("I find that kinda ")),s("a",j,[e(l,{icon:"fas fa-globe"}),n[22]||(n[22]=a("awkward and repetitive"))]),n[24]||(n[24]=a(", but that’s what it takes and the effect is worth it."))]),n[41]||(n[41]=s("hr",null,null,-1)),n[42]||(n[42]=s("h2",{id:"_4-using-shape-for-the-movement",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_4-using-shape-for-the-movement"},[s("span",null,[s("a",{href:"#4-using-shape-for-the-movement"}),a("4. Using "),s("code",null,"shape()"),a(" for the movement")])])],-1)),s("p",null,[n[26]||(n[26]=a("The cool curved movement in the original movement was thanks to animating along an ")),n[27]||(n[27]=s("code",null,"offset-path",-1)),n[28]||(n[28]=a(". But I used ")),n[29]||(n[29]=s("code",null,"offset-path: path()",-1)),n[30]||(n[30]=a(" which was the only practical thing available at the time. Now, ")),n[31]||(n[31]=s("code",null,"path()",-1)),n[32]||(n[32]=a(" is all but replaced by ")),e(r,{to:"/frontendmasters.com/shape-a-new-powerful-drawing-syntax-in-css.html"},{default:t(()=>n[25]||(n[25]=[s("strong",null,[a("the way-better-for-CSS "),s("code",null,"shape()"),a(" function")],-1)])),_:1,__:[25]}),n[33]||(n[33]=a(". There is no way with ")),n[34]||(n[34]=s("code",null,"path()",-1)),n[35]||(n[35]=a(" to express something like “animate from the top left corner of the window to the middle”, because ")),n[36]||(n[36]=s("code",null,"path()",-1)),n[37]||(n[37]=a(" deals in pixels which just can’t know how to do that on an arbitrary screen."))]),n[43]||(n[43]=i(`<p>I’ll leave the <code>path()</code> stuff in the to accommodate browsers not supporting <code>shape()</code> yet, so it’ll end up like:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">dialog</span> <span class="token punctuation">{</span></span>
<span class="line">  ...</span>
<span class="line"></span>
<span class="line">  <span class="token atrule"><span class="token rule">@supports</span> <span class="token punctuation">(</span><span class="token property">offset-rotate</span><span class="token punctuation">:</span> 0deg<span class="token punctuation">)</span></span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">offset-rotate</span><span class="token punctuation">:</span> 0deg<span class="token punctuation">;</span></span>
<span class="line">    <span class="token property">offset-path</span><span class="token punctuation">:</span> <span class="token function">path</span><span class="token punctuation">(</span><span class="token string">&quot;M 250,100 S -300,500 -700,-200&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token atrule"><span class="token rule">@supports</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token property">offset-path</span><span class="token punctuation">:</span> <span class="token function">shape</span><span class="token punctuation">(</span>from top left<span class="token punctuation">,</span> curve to 50% 50% with 25% 100%<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">)</span></span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">offset-path</span><span class="token punctuation">:</span> <span class="token function">shape</span><span class="token punctuation">(</span>from top left<span class="token punctuation">,</span> curve to 50% 50% with 25% 100%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token property">offset-distance</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That <code>shape()</code> syntax expresses this movement:</p><figure><img src="https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/05/shape-movement.png?resize=1024%2C773&amp;ssl=1" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Those points flex to whatever is going on in the viewport, unlike the pixel values in <code>path()</code>. Fun!</p><p>This stuff is so new from a browser support perspective, I’m finding that Chrome 126, which is the stable version as I write, does support <code>clip-path: shape()</code>, but doesn’t support <code>offset-path: shape()</code>. Chrome Canary is at 128, and does support <code>offset-path: shape()</code>. But the demo is coded such that it falls back to the original <code>path()</code> by using <code>@supports</code> tests.</p><p>Here’s a video of it working responsively:</p>`,7)),e(v,{src:"https://videopress.com/embed/uujYoeLh?cover=1&autoPlay=0&controls=1&loop=0&muted=0&persistVolume=1&playsinline=0&preloadContent=metadata&useAverageColor=1&hd=0"}),u(" TODO: videopress "),n[44]||(n[44]=i(`<hr><h2 id="_5-preferring-less-motion" tabindex="-1"><a class="header-anchor" href="#_5-preferring-less-motion"><span>5. Preferring Less Motion</span></a></h2><p>I think this is kind of a good example of honoring the intention.</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span>prefers-reduced-motion<span class="token punctuation">)</span></span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">offset-path</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">transition</span><span class="token punctuation">:</span> display 0.25s allow-discrete<span class="token punctuation">,</span> opacity 0.25s ease-out<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>With that, there is far less movement. But you still see the modal fade in (a bit quicker) which still might be a helpful animation emphasizing “this is leaving” or “this is entering”.</p>`,5)),u(" TODO: add ARTICLE CARD "),e(c,d(m({title:"Move Modal in on a… shape()",desc:"Got an old ",link:"https://chanhi2000.github.io/bookshelf/frontendmasters.com/move-modal-in-on-a-shape.html",logo:"https://frontendmasters.com/favicon.ico",background:"rgba(188,75,52,0.2)"})),null,16)])}const B=k(w,[["render",T]]),E=JSON.parse('{"path":"/frontendmasters.com/move-modal-in-on-a-shape.html","title":"Move Modal in on a… shape()","lang":"en-US","frontmatter":{"lang":"en-US","title":"Move Modal in on a… shape()","description":"Article(s) > Move Modal in on a… shape()","icon":"fa-brands fa-css3-alt","category":["CSS","Article(s)"],"tag":["blog","frontendmasters.com","css"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Move Modal in on a… shape()\\",\\"image\\":[\\"https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/05/shape-movement.png?resize=1024%2C773&ssl=1\\"],\\"datePublished\\":\\"2025-05-22T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Chris Coyier\\",\\"url\\":\\"https://frontendmasters.com/blog/author/chriscoyier/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/frontendmasters.com/move-modal-in-on-a-shape.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Move Modal in on a… shape()"}],["meta",{"property":"og:description","content":"Article(s) > Move Modal in on a… shape()"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/5917"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/5917"}],["meta",{"name":"twitter:image:alt","content":"Move Modal in on a… shape()"}],["meta",{"property":"article:author","content":"Chris Coyier"}],["meta",{"property":"article:tag","content":"css"}],["meta",{"property":"article:tag","content":"frontendmasters.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2025-05-22T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Move Modal in on a… shape()"},{"property":"og:description","content":"Move Modal in on a… shape()"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/frontendmasters.com/move-modal-in-on-a-shape.html"}]],"prev":"/programming/css/articles/README.md","date":"2025-05-22T00:00:00.000Z","isOriginal":false,"author":[{"name":"Chris Coyier","url":"https://frontendmasters.com/blog/author/chriscoyier/"}],"cover":"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/5917"},"git":{},"readingTime":{"minutes":4.59,"words":1378},"filePathRelative":"frontendmasters.com/move-modal-in-on-a-shape.md","copyright":{"author":"Chris Coyier"}}');export{B as comp,E as data};
