import{_ as b}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as f,d as s,f as t,b as c,a as y,t as w,n as h,g as v,w as e,e as a,r,o as x}from"./app-BVguHYKu.js";const j="/bookshelf/assets/image/blog.logrocket.com/modern-api-data-fetching-methods-react/banner.png",q="/bookshelf/assets/image/blog.logrocket.com/modern-api-data-fetching-methods-react/rendering-post-data-fetch.gif",P="/bookshelf/assets/image/blog.logrocket.com/modern-api-data-fetching-methods-react/fetching-posts-demo.gif",A="/bookshelf/assets/image/blog.logrocket.com/modern-api-data-fetching-methods-react/fetching-data-multiple-posts.gif",T={},I={id:"frontmatter-title-관련",tabindex:"-1"},R={class:"header-anchor",href:"#frontmatter-title-관련"},F={class:"table-of-contents"},W={class:"hint-container note"},S={href:"https://blog.logrocket.com/author/ibadehinmojeed/",target:"_blank",rel:"noopener noreferrer"},E={href:"https://github.com/Ibaslogic/data-fetching-methods",target:"_blank",rel:"noopener noreferrer"},D={href:"https://data-fetching-methods.vercel.app/",target:"_blank",rel:"noopener noreferrer"},N={href:"https://jsonplaceholder.typicode.com/posts",target:"_blank",rel:"noopener noreferrer"},H={href:"https://jsonplaceholder.typicode.com/",target:"_blank",rel:"noopener noreferrer"};function L(m,n){const u=r("VPCard"),p=r("router-link"),g=r("SiteInfo"),o=r("VPIcon"),d=r("RouteLink"),k=r("CodeTabs");return x(),f("div",null,[s("h1",I,[s("a",R,[s("span",null,w(m.$frontmatter.title)+" 관련",1)])]),t(u,h(v({title:"React.js > Article(s)",desc:"Article(s)",link:"/programming/js-react/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),t(u,h(v({title:"Axios > Article(s)",desc:"Article(s)",link:"/programming/js-axios/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",F,[s("ul",null,[s("li",null,[t(p,{to:"#understanding-api-a-quick-overview"},{default:e(()=>n[0]||(n[0]=[a("Understanding API: A quick overview")])),_:1,__:[0]}),s("ul",null,[s("li",null,[t(p,{to:"#why-apis"},{default:e(()=>n[1]||(n[1]=[a("Why APIs?")])),_:1,__:[1]})]),s("li",null,[t(p,{to:"#what-are-api-calls-in-react"},{default:e(()=>n[2]||(n[2]=[a("What are API calls in React?")])),_:1,__:[2]})])])]),s("li",null,[t(p,{to:"#fetching-data-from-an-api-in-a-react-app"},{default:e(()=>n[3]||(n[3]=[a("Fetching data from an API in a React app")])),_:1,__:[3]})]),s("li",null,[t(p,{to:"#api-calls-with-fetch-in-a-useeffect-hook"},{default:e(()=>n[4]||(n[4]=[a("API calls with fetch() in a useEffect Hook")])),_:1,__:[4]}),s("ul",null,[s("li",null,[t(p,{to:"#rendering-the-post-data-with-fetch"},{default:e(()=>n[5]||(n[5]=[a("Rendering the post data with fetch()")])),_:1,__:[5]})]),s("li",null,[t(p,{to:"#extracting-the-fetching-logic"},{default:e(()=>n[6]||(n[6]=[a("Extracting the fetching logic")])),_:1,__:[6]})]),s("li",null,[t(p,{to:"#rendering-a-single-post-with-fetch"},{default:e(()=>n[7]||(n[7]=[a("Rendering a single post with fetch()")])),_:1,__:[7]})]),s("li",null,[t(p,{to:"#problem-with-api-calls-inside-useeffect"},{default:e(()=>n[8]||(n[8]=[a("Problem with API calls inside useEffect")])),_:1,__:[8]})]),s("li",null,[t(p,{to:"#the-useeffectrace-condition"},{default:e(()=>n[9]||(n[9]=[a("The useEffectrace condition")])),_:1,__:[9]})]),s("li",null,[t(p,{to:"#using-the-fetch-api-for-post-requests"},{default:e(()=>n[10]||(n[10]=[a("Using the Fetch API for POST requests")])),_:1,__:[10]})])])]),s("li",null,[t(p,{to:"#using-the-axios-library"},{default:e(()=>n[11]||(n[11]=[a("Using the Axios library")])),_:1,__:[11]}),s("ul",null,[s("li",null,[t(p,{to:"#fetching-a-post-list-with-axios"},{default:e(()=>n[12]||(n[12]=[a("Fetching a post list with Axios")])),_:1,__:[12]})]),s("li",null,[t(p,{to:"#fetching-a-single-post-with-axios"},{default:e(()=>n[13]||(n[13]=[a("Fetching a single post with Axios")])),_:1,__:[13]})]),s("li",null,[t(p,{to:"#using-axios-for-post-requests"},{default:e(()=>n[14]||(n[14]=[a("Using Axios for POST requests")])),_:1,__:[14]})])])]),s("li",null,[t(p,{to:"#using-the-usefetch-custom-hook-from-react-fetch-hook"},{default:e(()=>n[15]||(n[15]=[a("Using the useFetch custom Hook from react-fetch-hook")])),_:1,__:[15]})]),s("li",null,[t(p,{to:"#using-the-tanstack-query-library"},{default:e(()=>n[16]||(n[16]=[a("Using the TanStack Query library")])),_:1,__:[16]}),s("ul",null,[s("li",null,[t(p,{to:"#fetching-post-items-with-tanstack-query"},{default:e(()=>n[17]||(n[17]=[a("Fetching post items with TanStack Query")])),_:1,__:[17]})]),s("li",null,[t(p,{to:"#fetching-a-single-post-with-tanstack-query"},{default:e(()=>n[18]||(n[18]=[a("Fetching a single post with TanStack Query")])),_:1,__:[18]})])])]),s("li",null,[t(p,{to:"#using-the-swr-library"},{default:e(()=>n[19]||(n[19]=[a("Using the SWR library")])),_:1,__:[19]}),s("ul",null,[s("li",null,[t(p,{to:"#fetching-post-items-with-swr"},{default:e(()=>n[20]||(n[20]=[a("Fetching post items with SWR")])),_:1,__:[20]})]),s("li",null,[t(p,{to:"#fetching-a-single-post-with-swr"},{default:e(()=>n[21]||(n[21]=[a("Fetching a single post with SWR")])),_:1,__:[21]})])])]),s("li",null,[t(p,{to:"#conclusion"},{default:e(()=>n[22]||(n[22]=[a("Conclusion")])),_:1,__:[22]})])])]),n[60]||(n[60]=s("hr",null,null,-1)),t(g,{name:"Modern API data-fetching methods in React",desc:"Explore modern React data-fetching methods and how to handle a real-world application’s state while fetching data.",url:"https://blog.logrocket.com/modern-api-data-fetching-methods-react",logo:"/assets/image/blog.logrocket.com/favicon.png",preview:"/assets/image/blog.logrocket.com/modern-api-data-fetching-methods-react/banner.png"}),s("div",W,[n[30]||(n[30]=s("p",{class:"hint-container-title"},"Editor’s note",-1)),s("p",null,[n[24]||(n[24]=a("This article was last updated by ")),s("a",S,[t(o,{icon:"fas fa-globe"}),n[23]||(n[23]=a("Ibadehin Mojeed"))]),n[25]||(n[25]=a(" on 1 March 2024 to update code snippets and content, specifically adding sections about using the Fetch API for POST requests, fetching data using hooks such as ")),n[26]||(n[26]=s("code",null,"useFetch",-1)),n[27]||(n[27]=a(" and ")),n[28]||(n[28]=s("code",null,"useEffect",-1)),n[29]||(n[29]=a(", fetching using the TanStack Query library, and more."))])]),n[61]||(n[61]=s("figure",null,[s("img",{src:j,alt:"Modern API Data-Fetching Methods In React",tabindex:"0",loading:"lazy"}),s("figcaption",null,"Modern API Data-Fetching Methods In React")],-1)),n[62]||(n[62]=s("p",null,"Over the years, how we fetch data into React applications has evolved. For developers who aim to be ahead of the curve, understanding how fetching data works in the current dispensation is essential.",-1)),n[63]||(n[63]=s("p",null,"In this guide, we’ll explore the modern React data-fetching methods. We’ll cover what you need to know about each method, edge cases, and benefits so that you can decide the right solution for your project.",-1)),s("p",null,[n[35]||(n[35]=a("You can check out the ")),s("a",E,[n[31]||(n[31]=a("project code in this GitHub repo (")),t(o,{icon:"iconfont icon-github"}),n[32]||(n[32]=s("code",null,"Ibaslogic/data-fetching-methods",-1)),n[33]||(n[33]=a(")"))]),n[36]||(n[36]=a(" to see the code examples we’ll explore in this tutorial. You can see ")),s("a",D,[t(o,{icon:"fas fa-globe"}),n[34]||(n[34]=a("the live demo here"))]),n[37]||(n[37]=a(" as well. Let’s get started!"))]),n[64]||(n[64]=s("hr",null,null,-1)),n[65]||(n[65]=s("h2",{id:"understanding-api-a-quick-overview",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#understanding-api-a-quick-overview"},[s("span",null,"Understanding API: A quick overview")])],-1)),n[66]||(n[66]=s("p",null,"API, or Application Programming Interface, is a protocol or contract that allows one application to communicate with another. In other words, APIs act as intermediaries, enabling the exchange of information between different systems.",-1)),n[67]||(n[67]=s("h3",{id:"why-apis",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#why-apis"},[s("span",null,"Why APIs?")])],-1)),n[68]||(n[68]=s("p",null,"Let’s think of an application where a section displays the daily weather forecast of the present city. While building this type of app, we can create our backend to handle the weather data logic or we can simply make our app communicate with a third-party system that has all the weather information so we only need to render the data.",-1)),n[69]||(n[69]=s("p",null,"Either way, the app must communicate with the backend. This communication is possible via an API, and, in this case, a web API, which allows communication over the internet, typically using HTTP (Hypertext Transfer Protocol).",-1)),s("p",null,[n[39]||(n[39]=a("With the API, we don’t need to create everything from scratch, which will simplify our process. It allows access to where the data is located so we can use it in our app. The two common styles for designing web APIs are ")),t(d,{to:"/blog.logrocket.com/graphql-vs-rest-api-why-you-shouldnt-use-graphql.html"},{default:e(()=>n[38]||(n[38]=[s("strong",null,"REST and GraphQL",-1)])),_:1,__:[38]}),n[40]||(n[40]=a(". While this guide focuses on data fetching from the REST API, the fetching strategies are similar for both."))]),n[70]||(n[70]=c(`<h3 id="what-are-api-calls-in-react" tabindex="-1"><a class="header-anchor" href="#what-are-api-calls-in-react"><span>What are API calls in React?</span></a></h3><p>When a React app (client) needs to access resources from the backend (server), it makes the request through the API and expects a response. Each request and response cycle constitutes an API call.</p><p>To initiate API calls either to retrieve information or perform other operations, we will use HTTP methods like GET, POST, PUT, and DELETE.</p><hr><h2 id="fetching-data-from-an-api-in-a-react-app" tabindex="-1"><a class="header-anchor" href="#fetching-data-from-an-api-in-a-react-app"><span>Fetching data from an API in a React app</span></a></h2><p>While data fetching can be simple, handling the data upon returning to the client can be complicated.</p><p>Before we fetch data, we need to consider where the data will live, how we’ll manage the loading state to improve the user experience, and also the error state should anything go wrong. In addition, we need to consider adding optimizations like caching, request deduplication, and preventing race conditions.</p><p>Now that we have covered the basics, we can get started with the first fetching method.</p><hr><h2 id="api-calls-with-fetch-in-a-useeffect-hook" tabindex="-1"><a class="header-anchor" href="#api-calls-with-fetch-in-a-useeffect-hook"><span>API calls with <code>fetch()</code> in a <code>useEffect</code> Hook</span></a></h2><p>The Fetch API, through the <code>fetch()</code> method, allows us to make an HTTP request to the backend. With this method, we can perform different types of operations using HTTP methods like the <code>GET</code> method to request data from an endpoint, <code>POST</code> to send data to an endpoint, and more.</p><p><code>fetch()</code> requires the URL of the resource we want to fetch and an optional parameter:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> options<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>We can also specify the HTTP method in the optional parameter. For the <code>GET</code> method, we have the following:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&quot;GET&quot;</span> <span class="token comment">// other options: POST, PUT, DELETE, etc.</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Or, we can simply ignore the optional parameter because <code>GET</code> is the default:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>For the <code>POST</code> method, we will stringify the object we want to pass to the request body and also explicitly set the <code>Content-Type</code> in the headers like so:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&quot;POST&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token string-property property">&quot;Content-Type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;application/json&quot;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,19)),s("p",null,[n[43]||(n[43]=a("As mentioned earlier, we will fetch data from a REST API. We could use any API, but here we will use a free online API ")),s("a",N,[t(o,{icon:"fas fa-globe"}),n[41]||(n[41]=a("called JSONPlaceholder"))]),n[44]||(n[44]=a(" to fetch a list of posts into our application; here is a ")),s("a",H,[t(o,{icon:"fas fa-globe"}),n[42]||(n[42]=a("list of the resources"))]),n[45]||(n[45]=a(" we can request."))]),n[71]||(n[71]=c(`<p>By applying what we’ve learned so far, a typical <code>fetch()</code> request with <code>fetch()</code> looks like the following:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="FetchGetRequest.jsx"><span>FetchGetRequest.jsx</span></div><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> useEffect<span class="token punctuation">,</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">FetchGetRequest</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>data<span class="token punctuation">,</span> setData<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>loading<span class="token punctuation">,</span> setLoading<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>error<span class="token punctuation">,</span> setError<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token function-variable function">fetchDataForPosts</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span></span>
<span class="line">          <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">https://jsonplaceholder.typicode.com/posts?_limit=8</span><span class="token template-punctuation string">\`</span></span></span>
<span class="line">        <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>response<span class="token punctuation">.</span>ok<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">HTTP error: Status </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>response<span class="token punctuation">.</span>status<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">let</span> postsData <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">setData</span><span class="token punctuation">(</span>postsData<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">setError</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">setError</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">setData</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">setLoading</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">fetchDataForPosts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> FetchGetRequest<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>In the code, we are using the <code>fetch()</code> function to request post data from the resource endpoint as seen in the <code>useEffect</code> Hook.</p>`,3)),s("p",null,[n[47]||(n[47]=a("In React, we avoid performing side effects like data fetching directly within the component body to avoid inconsistencies. Instead, we isolate them from the rendering logic ")),t(d,{to:"/blog.logrocket.com/useeffect-react-hook-complete-guide.html"},{default:e(()=>n[46]||(n[46]=[s("strong",null,[a("using the "),s("code",null,"useEffect"),a(" Hook")],-1)])),_:1,__:[46]}),n[48]||(n[48]=a(" as we did above."))]),n[72]||(n[72]=c(`<p>The <code>fetch</code> function returns a promise that can either be resolved or rejected. Because this is an asynchronous operation, we often use <code>async/await</code> with a <code>try/catch/finally</code> statement to catch errors and manage the loading state. We may also use the pure promise with <code>.then</code>, <code>.catch</code>, and <code>.finally</code> statements.</p><p>If the promise resolves, we handle the response within the try block and then update the data while resetting the error state. Initially, the returned data is a <code>Response</code> object, which is not the actual format that we need. We must resolve the <code>Response</code> object to JSON format using the <code>json()</code> method. This also returns a promise and so we wait for it until the promise settles with the actual data.</p><p>In case the promise is rejected, we handle the error within the catch block and update the error state while also resetting the data state, which helps prevent inconsistencies for temporary server failure.</p><p>Be aware that the promise returned from the <code>fetch()</code> function only rejects on a network failure; it won’t reject if we hit a wrong or non-existing endpoint like <code>…/postssss</code>. For that reason, we’ve used the response object to check for the HTTP status and throw a custom error message for a “404 Not Found.” This way, the catch block can detect the error and use our custom message whenever we hit a “404 Not Found.”</p><h3 id="rendering-the-post-data-with-fetch" tabindex="-1"><a class="header-anchor" href="#rendering-the-post-data-with-fetch"><span>Rendering the post data with <code>fetch()</code></span></a></h3><p>After updating our state variables with <code>setData</code>, <code>setError</code>, and <code>setLoading</code> within the <code>try/catch/finally</code> block, we can now render the UI like so:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="FetchGetRequest.jsx"><span>FetchGetRequest.jsx</span></div><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token comment">// ...</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> NavLink <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react-router-dom&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">FetchGetRequest</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// ...</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>flex<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>w-52 sm:w-80 flex justify-center items-center<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token punctuation">{</span>loading <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span></span>
<span class="line">          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text-xl font-medium<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Loading posts...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">        </span><span class="token punctuation">{</span>error <span class="token operator">&amp;&amp;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text-red-700<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>error<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">          </span><span class="token punctuation">{</span>data <span class="token operator">&amp;&amp;</span></span>
<span class="line">            data<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> id<span class="token punctuation">,</span> title <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span></span>
<span class="line">              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span></span>
<span class="line">                <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>id<span class="token punctuation">}</span></span></span>
<span class="line">                <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>border-b border-gray-100 text-sm sm:text-base<span class="token punctuation">&quot;</span></span></span>
<span class="line">              <span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">NavLink</span></span></span>
<span class="line">                  <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> isActive <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token keyword">const</span> baseClasses <span class="token operator">=</span> <span class="token string">&#39;p-4 block hover:bg-gray-100&#39;</span><span class="token punctuation">;</span></span>
<span class="line">                    <span class="token keyword">return</span> isActive</span>
<span class="line">                      <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>baseClasses<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> bg-gray-100</span><span class="token template-punctuation string">\`</span></span></span>
<span class="line">                      <span class="token operator">:</span> baseClasses<span class="token punctuation">;</span></span>
<span class="line">                  <span class="token punctuation">}</span><span class="token punctuation">}</span></span></span>
<span class="line">                  <span class="token attr-name">to</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/posts/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">}</span></span></span>
<span class="line">                <span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">                  </span><span class="token punctuation">{</span>title<span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">NavLink</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">              </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">            <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>bg-gray-100 flex-1 p-4 min-h-[550px]<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        Single post here...</span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> FetchGetRequest<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>We grabbed the post data state, looped through the list, and rendered the post title. See the demo below. We’ve also added styles to improve the visuals:</p><figure><img src="`+q+`" alt="Rendering Post Data With Fetch" tabindex="0" loading="lazy"><figcaption>Rendering Post Data With Fetch</figcaption></figure><h3 id="extracting-the-fetching-logic" tabindex="-1"><a class="header-anchor" href="#extracting-the-fetching-logic"><span>Extracting the fetching logic</span></a></h3><p>Let’s improve the code readability by extracting the fetching logic into a separate file:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="getRequestWithNativeFetch.js"><span>getRequestWithNativeFetch.js</span></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">getRequestWithNativeFetch</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>response<span class="token punctuation">.</span>ok<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">HTTP error: Status </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>response<span class="token punctuation">.</span>status<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>The <code>useEffect</code> now looks like this:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">fetchDataForPosts</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">const</span> postsData <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getRequestWithNativeFetch</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token string">&#39;https://jsonplaceholder.typicode.com/posts?_limit=8&#39;</span></span>
<span class="line">      <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token function">setData</span><span class="token punctuation">(</span>postsData<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token function">setError</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">setError</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token function">setData</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">setLoading</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">fetchDataForPosts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="rendering-a-single-post-with-fetch" tabindex="-1"><a class="header-anchor" href="#rendering-a-single-post-with-fetch"><span>Rendering a single post with <code>fetch()</code></span></a></h3><p>Using the same API endpoint, we can fetch individual posts by appending the <code>postId</code>:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">fetchSinglePost</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">const</span> postData <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getRequestWithNativeFetch</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">https://jsonplaceholder.typicode.com/posts/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>postId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span></span>
<span class="line">      <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token comment">// ...</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">finally</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">fetchSinglePost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>postId<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When we need to re-fetch data after the first render, we will add dependencies in the array literal to trigger a rerun of <code>useEffect</code>. In the code above, we will fetch the single post data based on the dynamic URL post ID.</p><p>The render looks like so:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">  <span class="token operator">&lt;</span><span class="token operator">&gt;</span></span>
<span class="line">    <span class="token punctuation">{</span><span class="token comment">/* loading and error JSX here... */</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token operator">&lt;</span>article<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>h1 className<span class="token operator">=</span><span class="token string">&quot;text-xl md:text-2xl font-medium mb-6&quot;</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token punctuation">{</span>data<span class="token operator">?.</span>title<span class="token punctuation">}</span></span>
<span class="line">      <span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span><span class="token punctuation">{</span>data<span class="token operator">?.</span>body<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">/</span>article<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The result looks like this:</p><figure><img src="`+P+`" alt="Post Fetching Demo" tabindex="0" loading="lazy"><figcaption>Post Fetching Demo</figcaption></figure><h3 id="problem-with-api-calls-inside-useeffect" tabindex="-1"><a class="header-anchor" href="#problem-with-api-calls-inside-useeffect"><span>Problem with API calls inside <code>useEffect</code></span></a></h3><p>If you pay attention to the Network tab in the demo above, the request data for individual posts is not cached when we revisit the page. This needs optimization! We may also consider adding other optimizations like deduping multiple requests for the same data, preventing race conditions.</p><h3 id="the-useeffectrace-condition" tabindex="-1"><a class="header-anchor" href="#the-useeffectrace-condition"><span>The <code>useEffect</code>race condition</span></a></h3><p>In our project, a race condition may occur when the single post ID frequently changes during user navigation. When <code>postId</code> changes and triggers a re-fetch using <code>useEffect</code>, there’s a possibility that network responses may arrive in a different order than the requests were sent, causing inconsistencies in the UI.</p><p>To address this issue, we’ll utilize the <code>AbortController</code> to cancel requests before subsequent ones are initiated. Within the single post file, we’ll initialize an <code>AbortController</code> in the <code>useEffect</code> Hook, passing its signal to the fetch function as an optional parameter.</p><p>We’ll handle <code>AbortError</code> instances when requests are canceled, and then call the abort function within the Hook’s cleanup phase. This approach ensures that requests are canceled properly, even if the component unmounts while a fetch promise is pending.</p><p>The <code>useEffect</code> in the single post file should include the <code>AbortController</code> like so:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> controller <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AbortController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">fetchSinglePost</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">const</span> postData <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getRequestWithNativeFetch</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">https://jsonplaceholder.typicode.com/posts/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>postId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span></span>
<span class="line">        controller<span class="token punctuation">.</span>signal</span>
<span class="line">      <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token comment">// ...</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">&#39;AbortError&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Aborted&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token comment">// ...</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">fetchSinglePost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> controller<span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>postId<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then, we pass the signal to the <code>fetch</code> function:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">getRequestWithNativeFetch</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span></span>
<span class="line">  <span class="token parameter">url<span class="token punctuation">,</span></span>
<span class="line">  signal <span class="token operator">=</span> <span class="token keyword">null</span></span></span>
<span class="line"><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span> signal <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>response<span class="token punctuation">.</span>ok<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">HTTP error: Status </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>response<span class="token punctuation">.</span>status<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Caching and other optimizations can get more complicated when we try to implement them ourselves. Later in this lesson, we’ll use the TanStack Query and SWR libraries to simplify the process.</p><p>Before we move to the next fetching method, let’s briefly showcase the <code>Post</code> requests with the <code>fetch</code> function.</p><h3 id="using-the-fetch-api-for-post-requests" tabindex="-1"><a class="header-anchor" href="#using-the-fetch-api-for-post-requests"><span>Using the Fetch API for <code>POST</code> requests</span></a></h3><p>As we briefly mentioned earlier, a <code>POST</code> request is used to send data to an endpoint. To use this method, we’ll send the post data via the body of the request as we showed in the syntax earlier.</p><p>A typical <code>POST</code> request with <code>fetch()</code> looks like the following:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">fetchDataForPosts</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">const</span> postsData <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">postRequestWithFetch</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">userId</span><span class="token operator">:</span> <span class="token number">11</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">101</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;New post title&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token string">&#39;The post body content&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token comment">// update state variables like before</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">finally</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">fetchDataForPosts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then, the <code>postRequestWithFetch</code> function receives the data, stringifies it, and passes it to the request body:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">postRequestWithFetch</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">https://jsonplaceholder.typicode.com/posts</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;POST&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token string-property property">&#39;content-type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;application/json&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The server then processes the data and responds accordingly. We can render the data in the JSX like so:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">  <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&quot;py-12 px-3&quot;</span><span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span>h2 className<span class="token operator">=</span><span class="token string">&quot;text-2xl font-medium mb-6 underline&quot;</span><span class="token operator">&gt;</span></span>
<span class="line">      Post Request <span class="token keyword">with</span> Fetch</span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token punctuation">{</span><span class="token comment">/* loading and error JSX */</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">{</span>data <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span></span>
<span class="line">      <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>h2 className<span class="token operator">=</span><span class="token string">&quot;text-xl font-medium mb-6&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>data<span class="token punctuation">.</span>title<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>p className<span class="token operator">=</span><span class="token string">&quot;mb-2&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>data<span class="token punctuation">.</span>body<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>span className<span class="token operator">=</span><span class="token string">&quot;text-gray-700 text-sm&quot;</span><span class="token operator">&gt;</span></span>
<span class="line">          Post <span class="token constant">ID</span><span class="token operator">:</span> <span class="token punctuation">{</span>data<span class="token punctuation">.</span>id<span class="token punctuation">}</span></span>
<span class="line">        <span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="line">  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="using-the-axios-library" tabindex="-1"><a class="header-anchor" href="#using-the-axios-library"><span>Using the Axios library</span></a></h2><p>Axios is a third-party promise-based HTTP client that we can add to our project via package manager to make HTTP requests.</p><p>It is a wrapper over the native Fetch API. It offers a comprehensive feature set, intuitive API, ease of use, and additional functionality compared to Fetch.</p><p>Let’s use Axios to fetch post data from our usual endpoint. We’ll start by installing it:</p>`,47)),t(k,{data:[{id:'<VPIcon icon="fa-brands fa-yarn"/>'},{id:'<VPIcon icon="fa-brands fa-npm"/>'}],active:0,"tab-id":"sh"},{title0:e(({value:i,isActive:l})=>[t(o,{icon:"fa-brands fa-yarn"})]),title1:e(({value:i,isActive:l})=>[t(o,{icon:"fa-brands fa-npm"})]),tab0:e(({value:i,isActive:l})=>n[49]||(n[49]=[s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh"},[s("pre",null,[s("code",{class:"language-bash"},[s("span",{class:"line"},[s("span",{class:"token function"},"yarn"),a(),s("span",{class:"token function"},"add"),a(" axios")]),a(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"})])],-1)])),tab1:e(({value:i,isActive:l})=>n[50]||(n[50]=[s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh"},[s("pre",null,[s("code",{class:"language-bash"},[s("span",{class:"line"},[s("span",{class:"token function"},"npm"),a(" i axios")]),a(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"})])],-1)])),_:1}),n[73]||(n[73]=c(`<h3 id="fetching-a-post-list-with-axios" tabindex="-1"><a class="header-anchor" href="#fetching-a-post-list-with-axios"><span>Fetching a post list with Axios</span></a></h3><p>Similar to the earlier implementation, fetching a list of posts in the <code>useEffect</code> looks like so:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">fetchDataForPosts</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">const</span> postsData <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetcherWithAxios</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token string">&#39;https://jsonplaceholder.typicode.com/posts?_limit=8&#39;</span></span>
<span class="line">      <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token function">setData</span><span class="token punctuation">(</span>postsData<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token function">setError</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">setError</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token function">setData</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">setLoading</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">fetchDataForPosts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>However, the fetching logic in the <code>fetcherWithAxios</code> function is simplified like this:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="fetcherWithAxios.js"><span>fetcherWithAxios.js</span></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">&#39;axios&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">fetcherWithAxios</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> response<span class="token punctuation">.</span>data<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>We started by importing <code>axios</code> and then performed a <code>GET</code> request to the provided URL endpoint. Unlike the <code>fetch()</code> method, the response returned from this library contains the JSON format we need.</p><p>It also has the advantage of robust error handling, so we don’t need to check and throw an error like we did earlier with the <code>fetch()</code> method.</p><p>Also, note that the actual data returned from the server is typically contained within the <code>response.data</code> property.</p><h3 id="fetching-a-single-post-with-axios" tabindex="-1"><a class="header-anchor" href="#fetching-a-single-post-with-axios"><span>Fetching a single post with Axios</span></a></h3><p>Using the same API endpoint and maintaining the earlier structure, we can fetch individual posts by passing the resource URL to the <code>fetcherWithAxios</code> function:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">fetchSinglePost</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">const</span> postData <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetcherWithAxios</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">https://jsonplaceholder.typicode.com/posts/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>postId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span></span>
<span class="line">      <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">      <span class="token function">setData</span><span class="token punctuation">(</span>postData<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token function">setError</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">setError</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token function">setData</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">setLoading</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">fetchSinglePost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>postId<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This is straightforward and more concise compared to the <code>fetch()</code> method.</p><h3 id="using-axios-for-post-requests" tabindex="-1"><a class="header-anchor" href="#using-axios-for-post-requests"><span>Using Axios for <code>POST</code> requests</span></a></h3><p>Unlike Fetch, Axios automatically stringifies the post data when we send JavaScript objects. The following code performs a post request with Axios:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">postRequestWithAxios</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token string">&#39;https://jsonplaceholder.typicode.com/posts&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token string-property property">&#39;Content-Type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;application/json&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      data<span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> response<span class="token punctuation">.</span>data<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We can then pass the post data like so:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">fetchDataForPosts</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">const</span> postsData <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">postRequestWithAxios</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">userId</span><span class="token operator">:</span> <span class="token number">11</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">101</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;New post title&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token string">&#39;The post body content&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token function">setData</span><span class="token punctuation">(</span>postsData<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token comment">// ...</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">finally</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">fetchDataForPosts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="using-the-usefetch-custom-hook-from-react-fetch-hook" tabindex="-1"><a class="header-anchor" href="#using-the-usefetch-custom-hook-from-react-fetch-hook"><span>Using the <code>useFetch</code> custom Hook from <code>react-fetch-hook</code></span></a></h2><p>Up to this point, we’ve covered most of what we need to fetch data from an API endpoint. However, we can go a step further by simplifying data fetching using the <code>useFetch</code> Hook from the <code>react-fetch-hook</code> library.</p><p>The <code>useFetch</code> Hook encapsulates the Fetch API implementation, thereby reducing the pain of writing complicated code even on small-scale applications.</p><p>To use the library, let’s first install it:</p>`,22)),t(k,{data:[{id:'<VPIcon icon="fa-brands fa-yarn"/>'},{id:'<VPIcon icon="fa-brands fa-npm"/>'}],active:0,"tab-id":"sh"},{title0:e(({value:i,isActive:l})=>[t(o,{icon:"fa-brands fa-yarn"})]),title1:e(({value:i,isActive:l})=>[t(o,{icon:"fa-brands fa-npm"})]),tab0:e(({value:i,isActive:l})=>n[51]||(n[51]=[s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh"},[s("pre",null,[s("code",{class:"language-bash"},[s("span",{class:"line"},[s("span",{class:"token function"},"yarn"),a(),s("span",{class:"token function"},"add"),a(" react-fetch-hook")]),a(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"})])],-1)])),tab1:e(({value:i,isActive:l})=>n[52]||(n[52]=[s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh"},[s("pre",null,[s("code",{class:"language-bash"},[s("span",{class:"line"},[s("span",{class:"token function"},"npm"),a(" i react-fetch-hook")]),a(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"})])],-1)])),_:1}),n[74]||(n[74]=c(`<p>To fetch the posts list with this Hook, we’ll pass the endpoint URL like so:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="ReactFetchHook.jsx"><span>ReactFetchHook.jsx</span></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">import</span> useFetch <span class="token keyword">from</span> <span class="token string">&#39;react-fetch-hook&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">ReactFetchHook</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> isLoading<span class="token punctuation">,</span> data<span class="token punctuation">,</span> error <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useFetch</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token string">&#39;https://jsonplaceholder.typicode.com/posts?_limit=8&#39;</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> ReactFetchHook<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>The <code>useFetch</code> Hook exposes state (<code>isLoading</code>, <code>data</code>, <code>error</code>), which we can then use in our render.</p><p>Similarly, to fetch a single post, we’ll pass the resource URL to the Hook like so:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">isLoading</span><span class="token operator">:</span> loading<span class="token punctuation">,</span></span>
<span class="line">  data<span class="token punctuation">,</span></span>
<span class="line">  error<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useFetch</span><span class="token punctuation">(</span></span>
<span class="line">  <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">https://jsonplaceholder.typicode.com/posts/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>postId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We’ve renamed the <code>isLoading</code> state from the Hook to <code>loading</code> because we have used <code>loading</code> in the render:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token punctuation">{</span>loading <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span></span>
<span class="line">  <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&quot;text-xl font-medium&quot;</span><span class="token operator">&gt;</span><span class="token constant">A</span> moment please<span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="using-the-tanstack-query-library" tabindex="-1"><a class="header-anchor" href="#using-the-tanstack-query-library"><span>Using the TanStack Query library</span></a></h2>`,9)),s("p",null,[t(d,{to:"/blog.logrocket.com/using-tanstack-query-next-js.html"},{default:e(()=>n[53]||(n[53]=[s("strong",null,"TanStack Query",-1)])),_:1,__:[53]}),n[54]||(n[54]=a(", formally known as React Query, makes data fetching much more efficient. It lets us achieve a lot more than just fetching data."))]),n[75]||(n[75]=s("p",null,"At its core, TanStack Query offers functionalities such as caching, re-fetching, request deduplication, and various optimizations that impact the overall user experience by preventing irregularities and ensuring that our app feels faster.",-1)),n[76]||(n[76]=s("p",null,"Like the previous method, TanStack Query provides a custom Hook that we can reuse throughout our app to fetch data. To use the library, let’s install it:",-1)),t(k,{data:[{id:'<VPIcon icon="fa-brands fa-yarn"/>'},{id:'<VPIcon icon="fa-brands fa-npm"/>'}],active:0,"tab-id":"sh"},{title0:e(({value:i,isActive:l})=>[t(o,{icon:"fa-brands fa-yarn"})]),title1:e(({value:i,isActive:l})=>[t(o,{icon:"fa-brands fa-npm"})]),tab0:e(({value:i,isActive:l})=>n[55]||(n[55]=[s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh"},[s("pre",null,[s("code",{class:"language-bash"},[s("span",{class:"line"},[s("span",{class:"token function"},"yarn"),a(),s("span",{class:"token function"},"add"),a(" @tanstack/react-query")]),a(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"})])],-1)])),tab1:e(({value:i,isActive:l})=>n[56]||(n[56]=[s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh"},[s("pre",null,[s("code",{class:"language-bash"},[s("span",{class:"line"},[s("span",{class:"token function"},"npm"),a(" i @tanstack/react-query")]),a(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"})])],-1)])),_:1}),s("p",null,[n[57]||(n[57]=a("Next, go to the entry point of your app — in a React Vite project, the ")),t(o,{icon:"fa-brands fa-react"}),n[58]||(n[58]=s("code",null,"main.jsx",-1)),n[59]||(n[59]=a(" file. In that file, we’ll create a query client and provide it to our app:"))]),n[77]||(n[77]=c(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="main.jsx"><span>main.jsx</span></div><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token comment">// ...</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span></span>
<span class="line">  QueryClient<span class="token punctuation">,</span></span>
<span class="line">  QueryClientProvider<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@tanstack/react-query&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">createBrowserRouter</span><span class="token punctuation">(</span><span class="token punctuation">[</span></span>
<span class="line">  <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Create a client</span></span>
<span class="line"><span class="token keyword">const</span> queryClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">ReactDOM<span class="token punctuation">.</span><span class="token function">createRoot</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;root&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">React.StrictMode</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">QueryClientProvider</span></span> <span class="token attr-name">client</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>queryClient<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">RouterProvider</span></span> <span class="token attr-name">router</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>router<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">QueryClientProvider</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">React.StrictMode</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>We’ve wrapped the <code>RouterProvider</code>, which renders our app with the <code>QueryClientProvider</code> and passes the client instance to it.</p><h3 id="fetching-post-items-with-tanstack-query" tabindex="-1"><a class="header-anchor" href="#fetching-post-items-with-tanstack-query"><span>Fetching post items with TanStack Query</span></a></h3><p>We’ll start by importing a <code>useQuery</code> Hook from <code>@tanstack/react-query</code>. In this Hook, we must pass a unique query key identifying the data we are fetching and a function that the query will use to request data.</p><p>This query key is necessary for the library to cache data correctly and helps with re-fetching and sharing the queries throughout the application:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="ReactQuery.jsx"><span>ReactQuery.jsx</span></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// ...</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> useQuery <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@tanstack/react-query&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> fetcherWithFetch <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../lib/fetcherWithFetch&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">ReactQuery</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> data<span class="token punctuation">,</span> error<span class="token punctuation">,</span> <span class="token literal-property property">isPending</span><span class="token operator">:</span> loading <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useQuery</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">queryKey</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;posts&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function-variable function">queryFn</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line">      <span class="token function">fetcherWithFetch</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token string">&#39;https://jsonplaceholder.typicode.com/posts?_limit=8&#39;</span></span>
<span class="line">      <span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> ReactQuery<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>In return, the Hook exposes the (<code>isPending</code>, <code>data</code>, <code>error</code>), which we can then use in our render.</p><p>The <code>fetcherWithFetch</code> should look familiar as we created something similar earlier:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">fetcherWithFetch</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>response<span class="token punctuation">.</span>ok<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">HTTP error: Status </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>response<span class="token punctuation">.</span>status<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Please note that TanStack Query is an async state manager rather than a data-fetching library. That is why we still had to use HTTP clients like <code>fetch</code> to perform requests. TanStack Query helps resolve every other challenge that we may encounter with data fetching in real-world scenarios.</p><p>We may also decide to use Axios if we want:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span> data<span class="token punctuation">,</span> error<span class="token punctuation">,</span> <span class="token literal-property property">isPending</span><span class="token operator">:</span> loading <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useQuery</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">queryKey</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;posts&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function-variable function">queryFn</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line">    <span class="token function">fetcherWithAxios</span><span class="token punctuation">(</span></span>
<span class="line">      <span class="token string">&#39;https://jsonplaceholder.typicode.com/posts?_limit=8&#39;</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>fetcherWithAxios</code> should also look familiar:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="fetcherWithAxios.js"><span>fetcherWithAxios.js</span></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">&#39;axios&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">fetcherWithAxios</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> response<span class="token punctuation">.</span>data<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span> </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="fetching-a-single-post-with-tanstack-query" tabindex="-1"><a class="header-anchor" href="#fetching-a-single-post-with-tanstack-query"><span>Fetching a single post with TanStack Query</span></a></h3><p>For individual posts, we will pass the post ID to the <code>queryKey</code> to uniquely identify the post data. Then, we set a <code>staleTime</code> to prevent re-fetching data:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span></span>
<span class="line">  data<span class="token punctuation">,</span></span>
<span class="line">  error<span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">isPending</span><span class="token operator">:</span> loading<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useQuery</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">queryKey</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;post&#39;</span><span class="token punctuation">,</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>postId<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function-variable function">queryFn</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line">    <span class="token function">fetcherWithFetch</span><span class="token punctuation">(</span></span>
<span class="line">      <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">https://jsonplaceholder.typicode.com/posts/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>postId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">staleTime</span><span class="token operator">:</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token comment">// cache for 10 minutes</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As you can see in the Network tab in the demo below, the data for individual posts is cached when we revisit the page. That is an improvement:</p><figure><img src="`+A+`" alt="Fetching Data For Multiple Posts" tabindex="0" loading="lazy"><figcaption>Fetching Data For Multiple Posts</figcaption></figure><hr><h2 id="using-the-swr-library" tabindex="-1"><a class="header-anchor" href="#using-the-swr-library"><span>Using the SWR library</span></a></h2><p>SWR (stale-while-revalidate) offers similar implementations and functionalities to TanStack Query. Like TanStack Query, SWR provides a custom Hook that we can use to fetch data. Let’s install it:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">npm</span> i swr</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="fetching-post-items-with-swr" tabindex="-1"><a class="header-anchor" href="#fetching-post-items-with-swr"><span>Fetching post items with SWR</span></a></h3><p>We’ll start by importing a <code>useSWR</code> Hook from <code>swr</code>. In this Hook, we must pass a unique key for the request and a function to fetch data. We can use any library to handle data fetching as we did with TanStack Query.</p><p>The following code shows how we fetch the posts list with the <code>useSWR</code> Hook:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// ...</span></span>
<span class="line"><span class="token keyword">import</span> useSWR <span class="token keyword">from</span> <span class="token string">&#39;swr&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> fetcherWithFetch <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../lib/fetcherWithFetch&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">FetchWithSwr</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> data<span class="token punctuation">,</span> error<span class="token punctuation">,</span> isLoading <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useSWR</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token string">&#39;https://jsonplaceholder.typicode.com/posts?_limit=8&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    fetcherWithFetch</span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> FetchWithSwr<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Usually, we use the resource URL for the request key. This key will be passed to the fetcher function as an argument automatically.</p><p>We can then use the returned state (<code>isLoading</code>, <code>data</code>, <code>error</code>) to populate the render.</p><h3 id="fetching-a-single-post-with-swr" tabindex="-1"><a class="header-anchor" href="#fetching-a-single-post-with-swr"><span>Fetching a single post with SWR</span></a></h3><p>For individual posts, we will pass the unique post URL endpoint as the key to uniquely identify the post data. Then, we set the cache time with <code>dedupingInterval</code> in the config object to prevent re-fetching data:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span></span>
<span class="line">  data<span class="token punctuation">,</span></span>
<span class="line">  error<span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">isLoading</span><span class="token operator">:</span> loading<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useSWR</span><span class="token punctuation">(</span></span>
<span class="line">  <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">https://jsonplaceholder.typicode.com/posts/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>postId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span></span>
<span class="line">  fetcherWithFetch<span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">dedupingInterval</span><span class="token operator">:</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token comment">// cache for 10 minutes</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="#conclusion"><span>Conclusion</span></a></h2><p>This comprehensive guide covers nearly all the essential aspects of modern data fetching techniques. We’ve delved into fetching data from API endpoints, mastering the handling of various states such as loading and error states, and showcasing the simplification of the fetching process using contemporary libraries. By now, you should feel more confident in integrating data fetching into your React applications.</p><p>If you found this guide interesting, please share it across the web. Additionally, feel free to leave any questions or contributions in the comment section below.</p>`,36)),y(" TODO: add ARTICLE CARD "),t(u,h(v({title:"Modern API data-fetching methods in React",desc:"Explore modern React data-fetching methods and how to handle a real-world application’s state while fetching data.",link:"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/modern-api-data-fetching-methods-react.html",logo:"/assets/image/blog.logrocket.com/favicon.png",background:"rgba(112,76,182,0.2)"})),null,16)])}const C=b(T,[["render",L]]),M=JSON.parse('{"path":"/blog.logrocket.com/modern-api-data-fetching-methods-react.html","title":"Modern API data-fetching methods in React","lang":"en-US","frontmatter":{"lang":"en-US","title":"Modern API data-fetching methods in React","description":"Article(s) > Modern API data-fetching methods in React","icon":"fa-brands fa-react","category":["Node.js","React.js","Axios","Article(s)"],"tag":["blog","blog.logrocket.com","node","nodejs","node-js","react","reactjs","react-js","axios"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Modern API data-fetching methods in React\\",\\"image\\":[\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/modern-api-data-fetching-methods-react/banner.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/modern-api-data-fetching-methods-react/rendering-post-data-fetch.gif\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/modern-api-data-fetching-methods-react/fetching-posts-demo.gif\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/modern-api-data-fetching-methods-react/fetching-data-multiple-posts.gif\\"],\\"datePublished\\":\\"2024-03-01T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Ibadehin Mojeed\\",\\"url\\":\\"https://blog.logrocket.com/author/ibadehinmojeed/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/modern-api-data-fetching-methods-react.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Modern API data-fetching methods in React"}],["meta",{"property":"og:description","content":"Article(s) > Modern API data-fetching methods in React"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/modern-api-data-fetching-methods-react/banner.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/modern-api-data-fetching-methods-react/banner.png"}],["meta",{"name":"twitter:image:alt","content":"Modern API data-fetching methods in React"}],["meta",{"property":"article:author","content":"Ibadehin Mojeed"}],["meta",{"property":"article:tag","content":"axios"}],["meta",{"property":"article:tag","content":"react-js"}],["meta",{"property":"article:tag","content":"reactjs"}],["meta",{"property":"article:tag","content":"react"}],["meta",{"property":"article:tag","content":"node-js"}],["meta",{"property":"article:tag","content":"nodejs"}],["meta",{"property":"article:tag","content":"node"}],["meta",{"property":"article:tag","content":"blog.logrocket.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2024-03-01T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Modern API data-fetching methods in React"},{"property":"og:description","content":"Modern API data-fetching methods in React"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/modern-api-data-fetching-methods-react.html"}]],"prev":"/programming/js-react/articles/README.md","date":"2024-03-01T00:00:00.000Z","isOriginal":false,"author":[{"name":"Ibadehin Mojeed","url":"https://blog.logrocket.com/author/ibadehinmojeed/"}],"cover":"/assets/image/blog.logrocket.com/modern-api-data-fetching-methods-react/banner.png"},"git":{},"readingTime":{"minutes":12.96,"words":3889},"filePathRelative":"blog.logrocket.com/modern-api-data-fetching-methods-react.md","copyright":{"author":"Ibadehin Mojeed"}}');export{C as comp,M as data};
