import{_ as v}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as h,d as s,f as t,b as p,a as g,t as b,n as r,g as u,w as e,e as a,r as i,o as f}from"./app-BVguHYKu.js";const w="/bookshelf/assets/image/blog.logrocket.com/javascript-arrow-functions/banner.png",y={},j={id:"frontmatter-title-관련",tabindex:"-1"},x={class:"header-anchor",href:"#frontmatter-title-관련"},S={class:"table-of-contents"},J={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters",target:"_blank",rel:"noopener noreferrer"};function T(d,n){const l=i("VPCard"),o=i("router-link"),k=i("SiteInfo"),c=i("RouteLink"),m=i("VPIcon");return f(),h("div",null,[s("h1",j,[s("a",x,[s("span",null,b(d.$frontmatter.title)+" 관련",1)])]),t(l,r(u({title:"JavaScript > Article(s)",desc:"Article(s)",link:"/programming/js/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",S,[s("ul",null,[s("li",null,[t(o,{to:"#what-are-javascript-arrow-functions"},{default:e(()=>n[0]||(n[0]=[a("What are JavaScript arrow functions?")])),_:1,__:[0]})]),s("li",null,[t(o,{to:"#what-is-the-basic-syntax-of-a-javascript-arrow-function"},{default:e(()=>n[1]||(n[1]=[a("What is the basic syntax of a JavaScript arrow function?")])),_:1,__:[1]})]),s("li",null,[t(o,{to:"#implicit-returns-and-the-javascript-arrow-function"},{default:e(()=>n[2]||(n[2]=[a("Implicit returns and the JavaScript arrow function")])),_:1,__:[2]}),s("ul",null,[s("li",null,[t(o,{to:"#returning-an-object-implicitly"},{default:e(()=>n[3]||(n[3]=[a("Returning an object implicitly")])),_:1,__:[3]})])])]),s("li",null,[t(o,{to:"#explicit-returns-and-the-javascript-arrow-function"},{default:e(()=>n[4]||(n[4]=[a("Explicit returns and the JavaScript arrow function")])),_:1,__:[4]})]),s("li",null,[t(o,{to:"#how-javascript-arrow-functions-differ-from-standard-functions"},{default:e(()=>n[5]||(n[5]=[a("How JavaScript arrow functions differ from standard functions")])),_:1,__:[5]}),s("ul",null,[s("li",null,[t(o,{to:"#no-this-binding"},{default:e(()=>n[6]||(n[6]=[a("No this binding")])),_:1,__:[6]})]),s("li",null,[t(o,{to:"#no-arguments-object"},{default:e(()=>n[7]||(n[7]=[a("No arguments object")])),_:1,__:[7]})]),s("li",null,[t(o,{to:"#no-prototype"},{default:e(()=>n[8]||(n[8]=[a("No prototype")])),_:1,__:[8]})])])]),s("li",null,[t(o,{to:"#when-to-use-javascript-arrow-functions-vs-standard-functions"},{default:e(()=>n[9]||(n[9]=[a("When to use JavaScript arrow functions vs. standard functions")])),_:1,__:[9]})]),s("li",null,[t(o,{to:"#how-to-define-a-method-using-an-arrow-function"},{default:e(()=>n[10]||(n[10]=[a("How to define a method using an arrow function")])),_:1,__:[10]})]),s("li",null,[t(o,{to:"#conclusion"},{default:e(()=>n[11]||(n[11]=[a("Conclusion")])),_:1,__:[11]})])])]),n[36]||(n[36]=s("hr",null,null,-1)),t(k,{name:"How and when to use JavaScript arrow functions",desc:"Learn the basic syntax of JavaScript arrow functions, how to use them, and how they differ from standard functions.",url:"https://blog.logrocket.com/javascript-arrow-functions",logo:"/assets/image/blog.logrocket.com/favicon.png",preview:"/assets/image/blog.logrocket.com/javascript-arrow-functions/banner.png"}),n[37]||(n[37]=p('<p>The ES2015 standard introduced arrow functions to JavaScript. Arrow functions have a simpler syntax than standard functions, but we’ll also see that there are some important differences in how they behave.</p><hr><h2 id="what-are-javascript-arrow-functions" tabindex="-1"><a class="header-anchor" href="#what-are-javascript-arrow-functions"><span>What are JavaScript arrow functions?</span></a></h2><figure><img src="'+w+`" alt="how and when to use JavaScript arrow functions" tabindex="0" loading="lazy"><figcaption>how and when to use JavaScript arrow functions</figcaption></figure><p>Arrow functions can be used almost anywhere a standard function expression can be used, with a few exceptions. They have a compact syntax, and like standard functions, have an argument list, a body, and a possible return value.</p><p>We’ll explore arrow functions in detail below, but in general they should be avoided any time you need a new <code>this</code> binding. Arrow functions don’t have their own <code>this</code>; they inherit the <code>this</code> from the outer scope.</p><p>Arrow functions also can’t be used as constructors or generator functions, as they can’t contain a <code>yield</code> statement.</p><hr><h2 id="what-is-the-basic-syntax-of-a-javascript-arrow-function" tabindex="-1"><a class="header-anchor" href="#what-is-the-basic-syntax-of-a-javascript-arrow-function"><span>What is the basic syntax of a JavaScript arrow function?</span></a></h2><p>An arrow function consists of a list of arguments, followed by an arrow (made with an equals sign and a greater-than sign (<code>=&gt;</code>), followed by the function body. Here’s a simple example of an arrow function that takes a single argument:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">greet</span> <span class="token operator">=</span> <span class="token parameter">name</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can optionally also surround the argument with parentheses:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">greet</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If an arrow function takes more than one argument, the parentheses are required. Like a standard function, the argument names are separated by commas:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">sum</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15)),s("p",null,[n[13]||(n[13]=a("An anonymous ")),t(c,{to:"/blog.logrocket.com/anomalies-in-javascript-arrow-functions.html"},{default:e(()=>n[12]||(n[12]=[s("strong",null,"arrow function",-1)])),_:1,__:[12]}),n[14]||(n[14]=a(" has no name. These are typically passed as callback functions:"))]),n[38]||(n[38]=p(`<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">button<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token parameter">event</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;You clicked the button!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If your arrow function body is a single statement, you don’t even need the curly braces:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">greet</span> <span class="token operator">=</span> <span class="token parameter">name</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h2 id="implicit-returns-and-the-javascript-arrow-function" tabindex="-1"><a class="header-anchor" href="#implicit-returns-and-the-javascript-arrow-function"><span>Implicit returns and the JavaScript arrow function</span></a></h2>`,5)),s("p",null,[n[16]||(n[16]=a("One of the important differences between JavaScript arrow functions and standard functions is the idea of an ")),t(c,{to:"/blog.logrocket.com/javascript-typescript-shorthands.html#implicit-return-arrow-function-expressions"},{default:e(()=>n[15]||(n[15]=[s("strong",null,"implicit return",-1)])),_:1,__:[15]}),n[17]||(n[17]=a(": returning a value without using a ")),n[18]||(n[18]=s("code",null,"return",-1)),n[19]||(n[19]=a(" statement."))]),n[39]||(n[39]=p(`<p>If you omit the curly braces from an arrow function, the value of the function body’s expression will be returned from the function without needing a <code>return</code> statement. Let’s revisit the <code>sum</code> function from earlier. This can be rewritten to use an implicit return:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">sum</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Implicit return is handy when creating callback functions:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> values <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> doubled values <span class="token operator">=</span> values<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=&gt;</span> value <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [2, 4, 6]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="returning-an-object-implicitly" tabindex="-1"><a class="header-anchor" href="#returning-an-object-implicitly"><span>Returning an object implicitly</span></a></h3><p>You can return any kind of value you want with an implicit return, but you’ll need a little extra help if you want to return an object. Since an object literal uses curly braces, JavaScript will interpret the curly braces as the function body. Consider this example:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">createUser</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> email</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> email <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>In this case, there will be no implicit return and the function will actually return <code>undefined</code> because there is no <code>return</code> statement. To return an object implicitly, you need to wrap the object with parentheses:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">createUser</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> email</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">,</span> email <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Now JavaScript knows this is an implicit return of an object containing the <code>name</code> and <code>email</code> properties.</p><hr><h2 id="explicit-returns-and-the-javascript-arrow-function" tabindex="-1"><a class="header-anchor" href="#explicit-returns-and-the-javascript-arrow-function"><span>Explicit returns and the JavaScript arrow function</span></a></h2><p>Like with standard functions, an arrow function can explicitly return a value with a <code>return</code> statement:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">createUser</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> email</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> email <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="how-javascript-arrow-functions-differ-from-standard-functions" tabindex="-1"><a class="header-anchor" href="#how-javascript-arrow-functions-differ-from-standard-functions"><span>How JavaScript arrow functions differ from standard functions</span></a></h2><p>Arrow functions behave differently from standard functions in some other ways.</p><h3 id="no-this-binding" tabindex="-1"><a class="header-anchor" href="#no-this-binding"><span>No <code>this</code> binding</span></a></h3><p>The most significant difference is that, unlike a standard function, an arrow function doesn’t create a <code>this</code> binding of its own. Consider the following example:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> counter <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function-variable function">increment</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,20)),s("p",null,[n[21]||(n[21]=a("Because the ")),n[22]||(n[22]=s("code",null,"increment",-1)),n[23]||(n[23]=a(" method is an arrow function, the ")),t(c,{to:"/blog.logrocket.com/access-correct-this-inside-callback-javascript.html"},{default:e(()=>n[20]||(n[20]=[s("strong",null,[s("code",null,"this"),a("value")],-1)])),_:1,__:[20]}),n[24]||(n[24]=a(" in the function does not refer to the ")),n[25]||(n[25]=s("code",null,"counter",-1)),n[26]||(n[26]=a(" object. Instead, it inherits the outer ")),n[27]||(n[27]=s("code",null,"this",-1)),n[28]||(n[28]=a(", which in this example would be the global window object."))]),n[40]||(n[40]=p(`<p>As you might expect, if you call <code>counter.increment()</code>, it won’t change <code>counter.value</code>. Instead, <code>this.value</code> will be <code>undefined</code> since <code>this</code> refers to the window.</p><p>Sometimes, you can use this to your advantage. There are cases where you do want the outer <code>this</code> value from within a function. This is a common scenario when using callback functions. Before arrow functions, you’d have to call <code>bind</code> on a function to force it to have a certain <code>this</code>, or you might have followed a pattern like this:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">var</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>With an arrow function, you get the <code>this</code> from the enclosing scope:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="no-arguments-object" tabindex="-1"><a class="header-anchor" href="#no-arguments-object"><span>No <code>arguments</code> object</span></a></h3><p>In a standard function, you can reference the <code>arguments</code> object to get information about the arguments passed to the function call. This is an array-like object that holds all the argument values. In the past, you might have used this to write a variadic function.</p><p>Consider this <code>sum</code> function, which supports a variable number of arguments:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    total <span class="token operator">+=</span> arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> total<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can call <code>sum</code> with any number of arguments:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// 6</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>If you implement <code>sum</code> as an arrow function, there won’t be an <code>arguments</code> object. Instead, you’ll need to use the rest parameter syntax:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">sum</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> args<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    total <span class="token operator">+=</span> args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> args<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can call this version of the <code>sum</code> function the same way:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// 6</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,15)),s("p",null,[n[31]||(n[31]=a("This syntax isn’t unique to arrow functions, of course. You can use the ")),s("a",J,[t(m,{icon:"fa-brands fa-firefox"}),n[29]||(n[29]=a("rest parameter syntax"))]),n[32]||(n[32]=a(" with standard functions, too. In my experience with ")),t(c,{to:"/blog.logrocket.com/six-things-you-may-not-know-about-javascript.html"},{default:e(()=>n[30]||(n[30]=[s("strong",null,"modern JavaScript",-1)])),_:1,__:[30]}),n[33]||(n[33]=a(", I don’t really see the ")),n[34]||(n[34]=s("code",null,"arguments",-1)),n[35]||(n[35]=a(" object being used anymore, so this distinction may be a moot point."))]),n[41]||(n[41]=p(`<h3 id="no-prototype" tabindex="-1"><a class="header-anchor" href="#no-prototype"><span>No prototype</span></a></h3><p>Standard JavaScript functions have a <code>prototype</code> property. Before the introduction of the <code>class</code> syntax, this was the way to create objects with <code>new</code>:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">function</span> <span class="token function">Greeter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token class-name">Greeter</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayHello</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">new</span> <span class="token class-name">Greeter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token string">&#39;Joe&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hello, Joe!</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you try this with an arrow function, you’ll get an error. This is because arrow functions don’t have a prototype:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">Greeter</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">Greeter</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayHello</span> <span class="token operator">=</span> <span class="token parameter">name</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// TypeError: Cannot set properties of undefined (setting &#39;sayHello&#39;)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="when-to-use-javascript-arrow-functions-vs-standard-functions" tabindex="-1"><a class="header-anchor" href="#when-to-use-javascript-arrow-functions-vs-standard-functions"><span>When to use JavaScript arrow functions vs. standard functions</span></a></h2><p>Arrow functions can be used in a lot of scenarios, but there are some situations where you still need to use a standard function expression. These include:</p><ul><li>The constructor of a class</li><li>An object method where you need to access the object via a <code>this</code> value</li><li>A function that you need to explicitly bind to a given <code>this</code> value with <code>Function.prototype.bind</code></li><li>A generator function containing <code>yield</code> statements</li></ul><p>Arrow functions particularly shine when used as callback functions, due to their terse syntax. In particular, they are very useful for array methods such as <code>forEach</code>, <code>map</code>, and <code>filter</code>. You <em>can</em> use them as object methods, but only if the method doesn’t try to access the object using <code>this</code>.</p><p>The arrow function is very useful in certain situations. But like most things, arrow functions have potential pitfalls if you don’t use them correctly.</p><hr><h2 id="how-to-define-a-method-using-an-arrow-function" tabindex="-1"><a class="header-anchor" href="#how-to-define-a-method-using-an-arrow-function"><span>How to define a method using an arrow function</span></a></h2><p>Here’s how you’d define a method using an arrow function:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token function-variable function">greet</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Unlike a method on an object literal — which as we saw earlier does not get the <code>this</code> value — here the <code>greet</code> method gets its <code>this</code> value from the enclosing <code>Person</code> instance. Then, no matter how the method is called, the <code>this</code> value will always be the instance of the class. Consider this example that uses a standard method with <code>setTimeout</code>:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">delayedGreet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>greet<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;Joe&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delayedGreet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hello, undefined!</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When the <code>greet</code> method is called from the <code>setTimeout</code> call, its <code>this</code> value becomes the global window object. The <code>name</code> property isn’t defined there, so you’ll get <code>Hello, undefined!</code> when you call the <code>delayedGreet</code> method.</p><p>If you define <code>greet</code> as an arrow function instead, it will still have the enclosing <code>this</code> set to the class instance, even when called from <code>setTimeout</code>:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token function-variable function">greet</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">delayedGreet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>greet<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;Joe&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delayedGreet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hello, Joe!</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can’t, however, define the constructor as an arrow function. If you try, you’ll get an error:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function-variable function">constructor</span> <span class="token operator">=</span> <span class="token parameter">name</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// SyntaxError: Classes may not have a field named &#39;constructor&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="#conclusion"><span>Conclusion</span></a></h2><p>Since the arrival of the ES2015 standard, JavaScript programmers have had arrow functions in their toolbox. Their main strength is the abbreviated syntax; you don’t need the <code>function</code> keyword, and with implicit return you don’t need a <code>return</code> statement.</p><p>The lack of a <code>this</code> binding can cause confusion, but is also handy when you want to preserve the enclosing <code>this</code> value to another function when passed as a callback.</p><p>Consider this chain of array operations:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> n <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This looks fine, but it’s a little verbose. With arrow functions, the syntax is cleaner:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">n</span> <span class="token operator">=&gt;</span> n <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">n</span> <span class="token operator">=&gt;</span> n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Arrow functions don’t have an <code>arguments</code> object, but they do support rest parameter syntax. This makes it easy to build arrow functions that take a variable number of arguments.</p><p>The main advantages of arrow functions are enhanced readability as well as the different <code>this</code> behavior, which will make life easier in certain situations where you need to preserve an outer <code>this</code> value.</p>`,32)),g(" TODO: add ARTICLE CARD "),t(l,r(u({title:"How and when to use JavaScript arrow functions",desc:"Learn the basic syntax of JavaScript arrow functions, how to use them, and how they differ from standard functions.",link:"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/javascript-arrow-functions.html",logo:"/assets/image/blog.logrocket.com/favicon.png",background:"rgba(112,76,182,0.2)"})),null,16)])}const I=v(y,[["render",T]]),C=JSON.parse('{"path":"/blog.logrocket.com/javascript-arrow-functions.html","title":"How and when to use JavaScript arrow functions","lang":"en-US","frontmatter":{"lang":"en-US","title":"How and when to use JavaScript arrow functions","description":"Article(s) > How and when to use JavaScript arrow functions","icon":"fa-brands fa-js","category":["JavaScript","Article(s)"],"tag":["blog","blog.logrocket.com","js","javascript"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How and when to use JavaScript arrow functions\\",\\"image\\":[\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/javascript-arrow-functions/banner.png\\"],\\"datePublished\\":\\"2025-02-17T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Joe Attardi\\",\\"url\\":\\"https://blog.logrocket.com/author/joeattardi/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/javascript-arrow-functions.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How and when to use JavaScript arrow functions"}],["meta",{"property":"og:description","content":"Article(s) > How and when to use JavaScript arrow functions"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/javascript-arrow-functions/banner.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/javascript-arrow-functions/banner.png"}],["meta",{"name":"twitter:image:alt","content":"How and when to use JavaScript arrow functions"}],["meta",{"property":"article:author","content":"Joe Attardi"}],["meta",{"property":"article:tag","content":"javascript"}],["meta",{"property":"article:tag","content":"js"}],["meta",{"property":"article:tag","content":"blog.logrocket.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2025-02-17T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > How and when to use JavaScript arrow functions"},{"property":"og:description","content":"How and when to use JavaScript arrow functions"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/javascript-arrow-functions.html"}]],"prev":"/programming/js/articles/README.md","date":"2025-02-17T00:00:00.000Z","isOriginal":false,"author":[{"name":"Joe Attardi","url":"https://blog.logrocket.com/author/joeattardi/"}],"cover":"/assets/image/blog.logrocket.com/javascript-arrow-functions/banner.png"},"git":{},"readingTime":{"minutes":6.23,"words":1870},"filePathRelative":"blog.logrocket.com/javascript-arrow-functions.md","copyright":{"author":"Joe Attardi"}}');export{I as comp,C as data};
