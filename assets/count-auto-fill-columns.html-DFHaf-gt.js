import{_ as f}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as b,d as n,f as t,b as e,a as u,t as y,n as k,g,w as l,e as a,r,o as w}from"./app-BVguHYKu.js";const x={},S={id:"frontmatter-title-관련",tabindex:"-1"},T={class:"header-anchor",href:"#frontmatter-title-관련"},j={class:"table-of-contents"},C={href:"https://pugjs.org/api/getting-started.html",target:"_blank",rel:"noopener noreferrer"},q={href:"https://bugs.webkit.org/show_bug.cgi?id=282326",target:"_blank",rel:"noopener noreferrer"},z={href:"https://codepen.io/thebabydino/full/gOayvpb",target:"_blank",rel:"noopener noreferrer"},D={href:"https://webkit.org/blog/15860/release-notes-for-safari-technology-preview-203/",target:"_blank",rel:"noopener noreferrer"},O={href:"https://developer.chrome.com/release-notes/138?authuser=1&hl=en",target:"_blank",rel:"noopener noreferrer"},A={href:"https://stackoverflow.com/a/40179718/1397351",target:"_blank",rel:"noopener noreferrer"},I={href:"https://bugzilla.mozilla.org/show_bug.cgi?id=1827404",target:"_blank",rel:"noopener noreferrer"},N={href:"https://dev.to/janeori/css-type-casting-to-numeric-tanatan2-scalars-582j",target:"_blank",rel:"noopener noreferrer"},P={href:"https://bsky.app/profile/anatudor.bsky.social/post/3kxmt5qlbbi2e",target:"_blank",rel:"noopener noreferrer"};function F(p,s){const m=r("VPCard"),i=r("router-link"),h=r("SiteInfo"),c=r("VPIcon"),v=r("VidStack"),o=r("CodePen"),d=r("RouteLink");return w(),b("div",null,[n("h1",S,[n("a",T,[n("span",null,y(p.$frontmatter.title)+" 관련",1)])]),t(m,k(g({title:"CSS > Article(s)",desc:"Article(s)",link:"/programming/css/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),n("nav",j,[n("ul",null,[n("li",null,[t(i,{to:"#the-basic-idea"},{default:l(()=>s[0]||(s[0]=[a("The Basic Idea")])),_:1,__:[0]}),n("ul",null,[n("li",null,[t(i,{to:"#setup"},{default:l(()=>s[1]||(s[1]=[a("Setup")])),_:1,__:[1]})]),n("li",null,[t(i,{to:"#getting-the-number-of-columns"},{default:l(()=>s[2]||(s[2]=[a("Getting the number of columns")])),_:1,__:[2]})]),n("li",null,[t(i,{to:"#extending-support"},{default:l(()=>s[3]||(s[3]=[a("Extending support")])),_:1,__:[3]})]),n("li",null,[t(i,{to:"#fixing-tiny-issues"},{default:l(()=>s[4]||(s[4]=[a("Fixing tiny issues")])),_:1,__:[4]})])])]),n("li",null,[t(i,{to:"#mind-the-gap"},{default:l(()=>s[5]||(s[5]=[a("Mind the gap")])),_:1,__:[5]})]),n("li",null,[t(i,{to:"#let-s-go-wild"},{default:l(()=>s[6]||(s[6]=[a("Let’s Go Wild!")])),_:1,__:[6]}),n("ul",null,[n("li",null,[t(i,{to:"#highlighting-items-on-a-certain-column"},{default:l(()=>s[7]||(s[7]=[a("Highlighting items on a certain column")])),_:1,__:[7]})]),n("li",null,[t(i,{to:"#highlighting-items-on-a-certain-row"},{default:l(()=>s[8]||(s[8]=[a("Highlighting items on a certain row")])),_:1,__:[8]})])])]),n("li",null,[t(i,{to:"#taking-it-further"},{default:l(()=>s[9]||(s[9]=[a("Taking it Further")])),_:1,__:[9]})])])]),s[90]||(s[90]=n("hr",null,null,-1)),t(h,{name:"Get the number of auto-fit/auto-fill columns in CSS",desc:"The whole point of auto-fit and auto-fill is that you aren't saying how many columns to use. But if you knew how many the browser chose, you can make nice design decisions.",url:"https://frontendmasters.com/blog/count-auto-fill-columns/",logo:"https://frontendmasters.com/favicon.ico",preview:"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/6567"}),s[91]||(s[91]=e('<p><a href="https://gist.github.com/thebabydino/645471b8aa19fb1164e512962b6c4f0f/raw/d4ad52fef89cfaa2207882f7a6078a9779a2de34/number-of-auto-fit-columns.md" target="_blank" rel="noopener noreferrer"></a></p><p>Ever wanted to get the number of <code>auto-fit</code>/<code>auto-fill</code> columns in a grid? For example, because you want to highlight just the items in the first or last row or column? Do something special just for even or for odd rows or columns (e.g. zebra striping)? Or for any one specific row or column? Create responsive non-rectangular grids? And all of this with zero breakpoints?</p><p>This is all doable with pure CSS by using container query units, CSS variables, and CSS mathematical functions! Of course, it also involves navigating browser bugs and support gaps. But at the end of the day, it is possible to do it cross-browser!</p><p>Let’s see how!</p><hr><h2 id="the-basic-idea" tabindex="-1"><a class="header-anchor" href="#the-basic-idea"><span>The Basic Idea</span></a></h2><h3 id="setup" tabindex="-1"><a class="header-anchor" href="#setup"><span>Setup</span></a></h3>',7)),n("p",null,[s[11]||(s[11]=a("We start with a ")),s[12]||(s[12]=n("code",null,".grid",-1)),s[13]||(s[13]=a(" with a lot of items, let’s say ")),s[14]||(s[14]=n("code",null,"100",-1)),s[15]||(s[15]=a(". I normally prefer to generate them in a loop using a preprocessor to avoid clutter in the HTML and to make it easy to change their number, but it’s also possible to do so using Emmet. For the demos illustrating the concept here, we’re using ")),n("a",C,[t(c,{icon:"iconfont icon-pug"}),s[10]||(s[10]=a("Pug"))]),s[16]||(s[16]=a(", and also numbering our items via their text content:"))]),s[92]||(s[92]=e(`<div class="language-pug line-numbers-mode" data-highlighter="prismjs" data-ext="pug"><pre><code class="language-pug"><span class="line"><span class="token tag"><span class="token attr-class">.grid</span></span> <span class="token plain-text"> </span></span>
<span class="line">  <span class="token punctuation">-</span><span class="token code"> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  </span></span>
<span class="line">    <span class="token tag"><span class="token attr-class">.item</span></span> <span class="token plain-text">#{i + 1}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Our <code>.grid</code> has <code>auto-fit</code> columns:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.grid</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">--u</span><span class="token punctuation">:</span> 7em<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span>auto-fit<span class="token punctuation">,</span> <span class="token function">var</span><span class="token punctuation">(</span>--u<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">container-type</span><span class="token punctuation">:</span> inline-size</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This means our <code>.grid</code> has as many columns of unit width <code>u</code> as can fit within its own <code>content-box</code> width. This width is flexible and is given by the page layout, we don’t know it. However, its children (the <code>.item</code> elements) can know it as <code>100cqw</code> in container query units. To have these container units available for the <code>.grid</code> element’s children (and pseudos), we’ve made the <code>.grid</code> an inline container.</p>`,4)),n("p",null,[s[18]||(s[18]=a("This ")),s[19]||(s[19]=n("em",null,"should",-1)),s[20]||(s[20]=a(" work just fine. And it does, in both Chrome and Firefox. However, if we try it out in Safari, we see our ")),s[21]||(s[21]=n("code",null,".grid",-1)),s[22]||(s[22]=a(" is collapsed into a point. Unfortunately, in Safari, ")),s[23]||(s[23]=n("code",null,"auto-fit",-1)),s[24]||(s[24]=a(" grids break if they are also containers. (Note: this ")),n("a",q,[t(c,{icon:"iconfont icon-webkit"}),s[17]||(s[17]=a("Safari bug is actually fixed"))]),s[25]||(s[25]=a(", it’s just waiting to make it’s way to a stable release.)"))]),s[93]||(s[93]=n("p",null,"We have two options in this case.",-1)),n("p",null,[s[29]||(s[29]=a("The first would be to replace ")),s[30]||(s[30]=n("code",null,"auto-fit",-1)),s[31]||(s[31]=a(" with ")),s[32]||(s[32]=n("code",null,"auto-fill",-1)),s[33]||(s[33]=a(". When we have as many items as we do in this case, we can use either of them, the difference between them is only noticeable ")),n("a",z,[s[26]||(s[26]=a("when we don’t even have enough items to fill one row (")),t(c,{icon:"fa-brands fa-codepen"}),s[27]||(s[27]=n("code",null,"thebabydino",-1)),s[28]||(s[28]=a(")"))]),s[34]||(s[34]=a("."))]),s[94]||(s[94]=e(`<div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.grid</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">--u</span><span class="token punctuation">:</span> 7em<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span>auto-fill<span class="token punctuation">,</span> <span class="token function">var</span><span class="token punctuation">(</span>--u<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">container-type</span><span class="token punctuation">:</span> inline-size</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The second would be to put the <code>.grid</code> inside a wrapper <code>.wrap</code> element and move the <code>container</code> property on the wrapper.</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.wrap</span> <span class="token punctuation">{</span> <span class="token property">container-type</span><span class="token punctuation">:</span> inline-size <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token selector">.grid</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">--u</span><span class="token punctuation">:</span> 7em<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span>auto-fit<span class="token punctuation">,</span> <span class="token function">var</span><span class="token punctuation">(</span>--u<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We’re going for the first option here.</p><p>Now we’re getting to the interesting part!</p><h3 id="getting-the-number-of-columns" tabindex="-1"><a class="header-anchor" href="#getting-the-number-of-columns"><span>Getting the number of columns</span></a></h3><p>In theory, we could get the number <code>n</code> of columns on the <code>.item</code> children of the <code>.grid</code> via division, whose result we round down (if the container width of <code>100cqw</code> is 2.23 times the unit width <code>u</code> of a column, then we round down this ratio to get the number of columns we can fit, which is 2 in this case):</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token property">--n</span><span class="token punctuation">:</span> <span class="token function">round</span><span class="token punctuation">(</span>down<span class="token punctuation">,</span> 100cqw/<span class="token function">var</span><span class="token punctuation">(</span>--u<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,8)),n("p",null,[s[38]||(s[38]=a("In practice, while this ")),s[39]||(s[39]=n("em",null,"should",-1)),s[40]||(s[40]=a(" work, it only works in Safari (since ")),n("a",D,[t(c,{icon:"iconfont icon-webkit"}),s[35]||(s[35]=a("Sept 2024"))]),s[41]||(s[41]=a(") in Chrome (since ")),n("a",O,[t(c,{icon:"fa-brands fa-chrome"}),s[36]||(s[36]=a("June 2025"))]),s[42]||(s[42]=a("), and where we can test it out by displaying it using ")),n("a",A,[t(c,{icon:"fa-brands fa-stack-overflow"}),s[37]||(s[37]=a("the counter hack"))]),s[43]||(s[43]=a(":"))]),s[95]||(s[95]=e(`<div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.grid::before</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">--n</span><span class="token punctuation">:</span> <span class="token function">round</span><span class="token punctuation">(</span>down<span class="token punctuation">,</span> 100cqw/<span class="token function">var</span><span class="token punctuation">(</span>--u<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token property">counter-reset</span><span class="token punctuation">:</span> n <span class="token function">var</span><span class="token punctuation">(</span>--n<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token function">counter</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We’ve wrapped this inside a <code>@supports</code> block so we have a message that lets us know about this failing in non-supporting browsers (basically Firefox), where we see the following:</p><figure><img src="https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/07/458856822-01b5ed8e-2dc6-42d4-86e4-a0bf73c184fe.png?resize=1024%2C512&amp;ssl=1" alt="the result in non-supporting browsers: no number of columns can be computed" tabindex="0" loading="lazy"><figcaption>the result in non-supporting browsers: no number of columns can be computed</figcaption></figure><p>In Safari and Chrome, things look like in the recording below:</p>`,4)),t(v,{src:"videopress/6c8d173a-0c31-4fae-a55c-6b2978581e61"}),s[96]||(s[96]=e(`<p>We can see we have a problem when we have one column and it overflows the parent: the ratio between the parent <code>.grid</code> width of <code>100cqw</code> and the column unit width <code>u</code> drops below <code>1</code>, so we can fit one item <code>0</code> times inside the <code>content-box</code> width of the <code>.grid</code>. And this is reflected in the <code>n</code> value, even though, in practice, we cannot have a grid with less than one column. However, the fix for this is simple: use a <code>max()</code> function to make sure <code>n</code> is always at least <code>1</code>.</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token property">--n</span><span class="token punctuation">:</span> <span class="token function">max</span><span class="token punctuation">(</span>1<span class="token punctuation">,</span> <span class="token function">round</span><span class="token punctuation">(</span>down<span class="token punctuation">,</span> 100cqw/<span class="token function">var</span><span class="token punctuation">(</span>--u<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Whenever the division result drops below <code>1</code>, the result of the <code>max()</code> function isn’t the <code>round()</code> value anymore, but <code>1</code> instead.</p><p>You can see it in action in demo below, but keep in mind it can only compute the number of columns in supporting browsers (Safari/Chrome):</p>`,4)),t(o,{user:"thebabydino","slug-hash":"zxGyRZX",title:"number of auto-fill columns using length division, no Firefox","default-tab":["css","result"],theme:p.$isDarkmode?"dark":"light"},null,8,["theme"]),n("p",null,[s[45]||(s[45]=a("Great, but what Firefox? The ")),n("a",I,[t(c,{icon:"fa-brands fa-firefox"}),s[44]||(s[44]=a("Firefox bug"))]),s[46]||(s[46]=a(" looks like it’s dormant, so we cannot get the ratio between two length values there."))]),s[97]||(s[97]=n("h3",{id:"extending-support",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#extending-support"},[n("span",null,"Extending support")])],-1)),n("p",null,[s[50]||(s[50]=a("However, we have ")),n("a",N,[s[47]||(s[47]=a("a clever hack (")),t(c,{icon:"fa-brands fa-dev"}),s[48]||(s[48]=n("code",null,"janeori",-1)),s[49]||(s[49]=a(")"))]),s[51]||(s[51]=a(" to solve the problem!"))]),s[98]||(s[98]=e(`<p>The idea behind is the following: the tangent of an acute angle in a right triangle is the ratio between the length of the cathetus opposing the angle and the length of the cathetus adjacent to it. So basically, the tangent is a ratio between two length values and <em>such a ratio is precisely what we need</em>.</p><figure><img src="https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/07/458914425-90bc6a99-75b9-48c9-ab0d-3e7b48358589.png?resize=1024%2C527&amp;ssl=1" alt="basic trigonometry recap" tabindex="0" loading="lazy"><figcaption>basic trigonometry recap</figcaption></figure><p>Now you may be wondering what right triangle and what angle do we even have here. Well, we can imagine building a triangle where a cathetus has the same length as the <code>.grid</code> parent’s <code>content-box</code> width (<code>100cqw</code> on the <code>.item</code> elements, which we’ll call <code>w</code>) and the other has the same length as the column unit width (<code>u</code>).</p><p>The tangent of the angle opposing the cathetus of length <code>w</code> is the ratio between <code>w</code> and <code>u</code>. Okay, but what is this angle?</p><figure><img src="https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/07/458929259-01f2a7cf-dd36-4c3a-9230-d0f0e1dcd6ba.png?resize=1024%2C512&amp;ssl=1" alt="using trigonometric functions to get around browser support gaps" tabindex="0" loading="lazy"><figcaption>using trigonometric functions to get around browser support gaps</figcaption></figure><p>We can get this angle using the <code>atan2()</code> function, which takes two arguments, the length of the opposing cathetus <code>w</code> and the length of the adjacent cathetus <code>u</code>:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token property">--a</span><span class="token punctuation">:</span> <span class="token function">atan2</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--w<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">var</span><span class="token punctuation">(</span>--u<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Having the angle <code>a</code> and knowing that the ratio <code>f</code> between <code>w</code> and <code>u</code> is the tangent of this angle, we can write:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token property">--f</span><span class="token punctuation">:</span> <span class="token function">tan</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--a<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Or, replacing the angle in the formula:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token property">--f</span><span class="token punctuation">:</span> <span class="token function">tan</span><span class="token punctuation">(</span><span class="token function">atan2</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--w<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">var</span><span class="token punctuation">(</span>--u<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>In general, know that a length ratio like <code>w/u</code> can always be computed as <code>tan(atan2(w, u))</code>.</p><p>Rounding down this ratio <code>f</code> gives us the number of columns of unit width <code>u</code> that fit within the <code>.grid</code> parent’s <code>content-box</code> width <code>w</code>.</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token property">--n</span><span class="token punctuation">:</span> <span class="token function">round</span><span class="token punctuation">(</span>down<span class="token punctuation">,</span> <span class="token function">var</span><span class="token punctuation">(</span>--f<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>So we can write it all as follows, introducing also the correction that the number of columns needs to be at least <code>1</code>:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token property">--f</span><span class="token punctuation">:</span> <span class="token function">tan</span><span class="token punctuation">(</span><span class="token function">atan2</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--w<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">var</span><span class="token punctuation">(</span>--u<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token property">--n</span><span class="token punctuation">:</span> <span class="token function">max</span><span class="token punctuation">(</span>1<span class="token punctuation">,</span> <span class="token function">round</span><span class="token punctuation">(</span>down<span class="token punctuation">,</span> <span class="token function">var</span><span class="token punctuation">(</span>--f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,16)),n("p",null,[s[53]||(s[53]=a("That’s it, that’s the formula for ")),s[54]||(s[54]=n("code",null,"--n",-1)),s[55]||(s[55]=a(" in the case when we don’t have support for getting the ratio of two length values! There is one catch, though: both ")),s[56]||(s[56]=n("code",null,"--w",-1)),s[57]||(s[57]=a(" and ")),s[58]||(s[58]=n("code",null,"--u",-1)),s[59]||(s[59]=a(" have to be registered as lengths in order for ")),s[60]||(s[60]=n("code",null,"atan2()",-1)),s[61]||(s[61]=a()),n("a",P,[t(c,{icon:"fas fa-globe"}),s[52]||(s[52]=a("to work properly"))]),s[62]||(s[62]=a("!"))]),s[99]||(s[99]=e(`<p>Putting it all together, the relevant code for our demo looks as follows:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.grid</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">--u</span><span class="token punctuation">:</span> 7em<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span>auto-fill<span class="token punctuation">,</span> <span class="token function">var</span><span class="token punctuation">(</span>--u<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">container-type</span><span class="token punctuation">:</span> inline-size</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token selector">.grid::before, .item</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">--w</span><span class="token punctuation">:</span> 100cqw<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">--f</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--w<span class="token punctuation">)</span>/<span class="token function">var</span><span class="token punctuation">(</span>--u<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">--n</span><span class="token punctuation">:</span> <span class="token function">max</span><span class="token punctuation">(</span>1<span class="token punctuation">,</span> <span class="token function">round</span><span class="token punctuation">(</span>down<span class="token punctuation">,</span> <span class="token function">var</span><span class="token punctuation">(</span>--f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token atrule"><span class="token rule">@supports</span> <span class="token keyword">not</span> <span class="token punctuation">(</span><span class="token property">scale</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>100cqh/3lh<span class="token punctuation">)</span><span class="token punctuation">)</span></span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token atrule"><span class="token rule">@property</span> --w</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">syntax</span><span class="token punctuation">:</span> <span class="token string">&#39;&lt;length-percentage&gt;&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token property">initial-value</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span></span>
<span class="line">    <span class="token property">inherits</span><span class="token punctuation">:</span> true</span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token atrule"><span class="token rule">@property</span> --u</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">syntax</span><span class="token punctuation">:</span> <span class="token string">&#39;&lt;length-percentage&gt;&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token property">initial-value</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span></span>
<span class="line">    <span class="token property">inherits</span><span class="token punctuation">:</span> true</span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token selector">.grid::before, .item</span> <span class="token punctuation">{</span> <span class="token property">--f</span><span class="token punctuation">:</span> <span class="token function">tan</span><span class="token punctuation">(</span><span class="token function">atan2</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--w<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">var</span><span class="token punctuation">(</span>--u<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Note that the <code>.grid</code> pseudo is only needed to display the <code>--n</code> value (using the counter hack) for us to see in the demo without having to register it and then look for it in DevTools (which is the tactic I most commonly use to check the computed value of a CSS variable).</p>`,3)),t(o,{user:"thebabydino","slug-hash":"MYwZzrY",title:"number of auto-fill columns with fallback for length division #1: glitch","default-tab":["css","result"],theme:p.$isDarkmode?"dark":"light"},null,8,["theme"]),s[100]||(s[100]=e(`<p>Almost there, but not exactly.</p><h3 id="fixing-tiny-issues" tabindex="-1"><a class="header-anchor" href="#fixing-tiny-issues"><span>Fixing tiny issues</span></a></h3><p>If you’ve played with resizing the demo above, you may have noticed something is off in Firefox at times. At certain points when the <code>.grid</code> element’s <code>content-box</code> width <code>w</code> is a multiple of the unit column width <code>u</code>, for example, when <code>w</code> computes to <code>1008px</code> and the unit column with <code>u</code> of <code>112px</code> fits inside it exactly <code>9</code> times, Firefox somehow computes the number of columns as being smaller (<code>8</code> instead of <code>9</code>, in this example).</p><p>My first guess was this is probably due to some rounding errors in getting the angle via <code>atan2()</code> and then going back from an angle to a ratio using <code>tan()</code>. Indeed, if we register <code>--f</code> so we can see its value in DevTools, it’s displayed as <code>8.99999</code> in this case, even though <code>1008px/112px</code> is exactly <code>9</code>.</p><figure><img src="https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/07/458947888-cb10b290-d1e2-4ea6-b918-64732facca70.png?resize=1024%2C689&amp;ssl=1" alt="rounding error caught by Firefox DevTools" tabindex="0" loading="lazy"><figcaption>rounding error caught by Firefox DevTools</figcaption></figure><p>So this means rounding down <code>f</code> results in the number of columns <code>n</code> being computed as <code>8</code>, even though it’s actually <code>9</code>. Hmm, in this case, it might be better to round <code>f</code> to a tiny precision of <code>.00001</code> <em>before</em> rounding it down to get the number of columns <code>n</code>:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token property">--f</span><span class="token punctuation">:</span> <span class="token function">round</span><span class="token punctuation">(</span><span class="token function">tan</span><span class="token punctuation">(</span><span class="token function">atan2</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--w<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">var</span><span class="token punctuation">(</span>--u<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> .00001<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>This seems to get the job done.</p>`,8)),t(o,{user:"thebabydino","slug-hash":"ZYGVwLM",title:"number of auto-fill columns with fallback for length division #2: glitch fix","default-tab":["css","result"],theme:p.$isDarkmode?"dark":"light"},null,8,["theme"]),s[101]||(s[101]=e(`<p>Still, I’m a bit worried this still might fail in certain scenarios, even though I’ve kept resizing obsessively in Firefox and haven’t encountered any problems after rounding <code>f</code>.</p><p>So let’s make sure we’re on the safe side and place the <code>.grid</code> in a wrapper <code>.wrap</code>, make this wrapper the <code>container</code>, compute the number of columns <code>n</code> on the <code>.grid</code> and use it to set the <code>grid-template-columns</code>. This way, the essential CSS becomes:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.wrap</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">container-size</span><span class="token punctuation">:</span> inline-type<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token selector">.grid</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">--w</span><span class="token punctuation">:</span> 100cqw<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">--u</span><span class="token punctuation">:</span> 7em<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">--f</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--w<span class="token punctuation">)</span> / <span class="token function">var</span><span class="token punctuation">(</span>--u<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">--n</span><span class="token punctuation">:</span> <span class="token function">max</span><span class="token punctuation">(</span>1<span class="token punctuation">,</span> <span class="token function">round</span><span class="token punctuation">(</span>down<span class="token punctuation">,</span> <span class="token function">var</span><span class="token punctuation">(</span>--f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--n<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">var</span><span class="token punctuation">(</span>--u<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token atrule"><span class="token rule">@supports</span> <span class="token keyword">not</span> <span class="token punctuation">(</span><span class="token property">scale</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>100cqh / 3lh<span class="token punctuation">)</span><span class="token punctuation">)</span></span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token atrule"><span class="token rule">@property</span> --w</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">syntax</span><span class="token punctuation">:</span> <span class="token string">&quot;&lt;length-percentage&gt;&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token property">initial-value</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span></span>
<span class="line">    <span class="token property">inherits</span><span class="token punctuation">:</span> true<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token atrule"><span class="token rule">@property</span> --u</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">syntax</span><span class="token punctuation">:</span> <span class="token string">&quot;&lt;length-percentage&gt;&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token property">initial-value</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span></span>
<span class="line">    <span class="token property">inherits</span><span class="token punctuation">:</span> true<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token selector">.grid</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">--f</span><span class="token punctuation">:</span> <span class="token function">round</span><span class="token punctuation">(</span><span class="token function">tan</span><span class="token punctuation">(</span><span class="token function">atan2</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--w<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">var</span><span class="token punctuation">(</span>--u<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 0.00001<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Note that we may also use <code>1fr</code> instead of <code>var(--u)</code> for the <code>grid-template-columns</code> property if we want the <code>.item</code> elements to stretch.</p>`,4)),t(o,{user:"thebabydino","slug-hash":"PwqXVBK",title:"number of columns fitting with fallback for length division #3: bulletproof","default-tab":["css","result"],theme:p.$isDarkmode?"dark":"light"},null,8,["theme"]),s[102]||(s[102]=n("hr",null,null,-1)),s[103]||(s[103]=n("h2",{id:"mind-the-gap",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#mind-the-gap"},[n("span",null,[a("Mind the "),n("code",null,"gap")])])],-1)),s[104]||(s[104]=n("p",null,"Nice, but oftentimes we also want to have a gap in between our rows and columns, so let’s see how the number of columns can be computed in that case.",-1)),s[105]||(s[105]=n("p",null,[a("Whenever we have "),n("code",null,"n"),a(" columns, we have "),n("code",null,"n - 1"),a(" gaps in between them.")],-1)),t(o,{user:"thebabydino","slug-hash":"LEVqOpZ",title:"Gaps for n columns","default-tab":["css","result"],theme:p.$isDarkmode?"dark":"light"},null,8,["theme"]),s[106]||(s[106]=e('<p>This means that <code>n</code> times the unit column width plus <code>(n - 1)</code> times the gap space adds up to the container’s <code>content-box</code> width:</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>n</mi><mo>×</mo><mi>u</mi><mo>+</mo><mrow><mo fence="true">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo fence="true">)</mo></mrow><mo>×</mo><mi>s</mi><mo>=</mo><mi>w</mi></mrow><annotation encoding="application/x-tex">n\\times{u}+\\left(n-1\\right)\\times{s}=w </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord mathnormal">u</span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord"><span class="mord mathnormal">s</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span></span></span></span></span></p><p>If we add <code>s</code> on both sides in the equation above, we get:</p>',3)),s[107]||(s[107]=n("p",{class:"katex-block"},[n("span",{class:"katex-display"},[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[n("semantics",null,[n("mtable",{rowspacing:"0.25em",columnalign:"right left right left right left",columnspacing:"0em 1em 0em 1em 0em"},[n("mtr",null,[n("mtd",null,[n("mstyle",{scriptlevel:"0",displaystyle:"true"},[n("mrow",null,[n("mi",null,"n"),n("mo",null,"×"),n("mi",null,"u"),n("mo",null,"+"),n("mrow",null,[n("mo",{fence:"true"},"("),n("mi",null,"n"),n("mo",null,"−"),n("mn",null,"1"),n("mo",{fence:"true"},")")]),n("mo",null,"×"),n("mi",null,"s"),n("mo",null,"+"),n("mi",null,"s")])])]),n("mtd",null,[n("mstyle",{scriptlevel:"0",displaystyle:"true"},[n("mrow",null,[n("mrow"),n("mo",null,"="),n("mi",null,"w"),n("mo",null,"+"),n("mi",null,"s"),n("mi",null,"n"),n("mo",null,"×"),n("mi",null,"u"),n("mo",null,"+"),n("mi",null,"n"),n("mo",null,"×"),n("mi",null,"s"),n("mo",null,"−"),n("mi",null,"s"),n("mo",null,"+"),n("mi",null,"s")])])]),n("mtd",null,[n("mstyle",{scriptlevel:"0",displaystyle:"true"},[n("mrow",null,[n("mo",null,"="),n("mi",null,"w"),n("mo",null,"+"),n("mi",null,"s"),n("mi",null,"n"),n("mo",null,"×"),n("mi",null,"u"),n("mo",null,"+"),n("mi",null,"n"),n("mo",null,"×"),n("mi",null,"s")])])]),n("mtd",null,[n("mstyle",{scriptlevel:"0",displaystyle:"true"},[n("mrow",null,[n("mrow"),n("mo",null,"="),n("mi",null,"w"),n("mo",null,"+"),n("mi",null,"s"),n("mi",null,"n"),n("mo",null,"×"),n("mrow",null,[n("mo",{fence:"true"},"("),n("mi",null,"u"),n("mo",null,"+"),n("mi",null,"s"),n("mo",{fence:"true"},")")])])])]),n("mtd",null,[n("mstyle",{scriptlevel:"0",displaystyle:"true"},[n("mrow",null,[n("mo",null,"="),n("mi",null,"w"),n("mo",null,"+"),n("mi",null,"s"),n("mi",null,"n")])])]),n("mtd",null,[n("mstyle",{scriptlevel:"0",displaystyle:"true"},[n("mrow",null,[n("mrow"),n("mo",null,"="),n("mfrac",null,[n("mrow",null,[n("mo",{fence:"true"},"("),n("mi",null,"w"),n("mo",null,"+"),n("mi",null,"s"),n("mo",{fence:"true"},")")]),n("mrow",null,[n("mo",{fence:"true"},"("),n("mi",null,"u"),n("mo",null,"+"),n("mi",null,"s"),n("mo",{fence:"true"},")")])])])])])])]),n("annotation",{encoding:"application/x-tex"},"\\begin{align*} n\\times{u}+\\left(n-1\\right)\\times{s}+s&=w+s n\\times{u}+n\\times{s}-s+s&=w+s n\\times{u}+n\\times{s}&=w+s n\\times\\left(u+s\\right)&=w+s n&=\\frac{\\left(w+s\\right)}{\\left(u+s\\right)} \\end{align*} ")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"2.663em","vertical-align":"-1.0815em"}}),n("span",{class:"mord"},[n("span",{class:"mtable"},[n("span",{class:"col-align-r"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"1.5815em"}},[n("span",{style:{top:"-3.5815em"}},[n("span",{class:"pstrut",style:{height:"3.427em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"×"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"u")]),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"minner"},[n("span",{class:"mopen delimcenter",style:{top:"0em"}},"("),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"−"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mord"},"1"),n("span",{class:"mclose delimcenter",style:{top:"0em"}},")")]),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"×"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"s")]),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mord mathnormal"},"s")])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"1.0815em"}},[n("span")])])])]),n("span",{class:"col-align-l"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"1.5815em"}},[n("span",{style:{top:"-3.5815em"}},[n("span",{class:"pstrut",style:{height:"3.427em"}}),n("span",{class:"mord"},[n("span",{class:"mord"}),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"="),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02691em"}},"w"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mord mathnormal"},"s"),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"×"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"u")]),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"×"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"s")]),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"−"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mord mathnormal"},"s"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mord mathnormal"},"s")])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"1.0815em"}},[n("span")])])])]),n("span",{class:"arraycolsep",style:{width:"1em"}}),n("span",{class:"col-align-r"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"1.5815em"}},[n("span",{style:{top:"-3.5815em"}},[n("span",{class:"pstrut",style:{height:"3.427em"}}),n("span",{class:"mord"},[n("span",{class:"mrel"},"="),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02691em"}},"w"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mord mathnormal"},"s"),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"×"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"u")]),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"×"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"s")])])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"1.0815em"}},[n("span")])])])]),n("span",{class:"col-align-l"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"1.5815em"}},[n("span",{style:{top:"-3.5815em"}},[n("span",{class:"pstrut",style:{height:"3.427em"}}),n("span",{class:"mord"},[n("span",{class:"mord"}),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"="),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02691em"}},"w"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mord mathnormal"},"s"),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"×"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"minner"},[n("span",{class:"mopen delimcenter",style:{top:"0em"}},"("),n("span",{class:"mord mathnormal"},"u"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mord mathnormal"},"s"),n("span",{class:"mclose delimcenter",style:{top:"0em"}},")")])])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"1.0815em"}},[n("span")])])])]),n("span",{class:"arraycolsep",style:{width:"1em"}}),n("span",{class:"col-align-r"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"1.5815em"}},[n("span",{style:{top:"-3.5815em"}},[n("span",{class:"pstrut",style:{height:"3.427em"}}),n("span",{class:"mord"},[n("span",{class:"mrel"},"="),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02691em"}},"w"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mord mathnormal"},"s"),n("span",{class:"mord mathnormal"},"n")])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"1.0815em"}},[n("span")])])])]),n("span",{class:"col-align-l"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"1.5815em"}},[n("span",{style:{top:"-3.5815em"}},[n("span",{class:"pstrut",style:{height:"3.427em"}}),n("span",{class:"mord"},[n("span",{class:"mord"}),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"="),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mord"},[n("span",{class:"mopen nulldelimiter"}),n("span",{class:"mfrac"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"1.427em"}},[n("span",{style:{top:"-2.314em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"mord"},[n("span",{class:"minner"},[n("span",{class:"mopen delimcenter",style:{top:"0em"}},"("),n("span",{class:"mord mathnormal"},"u"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mord mathnormal"},"s"),n("span",{class:"mclose delimcenter",style:{top:"0em"}},")")])])]),n("span",{style:{top:"-3.23em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),n("span",{style:{top:"-3.677em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"mord"},[n("span",{class:"minner"},[n("span",{class:"mopen delimcenter",style:{top:"0em"}},"("),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02691em"}},"w"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mord mathnormal"},"s"),n("span",{class:"mclose delimcenter",style:{top:"0em"}},")")])])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.936em"}},[n("span")])])])]),n("span",{class:"mclose nulldelimiter"})])])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"1.0815em"}},[n("span")])])])])])])])])])])],-1)),s[108]||(s[108]=e(`<p>Putting this into CSS, our ratio looks as follows:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--w<span class="token punctuation">)</span> + <span class="token function">var</span><span class="token punctuation">(</span>--s<span class="token punctuation">)</span><span class="token punctuation">)</span> / <span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--u<span class="token punctuation">)</span> + <span class="token function">var</span><span class="token punctuation">(</span>--s<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Note that in our case, it’s the fraction <code>f</code> that we compute this way before we round it to get the number of items <code>n</code> and ensure <code>n</code> is always at least <code>1</code>.</p><p>Also note that the CSS variables we need to register for the no <code>calc()</code> length division fallback are the numerator and denominator of this fraction. So our essential CSS becomes:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.wrap</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">container-size</span><span class="token punctuation">:</span> inline-type<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token selector">.grid</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">--w</span><span class="token punctuation">:</span> 100cqw<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">--u</span><span class="token punctuation">:</span> 7em<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">--s</span><span class="token punctuation">:</span> 3vmin<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">--p</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--w<span class="token punctuation">)</span> + <span class="token function">var</span><span class="token punctuation">(</span>--s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* numerator */</span></span>
<span class="line">  <span class="token property">--q</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--u<span class="token punctuation">)</span> + <span class="token function">var</span><span class="token punctuation">(</span>--s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* denominator */</span></span>
<span class="line">  <span class="token property">--f</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--p<span class="token punctuation">)</span> / <span class="token function">var</span><span class="token punctuation">(</span>--q<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">--n</span><span class="token punctuation">:</span> <span class="token function">max</span><span class="token punctuation">(</span>1<span class="token punctuation">,</span> <span class="token function">round</span><span class="token punctuation">(</span>down<span class="token punctuation">,</span> <span class="token function">var</span><span class="token punctuation">(</span>--f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">grid-gap</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--s<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--n<span class="token punctuation">)</span><span class="token punctuation">,</span> 1fr<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token atrule"><span class="token rule">@supports</span> <span class="token keyword">not</span> <span class="token punctuation">(</span><span class="token property">scale</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>100cqh / 3lh<span class="token punctuation">)</span><span class="token punctuation">)</span></span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token atrule"><span class="token rule">@property</span> --p</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">/* numerator */</span></span>
<span class="line">    <span class="token property">syntax</span><span class="token punctuation">:</span> <span class="token string">&quot;&lt;length-percentage&gt;&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token property">initial-value</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span></span>
<span class="line">    <span class="token property">inherits</span><span class="token punctuation">:</span> true<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token atrule"><span class="token rule">@property</span> --q</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">/* denominator */</span></span>
<span class="line">    <span class="token property">syntax</span><span class="token punctuation">:</span> <span class="token string">&quot;&lt;length-percentage&gt;&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token property">initial-value</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span></span>
<span class="line">    <span class="token property">inherits</span><span class="token punctuation">:</span> true<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token selector">.grid</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">--f</span><span class="token punctuation">:</span> <span class="token function">round</span><span class="token punctuation">(</span><span class="token function">tan</span><span class="token punctuation">(</span><span class="token function">atan2</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--p<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">var</span><span class="token punctuation">(</span>--q<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 0.00001<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5)),t(o,{user:"thebabydino","slug-hash":"QwbYWrX",title:"number of columns fitting, gap case + fallback","default-tab":["css","result"],theme:p.$isDarkmode?"dark":"light"},null,8,["theme"]),s[109]||(s[109]=e(`<hr><h2 id="let-s-go-wild" tabindex="-1"><a class="header-anchor" href="#let-s-go-wild"><span>Let’s Go Wild!</span></a></h2><p>And let’s see where we can use this!</p><h3 id="highlighting-items-on-a-certain-column" tabindex="-1"><a class="header-anchor" href="#highlighting-items-on-a-certain-column"><span>Highlighting items on a certain column</span></a></h3><p>In order to do something like this, we use the item indices. Once <code>sibling-index()</code> is supported cross-browser, we’ll be able to do this:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.item</span> <span class="token punctuation">{</span> <span class="token property">--i</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">sibling-index</span><span class="token punctuation">(</span><span class="token punctuation">)</span> - 1<span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Note that we need to subtract <code>1</code> because <code>sibling-index()</code> is <code>1</code>-based and we need our index <code>i</code> to be <code>0</code>-based for modulo and division purposes.</p><p>Until then, we add these indices in <code>style</code> attributes when generating the HTML:</p><div class="language-pug line-numbers-mode" data-highlighter="prismjs" data-ext="pug"><pre><code class="language-pug"><span class="line"><span class="token tag"><span class="token attr-class">.grid</span></span> <span class="token plain-text"> </span></span>
<span class="line">  <span class="token punctuation">-</span><span class="token code"> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  </span></span>
<span class="line">    <span class="token tag"><span class="token attr-class">.item</span><span class="token attributes"><span class="token punctuation">(</span><span class="token attr-name">style</span><span class="token punctuation">=</span><span class="token attr-value"><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">--i: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token number">0</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span></span><span class="token punctuation">)</span></span></span> <span class="token plain-text">#{i + 1}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9)),n("p",null,[s[64]||(s[64]=a("Let’s say we want to highlight the items on the first column. We get the number of columns ")),s[65]||(s[65]=n("code",null,"n",-1)),s[66]||(s[66]=a(" just like before. An item is on the first column if ")),s[67]||(s[67]=n("code",null,"i%n",-1)),s[68]||(s[68]=a(" (which gives us the ")),s[69]||(s[69]=n("code",null,"0",-1)),s[70]||(s[70]=a("-based index of the column an item of index ")),s[71]||(s[71]=n("code",null,"i",-1)),s[72]||(s[72]=a(" is on) is ")),s[73]||(s[73]=n("code",null,"0",-1)),s[74]||(s[74]=a(". Now given I used the word ")),s[75]||(s[75]=n("em",null,"if",-1)),s[76]||(s[76]=a(" there, you might be thinking about ")),t(d,{to:"/css-tricks.com/lightly-poking-at-the-css-if-function-in-chrome-137.html"},{default:l(()=>s[63]||(s[63]=[n("strong",null,[a("the new CSS "),n("code",null,"if()"),a(" function")],-1)])),_:1,__:[63]}),s[77]||(s[77]=a(". However, we have a way better supported method here."))]),s[110]||(s[110]=e(`<p>If the column index <code>i%n</code> is <code>0</code>, then <code>min(1, i%n)</code> is <code>0</code>. If the column index <code>i%n</code> isn’t <code>0</code>, then <code>min(1, i%n)</code> is <code>1</code>. So we can do the following:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.item</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">--nay</span><span class="token punctuation">:</span> <span class="token function">min</span><span class="token punctuation">(</span>1<span class="token punctuation">,</span> <span class="token function">mod</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">var</span><span class="token punctuation">(</span>--n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* 1 if NOT on the first column */</span></span>
<span class="line">  <span class="token property">--yay</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>1 - <span class="token function">var</span><span class="token punctuation">(</span>--nay<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* 1 if on the first column! */</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2)),n("p",null,[s[79]||(s[79]=a("So then we can use ")),s[80]||(s[80]=n("code",null,"--yay",-1)),s[81]||(s[81]=a(" to highlight the items on the first column by ")),t(d,{to:"/css-tricks.com/dry-switching-with-css-variables-the-difference-of-one-declaration.html"},{default:l(()=>s[78]||(s[78]=[n("strong",null,"styling them differently",-1)])),_:1,__:[78]}),s[82]||(s[82]=a(", for example by giving them a different ")),s[83]||(s[83]=n("code",null,"background",-1)),s[84]||(s[84]=a(":"))]),s[111]||(s[111]=e(`<div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.item</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">--nay</span><span class="token punctuation">:</span> <span class="token function">min</span><span class="token punctuation">(</span>1<span class="token punctuation">,</span> <span class="token function">mod</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">var</span><span class="token punctuation">(</span>--n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* 1 if NOT on the first column */</span></span>
<span class="line">  <span class="token property">--yay</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>1 - <span class="token function">var</span><span class="token punctuation">(</span>--nay<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* 1 if on the first column! */</span></span>
<span class="line"></span>
<span class="line">  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">color-mix</span><span class="token punctuation">(</span>in srgb<span class="token punctuation">,</span> #fcbf49 <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--yay<span class="token punctuation">)</span>*100%<span class="token punctuation">)</span><span class="token punctuation">,</span> #dedede<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can see it in action in the live demo below:</p>`,2)),t(o,{user:"thebabydino","slug-hash":"gbpqaXK",title:"highlight first variable grid column, no breakpoints","default-tab":["css","result"],theme:p.$isDarkmode?"dark":"light"},null,8,["theme"]),s[112]||(s[112]=n("p",null,[a("Now let’s say we want to highlight the items on the last column. In this case, the column index "),n("code",null,"i%n"),a(" is "),n("code",null,"n - 1"),a(", which means that their difference is "),n("code",null,"0"),a(":")],-1)),u(" TODO: LaTeX 로 표현 "),s[113]||(s[113]=e(`<p class="katex-block"><span class="katex-error" title="ParseError: KaTeX parse error: Expected &#39;\\right&#39;, got &#39;EOF&#39; at end of input: …t(i%n\\right)=0
" style="color:#cc0000;">\\left(n-1\\right)-\\left(i%n\\right)=0 </span></p><p>Using this, we can do something very similar to what we did before, as the minimum between <code>1</code> and this difference is <code>0</code> for items on the last column and <code>1</code> for those that aren’t on the last column:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.item</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">/* 1 if NOT on the last column */</span></span>
<span class="line">  <span class="token property">--nay</span><span class="token punctuation">:</span> <span class="token function">min</span><span class="token punctuation">(</span>1<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--n<span class="token punctuation">)</span> - 1<span class="token punctuation">)</span> - <span class="token function">mod</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">var</span><span class="token punctuation">(</span>--n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">/* 1 if on the last column! */</span></span>
<span class="line">  <span class="token property">--yay</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>1 - <span class="token function">var</span><span class="token punctuation">(</span>--nay<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>For example, if <code>n</code> is <code>7</code>, then the column index <code>i%n</code> can be <code>0</code>, <code>1</code>, … <code>6</code> and <code>n - 1</code> is <code>6</code>. If our item of index <code>i</code> is on the last column, then its column index <code>i%n = i%7 = 6</code>, so the difference between <code>n - 1 = 7 - 1 = 6</code> and <code>i%n = i%7 = 6</code> is <code>0</code>. If our item of index i isn’t on the last column, then its column index <code>i%n = i%7 &lt; 6</code>, so the difference between <code>n - 1 = 6</code> and <code>i%n &lt; 6</code> is <code>1</code> or bigger. Taking the minimum between <code>1</code> and this difference ensures we always get either <code>0</code> or <code>1</code>.</p>`,4)),u(" TODO: LaTeX 로 표현 "),t(o,{user:"thebabydino","slug-hash":"NPqoxWK",title:"highlight last variable grid column, no breakpoints","default-tab":["css","result"],theme:p.$isDarkmode?"dark":"light"},null,8,["theme"]),s[114]||(s[114]=e(`<p>In general, if we want to highlight a column of index <code>k</code> (<code>0</code>-based, but we can just subtract <code>1</code> in the formula below if it’s given <code>1</code>-based), we need to compute the difference between it and <code>i%n</code> (the column index of an item of index <code>i</code>), then use the absolute value of this difference inside the <code>min()</code>:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.item</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">--dif</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--k<span class="token punctuation">)</span> - <span class="token function">mod</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">var</span><span class="token punctuation">(</span>--n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">--abs</span><span class="token punctuation">:</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--dif<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">--nay</span><span class="token punctuation">:</span> <span class="token function">min</span><span class="token punctuation">(</span>1<span class="token punctuation">,</span> <span class="token function">var</span><span class="token punctuation">(</span>--abs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* 1 if NOT on column k */</span></span>
<span class="line">  <span class="token property">--yay</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>1 - <span class="token function">var</span><span class="token punctuation">(</span>--nay<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* 1 if on column k! */</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The difference and its absolute value are <code>0</code> when the item of index <code>i</code> is on column <code>k</code> and different (bigger in the case of absolute value) when it isn’t.</p><p>We need the absolute value here because, while the difference between <code>n - 1</code> and <code>i%7</code> is always <code>0</code> or bigger, that is not the case for the difference between any random <code>k</code> and <code>i%n</code>. For example, if <code>n</code> is <code>7</code> and <code>k</code> is <code>2</code>, the <code>k - i%n</code> difference is negative when <code>k</code> is smaller than <code>i%n</code>, for example when <code>i%n</code> is <code>5</code>. And we need the difference that goes into the <code>min()</code> to be <code>0</code> or bigger in order for the <code>min()</code> to always give us either <code>0</code> or <code>1</code>.</p>`,4)),u(" TODO: LaTeX 로 표현 "),n("p",null,[s[86]||(s[86]=a("All modern stable browsers support ")),s[87]||(s[87]=n("code",null,"abs()",-1)),s[88]||(s[88]=a(", but for the best possible browser support, we can still test for support and use ")),t(d,{to:"/css-tricks.com/using-absolute-value-sign-rounding-and-modulo-in-css-today.html"},{default:l(()=>s[85]||(s[85]=[n("strong",null,"the fallback",-1)])),_:1,__:[85]}),s[89]||(s[89]=a(":"))]),s[115]||(s[115]=e(`<div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token atrule"><span class="token rule">@supports</span> <span class="token keyword">not</span> <span class="token punctuation">(</span><span class="token property">scale</span><span class="token punctuation">:</span> <span class="token function">abs</span><span class="token punctuation">(</span>-2<span class="token punctuation">)</span><span class="token punctuation">)</span></span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token selector">.item</span> <span class="token punctuation">{</span> <span class="token property">--abs</span><span class="token punctuation">:</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--dif<span class="token punctuation">)</span><span class="token punctuation">,</span> -1*<span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--dif<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Also, note that if the selected column index <code>k</code> is equal to <code>n</code> or bigger, no items get selected.</p><p>In the interactive demo below, clicking an item selects all items on the same column:</p>`,3)),t(o,{user:"thebabydino","slug-hash":"raVPYqx",title:"highlight column of index k on variable grid, no breakpoints","default-tab":["css","result"],theme:p.$isDarkmode?"dark":"light"},null,8,["theme"]),s[116]||(s[116]=e(`<p>It does this by setting <code>--k</code> (in the <code>style</code> attribute of the <code>.grid</code>) to the index of that column.</p><figure><img src="https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/07/460213331-95aec4e4-3664-4112-97ea-750361218e3f.png?resize=1024%2C558&amp;ssl=1" alt="A code snippet from a web developer&#39;s browser console showcasing CSS rules for items in a grid layout, including custom properties for styling." tabindex="0" loading="lazy"><figcaption>A code snippet from a web developer&#39;s browser console showcasing CSS rules for items in a grid layout, including custom properties for styling.</figcaption></figure><p>Chrome DevTools screenshot showing <code>--k</code> being set on the <code>.grid</code> parent and used in computations on <code>.item</code> children</p><p>We can also highlight items on either odd or even columns:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.item</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">/* 1 if on an even column, 0 otherwise */</span></span>
<span class="line">  <span class="token property">--even</span><span class="token punctuation">:</span> <span class="token function">min</span><span class="token punctuation">(</span>1<span class="token punctuation">,</span> <span class="token function">mod</span><span class="token punctuation">(</span><span class="token function">mod</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">var</span><span class="token punctuation">(</span>--n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">/* 1 if on an odd colum, 0 otherwise */</span></span>
<span class="line">  <span class="token property">--odd</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>1 - <span class="token function">var</span><span class="token punctuation">(</span>--even<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5)),t(o,{user:"thebabydino","slug-hash":"OPVqzKJ",title:"highlight odd/ even variable grid columns, no breakpoints","default-tab":["css","result"],theme:p.$isDarkmode?"dark":"light"},null,8,["theme"]),s[117]||(s[117]=e(`<p>This is a particular case of highlighting every <code>k</code>-th column starting from column <code>j</code> (again, <code>j</code> is a <code>0</code>-based index and smaller than <code>k</code>):</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.item</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">--dif</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--j<span class="token punctuation">)</span> - <span class="token function">mod</span><span class="token punctuation">(</span><span class="token function">mod</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">var</span><span class="token punctuation">(</span>--n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">var</span><span class="token punctuation">(</span>--k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">--abs</span><span class="token punctuation">:</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--dif<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">--nay</span><span class="token punctuation">:</span> <span class="token function">min</span><span class="token punctuation">(</span>1<span class="token punctuation">,</span> <span class="token function">var</span><span class="token punctuation">(</span>--abs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">/* 1 if on one of every kth col starting from col of index j */</span></span>
<span class="line">  <span class="token property">--yay</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>1 - <span class="token function">var</span><span class="token punctuation">(</span>--nay<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2)),t(o,{user:"thebabydino","slug-hash":"Jodzpeq",title:"highlight every kth column of variable grid from jth one, no breakpoints","default-tab":["css","result"],theme:p.$isDarkmode?"dark":"light"},null,8,["theme"]),s[118]||(s[118]=e('<h3 id="highlighting-items-on-a-certain-row" tabindex="-1"><a class="header-anchor" href="#highlighting-items-on-a-certain-row"><span>Highlighting items on a certain row</span></a></h3><p>If we want to highlight the items on the first row, this means their index <code>i</code> must be smaller than the number of columns <code>n</code>. This means the difference <code>n - i</code> must be bigger than <code>0</code> for items on the first row. If we clamp it to the <code>[0, 1]</code> interval, we get a value that’s <code>0</code> on every row but the first and <code>1</code> on the first row.</p>',2)),u(" TODO: LaTeX 로 표현 "),s[119]||(s[119]=e(`<div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.item</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">--yay</span><span class="token punctuation">:</span> <span class="token function">clamp</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> <span class="token function">var</span><span class="token punctuation">(</span>--n<span class="token punctuation">)</span> - <span class="token function">var</span><span class="token punctuation">(</span>--i<span class="token punctuation">)</span><span class="token punctuation">,</span> 1<span class="token punctuation">)</span>  <span class="token comment">/* 1 if on the first row! */</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),t(o,{user:"thebabydino","slug-hash":"pvJGpzJ",title:"highlight first variable grid row, no breakpoints","default-tab":["css","result"],theme:p.$isDarkmode?"dark":"light"},null,8,["theme"]),s[120]||(s[120]=e("<p>There is more than one way to skin a cat however, so another approach would be to get the row index, which is the result of <code>i/n</code> rounded down. If this is <code>0</code>, the item of index <code>i</code> is on the first row. If it’s bigger than <code>0</code>, it isn’t. This makes the minimum between <code>1</code> and <code>i/n</code> rounded down be <code>0</code> when the item of index <code>i</code> is on the first row and <code>1</code> when it isn’t.</p>",1)),u(" TODO: LaTeX 로 표현 "),s[121]||(s[121]=e(`<div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.item</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">--nay</span><span class="token punctuation">:</span> <span class="token function">min</span><span class="token punctuation">(</span>1<span class="token punctuation">,</span> <span class="token function">round</span><span class="token punctuation">(</span>down<span class="token punctuation">,</span> <span class="token function">var</span><span class="token punctuation">(</span>--i<span class="token punctuation">)</span>/<span class="token function">var</span><span class="token punctuation">(</span>--n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* 1 if NOT on the first row */</span></span>
<span class="line">  <span class="token property">--yay</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>1 - <span class="token function">var</span><span class="token punctuation">(</span>--nay<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* 1 if on the first row! */</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This second approach can be modified to allow for highlighting the items on any row of index <code>k</code> as the difference between <code>k</code> and <code>i/n</code> rounded down (the row index) is <code>0</code> if the item of index <code>i</code> is on the row of index <code>k</code> and non-zero otherwise:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.item</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">--dif</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--k<span class="token punctuation">)</span> - <span class="token function">round</span><span class="token punctuation">(</span>down<span class="token punctuation">,</span> <span class="token function">var</span><span class="token punctuation">(</span>--i<span class="token punctuation">)</span>/<span class="token function">var</span><span class="token punctuation">(</span>--n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">--abs</span><span class="token punctuation">:</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--dif<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">--nay</span><span class="token punctuation">:</span> <span class="token function">min</span><span class="token punctuation">(</span>1<span class="token punctuation">,</span> <span class="token function">var</span><span class="token punctuation">(</span>--abs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* 1 if NOT on row of index k */</span></span>
<span class="line">  <span class="token property">--yay</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>1 - <span class="token function">var</span><span class="token punctuation">(</span>--nay<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* 1 if on row of index k! */</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3)),t(o,{user:"thebabydino","slug-hash":"raVRpVe",title:"highlight row of index k on variable grid, no breakpoints","default-tab":["css","result"],theme:p.$isDarkmode?"dark":"light"},null,8,["theme"]),s[122]||(s[122]=n("p",null,[a("Highlighting the items on any row includes the last one. For this, we need to know the total number "),n("code",null,"t"),a(" of items on our grid. This means "),n("code",null,"(t - 1)"),a(" is the index of the last grid item, and we can get the index of the row it’s on (that is, the index of the final row) by rounding down "),n("code",null,"(t - 1)/n"),a(". Then we substitute "),n("code",null,"k"),a(" in the previous formula with the index of the final row we’ve just obtained this way.")],-1)),u(" TODO: LaTeX 로 표현 "),s[123]||(s[123]=e(`<div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.item</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">/* 1 if NOT on last row */</span></span>
<span class="line">  <span class="token property">--nay</span><span class="token punctuation">:</span> <span class="token function">min</span><span class="token punctuation">(</span>1<span class="token punctuation">,</span> <span class="token function">round</span><span class="token punctuation">(</span>down<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--t<span class="token punctuation">)</span> - 1<span class="token punctuation">)</span>/<span class="token function">var</span><span class="token punctuation">(</span>--n<span class="token punctuation">)</span><span class="token punctuation">)</span> - <span class="token function">round</span><span class="token punctuation">(</span>down<span class="token punctuation">,</span> <span class="token function">var</span><span class="token punctuation">(</span>--i<span class="token punctuation">)</span>/<span class="token function">var</span><span class="token punctuation">(</span>--n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">/* 1 if on last row! */</span></span>
<span class="line">  <span class="token property">--yay</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>1 - <span class="token function">var</span><span class="token punctuation">(</span>--nay<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>There are two things to note here.</p><p>One, we don’t need the absolute value here anymore, as the last row index is always going to be bigger or equal to any other row index.</p><p>Two, we’re currently passing the total number of items <code>t</code> to the CSS as a custom property when generating the HTML:</p><div class="language-pug line-numbers-mode" data-highlighter="prismjs" data-ext="pug"><pre><code class="language-pug"><span class="line"><span class="token punctuation">-</span><span class="token code"> <span class="token keyword">let</span> t <span class="token operator">=</span> <span class="token number">24</span><span class="token punctuation">;</span> <span class="token comment">//- total number of items on the grid  </span></span></span>
<span class="line">  </span>
<span class="line"><span class="token tag"><span class="token attr-class">.wrap</span></span> <span class="token plain-text"> </span></span>
<span class="line">  <span class="token tag"><span class="token attr-class">.grid</span><span class="token attributes"><span class="token punctuation">(</span><span class="token attr-name">style</span><span class="token punctuation">=</span><span class="token attr-value"><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">--t: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>t<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span></span><span class="token punctuation">)</span></span></span> <span class="token plain-text"> </span></span>
<span class="line">    <span class="token punctuation">-</span><span class="token code"> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> t<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  </span></span>
<span class="line">      <span class="token tag"><span class="token attr-class">.item</span><span class="token attributes"><span class="token punctuation">(</span><span class="token attr-name">style</span><span class="token punctuation">=</span><span class="token attr-value"><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">--i: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span></span><span class="token punctuation">)</span></span></span> <span class="token plain-text">#{i + 1}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>But once <code>sibling-count()</code> is supported cross-browser, we won’t need to do this anymore and we’ll be able to write:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.item</span> <span class="token punctuation">{</span> <span class="token property">--t</span><span class="token punctuation">:</span> <span class="token function">sibling-count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,7)),t(o,{user:"thebabydino","slug-hash":"jEPJGNV",title:"highlight last variable grid row, no breakpoints","default-tab":["css","result"],theme:p.$isDarkmode?"dark":"light"},null,8,["theme"]),s[124]||(s[124]=e(`<p>Just like before, we can highlight items on odd or even rows.</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.item</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">/* 1 if on an even row */</span></span>
<span class="line">  <span class="token property">--even</span><span class="token punctuation">:</span> <span class="token function">min</span><span class="token punctuation">(</span>1<span class="token punctuation">,</span> <span class="token function">mod</span><span class="token punctuation">(</span><span class="token function">round</span><span class="token punctuation">(</span>down<span class="token punctuation">,</span> <span class="token function">var</span><span class="token punctuation">(</span>--i<span class="token punctuation">)</span>/<span class="token function">var</span><span class="token punctuation">(</span>--n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">/* 1 if on an odd row */</span></span>
<span class="line">  <span class="token property">--odd</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>1 - <span class="token function">var</span><span class="token punctuation">(</span>--even<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2)),t(o,{user:"thebabydino","slug-hash":"qEdvpzy",title:"highlight odd/ even variable grid rows, no breakpoints","default-tab":["css","result"],theme:p.$isDarkmode?"dark":"light"},null,8,["theme"]),s[125]||(s[125]=e(`<p>And the odd/ even scenario is a particular case of highlighting items on every <code>k</code>-th row, starting from row of index <code>j</code>.</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.item</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">--dif</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--j<span class="token punctuation">)</span> - <span class="token function">mod</span><span class="token punctuation">(</span><span class="token function">round</span><span class="token punctuation">(</span>down<span class="token punctuation">,</span> <span class="token function">var</span><span class="token punctuation">(</span>--i<span class="token punctuation">)</span>/<span class="token function">var</span><span class="token punctuation">(</span>--n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">var</span><span class="token punctuation">(</span>--k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">--abs</span><span class="token punctuation">:</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--dif<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">--nay</span><span class="token punctuation">:</span> <span class="token function">min</span><span class="token punctuation">(</span>1<span class="token punctuation">,</span> <span class="token function">var</span><span class="token punctuation">(</span>--abs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">/* 1 if on one of every kth row starting from row of index j */</span></span>
<span class="line">  <span class="token property">--yay</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>1 - <span class="token function">var</span><span class="token punctuation">(</span>--nay<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2)),t(o,{user:"thebabydino","slug-hash":"jEPJJWx",title:"highlight every kth row of variable grid from jth one, no breakpoints","default-tab":["css","result"],theme:p.$isDarkmode?"dark":"light"},null,8,["theme"]),s[126]||(s[126]=n("hr",null,null,-1)),s[127]||(s[127]=n("h2",{id:"taking-it-further",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#taking-it-further"},[n("span",null,"Taking it Further")])],-1)),s[128]||(s[128]=n("p",null,"Another thing this technique can be used for is creating responsive grids of non-rectangular shapes with no breakpoints. An example would be the hexagon grid below. We aren’t going into the details of it here, but know it was done using this technique plus a few more computations to get the right hexagon alignment.",-1)),t(o,{user:"thebabydino","slug-hash":"QwWQqeR",title:"Pure CSS responsive hex grid, no breakpoints!","default-tab":["css","result"],theme:p.$isDarkmode?"dark":"light"},null,8,["theme"]),u(" TODO: add ARTICLE CARD "),t(m,k(g({title:"Get the number of auto-fit/auto-fill columns in CSS",desc:"The whole point of auto-fit and auto-fill is that you aren't saying how many columns to use. But if you knew how many the browser chose, you can make nice design decisions.",link:"https://chanhi2000.github.io/bookshelf/frontendmasters.com/count-auto-fill-columns.html",logo:"https://frontendmasters.com/favicon.ico",background:"rgba(188,75,52,0.2)"})),null,16)])}const L=f(x,[["render",F]]),W=JSON.parse('{"path":"/frontendmasters.com/count-auto-fill-columns.html","title":"Get the number of auto-fit/auto-fill columns in CSS","lang":"en-US","frontmatter":{"lang":"en-US","title":"Get the number of auto-fit/auto-fill columns in CSS","description":"Article(s) > Get the number of auto-fit/auto-fill columns in CSS","icon":"fa-brands fa-css3-alt","category":["CSS","Article(s)"],"tag":["blog","frontendmasters.com","css"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Get the number of auto-fit/auto-fill columns in CSS\\",\\"image\\":[\\"https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/07/458856822-01b5ed8e-2dc6-42d4-86e4-a0bf73c184fe.png?resize=1024%2C512&ssl=1\\",\\"https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/07/458914425-90bc6a99-75b9-48c9-ab0d-3e7b48358589.png?resize=1024%2C527&ssl=1\\",\\"https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/07/458929259-01f2a7cf-dd36-4c3a-9230-d0f0e1dcd6ba.png?resize=1024%2C512&ssl=1\\",\\"https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/07/458947888-cb10b290-d1e2-4ea6-b918-64732facca70.png?resize=1024%2C689&ssl=1\\",\\"https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/07/460213331-95aec4e4-3664-4112-97ea-750361218e3f.png?resize=1024%2C558&ssl=1\\"],\\"datePublished\\":\\"2025-08-06T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Ana Tudor\\",\\"url\\":\\"https://frontendmasters.com/blog/author/anatudor/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/frontendmasters.com/count-auto-fill-columns.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Get the number of auto-fit/auto-fill columns in CSS"}],["meta",{"property":"og:description","content":"Article(s) > Get the number of auto-fit/auto-fill columns in CSS"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/6567"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/6567"}],["meta",{"name":"twitter:image:alt","content":"Get the number of auto-fit/auto-fill columns in CSS"}],["meta",{"property":"article:author","content":"Ana Tudor"}],["meta",{"property":"article:tag","content":"css"}],["meta",{"property":"article:tag","content":"frontendmasters.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2025-08-06T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Get the number of auto-fit/auto-fill columns in CSS"},{"property":"og:description","content":"Get the number of auto-fit/auto-fill columns in CSS"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/frontendmasters.com/count-auto-fill-columns.html"}]],"prev":"/programming/css/articles/README.md","date":"2025-08-06T00:00:00.000Z","isOriginal":false,"author":[{"name":"Ana Tudor","url":"https://frontendmasters.com/blog/author/anatudor/"}],"cover":"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/6567"},"git":{},"readingTime":{"minutes":15.9,"words":4769},"filePathRelative":"frontendmasters.com/count-auto-fill-columns.md","copyright":{"author":"Ana Tudor"}}');export{L as comp,W as data};
