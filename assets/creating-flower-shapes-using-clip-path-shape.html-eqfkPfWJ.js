import{_ as v}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as f,d as s,f as e,b as u,a as h,t as b,n as i,g as l,w as c,e as a,r as d,o as w}from"./app-BVguHYKu.js";const y={},$={id:"frontmatter-title-관련",tabindex:"-1"},C={class:"header-anchor",href:"#frontmatter-title-관련"},S={class:"table-of-contents"},x={class:"hint-container info"},T={href:"https://css-shape.com/",target:"_blank",rel:"noopener noreferrer"},z={href:"https://developer.mozilla.org/en-US/docs/Web/CSS/basic-shape/shape",target:"_blank",rel:"noopener noreferrer"},I={href:"https://drafts.csswg.org/css-shapes-2/#shape-function",target:"_blank",rel:"noopener noreferrer"},A={href:"https://drafts.csswg.org/css-shapes-2/#typedef-shape-arc-command",target:"_blank",rel:"noopener noreferrer"},F={href:"https://css-generators.com/",target:"_blank",rel:"noopener noreferrer"},X={class:"hint-container info"};function j(t,n){const p=d("VPCard"),r=d("router-link"),k=d("SiteInfo"),g=d("RouteLink"),o=d("CodePen"),m=d("VPIcon");return w(),f("div",null,[s("h1",$,[s("a",C,[s("span",null,b(t.$frontmatter.title)+" 관련",1)])]),e(p,i(l({title:"CSS > Article(s)",desc:"Article(s)",link:"/programming/css/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",S,[s("ul",null,[s("li",null,[e(r,{to:"#what-is-shape"},{default:c(()=>n[0]||(n[0]=[a("What is shape()?")])),_:1,__:[0]})]),s("li",null,[e(r,{to:"#the-arc-command"},{default:c(()=>n[1]||(n[1]=[a("The arc Command")])),_:1,__:[1]})]),s("li",null,[e(r,{to:"#creating-the-flower-shape"},{default:c(()=>n[2]||(n[2]=[a("Creating The Flower Shape")])),_:1,__:[2]})]),s("li",null,[e(r,{to:"#combining-both-shapes"},{default:c(()=>n[3]||(n[3]=[a("Combining Both Shapes")])),_:1,__:[3]})]),s("li",null,[e(r,{to:"#optimizing-the-code"},{default:c(()=>n[4]||(n[4]=[a("Optimizing The Code")])),_:1,__:[4]})]),s("li",null,[e(r,{to:"#conclusion"},{default:c(()=>n[5]||(n[5]=[a("Conclusion")])),_:1,__:[5]})])])]),n[42]||(n[42]=s("hr",null,null,-1)),e(k,{name:"Creating Flower Shapes using clip-path: shape()",desc:"Use the `arc` command within the `shape()` function we can draw a line that follows a circle from one point to the next, controlling the direction.",url:"https://frontendmasters.com/blog/creating-flower-shapes-using-clip-path-shape/",logo:"https://frontendmasters.com/favicon.ico",preview:"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/5824"}),s("div",x,[n[6]||(n[6]=s("p",{class:"hint-container-title"},"Article Series",-1)),e(p,i(l({title:"Creating Flower Shapes using clip-path: shape()",desc:"Use the `arc` command within the `shape()` function we can draw a line that follows a circle from one point to the next, controlling the direction.",link:"/frontendmasters.com/creating-flower-shapes-using-clip-path-shape.md",logo:"https://frontendmasters.com/favicon.ico",background:"rgba(188,75,52,0.2)"})),null,16),n[7]||(n[7]=s("ol",null,[s("li",null,[s("a",{href:"https://frontendmasters.com/blog/creating-wavy-circles-with-fancy-animations/",target:"_blank",rel:"noopener noreferrer"},"Creating Wavy Circles with Fancy Animations in CSS")])],-1)),h(" TODO: /frontendmasters.com/creating-wavy-circles-with-fancy-animations.md  "),e(p,i(l({title:"Creating Flower Shapes using CSS Mask & Trigonometric Functions",desc:"Creating unusual shapes is always a fun exercise and a good way to practice your CSS skills. One might argue that SVG is better for this job, but nowadays we have a lot of new CSS tricks that allow us to create shapes with a clean and optimized code. Through this two-article series, we will […]",link:"/frontendmasters.com/creating-flower-shapes-using-css-mask-trigonometric-functions.md",logo:"https://frontendmasters.com/favicon.ico",background:"rgba(188,75,52,0.2)"})),null,16),e(p,i(l({title:"Creating Blob Shapes using clip-path: shape()",desc:"Blobs! Gooey weird shapes you can fill with any background and even animate. ",link:"/frontendmasters.com/creating-blob-shapes-using-clip-path-shape.md",logo:"https://frontendmasters.com/favicon.ico",background:"rgba(188,75,52,0.2)"})),null,16)]),s("p",null,[n[9]||(n[9]=a("In")),e(g,{to:"/frontendmasters.com/creating-flower-shapes-using-css-mask-trigonometric-functions.html"},{default:c(()=>n[8]||(n[8]=[s("strong",null,"a previous article",-1)])),_:1,__:[8]}),n[10]||(n[10]=a(", we used modern CSS features such as ")),n[11]||(n[11]=s("code",null,"mask",-1)),n[12]||(n[12]=a(", trigonometric functions, and CSS variables to create flower-like shapes."))]),n[43]||(n[43]=s("figure",null,[s("img",{src:"https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/05/8hogoSIf.png?resize=883%2C354&ssl=1",alt:"",tabindex:"0",loading:"lazy"}),s("figcaption")],-1)),n[44]||(n[44]=s("p",null,"The HTML code was a single element, which means we can apply the CSS to image elements and get cool frames like the demo below:",-1)),e(o,{user:"t_afif","slug-hash":"LYvPEeV",title:"Flower shape using CSS mask","default-tab":["css","result"],theme:t.$isDarkmode?"dark":"light"},null,8,["theme"]),n[45]||(n[45]=s("p",null,[a("In this article, we are redoing the same shapes using the new "),s("code",null,"shape()"),a(" function, which I think will become my favorite CSS feature.")],-1)),n[46]||(n[46]=s("div",{class:"hint-container note"},[s("p",{class:"hint-container-title"},"Note"),s("p",null,"At the time of writing, only Chrome, Edge, and Safari have the full support of the features we will be using.")],-1)),n[47]||(n[47]=s("hr",null,null,-1)),n[48]||(n[48]=s("h2",{id:"what-is-shape",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#what-is-shape"},[s("span",null,[a("What is "),s("code",null,"shape()"),a("?")])])],-1)),s("p",null,[n[14]||(n[14]=a("You are probably familiar with")),n[15]||(n[15]=s("code",null,"clip-path: polygon()",-1)),n[16]||(n[16]=a(", right? A function that allows you to specify different points, draw straight lines between them and create various CSS shapes (I invite you to check")),s("a",T,[e(m,{icon:"fas fa-globe"}),n[13]||(n[13]=a("my online collection of CSS shapes"))]),n[17]||(n[17]=a("to see some of them). I said “straight lines” because when it comes to curves,")),n[18]||(n[18]=s("code",null,"clip-path",-1)),n[19]||(n[19]=a("is very limited. We have")),n[20]||(n[20]=s("code",null,"circle()",-1)),n[21]||(n[21]=a("and")),n[22]||(n[22]=s("code",null,"ellipse()",-1)),n[23]||(n[23]=a(", but we cannot achieve complex shapes with them."))]),s("p",null,[n[26]||(n[26]=s("code",null,"shape()",-1)),n[27]||(n[27]=a("is the new value that overcomes such limitation. In addition to straight lines, it allows us to draw curves. But If you check the")),s("a",z,[e(m,{icon:"fa-brands fa-firefox"}),n[24]||(n[24]=a("MDN page"))]),n[28]||(n[28]=a("or")),s("a",I,[e(m,{icon:"fas fa-globe"}),n[25]||(n[25]=a("the specification"))]),n[29]||(n[29]=a(", you can see that the syntax is a bit complex and not easy to grasp. It’s very similar to SVG path, which is good as it gives us a lot of options and flexibility, but it requires a lot of practice to get used to it."))]),n[49]||(n[49]=u(`<p>I will not write a boring tutorial explaining the syntax and all the possible values, but rather focus on one command per article. In this article, we will study the<code>arc</code>command, and the next article will be about the<code>curve</code>command. And, of course, we are going to draw cool shapes. Otherwise it’s no fun!</p><hr><h2 id="the-arc-command" tabindex="-1"><a class="header-anchor" href="#the-arc-command"><span>The <code>arc</code> Command</span></a></h2><p>This command allows you to draw an elliptic arc between two points but I will only consider the particular case of a circle which is easier and the one you will need the most. Let’s start with some geometry to understand how it works.</p><p>If you have two points (A and B) and a radius, there are exactly two circles with the given radius that intersect with the points. The intersection of both circles gives us 4 possible arcs between A and B that we can identify with a size (small or large) and a direction (clockwise or counter-clockwise)</p><figure><img src="https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/05/cxmPje61.png?resize=869%2C379&amp;ssl=1" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>The code will look like the below:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">shape</span><span class="token punctuation">(</span>from Xa Ya<span class="token punctuation">,</span> arc to Xb Yb of R [large or small] [cw or ccw]<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>The first command of a shape is always a<code>from</code>to give the starting point, and then we use the<code>arc</code>to define the ending point, the radius, the size, and the direction.</p><p>Here is a demo to illustrate the different values:</p>`,10)),e(o,{user:"t_afif","slug-hash":"gbbKPPP",title:"Overview of the arc command","default-tab":["css","result"],theme:t.$isDarkmode?"dark":"light"},null,8,["theme"]),n[50]||(n[50]=u(`<p>The points and the radii are the same. I am only changing the size and direction to choose one of the four possibilities. It should be noted that the size and direction aren’t mandatory. The defaults are<code>small</code>and<code>ccw</code>.</p><p>That’s all: we have what we need to draw flower shapes!</p><hr><h2 id="creating-the-flower-shape" tabindex="-1"><a class="header-anchor" href="#creating-the-flower-shape"><span><a href="#creating-the-flower-shape"></a>Creating The Flower Shape</span></a></h2><p>I will start with a figure from the previous article.</p><figure><img src="https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/05/fRZEXPDg.png?resize=775%2C338&amp;ssl=1" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Using the mask method, we had to draw a big circle at the center and small circles placed around it. Using<code>shape()</code>, we need to draw the arcs of the small circles. The starting and ending points of each arc are placed where the circles touch each other.</p><figure><img src="https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/05/GI44EdNN.png?resize=491%2C294&amp;ssl=1" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>The code will look as follows:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.flower</span> <span class="token punctuation">{</span> </span>
<span class="line">  <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">shape</span><span class="token punctuation">(</span>from X0 Y0<span class="token punctuation">,</span> </span>
<span class="line">     arc to X1 Y1 of R<span class="token punctuation">,</span></span>
<span class="line">     arc to X2 Y2 of R<span class="token punctuation">,</span></span>
<span class="line">     arc to X3 Y3 of R<span class="token punctuation">,</span></span>
<span class="line">     arc to X4 Y4 of R<span class="token punctuation">,</span></span>
<span class="line">     ...</span>
<span class="line">     arc to Xn Yn of R</span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And like I did with the mask method, I will rely on Sass to create a loop.</p><div class="language-scss line-numbers-mode" data-highlighter="prismjs" data-ext="scss"><pre><code class="language-scss"><span class="line"><span class="token property"><span class="token variable">$n</span></span><span class="token punctuation">:</span> 10<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token selector">.flower </span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property"><span class="token variable">$m</span></span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token property"><span class="token variable">$m</span></span><span class="token punctuation">:</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token variable">$m</span><span class="token punctuation">,</span>from X0 Y0<span class="token punctuation">,</span>comma<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">@for</span> <span class="token variable">$i</span> <span class="token keyword">from</span> 1 <span class="token keyword">through</span> <span class="token selector"><span class="token variable">$n</span> </span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token property"><span class="token variable">$m</span></span><span class="token punctuation">:</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token variable">$m</span><span class="token punctuation">,</span>arc to Xi Yi of R<span class="token punctuation">,</span>comma<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> </span>
<span class="line">  <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">shape</span><span class="token punctuation">(</span><span class="token variable">#{$m}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now we need to identify the radius of the small circles (R) and the position of the different points (Xi, Yi). I already did the calculation of the radius in the previous article, so I will reuse the same value:</p><div class="language-scss line-numbers-mode" data-highlighter="prismjs" data-ext="scss"><pre><code class="language-scss"><span class="line">R = 50%/<span class="token punctuation">(</span>1 <span class="token operator">+</span> 1/math.<span class="token function">sin</span><span class="token punctuation">(</span>180deg/<span class="token variable">$n</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>For the points, they are placed around the same circle so their coordinate can be written like below:</p><div class="language-scss line-numbers-mode" data-highlighter="prismjs" data-ext="scss"><pre><code class="language-scss"><span class="line">Xi = 50% <span class="token operator">+</span> D*math.<span class="token function">cos</span><span class="token punctuation">(</span><span class="token variable">$i</span>*360deg/<span class="token variable">$n</span><span class="token punctuation">)</span></span>
<span class="line">Yi = 50% <span class="token operator">+</span> D*math.<span class="token function">sin</span><span class="token punctuation">(</span><span class="token variable">$i</span>*360deg/<span class="token variable">$n</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Here is a figure to illustrate the distance D and the radius R:</p><figure><img src="https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/05/MeAjhk0c.png?resize=438%2C289&amp;ssl=1" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>I know you don’t want a boring geometry course so here is the value of D.</p><div class="language-scss line-numbers-mode" data-highlighter="prismjs" data-ext="scss"><pre><code class="language-scss"><span class="line">D = 50%/<span class="token punctuation">(</span>math.<span class="token function">tan</span><span class="token punctuation">(</span>180deg/<span class="token variable">$n</span><span class="token punctuation">)</span> <span class="token operator">+</span> 1/math.<span class="token function">cos</span><span class="token punctuation">(</span>180deg/<span class="token variable">$n</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>And the final code will be:</p><div class="language-scss line-numbers-mode" data-highlighter="prismjs" data-ext="scss"><pre><code class="language-scss"><span class="line"><span class="token property"><span class="token variable">$n</span></span><span class="token punctuation">:</span> 10<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token selector">.flower </span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property"><span class="token variable">$m</span></span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token property"><span class="token variable">$r</span></span><span class="token punctuation">:</span> 50%/<span class="token punctuation">(</span>1 <span class="token operator">+</span> 1/math.<span class="token function">sin</span><span class="token punctuation">(</span>180deg/<span class="token variable">$n</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token property"><span class="token variable">$d</span></span><span class="token punctuation">:</span> 50%/<span class="token punctuation">(</span>math.<span class="token function">tan</span><span class="token punctuation">(</span>180deg/<span class="token variable">$n</span><span class="token punctuation">)</span> <span class="token operator">+</span> 1/math.<span class="token function">cos</span><span class="token punctuation">(</span>180deg/<span class="token variable">$n</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token property"><span class="token variable">$m</span></span><span class="token punctuation">:</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token variable">$m</span><span class="token punctuation">,</span>from </span>
<span class="line">    50% <span class="token operator">+</span> <span class="token variable">$d</span>*math.<span class="token function">cos</span><span class="token punctuation">(</span>0<span class="token punctuation">)</span> </span>
<span class="line">    50% <span class="token operator">+</span> <span class="token variable">$d</span>*math.<span class="token function">sin</span><span class="token punctuation">(</span>0<span class="token punctuation">)</span><span class="token punctuation">,</span>comma<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">@for</span> <span class="token variable">$i</span> <span class="token keyword">from</span> 1 <span class="token keyword">through</span> <span class="token selector"><span class="token variable">$n</span> </span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token property"><span class="token variable">$m</span></span><span class="token punctuation">:</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token variable">$m</span><span class="token punctuation">,</span>arc to </span>
<span class="line">      50% <span class="token operator">+</span> <span class="token variable">$d</span>*math.<span class="token function">cos</span><span class="token punctuation">(</span><span class="token variable">$i</span>*360deg/<span class="token variable">$n</span><span class="token punctuation">)</span></span>
<span class="line">      50% <span class="token operator">+</span> <span class="token variable">$d</span>*math.<span class="token function">sin</span><span class="token punctuation">(</span><span class="token variable">$i</span>*360deg/<span class="token variable">$n</span><span class="token punctuation">)</span></span>
<span class="line">      of <span class="token variable">$r</span><span class="token punctuation">,</span>comma<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> </span>
<span class="line">  <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">shape</span><span class="token punctuation">(</span><span class="token variable">#{$m}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,22)),e(o,{user:"t_afif","slug-hash":"gbbKWZj",title:"Flower shape using shape()","default-tab":["css","result"],theme:t.$isDarkmode?"dark":"light"},null,8,["theme"]),n[51]||(n[51]=u('<p><em>Wait, we get the inverted shape instead? Why is that?</em></p><p>We didn’t define the size and the direction of the arcs so by default the browser will use<code>small</code>and<code>ccw</code>. This gives us the inverted version of the flower. If you try the 4 different combinations (including the default one) you will get the following:</p><figure><img src="https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/05/F6iWJIUP.png?resize=926%2C344&amp;ssl=1" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><code>small ccw</code>and<code>large cw</code>give us the shape we are looking for. The<code>small cw</code>is an interesting variation, and the<code>large ccw</code>is a funny one. We can consider a CSS variable to easily control which shape we want to get.</p>',4)),e(o,{user:"t_afif","slug-hash":"vEErZEr",title:"Adding CSS variable","default-tab":["css","result"],theme:t.$isDarkmode?"dark":"light"},null,8,["theme"]),n[52]||(n[52]=u(`<hr><h2 id="combining-both-shapes" tabindex="-1"><a class="header-anchor" href="#combining-both-shapes"><span>Combining Both Shapes</span></a></h2><p>Now, what about the shape below?</p><figure><img src="https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/05/0cXX5vtA.png?resize=648%2C399&amp;ssl=1" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>The idea is to use the same code and alternate between two arc configurations.</p><div class="language-scss line-numbers-mode" data-highlighter="prismjs" data-ext="scss"><pre><code class="language-scss"><span class="line"><span class="token property"><span class="token variable">$n</span></span><span class="token punctuation">:</span> 10<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token selector">.flower </span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property"><span class="token variable">$m</span></span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token property"><span class="token variable">$r</span></span><span class="token punctuation">:</span> 50%/<span class="token punctuation">(</span>1 <span class="token operator">+</span> 1/math.<span class="token function">sin</span><span class="token punctuation">(</span>180deg/<span class="token variable">$n</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token property"><span class="token variable">$d</span></span><span class="token punctuation">:</span> 50%/<span class="token punctuation">(</span>math.<span class="token function">tan</span><span class="token punctuation">(</span>180deg/<span class="token variable">$n</span><span class="token punctuation">)</span> <span class="token operator">+</span> 1/math.<span class="token function">cos</span><span class="token punctuation">(</span>180deg/<span class="token variable">$n</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token property"><span class="token variable">$m</span></span><span class="token punctuation">:</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token variable">$m</span><span class="token punctuation">,</span>from </span>
<span class="line">    50% <span class="token operator">+</span> <span class="token variable">$d</span>*math.<span class="token function">cos</span><span class="token punctuation">(</span>0<span class="token punctuation">)</span> </span>
<span class="line">    50% <span class="token operator">+</span> <span class="token variable">$d</span>*math.<span class="token function">sin</span><span class="token punctuation">(</span>0<span class="token punctuation">)</span><span class="token punctuation">,</span>comma<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">@for</span> <span class="token variable">$i</span> <span class="token keyword">from</span> 1 <span class="token keyword">through</span> <span class="token selector"><span class="token variable">$n</span> </span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token property"><span class="token variable">$c</span></span><span class="token punctuation">:</span>small ccw<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">@if</span> <span class="token selector"><span class="token variable">$i</span> % 2 == 0 </span><span class="token punctuation">{</span><span class="token property"><span class="token variable">$c</span></span><span class="token punctuation">:</span>large cw<span class="token punctuation">}</span></span>
<span class="line">    <span class="token property"><span class="token variable">$m</span></span><span class="token punctuation">:</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token variable">$m</span><span class="token punctuation">,</span>arc to </span>
<span class="line">      50% <span class="token operator">+</span> <span class="token variable">$d</span>*math.<span class="token function">cos</span><span class="token punctuation">(</span><span class="token variable">$i</span>*360deg/<span class="token variable">$n</span><span class="token punctuation">)</span></span>
<span class="line">      50% <span class="token operator">+</span> <span class="token variable">$d</span>*math.<span class="token function">sin</span><span class="token punctuation">(</span><span class="token variable">$i</span>*360deg/<span class="token variable">$n</span><span class="token punctuation">)</span></span>
<span class="line">      of <span class="token variable">$r</span> <span class="token variable">$c</span><span class="token punctuation">,</span>comma<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> </span>
<span class="line">  <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">shape</span><span class="token punctuation">(</span><span class="token variable">#{$m}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>I introduced a new variable<code>$c</code>within the loop that will have the value<code>small ccw</code>when<code>$i</code>is odd and<code>large cw</code>otherwise.</p>`,7)),e(o,{user:"t_afif","slug-hash":"pvvKwgj",title:"Wavy flower shape using shape()","default-tab":["css","result"],theme:t.$isDarkmode?"dark":"light"},null,8,["theme"]),n[53]||(n[53]=u(`<p>Cool right? The compiled code will look like the below:</p><div class="language-plaintext line-numbers-mode" data-highlighter="prismjs" data-ext="plaintext"><pre><code class="language-plaintext"><span class="line">clip-path:</span>
<span class="line">  shape(from X0 Y0,   </span>
<span class="line">     arc to X1 Y1 of R small ccw,  </span>
<span class="line">     arc to X2 Y2 of R large cw,  </span>
<span class="line">     arc to X3 Y3 of R small ccw,  </span>
<span class="line">     arc to X4 Y4 of R large cw,  </span>
<span class="line">     ...  </span>
<span class="line">  )</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The first arc will use the inner curve (<code>small ccw</code>), the next one the outer curve (<code>large cw</code>) and so on. We repeat this to get our wavy-flower shape!</p><hr><h2 id="optimizing-the-code" tabindex="-1"><a class="header-anchor" href="#optimizing-the-code"><span>Optimizing The Code</span></a></h2><p>We made a generic code that allow us to get any shape variation by simply controlling the size/direction of the arcs, but for each particular case, we can have a more simplified code.</p><p>For the inverted variation (<code>small ccw</code>), the value of<code>D</code>can be replaced by<code>50%</code>. This will simplify the formula and also increase the area covered by the shape. We also need to update the value of the radius.</p><div class="language-scss line-numbers-mode" data-highlighter="prismjs" data-ext="scss"><pre><code class="language-scss"><span class="line"><span class="token property"><span class="token variable">$n</span></span><span class="token punctuation">:</span> 10<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token selector">.flower </span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property"><span class="token variable">$m</span></span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token property"><span class="token variable">$r</span></span><span class="token punctuation">:</span> 50%*math.<span class="token function">tan</span><span class="token punctuation">(</span>180deg/<span class="token variable">$n</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token property"><span class="token variable">$m</span></span><span class="token punctuation">:</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token variable">$m</span><span class="token punctuation">,</span>from </span>
<span class="line">    50% <span class="token operator">+</span> 50%*math.<span class="token function">cos</span><span class="token punctuation">(</span>0<span class="token punctuation">)</span> </span>
<span class="line">    50% <span class="token operator">+</span> 50%*math.<span class="token function">sin</span><span class="token punctuation">(</span>0<span class="token punctuation">)</span><span class="token punctuation">,</span>comma<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">@for</span> <span class="token variable">$i</span> <span class="token keyword">from</span> 1 <span class="token keyword">through</span> <span class="token selector"><span class="token variable">$n</span> </span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token property"><span class="token variable">$m</span></span><span class="token punctuation">:</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token variable">$m</span><span class="token punctuation">,</span>arc to </span>
<span class="line">      50% <span class="token operator">+</span> 50%*math.<span class="token function">cos</span><span class="token punctuation">(</span><span class="token variable">$i</span>*360deg/<span class="token variable">$n</span><span class="token punctuation">)</span></span>
<span class="line">      50% <span class="token operator">+</span> 50%*math.<span class="token function">sin</span><span class="token punctuation">(</span><span class="token variable">$i</span>*360deg/<span class="token variable">$n</span><span class="token punctuation">)</span></span>
<span class="line">      of <span class="token variable">$r</span><span class="token punctuation">,</span>comma<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> </span>
<span class="line">  <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">shape</span><span class="token punctuation">(</span><span class="token variable">#{$m}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8)),e(o,{user:"t_afif","slug-hash":"wBBXeoL",title:"Optimizing the code","default-tab":["css","result"],theme:t.$isDarkmode?"dark":"light"},null,8,["theme"]),n[54]||(n[54]=u(`<p>We can do the same for the main shape, but this time we can simplify the value of the radius and use<code>1%</code>.</p><div class="language-scss line-numbers-mode" data-highlighter="prismjs" data-ext="scss"><pre><code class="language-scss"><span class="line"><span class="token property"><span class="token variable">$n</span></span><span class="token punctuation">:</span> 10<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token selector">.flower </span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property"><span class="token variable">$m</span></span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token property"><span class="token variable">$d</span></span><span class="token punctuation">:</span> 50%/<span class="token punctuation">(</span>math.<span class="token function">cos</span><span class="token punctuation">(</span>180deg/<span class="token variable">$n</span><span class="token punctuation">)</span>*<span class="token punctuation">(</span>1 <span class="token operator">+</span> math.<span class="token function">tan</span><span class="token punctuation">(</span>180deg/<span class="token variable">$n</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token property"><span class="token variable">$m</span></span><span class="token punctuation">:</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token variable">$m</span><span class="token punctuation">,</span>from </span>
<span class="line">    50% <span class="token operator">+</span> <span class="token variable">$d</span>*math.<span class="token function">cos</span><span class="token punctuation">(</span>0<span class="token punctuation">)</span> </span>
<span class="line">    50% <span class="token operator">+</span> <span class="token variable">$d</span>*math.<span class="token function">sin</span><span class="token punctuation">(</span>0<span class="token punctuation">)</span><span class="token punctuation">,</span>comma<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">@for</span> <span class="token variable">$i</span> <span class="token keyword">from</span> 1 <span class="token keyword">through</span> <span class="token selector"><span class="token variable">$n</span> </span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token property"><span class="token variable">$m</span></span><span class="token punctuation">:</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token variable">$m</span><span class="token punctuation">,</span>arc to </span>
<span class="line">      50% <span class="token operator">+</span> <span class="token variable">$d</span>*math.<span class="token function">cos</span><span class="token punctuation">(</span><span class="token variable">$i</span>*360deg/<span class="token variable">$n</span><span class="token punctuation">)</span></span>
<span class="line">      50% <span class="token operator">+</span> <span class="token variable">$d</span>*math.<span class="token function">sin</span><span class="token punctuation">(</span><span class="token variable">$i</span>*360deg/<span class="token variable">$n</span><span class="token punctuation">)</span></span>
<span class="line">      of 1% cw<span class="token punctuation">,</span>comma<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> </span>
<span class="line">  <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">shape</span><span class="token punctuation">(</span><span class="token variable">#{$m}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2)),e(o,{user:"t_afif","slug-hash":"yyyEXbJ",title:"Optimizing the code","default-tab":["css","result"],theme:t.$isDarkmode?"dark":"light"},null,8,["theme"]),n[55]||(n[55]=s("p",null,[a("This one is interesting because using"),s("code",null,"1%"),a("as a radius is kind of strange and not intuitive. In the explanation of the arc command, I said that we have exactly two circles with the given radius that intersect with the two points, but what if the radius is smaller than half the distance between the points? No circles can meet that condition.")],-1)),s("p",null,[n[31]||(n[31]=a("This case falls into an error handling where the browser will scale the radius until we can have at least one circle that meets the conditions (yes, it’s defined within")),s("a",A,[e(m,{icon:"fas fa-globe"}),n[30]||(n[30]=a("the specification"))]),n[32]||(n[32]=a("). That circle will simply have its radius equal to half the distance between both points. It also means we only have two arcs with the same size (")),n[33]||(n[33]=s("code",null,"small",-1)),n[34]||(n[34]=a("and")),n[35]||(n[35]=s("code",null,"large",-1)),n[36]||(n[36]=a("will be equal)"))]),n[56]||(n[56]=s("figure",null,[s("img",{src:"https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/05/Bd23aq9Z.png?resize=699%2C397&ssl=1",alt:"",tabindex:"0",loading:"lazy"}),s("figcaption")],-1)),n[57]||(n[57]=s("p",null,[a("In other words, if you specify a small radius (like"),s("code",null,"1%"),a("), you are telling the browser to find the radius value for you (a lazy but clever move!). This trick won’t work in all the situations but can be handy in many of them so don’t forget about it.")],-1)),n[58]||(n[58]=s("hr",null,null,-1)),n[59]||(n[59]=s("h2",{id:"conclusion",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#conclusion"},[s("span",null,"Conclusion")])],-1)),n[60]||(n[60]=s("p",null,"We are done with this first article! You should have a good overview of the arc command and how to use it. I only studied the particular case of drawing circular arcs but once you get used to this you can move to the elliptic ones even if I think you will rarely need them.",-1)),n[61]||(n[61]=s("p",null,"Let’s end with a last demo of a heart shape, where I am using the arc command. Can you figure out how to do it before checking my code?",-1)),e(o,{user:"t_afif","slug-hash":"LEEbdrw",title:"Heart shape using shape()","default-tab":["css","result"],theme:t.$isDarkmode?"dark":"light"},null,8,["theme"]),s("p",null,[n[38]||(n[38]=a("And don’t forget to bookmark")),s("a",F,[e(m,{icon:"fas fa-globe"}),n[37]||(n[37]=a("my online generators"))]),n[39]||(n[39]=a("from where you can get the code of the flower shapes and more!"))]),s("div",X,[n[40]||(n[40]=s("p",{class:"hint-container-title"},"Article Series",-1)),e(p,i(l({title:"Creating Flower Shapes using clip-path: shape()",desc:"Use the `arc` command within the `shape()` function we can draw a line that follows a circle from one point to the next, controlling the direction.",link:"/frontendmasters.com/creating-flower-shapes-using-clip-path-shape.md",logo:"https://frontendmasters.com/favicon.ico",background:"rgba(188,75,52,0.2)"})),null,16),n[41]||(n[41]=s("ol",null,[s("li",null,[s("a",{href:"https://frontendmasters.com/blog/creating-wavy-circles-with-fancy-animations/",target:"_blank",rel:"noopener noreferrer"},"Creating Wavy Circles with Fancy Animations in CSS")])],-1)),h(" TODO: /frontendmasters.com/creating-wavy-circles-with-fancy-animations.md  "),e(p,i(l({title:"Creating Flower Shapes using CSS Mask & Trigonometric Functions",desc:"Creating unusual shapes is always a fun exercise and a good way to practice your CSS skills. One might argue that SVG is better for this job, but nowadays we have a lot of new CSS tricks that allow us to create shapes with a clean and optimized code. Through this two-article series, we will […]",link:"/frontendmasters.com/creating-flower-shapes-using-css-mask-trigonometric-functions.md",logo:"https://frontendmasters.com/favicon.ico",background:"rgba(188,75,52,0.2)"})),null,16),e(p,i(l({title:"Creating Blob Shapes using clip-path: shape()",desc:"Blobs! Gooey weird shapes you can fill with any background and even animate. ",link:"/frontendmasters.com/creating-blob-shapes-using-clip-path-shape.md",logo:"https://frontendmasters.com/favicon.ico",background:"rgba(188,75,52,0.2)"})),null,16)]),h(" TODO: add ARTICLE CARD "),e(p,i(l({title:"Creating Flower Shapes using clip-path: shape()",desc:"Use the `arc` command within the `shape()` function we can draw a line that follows a circle from one point to the next, controlling the direction.",link:"https://chanhi2000.github.io/bookshelf/frontendmasters.com/creating-flower-shapes-using-clip-path-shape.html",logo:"https://frontendmasters.com/favicon.ico",background:"rgba(188,75,52,0.2)"})),null,16)])}const P=v(y,[["render",j]]),Y=JSON.parse('{"path":"/frontendmasters.com/creating-flower-shapes-using-clip-path-shape.html","title":"Creating Flower Shapes using clip-path: shape()","lang":"en-US","frontmatter":{"lang":"en-US","title":"Creating Flower Shapes using clip-path: shape()","description":"Article(s) > Creating Flower Shapes using clip-path: shape()","icon":"fa-brands fa-css3-alt","category":["CSS","Article(s)"],"tag":["blog","frontendmasters.com","css"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Creating Flower Shapes using clip-path: shape()\\",\\"image\\":[\\"https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/05/8hogoSIf.png?resize=883%2C354&ssl=1\\",\\"https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/05/cxmPje61.png?resize=869%2C379&ssl=1\\",\\"https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/05/fRZEXPDg.png?resize=775%2C338&ssl=1\\",\\"https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/05/GI44EdNN.png?resize=491%2C294&ssl=1\\",\\"https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/05/MeAjhk0c.png?resize=438%2C289&ssl=1\\",\\"https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/05/F6iWJIUP.png?resize=926%2C344&ssl=1\\",\\"https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/05/0cXX5vtA.png?resize=648%2C399&ssl=1\\",\\"https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/05/Bd23aq9Z.png?resize=699%2C397&ssl=1\\"],\\"datePublished\\":\\"2025-05-12T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Temani Afif\\",\\"url\\":\\"https://frontendmasters.com/blog/author/temaniafif/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/frontendmasters.com/creating-flower-shapes-using-clip-path-shape.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Creating Flower Shapes using clip-path: shape()"}],["meta",{"property":"og:description","content":"Article(s) > Creating Flower Shapes using clip-path: shape()"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/5824"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/5824"}],["meta",{"name":"twitter:image:alt","content":"Creating Flower Shapes using clip-path: shape()"}],["meta",{"property":"article:author","content":"Temani Afif"}],["meta",{"property":"article:tag","content":"css"}],["meta",{"property":"article:tag","content":"frontendmasters.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2025-05-12T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Creating Flower Shapes using clip-path: shape()"},{"property":"og:description","content":"Creating Flower Shapes using clip-path: shape()"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/frontendmasters.com/creating-flower-shapes-using-clip-path-shape.html"}]],"prev":"/programming/css/articles/README.md","date":"2025-05-12T00:00:00.000Z","isOriginal":false,"author":[{"name":"Temani Afif","url":"https://frontendmasters.com/blog/author/temaniafif/"}],"cover":"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/5824"},"git":{},"readingTime":{"minutes":8.72,"words":2617},"filePathRelative":"frontendmasters.com/creating-flower-shapes-using-clip-path-shape.md","copyright":{"author":"Temani Afif"}}');export{P as comp,Y as data};
