import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as k,d as s,f as e,a as m,b as o,t as v,n as g,g as b,w as t,e as a,r as l,o as f}from"./app-BVguHYKu.js";const h="/bookshelf/assets/image/d2.naver.com/8588537/1.png",y="/bookshelf/assets/image/d2.naver.com/8588537/2.png",w="/bookshelf/assets/image/d2.naver.com/8588537/3.png",G={},x={id:"frontmatter-title-관련",tabindex:"-1"},q={class:"header-anchor",href:"#frontmatter-title-관련"},D={class:"table-of-contents"},E={href:"https://google.github.io/styleguide/go/decisions#dont-panic",target:"_blank",rel:"noopener noreferrer"},V={href:"https://go.dev/blog/errors-are-values",target:"_blank",rel:"noopener noreferrer"},P={href:"https://go.dev/blog/survey2023-q1-results",target:"_blank",rel:"noopener noreferrer"};function A(c,n){const r=l("VPCard"),p=l("router-link"),u=l("SiteInfo"),i=l("VPIcon");return f(),k("div",null,[s("h1",x,[s("a",q,[s("span",null,v(c.$frontmatter.title)+" 관련",1)])]),e(r,g(b({title:"Go > Article(s)",desc:"Article(s)",link:"/programming/go/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",D,[s("ul",null,[s("li",null,[e(p,{to:"#시작하기-전에"},{default:t(()=>n[0]||(n[0]=[a("시작하기 전에")])),_:1,__:[0]}),s("ul",null,[s("li",null,[e(p,{to:"#don-t-panic"},{default:t(()=>n[1]||(n[1]=[a("Don't panic")])),_:1,__:[1]})]),s("li",null,[e(p,{to:"#errors-are-value"},{default:t(()=>n[2]||(n[2]=[a("Errors are value")])),_:1,__:[2]})]),s("li",null,[e(p,{to:"#import-library-by-repository-path"},{default:t(()=>n[3]||(n[3]=[a("Import library by repository path")])),_:1,__:[3]})]),s("li",null,[e(p,{to:"#라이브러리-부족"},{default:t(()=>n[4]||(n[4]=[a("라이브러리 부족")])),_:1,__:[4]})])])]),s("li",null,[e(p,{to:"#error가-쏘아올린-작은-공"},{default:t(()=>n[5]||(n[5]=[a("error가 쏘아올린 작은 공")])),_:1,__:[5]})]),s("li",null,[e(p,{to:"#클로바노트-v1-코드-개선-필요-사항"},{default:t(()=>n[6]||(n[6]=[a("클로바노트 V1 코드 개선 필요 사항")])),_:1,__:[6]}),s("ul",null,[s("li",null,[e(p,{to:"#mongo-동작-방식-상이"},{default:t(()=>n[7]||(n[7]=[a("Mongo 동작 방식 상이")])),_:1,__:[7]})]),s("li",null,[e(p,{to:"#error-처리-및-로깅"},{default:t(()=>n[8]||(n[8]=[a("error 처리 및 로깅")])),_:1,__:[8]})])])]),s("li",null,[e(p,{to:"#마치며"},{default:t(()=>n[9]||(n[9]=[a("마치며")])),_:1,__:[9]})])])]),n[27]||(n[27]=s("hr",null,null,-1)),e(u,{name:"Golang, 그대들은 어떻게 할 것인가 - 1. 들어가며 | NAVER D2",desc:"Golang, 그대들은 어떻게 할 것인가 - 1. 들어가며",url:"https://d2.naver.com/helloworld/8588537",logo:"/assets/image/d2.naver.com/favicon.ico",preview:"/assets/image/d2.naver.com/8588537/banner.png"}),m(` 
https://tv.naver.com/embed/48958318
TODO: find youtube
`),n[28]||(n[28]=o('<p>안녕하세요, 만 2년차 개발자로 클로바노트 서버를 개발하고 있는 김준하입니다. 이 글의 시리즈에서는 클로바노트 V2를 개발하며 팀 내부 코드 구조를 개선한 이야기를 해보려 합니다. 최대한 누구나 이해하기 쉽게 설명하려 노력했지만 코드에 대한 내용이 어느 정도 있다 보니 Golang을 한 번이라도 접해보신 분이면 좀 더 이해하기 쉬울 것 같습니다.</p><p>미야자키 하야오 감독의 영화 “그대들은 어떻게 살 것인가”를 아시나요?</p><figure><img src="'+h+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>호불호가 갈리는 영화지만 저는 즐겁게 관람했습니다. 어떠한 정답을 직접 관객에게 주려고 하지 않고 본인의 삶을 풀어낸 회고록 같은 영화였습니다. “나는 이렇게 살았고, 이런 것을 후회하고 깨달았는데, 그래서 그대들은 어떻게 살 것인가요?” 이렇게 질문을 던지는 듯했습니다.</p><p>맞습니다. 영화 제목을 변형해서 이 글의 제목을 지어보았습니다. 제가 현재 팀에서 처음으로 Golang을 접하고 Golang으로 API 서버를 개발하면서 겪었던 고민과 결과물을 여려분께 소개하려 합니다. 제가 영화 제목을 변형했듯이 이 글의 내용은 저의 개발 일대기입니다. 여러분이 “이 사람은 이런 생각을 했고 이렇게 문제를 해결했구나” 하며 읽어주시면 좋겠습니다.</p><hr><h2 id="시작하기-전에" tabindex="-1"><a class="header-anchor" href="#시작하기-전에"><span>시작하기 전에</span></a></h2><p>글을 시작하기 앞서, 제가 고민했던 부분이 더 잘 이해되도록 Golang의 몇 가지 특징과 컨벤션을 소개하겠습니다.</p><h3 id="don-t-panic" tabindex="-1"><a class="header-anchor" href="#don-t-panic"><span>Don&#39;t panic</span></a></h3>',9)),s("p",null,[n[11]||(n[11]=a("Golang을 처음 접한 사람들에게 가장 크게 눈에 띄는 부분은 error에 관한 부분입니다. Java 같은 언어는 예외(exception)를 ")),n[12]||(n[12]=s("code",null,"try",-1)),n[13]||(n[13]=a("/")),n[14]||(n[14]=s("code",null,"catch",-1)),n[15]||(n[15]=a("로 처리하는 방식을 사용하지만 Golang에는 try/catch가 없습니다. try/catch와 비슷한 panic/recover가 있기는 하지만, Golang에는 ")),s("a",E,[e(i,{icon:"fa-brands fa-google"}),n[10]||(n[10]=a("Don't panic"))]),n[16]||(n[16]=a("이라는 가장 중요한 컨벤션이 있습니다. error를 처리할 때는 ")),n[17]||(n[17]=s("code",null,"panic",-1)),n[18]||(n[18]=a("을 사용하지 말고 ")),n[19]||(n[19]=s("code",null,"error",-1)),n[20]||(n[20]=a(" 자체를 반환하라는 것입니다."))]),n[29]||(n[29]=o(`<div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code class="language-go"><span class="line"><span class="token keyword">func</span> <span class="token function">openFile</span><span class="token punctuation">(</span>fn <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>  </span>
<span class="line">    f<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> err</span>
<span class="line">        <span class="token comment">// panic(err) // don&#39;t panic!</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">defer</span> f<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token boolean">nil</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token comment">// 잘못된 파일명을 넣음</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">openFile</span><span class="token punctuation">(</span><span class="token string">&quot;Invalid.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>panic은 프로그램이 종료되어야 마땅한 상황(stackoverflow, OOM 등)에만 사용되어야 하며 recover를 통해 프로그램을 되살릴 수 있습니다.</p><h3 id="errors-are-value" tabindex="-1"><a class="header-anchor" href="#errors-are-value"><span>Errors are value</span></a></h3><p>panic이 사용되어야 하는 상황을 제외하면 error를 값으로 취급하는 접근 방식을 취합니다.</p>`,4)),s("blockquote",null,[n[23]||(n[23]=s("p",null,"Values can be programmed, and since errors are values, errors can be programmed.",-1)),s("p",null,[n[22]||(n[22]=a("출처: ")),s("a",V,[e(i,{icon:"fa-brands fa-golang"}),n[21]||(n[21]=a("The Go Blog"))])])]),n[30]||(n[30]=o(`<p>값(value)은 변수나 상수에 할당하거나 조작이 가능하며, error 또한 값이므로 변수나 상수에 할당이 가능합니다.</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code class="language-go"><span class="line"><span class="token keyword">var</span> ErrDivideByZero <span class="token operator">=</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;divide by zero&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">Divide</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token keyword">if</span> b <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> ErrDivideByZero</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> a <span class="token operator">/</span> b<span class="token punctuation">,</span> <span class="token boolean">nil</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">    result<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">Divide</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        log<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token comment">// &quot;divide by zero&quot;</span></span>
<span class="line">        <span class="token keyword">return</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    fmt<span class="token punctuation">.</span><span class="token function">Printlnt</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="import-library-by-repository-path" tabindex="-1"><a class="header-anchor" href="#import-library-by-repository-path"><span>Import library by repository path</span></a></h3><p>Golang은 라이브러리를 쉽게 배포하고 가져올 수 있습니다. GitHub 저장소 URL 자체가 가져오기 경로가 되고 GitHub에 release 태그만 만들면 됩니다.</p><p>다음 명령으로 라이브러리를 추가할 수 있습니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">go get <span class="token parameter variable">-u</span> github.com/gin-gonic/gin  </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>위 명령을 실행하면 Golang 애플리케이션의 의존성을 관리하는 <code>go.mod</code> 파일에 다음과 같이 라이브러리가 추가됩니다.</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code class="language-go"><span class="line"><span class="token comment">// go.mod</span></span>
<span class="line">module <span class="token operator">...</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">go</span> <span class="token number">1.20</span></span>
<span class="line"></span>
<span class="line">require <span class="token punctuation">(</span>  </span>
<span class="line">    github<span class="token punctuation">.</span>com<span class="token operator">/</span>gin<span class="token operator">-</span>gonic<span class="token operator">/</span>gin v1<span class="token punctuation">.</span><span class="token number">9.1</span></span>
<span class="line">    <span class="token keyword">go</span><span class="token punctuation">.</span>mongodb<span class="token punctuation">.</span>org<span class="token operator">/</span>mongo<span class="token operator">-</span>driver v1<span class="token punctuation">.</span><span class="token number">12.1</span></span>
<span class="line">  <span class="token operator">...</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>이렇게 별도의 특정 공간에 라이브러리를 배포하지 않아도 쉽게 개발하고 사용할 수 있다는 장점이 있습니다. 그래서 저희 팀에서는 Golang에서 공통적으로 사용하는 코드를 별도의 공통 저장소에서 개발하여 사용하고 있습니다. 앞으로 소개할 코드도 대부분 해당 공통 저장소에서 개발한 내용입니다.</p><h3 id="라이브러리-부족" tabindex="-1"><a class="header-anchor" href="#라이브러리-부족"><span>라이브러리 부족</span></a></h3><p>Golang의 또 하나의 특징은 직접 개발해야 하는 부분이 많다는 것입니다. Java와 같은 다른 언어에 비해서 오픈 소스나 라이브러리가 많이 부족합니다.</p><p>단적인 예로, Golang 표준 라이브러리에 slice(=List)에서 맨 마지막 요소를 빼내는 pop 메서드가 내장되어 있지 않다는 점이 있습니다. 다음과 같이 맨 마지막 요소를 직접 꺼내고 그 앞까지의 slice를 재정의하는 pop을 직접 구현해야 합니다.</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code class="language-go"><span class="line">pop<span class="token punctuation">,</span> s1 <span class="token operator">:=</span> s<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>  </span>
<span class="line">fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span> <span class="token comment">// [1 2 3 4]  </span></span>
<span class="line">fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>pop<span class="token punctuation">)</span> <span class="token comment">// 5  </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>또한, Set 자료 구조가 없어 이를 map으로 구현해야 합니다. 이렇게 직접 개발해야 하는 부분이 많아, 잘못하면 코드 양이 증가하고 중복 코드가 쉽게 생산될 수 있었습니다.</p><hr><h2 id="error가-쏘아올린-작은-공" tabindex="-1"><a class="header-anchor" href="#error가-쏘아올린-작은-공"><span>error가 쏘아올린 작은 공</span></a></h2>`,16)),s("p",null,[n[25]||(n[25]=a("panic을 던지지 않고 error를 상위 함수로 올리는 것은 보기에는 간단 명료한 컨벤션인 것 같지만, 이는 절대 만만하지 않았습니다. ")),s("a",P,[e(i,{icon:"fa-brands fa-golang"}),n[24]||(n[24]=a("2023년 Golang 사용자 설문"))]),n[26]||(n[26]=a("에 따르면 이 점은 저뿐만 아니라 Golang 개발자들이 공통적으로 가지는 어려움으로 보입니다."))]),n[31]||(n[31]=o('<blockquote><p><strong>Error handling and learning are respondents&#39; top challenges</strong></p></blockquote><figure><img src="'+y+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>함수가 함수를 부르고 error를 반환받고 또 반환하는 구조가 심심치 않게 발생하다 보니, 이 error에 대한 로그는 어디에서 남겨야 하는가에 대한 의문이 들기도 합니다.</p><hr><h2 id="클로바노트-v1-코드-개선-필요-사항" tabindex="-1"><a class="header-anchor" href="#클로바노트-v1-코드-개선-필요-사항"><span>클로바노트 V1 코드 개선 필요 사항</span></a></h2><p>그럼 기존 V1 코드에서는 어떻게 처리하고 있었는지 간단한 구조로 살펴보겠습니다.</p><figure><img src="'+w+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><details class="hint-container details"><summary>코드 예</summary><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code class="language-go"><span class="line"><span class="token comment">// Controller</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">DoAPI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">    result<span class="token punctuation">,</span> code <span class="token operator">:=</span> service<span class="token punctuation">.</span><span class="token function">DoSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> code <span class="token operator">==</span> <span class="token number">500</span> <span class="token punctuation">{</span></span>
<span class="line">        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;error in main, message: %s&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// create err response</span></span>
<span class="line">        <span class="token keyword">return</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> code <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span></span>
<span class="line">        log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;error in main, message: %s&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// create err response</span></span>
<span class="line">        <span class="token keyword">return</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">//...</span></span>
<span class="line">    <span class="token comment">// create response</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Service</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">DoSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>Foo<span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">    result<span class="token punctuation">,</span> code<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">DoSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> code <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span></span>
<span class="line">        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;error in baz, message: %s&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> result<span class="token punctuation">,</span> code</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line">    <span class="token keyword">return</span> result<span class="token punctuation">,</span> code</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// DB</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">DoSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>Foo<span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">    cursor<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">doQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;error in bar, message: %s&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> err</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// decodeCursor()</span></span>
<span class="line">    <span class="token keyword">return</span> result<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">nil</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// DB common</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">doQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>mongo<span class="token punctuation">.</span>Cursor<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token comment">// ... do DB query</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;error&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="mongo-동작-방식-상이" tabindex="-1"><a class="header-anchor" href="#mongo-동작-방식-상이"><span>Mongo 동작 방식 상이</span></a></h3><p>서버마다 Mongo 드라이버를 각각 래핑하여 사용하고 있었는데, &gt;<strong>서버마다 구현 방식이 달랐습니다</strong>. 예를 들어 <code>FindOne</code>에서 <code>(result, error)</code> 형식으로 반환할 때, A 서버는 결과 값이 없으면 <code>(nil, nil)</code>을 반환하고 B 서버는 <code>(nil, not found err)</code>를 반환하는 등 다르게 동작했습니다.</p><h3 id="error-처리-및-로깅" tabindex="-1"><a class="header-anchor" href="#error-처리-및-로깅"><span>error 처리 및 로깅</span></a></h3><p>상위 함수에서 쉽게 오류를 구분할 수 있도록 &gt;<strong>error와 함께 error code를 사용했고</strong>, 디버깅을 위해 로그 레벨을 조정하며 &gt;<strong>모든 지점에서 error 로그를 남겼습니다</strong>. 하지만 이는 컨벤션에 맞지 않는 방식이었고 중복 로그가 많아지는 문제가 있었습니다.</p><p>또한, error의 로그 레벨이 모호한 경우도 많았습니다. 예를 들어, DB 레이어 함수에서 어떤 document를 찾지 못했을 때 이는 Error 레벨일까요, Info 레벨일까요? 이 상황이 발생하면 안 되는 상황인지 정상적인 상황인지는 상위 레이어에서 결정되므로 해당 함수 내부에서는 알 수가 없었습니다.</p><p>이를 해결하기 위해, &gt;<strong>error를 어디까지 올려야 하며 하위 레이어에서 발생한 error를 상위 레이어에서 어떻게 알 수 있을지</strong> 고민이 필요했습니다.</p><hr><h2 id="마치며" tabindex="-1"><a class="header-anchor" href="#마치며"><span>마치며</span></a></h2><p>고민의 결과물을 클로바노트 V2 코드에 반영하여 위의 문제점들을 해결하려 했고, 그 과정에 대해 이야기를 풀어내보려고 합니다.</p><ul><li>error를 어떻게 만들어냈는지</li><li>error를 어떻게 추척 가능하도록 올려 보냈는지</li><li>error 핸들링을 어떻게 했는지</li></ul><p>위 3가지 고민을 중점으로 읽어주시면 좋겠습니다.</p>`,19))])}const I=d(G,[["render",A]]),_=JSON.parse('{"path":"/d2.naver.com/8588537.html","title":"Golang, 그대들은 어떻게 할 것인가 - 1. 들어가며","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Golang, 그대들은 어떻게 할 것인가 - 1. 들어가며","description":"Article(s) > Golang, 그대들은 어떻게 할 것인가 - 1. 들어가며","icon":"fa-brands fa-golang","category":["Go","Article(s)"],"tag":["blog","d2.naver.com","go","golang"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Golang, 그대들은 어떻게 할 것인가 - 1. 들어가며\\",\\"image\\":[\\"https://chanhi2000.github.io/bookshelf/assets/image/d2.naver.com/8588537/1.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/d2.naver.com/8588537/2.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/d2.naver.com/8588537/3.png\\"],\\"datePublished\\":\\"2024-03-27T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/d2.naver.com/8588537.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Golang, 그대들은 어떻게 할 것인가 - 1. 들어가며"}],["meta",{"property":"og:description","content":"Article(s) > Golang, 그대들은 어떻게 할 것인가 - 1. 들어가며"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://chanhi2000.github.io/bookshelf/assets/image/d2.naver.com/8588537/banner.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://chanhi2000.github.io/bookshelf/assets/image/d2.naver.com/8588537/banner.png"}],["meta",{"name":"twitter:image:alt","content":"Golang, 그대들은 어떻게 할 것인가 - 1. 들어가며"}],["meta",{"property":"article:tag","content":"golang"}],["meta",{"property":"article:tag","content":"go"}],["meta",{"property":"article:tag","content":"d2.naver.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2024-03-27T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Golang, 그대들은 어떻게 할 것인가 - 1. 들어가며"},{"property":"og:description","content":"Golang, 그대들은 어떻게 할 것인가 - 1. 들어가며"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/d2.naver.com/8588537.html"}]],"prev":"/programming/go/articles/README.md","date":"2024-03-27T00:00:00.000Z","isOriginal":false,"cover":"/assets/image/d2.naver.com/8588537/banner.png"},"git":{},"readingTime":{"minutes":1.84,"words":551},"filePathRelative":"d2.naver.com/8588537.md"}');export{I as comp,_ as data};
