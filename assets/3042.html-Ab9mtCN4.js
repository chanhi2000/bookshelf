import{_ as v}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as g,d as s,f as t,b as d,a as b,t as f,n as u,g as r,w as p,e as a,r as o,o as h}from"./app-BVguHYKu.js";const y={},w={id:"frontmatter-title-관련",tabindex:"-1"},j={class:"header-anchor",href:"#frontmatter-title-관련"},A={class:"table-of-contents"},P={href:"https://hanamon.kr/javascript-%EC%BD%9C%EB%B0%B1-%EC%A7%80%EC%98%A5-%ED%83%88%EC%B6%9C%ED%95%98%EA%B8%B0-%EB%B9%84%EB%8F%99%EA%B8%B0-%EC%B2%98%EB%A6%AC-%EB%B0%A9%EB%B2%95/",target:"_blank",rel:"noopener noreferrer"},B={href:"https://inf.run/WfRmY",target:"_blank",rel:"noopener noreferrer"},x={href:"https://inf.run/WfRmY",target:"_blank",rel:"noopener noreferrer"},E={href:"https://jsonplaceholder.typicode.com",target:"_blank",rel:"noopener noreferrer"},I={class:"hint-container info"};function z(k,n){const l=o("VPCard"),e=o("router-link"),i=o("SiteInfo"),m=o("RouteLink"),c=o("VPIcon");return h(),g("div",null,[s("h1",w,[s("a",j,[s("span",null,f(k.$frontmatter.title)+" 관련",1)])]),t(l,u(r({title:"JavaScript > Article(s)",desc:"Article(s)",link:"/programming/js/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",A,[s("ul",null,[s("li",null,[t(e,{to:"#콜백-지옥과-프로미스-객체"},{default:p(()=>n[0]||(n[0]=[a("콜백 지옥과 프로미스 객체")])),_:1,__:[0]}),s("ul",null,[s("li",null,[t(e,{to:"#_1-콜백-지옥이란"},{default:p(()=>n[1]||(n[1]=[a("1. 콜백 지옥이란?")])),_:1,__:[1]})]),s("li",null,[t(e,{to:"#_2-프로미스-객체를-사용한-콜백-지옥-해결"},{default:p(()=>n[2]||(n[2]=[a("2. 프로미스 객체를 사용한 콜백 지옥 해결")])),_:1,__:[2]})])])]),s("li",null,[t(e,{to:"#async와-await"},{default:p(()=>n[3]||(n[3]=[a("async와 await")])),_:1,__:[3]}),s("ul",null,[s("li",null,[t(e,{to:"#_1-async와-await의-역할"},{default:p(()=>n[4]||(n[4]=[a("1. async와 await의 역할")])),_:1,__:[4]})]),s("li",null,[t(e,{to:"#_2-사용-방법"},{default:p(()=>n[5]||(n[5]=[a("2. 사용 방법")])),_:1,__:[5]})]),s("li",null,[t(e,{to:"#_3-에러-핸들링"},{default:p(()=>n[6]||(n[6]=[a("3. 에러 핸들링")])),_:1,__:[6]})])])]),s("li",null,[t(e,{to:"#api-호출"},{default:p(()=>n[7]||(n[7]=[a("API 호출")])),_:1,__:[7]}),s("ul",null,[s("li",null,[t(e,{to:"#_1-클라이언트와-서버-통신"},{default:p(()=>n[8]||(n[8]=[a("1. 클라이언트와 서버 통신")])),_:1,__:[8]})]),s("li",null,[t(e,{to:"#_2-api-호출과-비동기"},{default:p(()=>n[9]||(n[9]=[a("2. API 호출과 비동기")])),_:1,__:[9]})]),s("li",null,[t(e,{to:"#_3-에러-핸들링-1"},{default:p(()=>n[10]||(n[10]=[a("3. 에러 핸들링")])),_:1,__:[10]})])])]),s("li",null,[t(e,{to:"#마치며"},{default:p(()=>n[11]||(n[11]=[a("마치며")])),_:1,__:[11]})])])]),n[33]||(n[33]=s("hr",null,null,-1)),t(i,{name:"한 번에 정리하는 자바스크립트 비동기 코드 작성법",desc:"자바스크립트에서 프로미스를 제대로 활용하지 못하면 여전히 복잡한 코드가 생성될 수 있습니다. 특히 지난 글에서 살짝 언급했던 ‘콜백 지옥(Callback Hell)’ 현상은 코드 가독성을 심각하게 저하시킬 수 있습니다. 이번 글에서는 콜백 지옥이 무엇인지, 그리고 이를 어떻게 해결할 수 있는지, 그리고 더 깔끔한 비동기 코드 작성을 위해 async/await을 어떻게 활용하는지에 대해 알아보겠습니다. 또한 실전에서 가장 많이 활용되는 API 호출과 비동기 처리의 관계에 대해서도 함께 살펴봅시다.",url:"https://yozm.wishket.com/magazine/detail/3042/",logo:"https://yozm.wishket.com/favicon.ico",preview:"https://yozm.wishket.com/media/news/3042/20250217-img3.png"}),s("p",null,[n[13]||(n[13]=a("지난 글 ")),t(m,{to:"/yozm.wishket.com/3034.html"},{default:p(()=>n[12]||(n[12]=[s("strong",null,"‘한 번에 이해하는 자바스크립트 비동기 프로그래밍’",-1)])),_:1,__:[12]}),n[14]||(n[14]=a("에서 자바스크립트의 비동기 처리 개념을 살펴보았습니다. 자바스크립트는 싱글 스레드 언어이기 때문에, 동기적으로 실행되는 코드가 시간이 오래 걸리면 전체 코드의 흐름이 멈추는 단점이 있습니다. 이를 해결하기 위해 ")),n[15]||(n[15]=s("code",null,"setTimeout",-1)),n[16]||(n[16]=a("과 같은 비동기 메서드를 활용하여 코드 실행을 지연시키지 않으면서도, 원하는 시점에 작업을 수행할 수 있었습니다. 또한 프로미스 객체를 사용하면 비동기 작업의 상태를 관리하고, 성공 및 실패 처리를 더 직관적으로 할 수 있다는 점도 배웠죠."))]),n[34]||(n[34]=s("p",null,"하지만 프로미스를 제대로 활용하지 못하면 여전히 복잡한 코드가 생성될 수 있습니다. 특히 지난 글에서 살짝 언급했던 ‘콜백 지옥(Callback Hell)’ 현상은 코드 가독성을 심각하게 저하시킬 수 있습니다.",-1)),n[35]||(n[35]=s("p",null,[a("이번 글에서는 콜백 지옥이 무엇인지, 그리고 이를 어떻게 해결할 수 있는지, 그리고 더 깔끔한 비동기 코드 작성을 위해 "),s("code",null,"async"),a("/"),s("code",null,"await"),a("을 어떻게 활용하는지에 대해 알아보겠습니다. 또한 실전에서 가장 많이 활용되는 API 호출과 비동기 처리의 관계에 대해서도 함께 살펴봅시다.")],-1)),n[36]||(n[36]=s("hr",null,null,-1)),n[37]||(n[37]=s("h2",{id:"콜백-지옥과-프로미스-객체",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#콜백-지옥과-프로미스-객체"},[s("span",null,"콜백 지옥과 프로미스 객체")])],-1)),n[38]||(n[38]=s("p",null,"비동기 처리를 하다 보면 여러 개의 비동기 작업을 순차적으로 실행해야 할 때가 있습니다. 이러한 작업을 단순히 콜백 함수로 연결하면 코드의 복잡도가 급격히 증가할 수 있습니다. 특히 중첩된 콜백이 많아질수록 가독성이 떨어지고 유지보수가 어려워지는데요. 이를 콜백 지옥이라고 부릅니다. 콜백 지옥을 나타내는 유명한 그림이 있는데요, 콜백 지옥이 발생한 코드의 모양을 나타내는 그림입니다.",-1)),s("figure",null,[n[20]||(n[20]=s("img",{src:"https://wishket.com/media/news/3042/20250217-img1.png",alt:'<출처: <VPIcon icon="fas fa-globe"/>하나몬님 블로그>',tabindex:"0",loading:"lazy"},null,-1)),s("figcaption",null,[n[18]||(n[18]=a("<출처: ")),s("a",P,[t(c,{icon:"fas fa-globe"}),n[17]||(n[17]=a("하나몬님 블로그"))]),n[19]||(n[19]=a(">"))])]),n[39]||(n[39]=d(`<h3 id="_1-콜백-지옥이란" tabindex="-1"><a class="header-anchor" href="#_1-콜백-지옥이란"><span>1. 콜백 지옥이란?</span></a></h3><p>콜백 지옥이란 비동기 함수 내에서 콜백 함수가 연쇄적으로 중첩되는 현상을 말합니다. 비동기 작업이 여러 개 연속으로 실행되어야 하는 경우, 다음과 같은 코드가 만들어질 수 있습니다.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;1초 후 실행&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;2초 후 실행&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;3초 후 실행&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>이처럼 여러 개의 <code>setTimeout</code>이 중첩되면 코드의 가독성이 떨어지고 유지보수가 어려워집니다. 특히 API 호출처럼 여러 개의 비동기 작업이 순차적으로 실행되어야 하는 경우, 이러한 콜백 지옥 문제는 더욱 심각해집니다.</p><h3 id="_2-프로미스-객체를-사용한-콜백-지옥-해결" tabindex="-1"><a class="header-anchor" href="#_2-프로미스-객체를-사용한-콜백-지옥-해결"><span>2. 프로미스 객체를 사용한 콜백 지옥 해결</span></a></h3><p>콜백 지옥을 해결하는 방법 중 하나가 바로 프로미스 객체를 사용하는 것입니다. 콜백 지옥의 해결방법에 대해 배워보기 전에, 먼저 저번 시간에 살펴봤던 프로미스 객체에 대해 다시 한 번 더 살펴보도록 하겠습니다.</p><p>프로미스는 비동기 작업의 완료 또는 실패를 처리하기 위한 객체입니다. 프로미스 객체는 <code>new Promise()</code>를 통해 생성하며, 생성자 함수는 다음과 같이 <code>resolve</code>와 <code>reject</code>를 인수로 받는 콜백 함수를 요구했죠.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> myPromise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 비동기 작업 수행</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token comment">/* 작업 성공 */</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;성공 결과&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">&#39;실패 이유&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>resolve</code> 함수는 작업이 성공했을 때 호출하는 함수로, 프로미스의 상태를 이행(fulfilled)으로 변경하고, <code>reject</code> 함수는 작업이 실패했을 때 호출하며, 프로미스의 상태를 거부, 실패(rejected)로 변경하는 함수였습니다.</p><p>앞서 살펴봤듯이, 여러 비동기 작업을 순차적으로 실행해야 할 때 콜백 함수를 중첩하면, 코드가 복잡해져서 가독성이 떨어지는 콜백 지옥이 발생할 수 있습니다. 이러한 문제는 프로미스 객체를 사용해, 콜백을 중첩하지 않고 <code>then</code> 메서드를 사용한 <code>then()</code> 체이닝을 통해 가독성을 개선하고, 콜백 지옥 문제를 해결할 수 있습니다.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">delay</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">ms</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=&gt;</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> ms<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;1초 후 실행&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;2초 후 실행&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;3초 후 실행&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>이처럼 프로미스의 <code>then</code> 메서드를 체이닝, 즉 <code>then</code> 메서드를 연결해서 사용하면 비동기 작업을 순차적으로 처리하면서도 코드의 중첩을 피할 수 있습니다. 그리고 이러한 방식을 ‘프로미스 체이닝’ 이라고 부르기도 합니다. 프로미스 체이닝을 사용하면 콜백 지옥을 피할 수 있을 뿐만 아니라, 비동기 코드의 실행 흐름을 직관적으로 표현할 수 있다는 장점이 있습니다.</p><hr><h2 id="async와-await" tabindex="-1"><a class="header-anchor" href="#async와-await"><span><code>async</code>와 <code>await</code></span></a></h2><p>콜백 지옥을 해결하는 또 다른 강력한 방법은 바로 <code>async</code>/<code>await</code> 문법을 사용하는 방법입니다. 이를 활용하면 비동기 코드를 마치 동기 코드처럼 작성할 수 있어, 가독성이 아주 크게 향상되는 것을 볼 수 있습니다.</p><h3 id="_1-async와-await의-역할" tabindex="-1"><a class="header-anchor" href="#_1-async와-await의-역할"><span>1. <code>async</code>와 <code>await</code>의 역할</span></a></h3><p><code>async</code>와 <code>await</code>은 자바스크립트에서 비동기 코드를 보다 직관적으로 작성할 수 있도록 도와주는 키워드입니다. <code>async</code> 키워드를 함수 앞에 붙이면 해당 함수는 항상 프로미스 객체를 반환하며, 함수의 내부에서는 <code>await</code> 키워드를 사용할 수 있습니다.</p><figure><img src="https://wishket.com/media/news/3042/20250217-img2.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><code>await</code>은 특정 비동기 작업이 완료될 때까지 기다렸다가, 그 결과를 반환하는 역할을 합니다. 이를 통해 비동기 작업을 동기 코드처럼 순차적으로 실행할 수 있게 해줍니다. 기존의 <code>then</code> 메서드 체이닝보다 가독성이 뛰어나고 유지보수가 용이하다는 장점이 있기 때문에, 비동기 작업을 할 때 더 많이 사용되는 문법입니다.</p><h3 id="_2-사용-방법" tabindex="-1"><a class="header-anchor" href="#_2-사용-방법"><span>2. 사용 방법</span></a></h3><p>그럼 <code>async</code>와 <code>await</code>의 사용법에 대해 살펴봅시다. 먼저 아래의 코드를 예시로 들어보겠습니다.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">delay</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">ms</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;3초가 지났습니다.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span> ms<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">start</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>위의 코드는 간단한 비동기 코드인데요. <code>delay</code> 함수의 내부에는 프로미스 객체를 반환하는 코드를 작성하고, <code>resolve</code> 함수에 “3초가 지났습니다”를 전달했습니다. 그리고 <code>start</code> 함수에서는 <code>delay</code> 함수를 호출하고, <code>delayTime</code>으로 3초를 전달한 다음, <code>resolve</code>에 전달된 값을 출력하는 코드를 작성했습니다. 코드를 실행하면 <code>start</code> 함수가 호출되어, 3초 후에 알맞은 문장이 출력되겠죠.</p><p>자바스크립트에서 <code>async</code>는 비동기 작업을 처리할 때 사용되는 키워드로, 비동기 작업을 포함하고 있기 때문에 프로미스 객체를 반환하는 함수에 작성하는 키워드입니다. <code>async</code>를 작성하면 코드를 훨씬 직관적으로 해석할 수 있는데요. <code>async</code>를 사용해서 위에 작성한 코드를 변경해 보겠습니다.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">delay</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">ms</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;3초가 지났습니다.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span> ms<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">start</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>async</code>는 비동기를 수행할 함수의 이름 오른쪽에 작성합니다. 어떠한 함수에 <code>async</code> 키워드를 작성하면, 해당 함수는 항상 자동으로 프로미스 객체를 반환하게 됩니다.</p><figure><img src="https://wishket.com/media/news/3042/20250217-img3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>실제로 <code>async</code> 키워드가 붙은 <code>start</code> 함수에 마우스를 올려보면, 위와 같이 프로미스 객체를 반환하는 함수라는 것을 알 수 있습니다.</p><p>그럼 이제 <code>await</code> 키워드에 대해서도 알아봐야겠죠. <code>await</code>은 <code>async</code> 키워드가 작성된 함수의 내부에서 사용하는 키워드로, <code>await</code> 키워드가 포함된 코드가 실행되면 해당 작업이 종료될 때까지 프로그램의 실행이 중단된다는 특징이 있습니다. 그럼 <code>await</code> 코드를 사용해 위의 코드를 수정해 볼까요?</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">delay</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">ms</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;3초가 지났습니다.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span> ms<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">start</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>async</code> 키워드가 붙어있는 <code>start</code> 함수의 내부에 <code>result</code> 변수를 새로 생성한 다음, 해당 변수에 <code>delay</code> 함수를 호출한 결괏값을 할당해 주었습니다. 그리고 이 <code>delay</code> 함수의 앞에 <code>await</code> 키워드를 작성했습니다. <code>await</code>은 “기다리다”라는 뜻으로, 프로미스 객체가 처리될 때까지 기다리면서, 그동안은 함수의 실행을 중단하는 역할을 합니다.</p><p>따라서 <code>start</code> 함수를 호출하면, <code>delay</code> 함수의 프로미스 객체의 처리가 완료될 때까지 잠시 중단되었다가, 프로미스 객체의 처리가 완료되면 코드가 순서대로 다시 실행됩니다. 이후 <code>result</code> 변수에 <code>delay</code> 함수의 반환값인, 실행 완료된 프로미스 객체가 할당되어 3초 후에 ‘3초가 지났습니다’ 문장이 출력됩니다.</p><p>이렇게 <code>await</code> 키워드는 프로미스 객체가 처리될 때까지 함수의 실행을 기다리게 만드는 역할을 합니다. <code>await</code> 키워드를 사용해서 코드를 작성하면, 프로미스 객체의 <code>then</code> 메서드를 사용해서 코드를 작성하는 것보다 훨씬 가독성이 좋고 편리하게 작성할 수 있습니다. 다만, <code>await</code> 키워드는 프로미스 객체를 반환하는 함수의 내부에서만, 즉 <code>async</code> 키워드가 붙어있는 함수의 내부에서만 사용할 수 있다는 점을 주의해야 합니다.</p><h3 id="_3-에러-핸들링" tabindex="-1"><a class="header-anchor" href="#_3-에러-핸들링"><span>3. 에러 핸들링</span></a></h3><p>그럼 이제 오류가 발생했을 때 어떻게 처리해야 하는지도 알아보겠습니다. 에러 핸들링 방법은 아주 간단한데요. <code>async</code>와 <code>await</code>을 사용한 비동기 처리에서는 <code>try</code>/<code>catch</code> 문을 사용해, 에러를 처리할 수 있습니다. <code>async</code> 함수인 <code>start</code> 함수의 내부에 <code>try</code>/<code>catch</code>를 사용해, 코드를 한번 작성해 보겠습니다.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">delay</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">ms</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;3초가 지났습니다.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span> ms<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">start</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>이렇게 <code>try</code>/<code>catch</code>문을 사용해 작성한 코드의 실행 순서를 살펴보면, 먼저 <code>try</code> 블록 안에 작성된 코드가 실행되고, 해당 코드에서 에러가 발생했다면 바로 아래에 작성된 <code>catch</code> 블록 내부의 코드가 실행됩니다. 발견된 에러는 <code>catch</code>에 전달된 <code>error</code> 객체에 저장되기 때문에, 에러 발생 시 이 <code>error</code> 객체를 사용하면 어떤 에러가 발생했는지를 출력할 수 있습니다. 이처럼 <code>try</code>/<code>catch</code>문을 활용하면, 비동기 코드에서 발생하는 오류를 더욱 안전하게 처리할 수 있습니다.</p><hr><h2 id="api-호출" tabindex="-1"><a class="header-anchor" href="#api-호출"><span>API 호출</span></a></h2><p>자바스크립트에서 비동기 작업을 처리하는 가장 대표적인 예시가 바로 API 호출이죠. 서버와 데이터를 주고받는 과정에서는 네트워크 지연을 포함한 다양한 변수들이 발생할 수 있기 때문에, 이러한 작업은 비동기적으로 처리해야 합니다. 이 글의 마지막에서는 우리가 비동기를 배운 목적인 클라이언트와 서버 간의 통신 원리, API 호출 방식, 그리고 에러 핸들링 방법에 대해 알아보겠습니다.</p><h3 id="_1-클라이언트와-서버-통신" tabindex="-1"><a class="header-anchor" href="#_1-클라이언트와-서버-통신"><span>1. 클라이언트와 서버 통신</span></a></h3><p>웹 브라우저(클라이언트)는 네트워크를 통해 서버와 통신하며, 서버는 데이터베이스에서 필요한 정보를 가져와 클라이언트에게 전달합니다. 이 과정은 우리가 커피숍에서 커피를 주문하는 과정과 유사하게 이해할 수 있습니다.</p>`,42)),s("figure",null,[n[24]||(n[24]=s("img",{src:"https://wishket.com/media/news/3042/20250217-img4.png",alt:'<출처: <VPIcon icon="fas fa-globe"/>인프런, ‘한 번에 끝내는 자바스크립트’>',tabindex:"0",loading:"lazy"},null,-1)),s("figcaption",null,[n[22]||(n[22]=a("<출처: ")),s("a",B,[t(c,{icon:"fas fa-globe"}),n[21]||(n[21]=a("인프런, ‘한 번에 끝내는 자바스크립트’"))]),n[23]||(n[23]=a(">"))])]),n[40]||(n[40]=s("p",null,"커피숍에서 손님이 바리스타에게 커피를 주문하면, 바리스타는 창고에서 원두를 찾아 커피를 만들어 제공하는 것처럼, 클라이언트가 서버에 데이터를 요청하면, 서버는 데이터베이스에서 필요한 정보를 찾아 응답합니다.",-1)),s("figure",null,[n[28]||(n[28]=s("img",{src:"https://wishket.com/media/news/3042/20250217-img5.png",alt:'<출처: <VPIcon icon="fas fa-globe"/>인프런, ‘한 번에 끝내는 자바스크립트’>',tabindex:"0",loading:"lazy"},null,-1)),s("figcaption",null,[n[26]||(n[26]=a("<출처: ")),s("a",x,[t(c,{icon:"fas fa-globe"}),n[25]||(n[25]=a("인프런, ‘한 번에 끝내는 자바스크립트’"))]),n[27]||(n[27]=a(">"))])]),n[41]||(n[41]=d(`<p>즉, 클라이언트는 직접 데이터베이스에 접근하지 않고, 서버에게 요청을 보내 원하는 데이터를 받아오는 구조입니다. 이를 통해 보안과 효율성을 유지하면서 데이터를 주고받을 수 있습니다.</p><h3 id="_2-api-호출과-비동기" tabindex="-1"><a class="header-anchor" href="#_2-api-호출과-비동기"><span>2. API 호출과 비동기</span></a></h3><p>자바스크립트에서는 <code>fetch</code>라는 내장 함수를 사용해서 API를 호출할 수 있습니다. <code>fetch</code> 메서드의 괄호 안에 API 주소를 입력하면 해당 API를 호출합니다.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">let</span> response <span class="token operator">=</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;https://jsonplaceholder.typicode.com/users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>다음과 같이 코드를 작성하고 <code>response</code> 값을 출력하면, 우리가 앞서 살펴봤던 프로미스 객체가 출력되는 것을 볼 수 있습니다. 이렇게 <code>state</code> 프로퍼티가 fulfilled인 프로미스 객체가 출력됩니다.</p><figure><img src="https://wishket.com/media/news/3042/20250217-img6.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><code>fetch</code> 메서드를 사용해 API를 호출하면 이렇게 프로미스 객체를 반환하므로, then 메서드를 활용해 결과 값을 출력할 수 있겠지만, 우리는 더욱 편리한 비동기 처리 방식은 <code>async</code>/<code>await</code>을 배웠기 때문에, 바로 적용해 보겠습니다.</p><p><code>async</code>/<code>await</code>을 사용하기 위해 API를 호출해 값을 받아오는 기능의 함수인 <code>getData</code> 함수를 생성해 봅시다. 그리고 JSON 형식의 데이터인 API 호출 결과를, 자바스크립트에서 사용할 수 있도록 <code>json()</code> 이라는 메서드를 활용해 변경해 줄게요.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">getData</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;https://jsonplaceholder.typicode.com/users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>json()</code> 메서드를 사용해서 <code>response</code>에 담긴 값을, 자바스크립트가 활용할 수 있는 객체의 형태로 변환했습니다. 이때 <code>fetch</code> 함수는 비동기적으로 처리되기 때문에, API 호출이 완전히 끝난 이후에 <code>response</code> 변수를 객체로 변환할 수 있도록 <code>await</code> 키워드를 작성해 줍니다.</p><figure><img src="https://wishket.com/media/news/3042/20250217-img7.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>코드를 실행하면 실제로 위와 같은 값들이 배열에 담겨 출력되는 것을 볼 수 있고, 이렇게 <code>async</code>/<code>await</code>을 사용하면 자바스크립트에서 API 호출과 같은 비동기 작업을 아주 간단하게 처리할 수 있습니다.</p><h3 id="_3-에러-핸들링-1" tabindex="-1"><a class="header-anchor" href="#_3-에러-핸들링-1"><span>3. 에러 핸들링</span></a></h3><p>API 호출은 필요한 데이터를 전달받기 위해 데이터를 요청하는 작업입니다. 데이터를 요청할 때는 네트워크 오류 또는 인터넷 속도 등의 다양한 이유로, 데이터 요청에 실패할 수 있다는 점을 주의해야 하는데요. 이렇게 성공할 수도, 실패할 수도 있는 비동기 작업은 항상 에러를 처리할 수 있도록 해야 합니다. 앞서 살펴봤던 <code>try</code>/<code>catch</code>문을 사용해 에러를 처리해 볼게요.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">getData</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;https://jsonplaceholder.typicode.com/users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>이렇게 <code>try</code>/<code>catch</code>문을 사용하면 매우 쉽게 에러를 처리할 수 있습니다. 실제로 <code>fetch</code> 메서드 내부에 있는 API 주소를 임의로 변경해 볼까요? <code>https://jsonplaceholder1313.typicode.com/users</code>라는 이상한 주소로 변경하고 코드를 실행하면, catch문을 통해 에러 메세지가 알맞게 출력되는 것까지 확인해볼 수 있습니다.</p><p>이렇게 API 호출을 <code>async</code>와 <code>await</code>을 사용해서 비동기로 처리하면, 가독성이 좋은 코드를 작성할 수 있습니다. 이로써 코드의 실행 흐름과 역할을 직관적으로 할 수 있고, 에러 처리 또한 편리하게 할 수 있다는 장점이 있습니다.</p><hr><h2 id="마치며" tabindex="-1"><a class="header-anchor" href="#마치며"><span>마치며</span></a></h2><p>지금까지 자바스크립트의 비동기에 대한 내용을 1, 2편으로 나눠 다뤄보았습니다. 자바스크립트가 비동기 처리를 필요로 하는 이유와 <code>setTimeout</code>, 프로미스 객체, 콜백 지옥, <code>async</code>/<code>await</code>, 그리고 API 호출까지 다양한 비동기 처리 방식에 대해 배웠는데요.</p>`,20)),s("p",null,[n[30]||(n[30]=a("비동기 프로그래밍을 올바르게 활용하면 사용자의 경험을 개선하고, 보다 안정적인 애플리케이션을 개발할 수 있습니다. 비동기는 매우 중요한 개념이고 자주 활용되므로, 직접 코드를 작성해 보며 결괏값을 확인해 보는 과정이 필요합니다. 이번 글에서 사용했던 ")),s("a",E,[t(c,{icon:"fas fa-globe"}),n[29]||(n[29]=a("사이트"))]),n[31]||(n[31]=a("를 활용하면, 무료로 여러 API를 호출해 볼 수 있는데요. 다양한 예제를 통해 비동기 처리를 연습하고 싶으신 분들은 참고해 보시길 바랍니다."))]),s("div",I,[n[32]||(n[32]=s("p",{class:"hint-container-title"},"참고",-1)),t(i,{name:"async와 await",desc:"async와 await라는 특별한 문법을 사용하면 프라미스를 좀 더 편하게 사용할 수 있습니다. async, await는 놀라울 정도로 이해하기 쉽고 사용법도 어렵지 않습니다.",url:"https://ko.javascript.info/async-await/",logo:"https://ko.javascript.info/img/favicon/favicon.png",preview:"https://ko.javascript.info/img/site_preview_en_1200x630.png"}),t(l,u(r({title:"JSONPlaceholder - Free Fake REST API",desc:"",link:"https://jsonplaceholder.typicode.com/",logo:"https://jsonplaceholder.typicode.com/favicon.ico",background:"rgba(59,130,246,0.2)"})),null,16),t(i,{name:"6. API 호출 - 4. 자바스크립트 심화",desc:"웹 프론트엔드를 위한 자바스크립트 첫 걸음 강의 자료",url:"https://one-step-js.hyobb.com/d8ed85e7-b9af-4acd-abd0-8823b1b2dc75/",logo:"https://one-step-js.hyobb.com/favicon.png",preview:"http://localhost:3000/_next/static/media/thumbnail.dce9d322.png"})]),b(" TODO: add ARTICLE CARD "),t(l,u(r({title:"한 번에 정리하는 자바스크립트 비동기 코드 작성법",desc:"자바스크립트에서 프로미스를 제대로 활용하지 못하면 여전히 복잡한 코드가 생성될 수 있습니다. 특히 지난 글에서 살짝 언급했던 ‘콜백 지옥(Callback Hell)’ 현상은 코드 가독성을 심각하게 저하시킬 수 있습니다. 이번 글에서는 콜백 지옥이 무엇인지, 그리고 이를 어떻게 해결할 수 있는지, 그리고 더 깔끔한 비동기 코드 작성을 위해 async/await을 어떻게 활용하는지에 대해 알아보겠습니다. 또한 실전에서 가장 많이 활용되는 API 호출과 비동기 처리의 관계에 대해서도 함께 살펴봅시다.",link:"https://chanhi2000.github.io/bookshelf/yozm.wishket.com/3042.html",logo:"https://yozm.wishket.com/favicon.ico",background:"rgba(84,7,224,0.2)"})),null,16)])}const T=v(y,[["render",z]]),D=JSON.parse('{"path":"/yozm.wishket.com/3042.html","title":"한 번에 정리하는 자바스크립트 비동기 코드 작성법","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"한 번에 정리하는 자바스크립트 비동기 코드 작성법","description":"Article(s) > 한 번에 정리하는 자바스크립트 비동기 코드 작성법","icon":"fa-brands fa-js","category":["JavaScript","Article(s)"],"tag":["blog","yozm.wishket.com","js","javascript"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"한 번에 정리하는 자바스크립트 비동기 코드 작성법\\",\\"image\\":[\\"https://hanamon.kr/javascript-%EC%BD%9C%EB%B0%B1-%EC%A7%80%EC%98%A5-%ED%83%88%EC%B6%9C%ED%95%98%EA%B8%B0-%EB%B9%84%EB%8F%99%EA%B8%B0-%EC%B2%98%EB%A6%AC-%EB%B0%A9%EB%B2%95/\\",\\"https://wishket.com/media/news/3042/20250217-img2.png\\",\\"https://wishket.com/media/news/3042/20250217-img3.png\\",\\"https://inf.run/WfRmY\\",\\"https://inf.run/WfRmY\\",\\"https://wishket.com/media/news/3042/20250217-img6.png\\",\\"https://wishket.com/media/news/3042/20250217-img7.png\\"],\\"datePublished\\":\\"2025-04-01T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"효빈\\",\\"url\\":\\"https://yozm.wishket.com/magazine/@hbin12212/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/yozm.wishket.com/3042.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"한 번에 정리하는 자바스크립트 비동기 코드 작성법"}],["meta",{"property":"og:description","content":"Article(s) > 한 번에 정리하는 자바스크립트 비동기 코드 작성법"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://yozm.wishket.com/media/news/3042/20250217-img3.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://yozm.wishket.com/media/news/3042/20250217-img3.png"}],["meta",{"name":"twitter:image:alt","content":"한 번에 정리하는 자바스크립트 비동기 코드 작성법"}],["meta",{"property":"article:author","content":"효빈"}],["meta",{"property":"article:tag","content":"javascript"}],["meta",{"property":"article:tag","content":"js"}],["meta",{"property":"article:tag","content":"yozm.wishket.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2025-04-01T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > 한 번에 정리하는 자바스크립트 비동기 코드 작성법"},{"property":"og:description","content":"한 번에 정리하는 자바스크립트 비동기 코드 작성법"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/yozm.wishket.com/3042.html"}]],"prev":"/programming/js/articles/README.md","date":"2025-04-01T00:00:00.000Z","isOriginal":false,"author":[{"name":"효빈","url":"https://yozm.wishket.com/magazine/@hbin12212/"}],"cover":"https://yozm.wishket.com/media/news/3042/20250217-img3.png"},"git":{},"readingTime":{"minutes":2.52,"words":755},"filePathRelative":"yozm.wishket.com/3042.md","copyright":{"author":"효빈"}}');export{T as comp,D as data};
