import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as g,d as t,f as o,b as r,t as h,n as y,g as k,w as p,e as s,r as a,o as b}from"./app-BVguHYKu.js";const f="/bookshelf/assets/image/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/chakra-ui.jpeg",x="/bookshelf/assets/image/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/chakra-ui-as-prop.png",v="/bookshelf/assets/image/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/box-component-rendered-as-button.png",w="/bookshelf/assets/image/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/box-component-rendered-as-h1.png",j="/bookshelf/assets/image/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/MUI-component-prop.jpeg",I="/bookshelf/assets/image/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/MUI-component-prop-1.jpeg",U={},T={id:"frontmatter-title-관련",tabindex:"-1"},R={class:"header-anchor",href:"#frontmatter-title-관련"},C={class:"table-of-contents"},B={href:"https://chakra-ui.com/",target:"_blank",rel:"noopener noreferrer"},A={href:"https://mui.com/material-ui/guides/composition/#component-prop",target:"_blank",rel:"noopener noreferrer"},q={href:"https://github.com/ohansemmanuel/polymorphic-react-component/blob/master/use-cases.pdf",target:"_blank",rel:"noopener noreferrer"};function S(c,n){const i=a("VPCard"),l=a("router-link"),m=a("SiteInfo"),u=a("RouteLink"),e=a("VPIcon");return b(),g("div",null,[t("h1",T,[t("a",R,[t("span",null,h(c.$frontmatter.title)+" 관련",1)])]),o(i,y(k({title:"Build strongly typed polymorphic components with React and TypeScript",desc:"Learn how to build strongly typed polymorphic React components with TypeScript, using familiar Chakra UI and MUI component props as guides.",link:"/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/README.md",logo:"/assets/image/blog.logrocket.com/favicon.png",background:"rgba(112,76,182,0.2)"})),null,16),t("nav",C,[t("ul",null,[t("li",null,[o(l,{to:"#chakra-ui-s-as-prop"},{default:p(()=>n[0]||(n[0]=[s("Chakra UI’s as prop")])),_:1,__:[0]})]),t("li",null,[o(l,{to:"#mui-s-component-prop"},{default:p(()=>n[1]||(n[1]=[s("MUI’s component prop")])),_:1,__:[1]})])])]),n[20]||(n[20]=t("hr",null,null,-1)),o(m,{name:"Build strongly typed polymorphic components with React and TypeScript",desc:"Learn how to build strongly typed polymorphic React components with TypeScript, using familiar Chakra UI and MUI component props as guides.",url:"https://blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript#real-world-examples-polymorphic-components",logo:"/assets/image/blog.logrocket.com/favicon.png",preview:"/assets/image/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/banner.png"}),t("p",null,[n[3]||(n[3]=s("There’s a nonzero chance you’ve already used a polymorphic component. Open source ")),o(u,{to:"/blog.logrocket.com/build-component-library-react-typescript.html"},{default:p(()=>n[2]||(n[2]=[t("strong",null,"component libraries",-1)])),_:1,__:[2]}),n[4]||(n[4]=s(" typically implement some sort of polymorphic component."))]),n[21]||(n[21]=t("p",null,[s("Let’s consider some you may be familiar with: the Chakra UI "),t("code",null,"as"),s(" prop and MUI "),t("code",null,"component"),s(" prop.")],-1)),n[22]||(n[22]=t("hr",null,null,-1)),n[23]||(n[23]=t("h2",{id:"chakra-ui-s-as-prop",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#chakra-ui-s-as-prop"},[t("span",null,[s("Chakra UI’s "),t("code",null,"as"),s(" prop")])])],-1)),n[24]||(n[24]=t("p",null,[s("f "),t("img",{src:f,alt:"Chakra UI",loading:"lazy"})],-1)),t("p",null,[n[6]||(n[6]=s("How does ")),t("a",B,[o(e,{icon:"fas fa-globe"}),n[5]||(n[5]=s("Chakra UI"))]),n[7]||(n[7]=s(" implement polymorphic props? The answer is by exposing an ")),n[8]||(n[8]=t("code",null,"as",-1)),n[9]||(n[9]=s(" prop. The ")),n[10]||(n[10]=t("code",null,"as",-1)),n[11]||(n[11]=s(" prop is passed to a component to determine what container element it should eventually render."))]),n[25]||(n[25]=r('<figure><img src="'+x+`" alt="Chakra UI As Prop" tabindex="0" loading="lazy"><figcaption>Chakra UI As Prop</figcaption></figure><p>All you need to do to use the <code>as</code> prop is pass it to the component, which in this case is <code>Box</code>:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Box</span></span> <span class="token attr-name">as</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>button<span class="token punctuation">&#39;</span></span> <span class="token attr-name">borderRadius</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>md<span class="token punctuation">&#39;</span></span> <span class="token attr-name">bg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>tomato<span class="token punctuation">&#39;</span></span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>white<span class="token punctuation">&#39;</span></span> <span class="token attr-name">px</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">}</span></span> <span class="token attr-name">h</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">8</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">  Button</span>
<span class="line"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Box</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now, the component will render a <code>button</code> element.</p><figure><img src="`+v+`" alt="The Box Component Rendered As A Button" tabindex="0" loading="lazy"><figcaption>The Box Component Rendered As A Button</figcaption></figure><p>If you changed the <code>as</code> prop to a <code>h1</code>:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Box</span></span> <span class="token attr-name">as</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>h1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"> Hello </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Box</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Now, the <code>Box</code> component renders a <code>h1</code>:</p><figure><img src="`+w+'" alt="The Box Component Rendered As An H1" tabindex="0" loading="lazy"><figcaption>The Box Component Rendered As An H1</figcaption></figure><p>That’s a polymorphic component at work! It can be rendered to entirely unique elements, all by passing down a single prop.</p><hr><h2 id="mui-s-component-prop" tabindex="-1"><a class="header-anchor" href="#mui-s-component-prop"><span>MUI’s <code>component</code> prop</span></a></h2><figure><img src="'+j+'" alt="MUI&#39;s Component Prop" tabindex="0" loading="lazy"><figcaption>MUI&#39;s Component Prop</figcaption></figure><p>Similar to Chakra UI, <a href="/blog.logrocket.com/definitive-guide-react-material/" target="_blank" rel="noopener noreferrer"><strong>MUI</strong></a> allows for a polymorphic prop called <code>component</code>, which is implemented similarly: you pass it to a component and state the element or custom component you’d like to render.</p>',14)),t("p",null,[n[13]||(n[13]=s("Here’s an example from ")),t("a",A,[o(e,{icon:"fas fa-globe"}),n[12]||(n[12]=s("the official docs"))]),n[14]||(n[14]=s(":"))]),n[26]||(n[26]=r('<figure><img src="'+I+`" alt="The MUI Component Prop" tabindex="0" loading="lazy"><figcaption>The MUI Component Prop</figcaption></figure><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">List</span></span> <span class="token attr-name">component</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>nav<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ListItem</span></span> <span class="token attr-name">button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ListItemText</span></span> <span class="token attr-name">primary</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Trash<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">ListItem</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">List</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>List</code> is passed a component prop of <code>nav</code>; when this is rendered, it’ll render a <code>nav</code> container element.</p><p>Another user may use the same component, but not for navigation; instead, they may want to render a to-do list:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">List</span></span> <span class="token attr-name">component</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ol<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">  ...</span>
<span class="line"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">List</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And in this case, <code>List</code> will render an ordered list <code>ol</code> element.</p>`,6)),t("p",null,[n[18]||(n[18]=s("Talk about flexibility! See a ")),t("a",q,[n[15]||(n[15]=s("summary of the use cases (")),o(e,{icon:"iconfont icon-github"}),n[16]||(n[16]=t("code",null,"ohansemmanuel/polymorphic-react-component",-1)),n[17]||(n[17]=s(")"))]),n[19]||(n[19]=s(" for polymorphic components."))]),n[27]||(n[27]=t("p",null,"As you’ll come to see in the following sections of this article, polymorphic components are powerful. Apart from just accepting a prop of an element type, they can also accept custom components as props.",-1)),n[28]||(n[28]=t("p",null,"This will be discussed in a coming section of this article. For now, let’s get building our first polymorphic component!",-1))])}const L=d(U,[["render",S]]),z=JSON.parse('{"path":"/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/real-world-examples-polymorphic-components.html","title":"Real-world examples of polymorphic components","lang":"en-US","frontmatter":{"lang":"en-US","title":"Real-world examples of polymorphic components","description":"Article(s) > (1/10) Build strongly typed polymorphic components with React and TypeScript","category":["Node.js","React.js","Article(s)"],"tag":["blog","blog.logrocket.com","node","nodejs","node-js","react","reactjs","react-js"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Real-world examples of polymorphic components\\",\\"image\\":[\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/chakra-ui.jpeg\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/chakra-ui-as-prop.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/box-component-rendered-as-button.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/box-component-rendered-as-h1.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/MUI-component-prop.jpeg\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/MUI-component-prop-1.jpeg\\"],\\"datePublished\\":\\"2022-05-25T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Ohans Emmanuel\\",\\"url\\":\\"https://blog.logrocket.com/author/ohansemmanuel/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/real-world-examples-polymorphic-components.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Real-world examples of polymorphic components"}],["meta",{"property":"og:description","content":"Article(s) > (1/10) Build strongly typed polymorphic components with React and TypeScript"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/banner.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/banner.png"}],["meta",{"name":"twitter:image:alt","content":"Real-world examples of polymorphic components"}],["meta",{"property":"article:author","content":"Ohans Emmanuel"}],["meta",{"property":"article:tag","content":"react-js"}],["meta",{"property":"article:tag","content":"reactjs"}],["meta",{"property":"article:tag","content":"react"}],["meta",{"property":"article:tag","content":"node-js"}],["meta",{"property":"article:tag","content":"nodejs"}],["meta",{"property":"article:tag","content":"node"}],["meta",{"property":"article:tag","content":"blog.logrocket.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2022-05-25T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > (1/10) Build strongly typed polymorphic components with React and TypeScript"},{"property":"og:description","content":"Real-world examples of polymorphic components"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript//real-world-examples-polymorphic-components.html"}]],"date":"2022-05-25T00:00:00.000Z","isOriginal":false,"author":[{"name":"Ohans Emmanuel","url":"https://blog.logrocket.com/author/ohansemmanuel/"}],"cover":"/assets/image/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/banner.png"},"git":{},"readingTime":{"minutes":2.33,"words":698},"filePathRelative":"blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/real-world-examples-polymorphic-components.md","copyright":{"author":"Ohans Emmanuel"}}');export{L as comp,z as data};
