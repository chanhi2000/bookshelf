import{_ as b}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as g,d as s,f as t,b as i,a as l,t as h,n as r,g as k,w as e,e as a,r as c,o as f}from"./app-BVguHYKu.js";const y={},w={id:"frontmatter-title-관련",tabindex:"-1"},j={class:"header-anchor",href:"#frontmatter-title-관련"},z={class:"table-of-contents"},S={class:"hint-container info"},x={href:"https://rxjs.dev/",target:"_blank",rel:"noopener noreferrer"},P={href:"https://mobx.js.org/",target:"_blank",rel:"noopener noreferrer"},O={href:"https://frontendmasters.com/courses/reactivity-solidjs/",target:"_blank",rel:"noopener noreferrer"},R={href:"https://gist.github.com/1Marc/09e739caa6a82cc176ab4c2abd691814",target:"_blank",rel:"noopener noreferrer"},A={href:"https://github.com/FrontendMasters/observablish-values",target:"_blank",rel:"noopener noreferrer"},M={href:"https://npmjs.com/package/lit-html",target:"_blank",rel:"noopener noreferrer"},q={href:"https://lit.dev/docs/libraries/standalone-templates/",target:"_blank",rel:"noopener noreferrer"},C={href:"https://github.com/1Marc/modern-todomvc-vanillajs",target:"_blank",rel:"noopener noreferrer"},E={href:"https://codepen.io/1Marc/pen/wvEKOEr",target:"_blank",rel:"noopener noreferrer"},T={class:"hint-container note"},V={href:"https://frontendmasters.com/learn/javascript/",target:"_blank",rel:"noopener noreferrer"},I={href:"https://frontendmasters.com/courses/javascript-hard-parts-v2/",target:"_blank",rel:"noopener noreferrer"},D={class:"hint-container info"};function J(d,n){const u=c("VPCard"),p=c("router-link"),v=c("SiteInfo"),o=c("VPIcon"),m=c("RouteLink");return f(),g("div",null,[s("h1",w,[s("a",j,[s("span",null,h(d.$frontmatter.title)+" 관련",1)])]),t(u,r(k({title:"JavaScript > Article(s)",desc:"Article(s)",link:"/programming/js/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",z,[s("ul",null,[s("li",null,[t(p,{to:"#reactivity-patterns-are-core-to-web-development"},{default:e(()=>n[0]||(n[0]=[a("Reactivity Patterns are Core to Web Development")])),_:1,__:[0]})]),s("li",null,[t(p,{to:"#pubsub-pattern-publish-subscriber"},{default:e(()=>n[1]||(n[1]=[a("PubSub Pattern (Publish Subscriber)")])),_:1,__:[1]}),s("ul",null,[s("li",null,[t(p,{to:"#custom-events-native-browser-api-for-pubsub"},{default:e(()=>n[2]||(n[2]=[a("Custom Events: Native Browser API for PubSub")])),_:1,__:[2]})]),s("li",null,[t(p,{to:"#class-instance-custom-events-subclassing-eventtarget"},{default:e(()=>n[3]||(n[3]=[a("Class Instance Custom Events: Subclassing EventTarget")])),_:1,__:[3]})])])]),s("li",null,[t(p,{to:"#observer-pattern"},{default:e(()=>n[4]||(n[4]=[a("Observer Pattern")])),_:1,__:[4]})]),s("li",null,[t(p,{to:"#reactive-object-properties-with-proxies"},{default:e(()=>n[5]||(n[5]=[a("Reactive Object Properties with Proxies")])),_:1,__:[5]}),s("ul",null,[s("li",null,[t(p,{to:"#reactive-individual-properties-object-defineproperty"},{default:e(()=>n[6]||(n[6]=[a("Reactive Individual Properties: Object.defineProperty")])),_:1,__:[6]})]),s("li",null,[t(p,{to:"#asynchronous-reactive-data-with-promises"},{default:e(()=>n[7]||(n[7]=[a("Asynchronous Reactive Data with Promises")])),_:1,__:[7]})])])]),s("li",null,[t(p,{to:"#reactive-systems"},{default:e(()=>n[8]||(n[8]=[a("Reactive Systems")])),_:1,__:[8]}),s("ul",null,[s("li",null,[t(p,{to:"#observables-pattern-of-rx-js"},{default:e(()=>n[9]||(n[9]=[a("Observables (Pattern of Rx.js)")])),_:1,__:[9]})]),s("li",null,[t(p,{to:"#signals-pattern-of-solidjs"},{default:e(()=>n[10]||(n[10]=[a("“Signals” (Pattern of SolidJS)")])),_:1,__:[10]})]),s("li",null,[t(p,{to:"#observable-ish-values-frontend-masters"},{default:e(()=>n[11]||(n[11]=[a("“Observable-ish” Values (Frontend Masters)")])),_:1,__:[11]})])])]),s("li",null,[t(p,{to:"#reactive-rendering-of-ui"},{default:e(()=>n[12]||(n[12]=[a("Reactive Rendering of UI")])),_:1,__:[12]}),s("ul",null,[s("li",null,[t(p,{to:"#render-data-to-html-string-literals"},{default:e(()=>n[13]||(n[13]=[a("Render Data to HTML String Literals")])),_:1,__:[13]})]),s("li",null,[t(p,{to:"#reactive-dom-attributes-mutationobserver"},{default:e(()=>n[14]||(n[14]=[a("Reactive DOM Attributes: MutationObserver")])),_:1,__:[14]})]),s("li",null,[t(p,{to:"#reactive-attributes-in-web-components"},{default:e(()=>n[15]||(n[15]=[a("Reactive Attributes in Web Components")])),_:1,__:[15]})]),s("li",null,[t(p,{to:"#reactive-scrolling-intersectionobserver"},{default:e(()=>n[16]||(n[16]=[a("Reactive Scrolling: IntersectionObserver")])),_:1,__:[16]})]),s("li",null,[t(p,{to:"#animation-game-loop-requestanimationframe"},{default:e(()=>n[17]||(n[17]=[a("Animation & Game Loop: requestAnimationFrame")])),_:1,__:[17]})]),s("li",null,[t(p,{to:"#reactive-animations-web-animations-api"},{default:e(()=>n[18]||(n[18]=[a("Reactive Animations: Web Animations API")])),_:1,__:[18]})]),s("li",null,[t(p,{to:"#reactive-css-custom-properties-and-calc"},{default:e(()=>n[19]||(n[19]=[a("Reactive CSS: Custom Properties and calc")])),_:1,__:[19]})])])]),s("li",null,[t(p,{to:"#the-many-ways-to-achieve-reactivity"},{default:e(()=>n[20]||(n[20]=[a("The Many Ways to Achieve Reactivity")])),_:1,__:[20]})])])]),n[70]||(n[70]=s("hr",null,null,-1)),t(v,{name:"Patterns for Reactivity with Modern Vanilla JavaScript",desc:"“Reactivity” is how systems react to changes in data. There are many types of reactivity, but for this article, reactivity is when data changes, you do things.",url:"https://frontendmasters.com/blog/vanilla-javascript-reactivity/",logo:"https://frontendmasters.com/favicon.ico",preview:"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/40"}),n[71]||(n[71]=s("p",null,[a("“Reactivity” is how systems react to changes in data. There are many types of reactivity, but for this article, reactivity is "),s("strong",null,"when data changes, you do things"),a(".")],-1)),s("div",S,[n[21]||(n[21]=s("p",{class:"hint-container-title"},"Article Series",-1)),n[22]||(n[22]=s("ol",null,[s("li",null,[s("a",{href:"https://frontendmasters.com/blog/vanilla-javascript-todomvc/",target:"_blank",rel:"noopener noreferrer"},"Writing a TodoMVC App with Modern Vanilla JavaScript")])],-1)),l(" TODO: /frontendmasters.com/vanilla-javascript-todomvc.md "),t(u,r(k({title:"Patterns for Reactivity with Modern Vanilla JavaScript",desc:"“Reactivity” is how systems react to changes in data. There are many types of reactivity, but for this article, reactivity is when data changes, you do things.",link:"/frontendmasters.com/vanilla-javascript-reactivity.md",logo:"https://frontendmasters.com/favicon.ico",background:"rgba(188,75,52,0.2)"})),null,16),n[23]||(n[23]=s("ol",{start:"3"},[s("li",null,[s("a",{href:"https://frontendmasters.com/blog/patterns-for-memory-efficient-dom-manipulation/",target:"_blank",rel:"noopener noreferrer"},"Patterns for Memory Efficient DOM Manipulation with Modern Vanilla JavaScript")])],-1)),l(" TODO: /frontendmasters.com/patterns-for-memory-efficient-dom-manipulation.md ")]),n[72]||(n[72]=i(`<hr><h2 id="reactivity-patterns-are-core-to-web-development" tabindex="-1"><a class="header-anchor" href="#reactivity-patterns-are-core-to-web-development"><span>Reactivity Patterns are Core to Web Development</span></a></h2><p>We handle a lot with JavaScript in websites and web apps since the browser is an entirely asynchronous environment. We must respond to user inputs, communicate with servers, log, perform, etc. All these tasks involve updates to the UI, Ajax requests, browser URLs, and navigation changes, making cascading data changes a core aspect of web development.</p><p>As an industry, we associate reactivity with frameworks, but you can learn a lot by implementing reactivity in pure JavaScript. We can mix and match these patterns to wire behavior to data changes.</p><p>Learning core patterns with pure JavaScript will lead to less code and better performance in your web apps, no matter what tool or framework you use.</p><p>I love learning patterns because they apply to any language and system. Patterns can be combined to solve your app’s exact requirements, often leading to more performant and maintainable code.</p><p>Hopefully, you’ll learn new patterns to add to your toolbox, no matter what frameworks and libraries you use!</p><hr><h2 id="pubsub-pattern-publish-subscriber" tabindex="-1"><a class="header-anchor" href="#pubsub-pattern-publish-subscriber"><span>PubSub Pattern (Publish Subscriber)</span></a></h2><p>PubSub is one of the most foundational patterns for reactivity. Firing an event out with <code>publish()</code> allows anyone to listen to that event <code>subscribe()</code> and do whatever they want in a decoupled from whatever fires that event.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> pubSub <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">events</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>events<span class="token punctuation">[</span>event<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>events<span class="token punctuation">[</span>event<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>events<span class="token punctuation">[</span>event<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function">publish</span><span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>events<span class="token punctuation">[</span>event<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>events<span class="token punctuation">[</span>event<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">callback</span> <span class="token operator">=&gt;</span> <span class="token function">callback</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">pubSub<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">&#39;update&#39;</span><span class="token punctuation">,</span> <span class="token parameter">data</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">pubSub<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span><span class="token string">&#39;update&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Some update&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Some update</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Note the publisher has <em>no idea</em> of what is listening to it, so there is no way to unsubscribe or clean up after itself with this simple implementation.</p><h3 id="custom-events-native-browser-api-for-pubsub" tabindex="-1"><a class="header-anchor" href="#custom-events-native-browser-api-for-pubsub"><span>Custom Events: Native Browser API for PubSub</span></a></h3><p>The browser has a JavaScript API for firing and subscribing to custom events. It allows you to send data along with the custom events using <code>dispatchEvent</code>.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> pizzaEvent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CustomEvent</span><span class="token punctuation">(</span><span class="token string">&quot;pizzaDelivery&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">detail</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;supreme&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;pizzaDelivery&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>detail<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">window<span class="token punctuation">.</span><span class="token function">dispatchEvent</span><span class="token punctuation">(</span>pizzaEvent<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can scope these custom events to any DOM node. In the code example, we use the global <code>window</code> object, also known as a global event bus, so anything in our app can listen and do something with the event data.</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre><code class="language-html"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>pizza-store<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> pizzaEvent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CustomEvent</span><span class="token punctuation">(</span><span class="token string">&quot;pizzaDelivery&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">detail</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;supreme&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> pizzaStore <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#pizza-store&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">pizzaStore<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;pizzaDelivery&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>detail<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">pizzaStore<span class="token punctuation">.</span><span class="token function">dispatchEvent</span><span class="token punctuation">(</span>pizzaEvent<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="class-instance-custom-events-subclassing-eventtarget" tabindex="-1"><a class="header-anchor" href="#class-instance-custom-events-subclassing-eventtarget"><span>Class Instance Custom Events: Subclassing EventTarget</span></a></h3><p>We can subclass EventTarget to send out events on a class instance for our app to bind to:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">class</span> <span class="token class-name">PizzaStore</span> <span class="token keyword">extends</span> <span class="token class-name">EventTarget</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token function">addPizza</span><span class="token punctuation">(</span><span class="token parameter">flavor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// fire event directly on the class</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">dispatchEvent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CustomEvent</span><span class="token punctuation">(</span><span class="token string">&quot;pizzaAdded&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">detail</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">pizza</span><span class="token operator">:</span> flavor<span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> Pizzas <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PizzaStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">Pizzas<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;pizzaAdded&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Added Pizza:&#39;</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>detail<span class="token punctuation">.</span>pizza<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">Pizzas<span class="token punctuation">.</span><span class="token function">addPizza</span><span class="token punctuation">(</span><span class="token string">&quot;supreme&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The cool thing about this is your events aren’t firing globally on the window. You can fire an event directly on a class; anything in your app can wire up event listeners directly to that class.</p><hr><h2 id="observer-pattern" tabindex="-1"><a class="header-anchor" href="#observer-pattern"><span>Observer Pattern</span></a></h2><p>The observer pattern has the same basic premise as the PubSub pattern. It allows you to have behavior “subscribed” to a Subject. And when the Subject fires the <code>notify</code> method, it notifies everything subscribed.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">class</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>observers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token function">addObserver</span><span class="token punctuation">(</span><span class="token parameter">observer</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>observers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token function">removeObserver</span><span class="token punctuation">(</span><span class="token parameter">observer</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> index <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>observers<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">this</span><span class="token punctuation">.</span>observers<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token function">notify</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>observers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">observer</span> <span class="token operator">=&gt;</span> observer<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">update</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> subject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Subject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Observer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">subject<span class="token punctuation">.</span><span class="token function">addObserver</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">subject<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token string">&#39;Everyone gets pizzas!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The main difference between this and PubSub is that the Subject knows about its observers and can remove them. They aren’t <em>completely</em> decoupled like in PubSub.</p><hr><h2 id="reactive-object-properties-with-proxies" tabindex="-1"><a class="header-anchor" href="#reactive-object-properties-with-proxies"><span>Reactive Object Properties with Proxies</span></a></h2><p>Proxies in JavaScript can be the foundation for performing reactivity after setting or getting properties on an object.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> handler <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> property</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Getting property </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>property<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> target<span class="token punctuation">[</span>property<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> property<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Setting property </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>property<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> to </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    target<span class="token punctuation">[</span>property<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// indicates that the setting has been done successfully</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> pizza <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Margherita&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">toppings</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;tomato sauce&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;mozzarella&#39;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> proxiedPizza <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>pizza<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>proxiedPizza<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Outputs &quot;Getting property name&quot; and &quot;Margherita&quot;</span></span>
<span class="line">proxiedPizza<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;Pepperoni&#39;</span><span class="token punctuation">;</span> <span class="token comment">// Outputs &quot;Setting property name to Pepperoni&quot;\`</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When you access or modify a property on the <code>proxiedPizza</code>, it logs a message to the console. But you could imagine wiring any functionality to property access on an object.</p><h3 id="reactive-individual-properties-object-defineproperty" tabindex="-1"><a class="header-anchor" href="#reactive-individual-properties-object-defineproperty"><span>Reactive Individual Properties: <code>Object.defineProperty</code></span></a></h3><p>You can do an identical thing for a specific property using <code>Object.defineProperty</code>. You can define getters and setters for properties and run code when a property is accessed or modified.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> pizza <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">_name</span><span class="token operator">:</span> <span class="token string">&#39;Margherita&#39;</span><span class="token punctuation">,</span> <span class="token comment">// Internal property</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>pizza<span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Getting property name</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_name<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Setting property name to </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>_name <span class="token operator">=</span> value<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Example usage:</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pizza<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Outputs &quot;Getting property name&quot; and &quot;Margherita&quot;</span></span>
<span class="line">pizza<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;Pepperoni&#39;</span><span class="token punctuation">;</span> <span class="token comment">// Outputs &quot;Setting property name to Pepperoni&quot;\`</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Here, we’re using <code>Object.defineProperty</code> to define a getter and setter for the name property of the pizza object. The actual value is stored in a private <code>_name</code> property, and the getter and setter provide access to that value while logging messages to the console.</p><p><code>Object.defineProperty</code> is more verbose than using a <code>Proxy</code>, especially if you want to apply the same behavior to many properties. But it’s a powerful and flexible way to define custom behavior for individual properties.</p><h3 id="asynchronous-reactive-data-with-promises" tabindex="-1"><a class="header-anchor" href="#asynchronous-reactive-data-with-promises"><span>Asynchronous Reactive Data with Promises</span></a></h3><p>Let’s make using the observers asynchronous! This way we can update the data and have multiple observers run asynchronously.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">class</span> <span class="token class-name">AsyncData</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">initialData</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> initialData<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>subscribers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// Subscribe to changes in the data</span></span>
<span class="line">  <span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> callback <span class="token operator">!==</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;Callback must be a function&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>subscribers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// Update the data and wait for all updates to complete</span></span>
<span class="line">  <span class="token keyword">async</span> <span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Call the subscribed function and wait for it to resolve</span></span>
<span class="line">    <span class="token keyword">const</span> updates <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>subscribers<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">await</span> <span class="token function">callback</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">allSettled</span><span class="token punctuation">(</span>updates<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Here’s a class that wraps a data object and triggers an update when the data changes.</p><h4 id="awaiting-our-async-observers" tabindex="-1"><a class="header-anchor" href="#awaiting-our-async-observers"><span>Awaiting Our Async Observers</span></a></h4><p>Let’s say we want to wait until all subscriptions to our asynchronous reactive data are processed:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AsyncData</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">pizza</span><span class="token operator">:</span> <span class="token string">&#39;Pepperoni&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">data<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=&gt;</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Updated UI for </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">data<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=&gt;</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Logged change for </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// function to update data and wait for all updates to complete</span></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">updateData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">await</span> data<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;pizza&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Supreme&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// This will call the subscribed functions and wait for their promises to resolve</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;All updates complete.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">updateData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\`</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Our <code>updateData</code> function is now async, so we can await all the subscribed functions to resolve before continuing our program. This pattern allows juggling asynchronous reactivity a bit simpler.</p><hr><h2 id="reactive-systems" tabindex="-1"><a class="header-anchor" href="#reactive-systems"><span>Reactive Systems</span></a></h2><p>Many more complex reactive systems are at the foundations of popular libraries and frameworks: hooks in React, Signals in Solid, Observables in Rx.js, and more. They usually have the same basic premise of when data changes, re-render the components or associated DOM fragments.</p><h3 id="observables-pattern-of-rx-js" tabindex="-1"><a class="header-anchor" href="#observables-pattern-of-rx-js"><span>Observables (Pattern of Rx.js)</span></a></h3><p>Observables and Observer Pattern are not the same despite being nearly the same word, lol.</p><p>Observables allow you to define a way to produce a sequence of values over time. Here is a simple Observable primitive that provides a way to emit a sequence of values to subscribers, allowing them to react as those values are produced.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">class</span> <span class="token class-name">Observable</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">producer</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>producer <span class="token operator">=</span> producer<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// Method to allow a subscriber to subscribe to the observable</span></span>
<span class="line">  <span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token parameter">observer</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Ensure the observer has the necessary functions</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> observer <span class="token operator">!==</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">||</span> observer <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;Observer must be an object with next, error, and complete methods&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> observer<span class="token punctuation">.</span>next <span class="token operator">!==</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;Observer must have a next method&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> observer<span class="token punctuation">.</span>error <span class="token operator">!==</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;Observer must have an error method&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> observer<span class="token punctuation">.</span>complete <span class="token operator">!==</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;Observer must have a complete method&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">const</span> unsubscribe <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">producer</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Return an object with an unsubscribe method</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function-variable function">unsubscribe</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>unsubscribe <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> unsubscribe <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token function">unsubscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Here’s how you would use them:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// Create a new observable that emits three values and then completes</span></span>
<span class="line"><span class="token keyword">const</span> observable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Observable</span><span class="token punctuation">(</span><span class="token parameter">observer</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  observer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  observer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  observer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  observer<span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// Optional: Return a function to handle any cleanup if the observer unsubscribes</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Observer unsubscribed&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Define an observer with next, error, and complete methods</span></span>
<span class="line"><span class="token keyword">const</span> observer <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function-variable function">next</span><span class="token operator">:</span> <span class="token parameter">value</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Received value:&#39;</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function-variable function">error</span><span class="token operator">:</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Error:&#39;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function-variable function">complete</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Completed&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Subscribe to the observable</span></span>
<span class="line"><span class="token keyword">const</span> subscription <span class="token operator">=</span> observable<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Optionally, you can later unsubscribe to stop receiving values</span></span>
<span class="line">subscription<span class="token punctuation">.</span><span class="token function">unsubscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The critical component of an Observable is the <code>next()</code> method, which sends data to the observers. A <code>complete()</code> method for when the Observable stream closes. And an <code>error()</code> method when something goes wrong. Also, there has to be a way to <code>subscribe()</code> to listen for changes and <code>unsubscribe()</code> to stop receiving data from the stream.</p>`,55)),s("p",null,[n[26]||(n[26]=a("The most popular libraries that use this pattern are ")),s("a",x,[t(o,{icon:"fas fa-globe"}),n[24]||(n[24]=a("Rx.js"))]),n[27]||(n[27]=a(" and ")),s("a",P,[t(o,{icon:"fas fa-globe"}),n[25]||(n[25]=a("MobX"))]),n[28]||(n[28]=a("."))]),n[73]||(n[73]=s("h3",{id:"signals-pattern-of-solidjs",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#signals-pattern-of-solidjs"},[s("span",null,"“Signals” (Pattern of SolidJS)")])],-1)),s("p",null,[n[30]||(n[30]=a("Hat tip Ryan Carniato’s ")),s("a",O,[t(o,{icon:"fas fa-globe"}),n[29]||(n[29]=a("Reactivity with SolidJS course"))]),n[31]||(n[31]=a("."))]),n[74]||(n[74]=i(`<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createSignal</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> subscriptions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">read</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> observer <span class="token operator">=</span> context<span class="token punctuation">[</span>context<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>observer<span class="token punctuation">)</span> subscriptions<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> value<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">write</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">newValue</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    value <span class="token operator">=</span> newValue<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> observer <span class="token keyword">of</span> subscriptions<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      observer<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">[</span>read<span class="token punctuation">,</span> write<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createEffect</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> effect <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      context<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>effect<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      context<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  effect<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Using the reactive system:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> createSignal<span class="token punctuation">,</span> createEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./reactive&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">createSignal</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">createEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span></span>
<span class="line"></span>
<span class="line"><span class="token function">setCount</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3)),s("p",null,[n[35]||(n[35]=a("Here’s the complete code for his ")),s("a",R,[n[32]||(n[32]=a("vanilla reactivity system (")),t(o,{icon:"iconfont icon-github"}),n[33]||(n[33]=s("code",null,"1Marc",-1)),n[34]||(n[34]=a(")"))]),n[36]||(n[36]=a(" with a code sample that Ryan writes in his course."))]),n[75]||(n[75]=s("h3",{id:"observable-ish-values-frontend-masters",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#observable-ish-values-frontend-masters"},[s("span",null,"“Observable-ish” Values (Frontend Masters)")])],-1)),s("p",null,[n[40]||(n[40]=a("Our Frontend Masters video player has many configurations that could change anytime to modify video playback. Kai on our team created ")),s("a",A,[n[37]||(n[37]=a("“Observable-ish” Values (")),t(o,{icon:"iconfont icon-github"}),n[38]||(n[38]=s("code",null,"FrontendMasters/observablish-values",-1)),n[39]||(n[39]=a(")"))]),n[41]||(n[41]=a(" (many years ago now, but we just published it for this article’s sake), which is another take on a reactive system in vanilla JavaScript."))]),n[76]||(n[76]=i(`<p>It’s less than 100 lines of code and has stood the test of time! For 7+ years, this tiny bit of code has underpinned delivering millions of hours of video. It’s a mix of PubSub with the ability to have computed values by adding the results of multiple publishers together.</p><p>Here’s how you use the “Observable-ish” values. Publish changes to subscriber functions when values change:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">current<span class="token punctuation">,</span> previous</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> obsValue <span class="token operator">=</span> <span class="token function">ov</span><span class="token punctuation">(</span><span class="token string">&#39;initial&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">obsValue<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// subscribe to changes</span></span>
<span class="line"><span class="token function">obsValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment">// &#39;initial&#39;</span></span>
<span class="line"><span class="token function">obsValue</span><span class="token punctuation">(</span><span class="token string">&#39;initial&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// identical value, no change</span></span>
<span class="line"><span class="token function">obsValue</span><span class="token punctuation">(</span><span class="token string">&#39;new&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">// fn(&#39;new&#39;, &#39;initial&#39;)</span></span>
<span class="line">obsValue<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">&#39;silent&#39;</span><span class="token punctuation">;</span>   <span class="token comment">// silent update</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Modifying arrays and objects will not publish, but replacing them will.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> obsArray <span class="token operator">=</span> <span class="token function">ov</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">obsArray<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">obsArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// silent update</span></span>
<span class="line">obsArray<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// fn([1, 2, 3, 4]);</span></span>
<span class="line"><span class="token function">obsArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// fn([4, 5], [1, 2, 3]);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Passing a function caches the result as the value. Any extra arguments will be passed to the function. Any observables called within the function will be subscribed to, and updates to those observables will recompute the value.</p><p>Child observables must be called; mere references are ignored. If the function returns a Promise, the value is assigned async after resolution.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token function">ov</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token function">ov</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> computed <span class="token operator">=</span> <span class="token function">ov</span><span class="token punctuation">(</span><span class="token parameter">arg</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> arg <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">computed<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment">// fn(6)</span></span>
<span class="line"><span class="token function">a</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// fn(7, 6)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="reactive-rendering-of-ui" tabindex="-1"><a class="header-anchor" href="#reactive-rendering-of-ui"><span>Reactive Rendering of UI</span></a></h2><p>Here are some patterns for writing and reading from the DOM and CSS.</p><h3 id="render-data-to-html-string-literals" tabindex="-1"><a class="header-anchor" href="#render-data-to-html-string-literals"><span>Render Data to HTML String Literals</span></a></h3><p>Here’s a simple example of rendering some pizza UI based on data.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">function</span> <span class="token function">PizzaRecipe</span><span class="token punctuation">(</span><span class="token parameter">pizza</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;div class=&quot;pizza-recipe&quot;&gt;</span>
<span class="line">    &lt;h1&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>pizza<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/h1&gt;</span>
<span class="line">    &lt;h3&gt;Toppings: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>pizza<span class="token punctuation">.</span>toppings<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;, &#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/h3&gt;</span>
<span class="line">    &lt;p&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>pizza<span class="token punctuation">.</span>description<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/p&gt;</span>
<span class="line">  &lt;/div&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">PizzaRecipeList</span><span class="token punctuation">(</span><span class="token parameter">pizzas</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;div class=&quot;pizza-recipe-list&quot;&gt;</span>
<span class="line">    </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>pizzas<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>PizzaRecipe<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"></span>
<span class="line">  &lt;/div&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> allPizzas <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Margherita&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">toppings</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;tomato sauce&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;mozzarella&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">description</span><span class="token operator">:</span> <span class="token string">&#39;A classic pizza with fresh ingredients.&#39;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Pepperoni&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">toppings</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;tomato sauce&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;mozzarella&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;pepperoni&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">description</span><span class="token operator">:</span> <span class="token string">&#39;A favorite among many, topped with delicious pepperoni.&#39;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Veggie Supreme&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">toppings</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;tomato sauce&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;mozzarella&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bell peppers&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;onions&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;mushrooms&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">description</span><span class="token operator">:</span> <span class="token string">&#39;A delightful vegetable-packed pizza.&#39;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Render the list of pizzas</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">renderPizzas</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;body&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token function">PizzaRecipeList</span><span class="token punctuation">(</span>allPizzas<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">renderPizzas</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Initial render</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Example of changing data and re-rendering</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">addPizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  allPizzas<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Hawaiian&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">toppings</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;tomato sauce&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;mozzarella&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;ham&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;pineapple&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">description</span><span class="token operator">:</span> <span class="token string">&#39;A tropical twist with ham and pineapple.&#39;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">renderPizzas</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Re-render the updated list</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Call this function to add a new pizza and re-render the list</span></span>
<span class="line"><span class="token function">addPizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\`</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>addPizza</code> demonstrates how to change the data by adding a new pizza recipe to the list and then re-rendering the list to reflect the changes.</p>`,15)),s("p",null,[n[44]||(n[44]=a("The main drawback of this approach is you blow away the entire DOM on every render. You can more intelligently update only the bits of DOM that change using a library like ")),s("a",M,[t(o,{icon:"fa-brands fa-npm"}),n[42]||(n[42]=s("code",null,"lit-html",-1))]),n[45]||(n[45]=a(" (")),s("a",q,[t(o,{icon:"fas fa-globe"}),n[43]||(n[43]=a("lit-html usage guide"))]),n[46]||(n[46]=a("). We do this with several highly dynamic components on Frontend Masters, like our data grid component."))]),s("p",null,[n[51]||(n[51]=a("See examples of other approaches in the ")),s("a",C,[n[47]||(n[47]=a("Vanilla TodoMVC repo (")),t(o,{icon:"iconfont icon-github"}),n[48]||(n[48]=s("code",null,"1Marc/modern-todomvc-vanillajs",-1)),n[49]||(n[49]=a(")"))]),n[52]||(n[52]=a(" and associated ")),t(m,{to:"/frontendmasters.com/vanilla-javascript-todomvc.html"},{default:e(()=>n[50]||(n[50]=[s("strong",null,"Vanilla TodoMVC article",-1)])),_:1,__:[50]}),n[53]||(n[53]=a("."))]),n[77]||(n[77]=i(`<h3 id="reactive-dom-attributes-mutationobserver" tabindex="-1"><a class="header-anchor" href="#reactive-dom-attributes-mutationobserver"><span>Reactive DOM Attributes: MutationObserver</span></a></h3><p>One way to make DOM reactive is to add and remove attributes. We can listen to changes in attributes using the <code>MutationObserver</code> API.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">mutationCallback</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">mutationsList</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> mutation <span class="token keyword">of</span> mutationsList<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span></span>
<span class="line">      mutation<span class="token punctuation">.</span>type <span class="token operator">!==</span> <span class="token string">&quot;attributes&quot;</span> <span class="token operator">||</span></span>
<span class="line">      mutation<span class="token punctuation">.</span>attributeName <span class="token operator">!==</span> <span class="token string">&quot;pizza-type&quot;</span></span>
<span class="line">    <span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;old:&#39;</span><span class="token punctuation">,</span> mutation<span class="token punctuation">.</span>oldValue<span class="token punctuation">)</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;new:&#39;</span><span class="token punctuation">,</span> mutation<span class="token punctuation">.</span>target<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;pizza-type&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">const</span> observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MutationObserver</span><span class="token punctuation">(</span>mutationCallback<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">observer<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;pizza-store&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">attributes</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now we can update the pizza-type attribute from anywhere in our program, and the element itself can have behavior attached to updating that attribute!</p><h3 id="reactive-attributes-in-web-components" tabindex="-1"><a class="header-anchor" href="#reactive-attributes-in-web-components"><span>Reactive Attributes in Web Components</span></a></h3><p>With Web Components, there is a native way to listen and react to attribute updates.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">class</span> <span class="token class-name">PizzaStoreComponent</span> <span class="token keyword">extends</span> <span class="token class-name">HTMLElement</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">static</span> <span class="token keyword">get</span> <span class="token function">observedAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string">&#39;pizza-type&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> shadowRoot <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">attachShadow</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&#39;open&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    shadowRoot<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;p&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;pizza-type&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">&#39;Default Content&#39;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/p&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">attributeChangedCallback</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> oldValue<span class="token punctuation">,</span> newValue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">===</span> <span class="token string">&#39;my-attribute&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">this</span><span class="token punctuation">.</span>shadowRoot<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>textContent <span class="token operator">=</span> newValue<span class="token punctuation">;</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Attribute </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> changed from </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>oldValue<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> to </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>newValue<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">customElements<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">&#39;pizza-store&#39;</span><span class="token punctuation">,</span> PizzaStoreComponent<span class="token punctuation">)</span><span class="token punctuation">;</span>\`</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre><code class="language-html"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pizza-store</span> <span class="token attr-name">pizza-type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Supreme<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pizza-store</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;pizza-store&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;pizza-type&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;BBQ Chicken!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>This is a bit simpler, but we have to use Web Components to use this API.</p><h3 id="reactive-scrolling-intersectionobserver" tabindex="-1"><a class="header-anchor" href="#reactive-scrolling-intersectionobserver"><span>Reactive Scrolling: IntersectionObserver</span></a></h3><p>We can wire reactivity to DOM elements scrolling into view. I’ve used this for slick animations on our marketing pages.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">var</span> pizzaStoreElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;pizza-store&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntersectionObserver</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">entries<span class="token punctuation">,</span> observer</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  entries<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">entry</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>entry<span class="token punctuation">.</span>isIntersecting<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      entry<span class="token punctuation">.</span>target<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&#39;animate-in&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">      entry<span class="token punctuation">.</span>target<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">&#39;animate-in&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">observer<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>pizzaStoreElement<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13)),s("p",null,[n[57]||(n[57]=a("Here’s an example ")),s("a",E,[n[54]||(n[54]=a("scrolling animation CodePen (")),t(o,{icon:"fa-brands fa-codepen"}),n[55]||(n[55]=s("code",null,"1Marc",-1)),n[56]||(n[56]=a(")"))]),n[58]||(n[58]=a(" in very few lines of code using ")),n[59]||(n[59]=s("code",null,"IntersectionObserver",-1)),n[60]||(n[60]=a("."))]),n[78]||(n[78]=i(`<h3 id="animation-game-loop-requestanimationframe" tabindex="-1"><a class="header-anchor" href="#animation-game-loop-requestanimationframe"><span>Animation &amp; Game Loop: requestAnimationFrame</span></a></h3><p>When working with game development, Canvas, WebGL, or those wild marketing sites, animations often require writing to a buffer and then writing the results on a given loop when the rendering thread becomes available. We do this with <code>requestAnimationFrame</code>.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">function</span> <span class="token function">drawStuff</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// This is where you&#39;d do game or animation rendering logic</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// function to handle the animation</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">drawStuff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>animate<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Continually calls animate when the next render frame is available</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Start the animation</span></span>
<span class="line"><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This is the method games and anything that involves real-time rendering use to render the scene when frames become available.</p><h3 id="reactive-animations-web-animations-api" tabindex="-1"><a class="header-anchor" href="#reactive-animations-web-animations-api"><span>Reactive Animations: Web Animations API</span></a></h3><p>You can also create reactive animations with the Web Animations API. Here we will animate an element’s scale, position, and color using the animation API.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;animatedElement&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Define the animation properties</span></span>
<span class="line"><span class="token keyword">const</span> animation <span class="token operator">=</span> el<span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">[</span></span>
<span class="line">  <span class="token comment">// Keyframes</span></span>
<span class="line">  <span class="token punctuation">{</span> <span class="token literal-property property">transform</span><span class="token operator">:</span> <span class="token string">&#39;scale(1)&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">backgroundColor</span><span class="token operator">:</span> <span class="token string">&#39;blue&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">left</span><span class="token operator">:</span> <span class="token string">&#39;50px&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">top</span><span class="token operator">:</span> <span class="token string">&#39;50px&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">{</span> <span class="token literal-property property">transform</span><span class="token operator">:</span> <span class="token string">&#39;scale(1.5)&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">backgroundColor</span><span class="token operator">:</span> <span class="token string">&#39;red&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">left</span><span class="token operator">:</span> <span class="token string">&#39;200px&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">top</span><span class="token operator">:</span> <span class="token string">&#39;200px&#39;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// Timing options</span></span>
<span class="line">  <span class="token literal-property property">duration</span><span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">fill</span><span class="token operator">:</span> <span class="token string">&#39;forwards&#39;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Set the animation&#39;s playback rate to 0 to pause it</span></span>
<span class="line">animation<span class="token punctuation">.</span>playbackRate <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Add a click event listener to the element</span></span>
<span class="line">el<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// If the animation is paused, play it</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>animation<span class="token punctuation">.</span>playbackRate <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    animation<span class="token punctuation">.</span>playbackRate <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// If the animation is playing, reverse it</span></span>
<span class="line">    animation<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>What’s reactive about this is that the animation can play relative to where it is located when an interaction occurs (in this case, reversing its direction). Standard CSS animations and transitions aren’t relative to their current position.</p><h3 id="reactive-css-custom-properties-and-calc" tabindex="-1"><a class="header-anchor" href="#reactive-css-custom-properties-and-calc"><span>Reactive CSS: Custom Properties and <code>calc</code></span></a></h3><p>Lastly, we can write CSS that’s reactive by combining custom properties and <code>calc</code>.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">barElement<span class="token punctuation">.</span>style<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">&#39;--percentage&#39;</span><span class="token punctuation">,</span> newPercentage<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>In JavaScript, you can set a custom property value.</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.bar</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>100% / 4 - 10px<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--percentage<span class="token punctuation">)</span> * 1%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">background-color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">margin-right</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And in the CSS, we can now do calculations based on that percentage. It’s pretty cool that we can add calculations right into the CSS and let CSS do its job of styling without having to keep all that rendering logic in JavaScript.</p><p>FYI: You can also read these properties if you want to create changes relative to the current value.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token function">getComputedStyle</span><span class="token punctuation">(</span>barElement<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPropertyValue</span><span class="token punctuation">(</span><span class="token string">&#39;--percentage&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h2 id="the-many-ways-to-achieve-reactivity" tabindex="-1"><a class="header-anchor" href="#the-many-ways-to-achieve-reactivity"><span>The Many Ways to Achieve Reactivity</span></a></h2><p>It’s incredible how many ways we can achieve reactivity using very little code in modern vanilla JavaScript. We can combine these patterns in any way we see fit for our apps to reactively render, log, animate, handle user events, and all the things that can happen in the browser.</p>`,19)),s("div",T,[n[66]||(n[66]=s("p",{class:"hint-container-title"},"Frontend Masters Team",-1)),s("p",null,[n[63]||(n[63]=a("Next, check out the ")),s("a",V,[t(o,{icon:"fas fa-globe"}),n[61]||(n[61]=a("JavaScript Learning Path"))]),n[64]||(n[64]=a(" and learn JavaScript deeply from awesome instructors like Anjana Vakil, Will Sentance and Kyle Simpson! Or dive right into the most loved course on the platform, ")),s("a",I,[t(o,{icon:"fas fa-globe"}),n[62]||(n[62]=a("JavaScript: The Hard Parts"))]),n[65]||(n[65]=a("!"))])]),s("div",D,[n[67]||(n[67]=s("p",{class:"hint-container-title"},"Article Series",-1)),n[68]||(n[68]=s("ol",null,[s("li",null,[s("a",{href:"https://frontendmasters.com/blog/vanilla-javascript-todomvc/",target:"_blank",rel:"noopener noreferrer"},"Writing a TodoMVC App with Modern Vanilla JavaScript")])],-1)),l(" TODO: /frontendmasters.com/vanilla-javascript-todomvc.md "),t(u,r(k({title:"Patterns for Reactivity with Modern Vanilla JavaScript",desc:"“Reactivity” is how systems react to changes in data. There are many types of reactivity, but for this article, reactivity is when data changes, you do things.",link:"/frontendmasters.com/vanilla-javascript-reactivity.md",logo:"https://frontendmasters.com/favicon.ico",background:"rgba(188,75,52,0.2)"})),null,16),n[69]||(n[69]=s("ol",{start:"3"},[s("li",null,[s("a",{href:"https://frontendmasters.com/blog/patterns-for-memory-efficient-dom-manipulation/",target:"_blank",rel:"noopener noreferrer"},"Patterns for Memory Efficient DOM Manipulation with Modern Vanilla JavaScript")])],-1)),l(" TODO: /frontendmasters.com/patterns-for-memory-efficient-dom-manipulation.md ")]),l(" TODO: add ARTICLE CARD "),t(u,r(k({title:"Patterns for Reactivity with Modern Vanilla JavaScript",desc:"“Reactivity” is how systems react to changes in data. There are many types of reactivity, but for this article, reactivity is when data changes, you do things.",link:"https://chanhi2000.github.io/bookshelf/frontendmasters.com/vanilla-javascript-reactivity.html",logo:"https://frontendmasters.com/favicon.ico",background:"rgba(188,75,52,0.2)"})),null,16)])}const H=b(y,[["render",J]]),$=JSON.parse('{"path":"/frontendmasters.com/vanilla-javascript-reactivity.html","title":"Patterns for Reactivity with Modern Vanilla JavaScript","lang":"en-US","frontmatter":{"lang":"en-US","title":"Patterns for Reactivity with Modern Vanilla JavaScript","description":"Article(s) > Patterns for Reactivity with Modern Vanilla JavaScript","icon":"fa-brands fa-js","category":["JavaScript","Article(s)"],"tag":["blog","frontendmasters.com","js","javascript"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Patterns for Reactivity with Modern Vanilla JavaScript\\",\\"image\\":[\\"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/40\\"],\\"datePublished\\":\\"2023-08-21T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Marc Grabanski\\",\\"url\\":\\"https://frontendmasters.com/blog/author/marcgrabanski/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/frontendmasters.com/vanilla-javascript-reactivity.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Patterns for Reactivity with Modern Vanilla JavaScript"}],["meta",{"property":"og:description","content":"Article(s) > Patterns for Reactivity with Modern Vanilla JavaScript"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/40"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/40"}],["meta",{"name":"twitter:image:alt","content":"Patterns for Reactivity with Modern Vanilla JavaScript"}],["meta",{"property":"article:author","content":"Marc Grabanski"}],["meta",{"property":"article:tag","content":"javascript"}],["meta",{"property":"article:tag","content":"js"}],["meta",{"property":"article:tag","content":"frontendmasters.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2023-08-21T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Patterns for Reactivity with Modern Vanilla JavaScript"},{"property":"og:description","content":"Patterns for Reactivity with Modern Vanilla JavaScript"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/frontendmasters.com/vanilla-javascript-reactivity.html"}]],"prev":"/programming/js/articles/README.md","date":"2023-08-21T00:00:00.000Z","isOriginal":false,"author":[{"name":"Marc Grabanski","url":"https://frontendmasters.com/blog/author/marcgrabanski/"}],"cover":"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/40"},"git":{},"readingTime":{"minutes":11.65,"words":3496},"filePathRelative":"frontendmasters.com/vanilla-javascript-reactivity.md","copyright":{"author":"Marc Grabanski"}}');export{H as comp,$ as data};
