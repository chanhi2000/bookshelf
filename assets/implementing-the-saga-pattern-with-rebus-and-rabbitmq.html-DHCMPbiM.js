import{_ as g}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as k,d as s,f as e,b as r,t as b,n as u,g as d,w as p,e as a,r as o,o as v}from"./app-BVguHYKu.js";const h={},w={id:"frontmatter-title-관련",tabindex:"-1"},y={class:"header-anchor",href:"#frontmatter-title-관련"},f={class:"table-of-contents"},S={href:"https://microservices.io/patterns/data/saga.html",target:"_blank",rel:"noopener noreferrer"},R={href:"https://github.com/rebus-org/Rebus",target:"_blank",rel:"noopener noreferrer"},E={href:"https://github.com/m-jovanovic/newsletter-orchestrated-saga",target:"_blank",rel:"noopener noreferrer"};function I(m,n){const l=o("VPCard"),t=o("router-link"),c=o("SiteInfo"),i=o("VPIcon");return v(),k("div",null,[s("h1",w,[s("a",y,[s("span",null,b(m.$frontmatter.title)+" 관련",1)])]),e(l,u(d({title:"C# > Article(s)",desc:"Article(s)",link:"/programming/cs/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),e(l,u(d({title:"RabbitMQ > Article(s)",desc:"Article(s)",link:"/programming/erl-rabbitmq/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",f,[s("ul",null,[s("li",null,[e(t,{to:"#rebus-configuration"},{default:p(()=>n[0]||(n[0]=[a("Rebus Configuration")])),_:1,__:[0]})]),s("li",null,[e(t,{to:"#creating-the-saga-with-rebus"},{default:p(()=>n[1]||(n[1]=[a("Creating The Saga With Rebus")])),_:1,__:[1]})]),s("li",null,[e(t,{to:"#message-types-and-naming-conventions"},{default:p(()=>n[2]||(n[2]=[a("Message Types And Naming Conventions")])),_:1,__:[2]})]),s("li",null,[e(t,{to:"#saga-orchestration-with-messages"},{default:p(()=>n[3]||(n[3]=[a("Saga Orchestration With Messages")])),_:1,__:[3]})]),s("li",null,[e(t,{to:"#handling-commands-with-rebus"},{default:p(()=>n[4]||(n[4]=[a("Handling Commands With Rebus")])),_:1,__:[4]})]),s("li",null,[e(t,{to:"#in-summary"},{default:p(()=>n[5]||(n[5]=[a("In Summary")])),_:1,__:[5]})])])]),n[17]||(n[17]=s("hr",null,null,-1)),e(c,{name:"Implementing The Saga Pattern With Rebus And RabbitMQ",desc:"Designing long-lived processes in a distributed environment is an interesting engineering challenge. And a well known pattern for solving this problem is a Saga. A Saga is a sequence of local transactions, where each local transaction updates the Saga state and publishes a message triggering the next step in the Saga. Sagas come in two forms: Orchestrated Choreographed With an orchestrated Saga, there's a central component responsible for orchestrating the individual steps. In a choreographed Saga, processes work independently but coordinate with each other using events.",url:"https://milanjovanovic.tech/blog/implementing-the-saga-pattern-with-rebus-and-rabbitmq/",logo:"https://milanjovanovic.tech/profile_favicon.png",preview:"https://milanjovanovic.tech/blog-covers/mnw_031.png"}),n[18]||(n[18]=s("p",null,"Designing long-lived processes in a distributed environment is an interesting engineering challenge.",-1)),s("p",null,[n[7]||(n[7]=a("And a well known pattern for solving this problem is a ")),s("a",S,[e(i,{icon:"fas fa-globe"}),n[6]||(n[6]=s("strong",null,"Saga",-1))]),n[8]||(n[8]=a("."))]),n[19]||(n[19]=r('<p>A <strong>Saga</strong> is a sequence of local transactions, where each local transaction updates the <strong>Saga</strong> state and publishes a message triggering the next step in the <strong>Saga</strong>.</p><p>Sagas come in two forms:</p><ul><li><strong>Orchestrated</strong></li><li><strong>Choreographed</strong></li></ul><p>With an orchestrated Saga, there&#39;s a central component responsible for orchestrating the individual steps.</p><p>In a choreographed Saga, processes work independently but coordinate with each other using events.</p><p>In this week&#39;s issue, I&#39;ll show you how to create an <strong>orchestrated Saga</strong> using the <strong>Rebus</strong> library with <strong>RabbitMQ</strong> for message transport.</p><p>Let&#39;s dive in.</p><hr><h2 id="rebus-configuration" tabindex="-1"><a class="header-anchor" href="#rebus-configuration"><span>Rebus Configuration</span></a></h2>',9)),s("p",null,[s("a",R,[e(i,{icon:"iconfont icon-github"}),n[9]||(n[9]=s("code",null,"rebus-org/Rebus",-1))]),n[10]||(n[10]=a(" is a free .NET “service bus”, and it's practical for implementing asynchronous messaging-based communication between the components of an application."))]),n[20]||(n[20]=r(`<p>Let&#39;s install the following libraries:</p><ul><li><code>Rebus.ServiceProvider</code> for managing the <strong>Rebus</strong> instance</li><li><code>Rebus.RabbitMq</code> for <strong>RabbitMQ</strong> message transport</li><li><code>Rebus.SqlServer</code> for <strong>SQL Server</strong> state persistence</li></ul><div class="language-powershell line-numbers-mode" data-highlighter="prismjs" data-ext="powershell"><pre><code class="language-powershell"><span class="line"><span class="token function">Install-Package</span> Rebus<span class="token punctuation">.</span>ServiceProvider <span class="token operator">-</span>Version 8<span class="token punctuation">.</span>4<span class="token punctuation">.</span>0</span>
<span class="line"><span class="token function">Install-Package</span> Rebus<span class="token punctuation">.</span>RabbitMq <span class="token operator">-</span>Version 8<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0</span>
<span class="line"><span class="token function">Install-Package</span> Rebus<span class="token punctuation">.</span>SqlServer <span class="token operator">-</span>Version 7<span class="token punctuation">.</span>3<span class="token punctuation">.</span>1</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Inside of your <strong>ASP.NET Core</strong> application you will need the following configuration.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">services<span class="token punctuation">.</span><span class="token function">AddRebus</span><span class="token punctuation">(</span></span>
<span class="line">    rebus <span class="token operator">=&gt;</span> rebus</span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">Routing</span><span class="token punctuation">(</span>r <span class="token operator">=&gt;</span></span>
<span class="line">            r<span class="token punctuation">.</span><span class="token function">TypeBased</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">MapAssemblyOf</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Program<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;newsletter-queue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">Transport</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span></span>
<span class="line">            t<span class="token punctuation">.</span><span class="token function">UseRabbitMq</span><span class="token punctuation">(</span></span>
<span class="line">                configuration<span class="token punctuation">.</span><span class="token function">GetConnectionString</span><span class="token punctuation">(</span><span class="token string">&quot;RabbitMq&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                <span class="token named-parameter punctuation">inputQueueName</span><span class="token punctuation">:</span> <span class="token string">&quot;newsletter-queue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">Sagas</span><span class="token punctuation">(</span>s <span class="token operator">=&gt;</span></span>
<span class="line">            s<span class="token punctuation">.</span><span class="token function">StoreInSqlServer</span><span class="token punctuation">(</span></span>
<span class="line">                configuration<span class="token punctuation">.</span><span class="token function">GetConnectionString</span><span class="token punctuation">(</span><span class="token string">&quot;SqlServer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                <span class="token named-parameter punctuation">dataTableName</span><span class="token punctuation">:</span> <span class="token string">&quot;Sagas&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                <span class="token named-parameter punctuation">indexTableName</span><span class="token punctuation">:</span> <span class="token string">&quot;SagaIndexes&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">Timeouts</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span></span>
<span class="line">            t<span class="token punctuation">.</span><span class="token function">StoreInSqlServer</span><span class="token punctuation">(</span></span>
<span class="line">                builder<span class="token punctuation">.</span>Configuration<span class="token punctuation">.</span><span class="token function">GetConnectionString</span><span class="token punctuation">(</span><span class="token string">&quot;SqlServer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                <span class="token named-parameter punctuation">tableName</span><span class="token punctuation">:</span> <span class="token string">&quot;Timeouts&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AutoRegisterHandlersFromAssemblyOf</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Program<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Unpacking the individual configuration steps:</p><ul><li><code>Routing</code> - Configures messages to be routed by their type</li><li><code>Transport</code> - Configures the message transport mechanism</li><li><code>Sagas</code> - Configures the Saga persistence store</li><li><code>Timeouts</code> - Configures the timeouts persistence store</li></ul><p>You also need to specify the queue name for sending and receiving messages.</p><p><code>AutoRegisterHandlersFromAssemblyOf</code> will scan the specified assembly and automatically register the respective message handlers.</p><hr><h2 id="creating-the-saga-with-rebus" tabindex="-1"><a class="header-anchor" href="#creating-the-saga-with-rebus"><span>Creating The Saga With Rebus</span></a></h2><p>We&#39;re going to create a <strong>Saga</strong> for a newsletter onboarding process.</p><p>When a user subscribes to the newsletter we want to:</p><ul><li>Send a welcome email immediately</li><li>Send a follow-up email after 7 days</li></ul><p>The first step in creating the <strong>Saga</strong> is defining the data model by implementing <code>ISagaData</code>. We&#39;ll keep it simple and store the <code>Email</code> for <strong>correlation</strong>, and add two flags for the distinct steps in our <strong>Saga</strong>.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NewsletterOnboardingSagaData</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ISagaData</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">Guid</span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Revision <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Email <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> WelcomeEmailSent <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> FollowUpEmailSent <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now we can define the <code>NewsletterOnboardingSaga</code> class by inheriting from the <code>Saga</code> class and implementing the <code>CorrelateMessages</code> method.</p><p>It&#39;s a best practice to use a unique value for correlation. In our case this will be the <code>Email</code>.</p><p>You also configure how the <code>Saga</code> starts with <code>IAmInitiatedBy</code>, and the individual messages the <code>Saga</code> handles with <code>IHandleMessages</code>.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NewsletterOnboardingSaga</span> <span class="token punctuation">:</span></span>
<span class="line">    <span class="token type-list"><span class="token class-name">Saga<span class="token punctuation">&lt;</span>NewsletterOnboardingSagaData<span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">IAmInitiatedBy<span class="token punctuation">&lt;</span>SubscribeToNewsletter<span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">IHandleMessages<span class="token punctuation">&lt;</span>WelcomeEmailSent<span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">IHandleMessages<span class="token punctuation">&lt;</span>FollowUpEmailSent<span class="token punctuation">&gt;</span></span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IBus</span> _bus<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token function">NewsletterOnboardingSaga</span><span class="token punctuation">(</span><span class="token class-name">IBus</span> bus<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        _bus <span class="token operator">=</span> bus<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">CorrelateMessages</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token class-name">ICorrelationConfig<span class="token punctuation">&lt;</span>NewsletterOnboardingSagaData<span class="token punctuation">&gt;</span></span> config<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        config<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Correlate</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>SubscribeToNewsletter<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>m <span class="token operator">=&gt;</span> m<span class="token punctuation">.</span>Email<span class="token punctuation">,</span> d <span class="token operator">=&gt;</span> d<span class="token punctuation">.</span>Email<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        config<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Correlate</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>WelcomeEmailSent<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>m <span class="token operator">=&gt;</span> m<span class="token punctuation">.</span>Email<span class="token punctuation">,</span> d <span class="token operator">=&gt;</span> d<span class="token punctuation">.</span>Email<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        config<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Correlate</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>FollowUpEmailSent<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>m <span class="token operator">=&gt;</span> m<span class="token punctuation">.</span>Email<span class="token punctuation">,</span> d <span class="token operator">=&gt;</span> d<span class="token punctuation">.</span>Email<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/* Handlers omitted for brevity */</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="message-types-and-naming-conventions" tabindex="-1"><a class="header-anchor" href="#message-types-and-naming-conventions"><span>Message Types And Naming Conventions</span></a></h2><p>There are two types of messages you send in a <strong>Saga</strong>:</p><ul><li>Commands</li><li>Events</li></ul><p>Commands instruct the receiving component what to do.<br>Think: <strong>verb, imperative.</strong></p><p>Events notify the Saga which process was just completed.<br>Think: <strong>what happened, past tense.</strong></p><hr><h2 id="saga-orchestration-with-messages" tabindex="-1"><a class="header-anchor" href="#saga-orchestration-with-messages"><span>Saga Orchestration With Messages</span></a></h2><p>The <code>NewsletterOnboardingSaga</code> starts by handling the <code>SubscribeToNewsletter</code> command, and publishes a <code>SendWelcomeEmail</code> command.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">Handle</span><span class="token punctuation">(</span><span class="token class-name">SubscribeToNewsletter</span> message<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>IsNew<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">await</span> _bus<span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">SendWelcomeEmail</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>Email<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>SendWelcomeEmail</code> command is handled by a different component, which publishes a <code>WelcomeEmailSent</code> event when it completes.</p><p>In the <code>WelcomeEmailSent</code> handler we update the <code>Saga</code> state and publish a <strong>deferred message</strong> by calling <code>Defer</code>. Rebus will persist the <code>SendFollowUpEmail</code> command, and publish it when the <strong>timeout expires</strong>.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">Handle</span><span class="token punctuation">(</span><span class="token class-name">WelcomeEmailSent</span> message<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    Data<span class="token punctuation">.</span>WelcomeEmailSent <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">await</span> _bus<span class="token punctuation">.</span><span class="token function">Defer</span><span class="token punctuation">(</span>TimeSpan<span class="token punctuation">.</span><span class="token function">FromDays</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SendFollowUpEmail</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>Email<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Finally, the <code>SendFollowUpEmail</code> command is handled and we publish the <code>FollowUpEmailSent</code> event.</p><p>We update the <code>Saga</code> state again, and also call <code>MarkAsComplete</code> to complete the <code>Saga</code>.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token return-type class-name">Task</span> <span class="token function">Handle</span><span class="token punctuation">(</span><span class="token class-name">FollowUpEmailSent</span> message<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    Data<span class="token punctuation">.</span>FollowUpEmailSent <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">MarkAsComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> Task<span class="token punctuation">.</span>CompletedTask<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Completing the <code>Saga</code> will delete it from the database.</p><hr><h2 id="handling-commands-with-rebus" tabindex="-1"><a class="header-anchor" href="#handling-commands-with-rebus"><span>Handling Commands With Rebus</span></a></h2><p>Here&#39;s how the <code>SendWelcomeEmail</code> command handler looks like.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SendWelcomeEmailHandler</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IHandleMessages<span class="token punctuation">&lt;</span>SendWelcomeEmail<span class="token punctuation">&gt;</span></span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IEmailService</span> _emailService<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IBus</span> _bus<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token function">SendWelcomeEmailHandler</span><span class="token punctuation">(</span><span class="token class-name">IEmailService</span> emailService<span class="token punctuation">,</span> <span class="token class-name">IBus</span> bus<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        _emailService <span class="token operator">=</span> emailService<span class="token punctuation">;</span></span>
<span class="line">        _bus <span class="token operator">=</span> bus<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">Handle</span><span class="token punctuation">(</span><span class="token class-name">SendWelcomeEmail</span> message<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">await</span> _emailService<span class="token punctuation">.</span><span class="token function">SendWelcomeEmailAsync</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>Email<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">await</span> _bus<span class="token punctuation">.</span><span class="token function">Reply</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">WelcomeEmailSent</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>Email<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The important thing to highlight here is that we&#39;re using the <code>Reply</code> method to send a message back. This will reply back to the endpoint specified as the return address on the current message.</p><hr><h2 id="in-summary" tabindex="-1"><a class="header-anchor" href="#in-summary"><span>In Summary</span></a></h2><p><strong>Sagas</strong> are practical for implementing a long-lived process in a distributed system. Each business process is represented by a local transaction, and publishes a message to trigger the next step in the <strong>Saga</strong>.</p><p>Although <strong>Sagas</strong> are very powerful, they are also <em>complicated to develop, maintain and debug.</em></p><p>We didn&#39;t cover a few important topics in this newsletter:</p><ul><li>Error handling</li><li>Message retries</li><li>Compensating transactions</li></ul><p>I think you&#39;ll have some fun researching these on your own.</p>`,49)),s("p",null,[n[15]||(n[15]=a("Take a look at the ")),s("a",E,[n[11]||(n[11]=s("strong",null,"source code for the example used in this newsletter",-1)),n[12]||(n[12]=a(" (")),e(i,{icon:"iconfont icon-github"}),n[13]||(n[13]=s("code",null,"m-jovanovic/newsletter-orchestrated-saga",-1)),n[14]||(n[14]=a(")"))]),n[16]||(n[16]=a(" if you want to learn more about implementing Sagas."))]),e(c,{name:"m-jovanovic/newsletter-orchestrated-saga",desc:"Orchestrated Saga example with Rebus, RabbitMQ, and SQL Server",url:"https://github.com/m-jovanovic/newsletter-orchestrated-saga",logo:"https://avatars.githubusercontent.com/u/34191235?v=4&size=40",preview:"https://opengraph.githubassets.com/6a1a2cc18686882e5749a7efa8bbb3b49ef0fb239bad6576051fec3533d7b1f8/m-jovanovic/newsletter-orchestrated-saga"}),n[21]||(n[21]=s("p",null,[a("If you have "),s("strong",null,"Docker"),a(" installed, you should be able to run it without a problem and try it out.")],-1)),n[22]||(n[22]=s("p",null,"Thank you for reading, and have an awesome Saturday.",-1))])}const q=g(h,[["render",I]]),M=JSON.parse('{"path":"/milanjovanovic.tech/implementing-the-saga-pattern-with-rebus-and-rabbitmq.html","title":"Implementing The Saga Pattern With Rebus And RabbitMQ","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Implementing The Saga Pattern With Rebus And RabbitMQ","description":"Article(s) > Implementing The Saga Pattern With Rebus And RabbitMQ","icon":"iconfont icon-csharp","category":["C#","DotNet","Erlang","RabbitMQ","Article(s)"],"tag":["blog","milanjovanovic.tech","cs","c#","csharp","dotnet","erlang","erl","rabbitmq"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Implementing The Saga Pattern With Rebus And RabbitMQ\\",\\"image\\":[\\"https://milanjovanovic.tech/blog-covers/mnw_031.png\\"],\\"datePublished\\":\\"2023-04-01T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Milan Jovanović\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/implementing-the-saga-pattern-with-rebus-and-rabbitmq.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Implementing The Saga Pattern With Rebus And RabbitMQ"}],["meta",{"property":"og:description","content":"Article(s) > Implementing The Saga Pattern With Rebus And RabbitMQ"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://milanjovanovic.tech/blog-covers/mnw_031.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://milanjovanovic.tech/blog-covers/mnw_031.png"}],["meta",{"name":"twitter:image:alt","content":"Implementing The Saga Pattern With Rebus And RabbitMQ"}],["meta",{"property":"article:author","content":"Milan Jovanović"}],["meta",{"property":"article:tag","content":"rabbitmq"}],["meta",{"property":"article:tag","content":"erl"}],["meta",{"property":"article:tag","content":"erlang"}],["meta",{"property":"article:tag","content":"dotnet"}],["meta",{"property":"article:tag","content":"csharp"}],["meta",{"property":"article:tag","content":"c#"}],["meta",{"property":"article:tag","content":"cs"}],["meta",{"property":"article:tag","content":"milanjovanovic.tech"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2023-04-01T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Implementing The Saga Pattern With Rebus And RabbitMQ"},{"property":"og:description","content":"Implementing The Saga Pattern With Rebus And RabbitMQ"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/implementing-the-saga-pattern-with-rebus-and-rabbitmq.html"}]],"prev":"/programming/cs/articles/README.md","date":"2023-04-01T00:00:00.000Z","isOriginal":false,"author":"Milan Jovanović","cover":"https://milanjovanovic.tech/blog-covers/mnw_031.png"},"git":{},"readingTime":{"minutes":4.15,"words":1246},"filePathRelative":"milanjovanovic.tech/implementing-the-saga-pattern-with-rebus-and-rabbitmq.md","copyright":{"author":"Milan Jovanović"}}');export{q as comp,M as data};
