import{_ as v}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as k,d as s,f as a,b as o,a as h,t as g,n as d,g as m,w as l,e,r as c,o as f}from"./app-BVguHYKu.js";const x={},y={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},D={class:"table-of-contents"},A={href:"https://arm.com/company/news/2019/04/docker-and-arm-partnership",target:"_blank",rel:"noopener noreferrer"},T={href:"https://docs.docker.com/install/",target:"_blank",rel:"noopener noreferrer"},L={href:"https://docs.docker.com/install/",target:"_blank",rel:"noopener noreferrer"},C={href:"https://github.com/docker/buildx",target:"_blank",rel:"noopener noreferrer"},M={href:"https://github.com/docker/buildx#binary-release",target:"_blank",rel:"noopener noreferrer"},R={href:"https://github.com/docker/buildx",target:"_blank",rel:"noopener noreferrer"},I={href:"https://hub.docker.com/r/docker/binfmt/tags",target:"_blank",rel:"noopener noreferrer"},S={class:"hint-container info"};function N(u,n){const p=c("VPCard"),i=c("router-link"),r=c("SiteInfo"),t=c("VPIcon"),b=c("VidStack");return f(),k("div",null,[s("h1",y,[s("a",w,[s("span",null,g(u.$frontmatter.title)+" 관련",1)])]),a(p,d(m({title:"Docker > Article(s)",desc:"Article(s)",link:"/devops/docker/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",D,[s("ul",null,[s("li",null,[a(i,{to:"#install-docker"},{default:l(()=>n[0]||(n[0]=[e("Install Docker")])),_:1,__:[0]})]),s("li",null,[a(i,{to:"#install-buildx-for-multi-architecture-image-builds"},{default:l(()=>n[1]||(n[1]=[e("Install buildx for multi-architecture image builds")])),_:1,__:[1]}),s("ul",null,[s("li",null,[a(i,{to:"#use-buildx-from-docker-test-channel"},{default:l(()=>n[2]||(n[2]=[e("Use buildx from Docker test channel")])),_:1,__:[2]})]),s("li",null,[a(i,{to:"#download-a-binary-release"},{default:l(()=>n[3]||(n[3]=[e("Download a binary release")])),_:1,__:[3]})]),s("li",null,[a(i,{to:"#download-build-and-install-buildx"},{default:l(()=>n[4]||(n[4]=[e("Download, build, and install buildx")])),_:1,__:[4]})])])]),s("li",null,[a(i,{to:"#register-arm-executables-to-run-on-x64-machines"},{default:l(()=>n[5]||(n[5]=[e("Register Arm executables to run on x64 machines")])),_:1,__:[5]})]),s("li",null,[a(i,{to:"#create-a-multi-architecture-build-instance"},{default:l(()=>n[6]||(n[6]=[e("Create a multi-architecture build instance")])),_:1,__:[6]})]),s("li",null,[a(i,{to:"#try-buildx"},{default:l(()=>n[7]||(n[7]=[e("Try buildx")])),_:1,__:[7]})]),s("li",null,[a(i,{to:"#next-steps"},{default:l(()=>n[8]||(n[8]=[e("Next steps")])),_:1,__:[8]})])])]),n[42]||(n[42]=s("hr",null,null,-1)),a(r,{name:"Getting started with Docker for Arm on Linux",desc:"Learn from Docker experts to simplify and advance your app development and management with Docker. Stay up to date on Docker events and new version",url:"https://docker.com/blog/getting-started-with-docker-for-arm-on-linux",logo:"https://docker.com/app/uploads/2024/02/cropped-docker-logo-favicon-192x192.png",preview:"https://docker.com/app/uploads/2024/02/docker-default-meta-image-1110x583.png"}),n[43]||(n[43]=s("div",{class:"hint-container note"},[s("p",{class:"hint-container-title"},"Note"),s("p",null,"This blog post is the result of collaboration between Arm and Docker. Special thanks to Jason Andrews @ Arm for creating much of the original content.")],-1)),s("p",null,[n[10]||(n[10]=e("Arm and Docker announced a ")),s("a",A,[a(t,{icon:"iconfont icon-arm"}),n[9]||(n[9]=e("strategic partnership"))]),n[11]||(n[11]=e(" earlier this year to unify software development and deployment across a diverse set of devices, from IoT endpoints to the edge of the network, and into the heart of the data center. Docker has simplified enterprise software development and deployment leading to true multi-platform portability and cost savings on Arm-based cloud instances. Even more exciting is how Docker is changing the way embedded software is being developed and deployed."))]),n[44]||(n[44]=s("p",null,"Traditionally embedded Linux software applications have been created by cross-compiling and copying files to an embedded target board. There are various methods to automate this process, but it has generally been unchanged since the 1990’s when non-x86 embedded possessors running Linux appeared. Docker stands to make the first significant change to the embedded Linux application developer’s workflow.",-1)),n[45]||(n[45]=s("p",null,"This article continues from Building Multi-Arch Images for Arm and x86 with Docker Desktop and shows the same capabilities in Linux. Although Windows and Mac support is great, the majority of software developers targeting embedded Linux systems also do their development work on Linux. The multi-architecture support in Docker also greatly simplifies embedded Linux application development and deployment.",-1)),n[46]||(n[46]=s("p",null,"If you are doing software development on x86 Linux machines and want to create Docker images that run on Arm servers or Arm embedded and IoT devices, this article will be helpful to understand the process and the different ways to do it.",-1)),n[47]||(n[47]=s("p",null,"Let’s see how to use Docker for Arm software development using the new buildx feature on Linux to create multi-architecture container images and run them. I’m using Ubuntu 18.04, but the same info applies to most any Linux distribution.",-1)),n[48]||(n[48]=s("hr",null,null,-1)),n[49]||(n[49]=s("h2",{id:"install-docker",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#install-docker"},[s("span",null,"Install Docker")])],-1)),s("p",null,[n[13]||(n[13]=e("Installing Docker on Linux takes just a few commands. More installation info is available in the ")),s("a",T,[a(t,{icon:"fa-brands fa-docker"}),n[12]||(n[12]=e("Docker Documentation"))]),n[14]||(n[14]=e("."))]),s("p",null,[n[16]||(n[16]=e("If you already have an older version of Docker, make sure to ")),s("a",L,[a(t,{icon:"fa-brands fa-docker"}),n[15]||(n[15]=e("uninstall"))]),n[17]||(n[17]=e(" it first. Using buildx requires Docker 19.03 and today the best way to get this is using the test instead of the stable version."))]),n[50]||(n[50]=o(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">sudo</span> <span class="token function">apt-get</span> update</span>
<span class="line"><span class="token function">sudo</span> <span class="token function">apt-get</span> upgrade</span>
<span class="line"><span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> test.docker.com <span class="token parameter variable">-o</span> get-docker.sh <span class="token operator">&amp;&amp;</span> <span class="token function">sh</span> get-docker.sh</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Add the current user to the docker group to avoid needing sudo to run the docker command:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">sudo</span> <span class="token function">usermod</span> <span class="token parameter variable">-aG</span> <span class="token function">docker</span> <span class="token environment constant">$USER</span> </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Make sure to log out and back in again. Now test the install with a quick hello-world run.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">docker</span> run hello-world </span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># Hello from Docker!</span></span>
<span class="line"><span class="token comment"># This message shows that your installation appears to be working correctly.</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># To generate this message, Docker took the following steps:</span></span>
<span class="line"><span class="token comment">#  1. The Docker client contacted the Docker daemon.</span></span>
<span class="line"><span class="token comment">#  2. The Docker daemon pulled the &quot;hello-world&quot; image from the Docker Hub.</span></span>
<span class="line"><span class="token comment">#     (amd64)</span></span>
<span class="line"><span class="token comment">#  3. The Docker daemon created a new container from that image which runs the</span></span>
<span class="line"><span class="token comment">#     executable that produces the output you are currently reading.</span></span>
<span class="line"><span class="token comment">#  4. The Docker daemon streamed that output to the Docker client, which sent it</span></span>
<span class="line"><span class="token comment">#     to your terminal.</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># To try something more ambitious, you can run an Ubuntu container with:</span></span>
<span class="line"><span class="token comment">#  $ docker run -it ubuntu bash</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># Share images, automate workflows, and more with a free Docker ID:</span></span>
<span class="line"><span class="token comment">#  https://hub.docker.com/</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># For more examples and ideas, visit:</span></span>
<span class="line"><span class="token comment">#  https://docs.docker.com/get-started/</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Use the docker version command to check the running version:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">docker</span> version</span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># Client:</span></span>
<span class="line"><span class="token comment">#  Version:           19.03.0-beta4</span></span>
<span class="line"><span class="token comment">#  API version:       1.40</span></span>
<span class="line"><span class="token comment">#  Go version:        go1.11.5</span></span>
<span class="line"><span class="token comment">#  Git commit:        d9934ea</span></span>
<span class="line"><span class="token comment">#  Built:             Tue May 14 06:46:47 2019</span></span>
<span class="line"><span class="token comment">#  OS/Arch:           linux/amd64</span></span>
<span class="line"><span class="token comment">#  Experimental:      false</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># Server:</span></span>
<span class="line"><span class="token comment">#  Engine:</span></span>
<span class="line"><span class="token comment">#   Version:          19.03.0-beta4</span></span>
<span class="line"><span class="token comment">#   API version:      1.40 (minimum version 1.12)</span></span>
<span class="line"><span class="token comment">#   Go version:       go1.11.5</span></span>
<span class="line"><span class="token comment">#   Git commit:       d9934ea</span></span>
<span class="line"><span class="token comment">#   Built:            Tue May 14 06:44:59 2019</span></span>
<span class="line"><span class="token comment">#   OS/Arch:          linux/amd64</span></span>
<span class="line"><span class="token comment">#   Experimental:     false</span></span>
<span class="line"><span class="token comment">#  containerd:</span></span>
<span class="line"><span class="token comment">#   Version:          1.2.5</span></span>
<span class="line"><span class="token comment">#   GitCommit:        bb71b10fd8f58240ca47fbb579b9d1028eea7c84</span></span>
<span class="line"><span class="token comment">#  runc:</span></span>
<span class="line"><span class="token comment">#   Version:          1.0.0-rc6+dev</span></span>
<span class="line"><span class="token comment">#   GitCommit:        2b18fe1d885ee5083ef9f0838fee39b62d653e30</span></span>
<span class="line"><span class="token comment">#  docker-init:</span></span>
<span class="line"><span class="token comment">#   Version:          0.18.0</span></span>
<span class="line"><span class="token comment">#   GitCommit:        fec3683</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="install-buildx-for-multi-architecture-image-builds" tabindex="-1"><a class="header-anchor" href="#install-buildx-for-multi-architecture-image-builds"><span>Install buildx for multi-architecture image builds</span></a></h2>`,9)),s("p",null,[n[19]||(n[19]=e("There are three options to get ")),s("a",C,[a(t,{icon:"iconfont icon-github"}),n[18]||(n[18]=s("code",null,"docker/buildx",-1))]),n[20]||(n[20]=e(" on Linux:"))]),s("ul",null,[n[25]||(n[25]=s("li",null,"Use buildx directly from the test channel version of Docker",-1)),s("li",null,[n[23]||(n[23]=e("Download a ")),s("a",M,[n[21]||(n[21]=e("binary release ")),a(t,{icon:"iconfont icon-github"}),n[22]||(n[22]=s("code",null,"docker/buildx",-1))]),n[24]||(n[24]=e(" of buildx and copy it to the $HOME/.docker directory"))]),n[26]||(n[26]=s("li",null,"Download, build, and install buildx from github.com",-1))]),n[51]||(n[51]=o(`<h3 id="use-buildx-from-docker-test-channel" tabindex="-1"><a class="header-anchor" href="#use-buildx-from-docker-test-channel"><span>Use buildx from Docker test channel</span></a></h3><p>The test version of Docker already has buildx included. The only thing needed is to set the environment variable to enable experimental command line features.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token builtin class-name">export</span> <span class="token assign-left variable">DOCKER_CLI_EXPERIMENTAL</span><span class="token operator">=</span>enabled</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="download-a-binary-release" tabindex="-1"><a class="header-anchor" href="#download-a-binary-release"><span>Download a binary release</span></a></h3><p>Another way to get buildx is to download a binary release from github and put in the .docker/cli-plugins directory.</p><p>For example, download the buildx for Linux amd64 with a browser from:</p>`,6)),a(r,{name:"Release v0.2.0 · docker/buildx",desc:"Docker CLI plugin for extended build capabilities with BuildKit",url:"https://github.com/docker/buildx/releases/tag/v0.2.0/",logo:"https://github.githubassets.com/favicons/favicon-dark.svg",preview:"https://opengraph.githubassets.com/b128b2f84962e89130a814aab2c547caa9d5929047568254c92aac08533daa47/docker/buildx/releases/tag/v0.2.0"}),n[52]||(n[52]=o(`<p>Then copy it to the cli-plugins/ directory (create it first if necessary):</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">cp</span> buildx-v0.2.0.linux-amd64 ~/.docker/cli-plugins/docker-buildx</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="download-build-and-install-buildx" tabindex="-1"><a class="header-anchor" href="#download-build-and-install-buildx"><span>Download, build, and install buildx</span></a></h3>`,3)),s("p",null,[n[28]||(n[28]=e("Because buildx is a new command and documentation is still catching up, ")),s("a",R,[a(t,{icon:"iconfont icon-github"}),n[27]||(n[27]=s("code",null,"docker/buildx",-1))]),n[29]||(n[29]=e(" is a good place to read more information about how buildx works."))]),n[53]||(n[53]=o(`<p>To get buildx from github use the commands:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token builtin class-name">export</span> <span class="token assign-left variable">DOCKER_BUILDKIT</span><span class="token operator">=</span><span class="token number">1</span></span>
<span class="line"><span class="token function">docker</span> build <span class="token parameter variable">--platform</span><span class="token operator">=</span>local <span class="token parameter variable">-o</span> <span class="token builtin class-name">.</span> git://github.com/docker/buildx</span>
<span class="line"><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> ~/.docker/cli-plugins</span>
<span class="line"><span class="token function">mv</span> buildx ~/.docker/cli-plugins/docker-buildx</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To confirm buildx is now installed run the help and the version command.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">docker</span> buildx <span class="token parameter variable">--help</span> </span>
<span class="line"><span class="token comment">#  </span></span>
<span class="line"><span class="token comment"># Usage:  docker buildx COMMAND</span></span>
<span class="line"><span class="token comment"># Build with BuildKit</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># Management Commands:</span></span>
<span class="line"><span class="token comment">#   imagetools  Commands to work on images in registry</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># Commands:</span></span>
<span class="line"><span class="token comment">#   bake        Build from a file</span></span>
<span class="line"><span class="token comment">#   build       Start a build</span></span>
<span class="line"><span class="token comment">#   create      Create a new builder instance</span></span>
<span class="line"><span class="token comment">#   inspect     Inspect current builder instance</span></span>
<span class="line"><span class="token comment">#   ls          List builder instances</span></span>
<span class="line"><span class="token comment">#   rm          Remove a builder instance</span></span>
<span class="line"><span class="token comment">#   stop        Stop builder instance</span></span>
<span class="line"><span class="token comment">#   use         Set the current builder instance</span></span>
<span class="line"><span class="token comment">#   version     Show buildx version information </span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># Run &#39;docker buildx COMMAND --help&#39; for more information on a command.</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token function">docker</span> buildx version</span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># github.com/docker/buildx v0.2.0-36-g4e61674 4e61674ac805117794cc55475a62efdef0be9818</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="register-arm-executables-to-run-on-x64-machines" tabindex="-1"><a class="header-anchor" href="#register-arm-executables-to-run-on-x64-machines"><span>Register Arm executables to run on x64 machines</span></a></h2>`,6)),s("p",null,[n[33]||(n[33]=e("Install the qemu instruction emulation to register Arm executables to run on the x86 machine. For best results, the ")),s("a",I,[n[30]||(n[30]=e("latest qemu image (")),a(t,{icon:"fa-brands fa-docker"}),n[31]||(n[31]=s("code",null,"docker/binfmt",-1)),n[32]||(n[32]=e(")"))]),n[34]||(n[34]=e(" should be used. If an older qemu is used some application may not work correctly on the x86 hardware."))]),n[54]||(n[54]=o(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">docker</span> run <span class="token parameter variable">--rm</span> <span class="token parameter variable">--privileged</span> docker/binfmt:820fdd95a9972a5308930a2bdfb8573dd4447ad3 </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>To verify the qemu handlers are registered properly, run the following and make sure the first line of the output is “enabled”. Note that the handler registration doesn’t survive a reboot, but could be added to the system start-up scripts.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">cat</span> /proc/sys/fs/binfmt_misc/qemu-aarch64</span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># enabled</span></span>
<span class="line"><span class="token comment"># interpreter /usr/bin/qemu-aarch64</span></span>
<span class="line"><span class="token comment"># flags: OCF</span></span>
<span class="line"><span class="token comment"># offset 0</span></span>
<span class="line"><span class="token comment"># magic 7f454c460201010000000000000000000200b7</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="create-a-multi-architecture-build-instance" tabindex="-1"><a class="header-anchor" href="#create-a-multi-architecture-build-instance"><span>Create a multi-architecture build instance</span></a></h2><p>Setup a new builder instance to create multi-architecture images.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">docker</span> buildx create <span class="token parameter variable">--name</span> mybuilder</span>
<span class="line"><span class="token function">docker</span> buildx use mybuilder</span>
<span class="line"><span class="token function">docker</span> buildx inspect <span class="token parameter variable">--bootstrap</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># Name: mybuilder</span></span>
<span class="line"><span class="token comment"># Driver: docker-container</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># Nodes:</span></span>
<span class="line"><span class="token comment"># Name: mybuilder0</span></span>
<span class="line"><span class="token comment"># Endpoint: unix:///var/run/docker.sock</span></span>
<span class="line"><span class="token comment"># Status: running</span></span>
<span class="line"><span class="token comment"># Platforms: linux/amd64, linux/arm64, linux/arm/v7, linux/arm/v6</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="try-buildx" tabindex="-1"><a class="header-anchor" href="#try-buildx"><span>Try buildx</span></a></h2>`,9)),s("p",null,[n[35]||(n[35]=e("There are multiple examples of buildx available, but here is a simple one for C programmers! Create a file named ")),a(t,{icon:"iconfont icon-c"}),n[36]||(n[36]=s("code",null,"hello.c",-1)),n[37]||(n[37]=e(" with this code:"))]),n[55]||(n[55]=o(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="hello.c"><span>hello.c</span></div><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token comment">/*</span>
<span class="line"> * hello.c</span>
<span class="line"> */</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span></span>
<span class="line"> </span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">ARCH</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ARCH</span> <span class="token string">&quot;Undefined&quot;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span>  </span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, my architecture is %s\\n&quot;</span><span class="token punctuation">,</span> ARCH<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,1)),s("p",null,[n[38]||(n[38]=e("Here is a Docker file to build and run it. Let’s get used to using multi-stage Docker files as it will be common for deploying embedded applications. Create a ")),a(t,{icon:"fa-brands fa-dockerfile"}),n[39]||(n[39]=s("code",null,"Dockerfile",-1)),n[40]||(n[40]=e(" with the following:"))]),n[56]||(n[56]=o(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="Dockerfile"><span>Dockerfile</span></div><div class="language-docker line-numbers-mode" data-highlighter="prismjs" data-ext="docker"><pre><code class="language-docker"><span class="line"><span class="token instruction"><span class="token keyword">FROM</span> alpine <span class="token keyword">AS</span> builder </span></span>
<span class="line"><span class="token instruction"><span class="token keyword">RUN</span> apk add build-base </span></span>
<span class="line"><span class="token instruction"><span class="token keyword">WORKDIR</span> /home</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">COPY</span> hello.c .</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">RUN</span> gcc <span class="token string">&quot;-DARCH=\\&quot;\`uname -a\`\\&quot;&quot;</span> hello.c -o hello</span></span>
<span class="line"> </span>
<span class="line"><span class="token instruction"><span class="token keyword">FROM</span> alpine </span></span>
<span class="line"><span class="token instruction"><span class="token keyword">WORKDIR</span> /home</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">COPY</span> <span class="token options"><span class="token property">--from</span><span class="token punctuation">=</span><span class="token string">builder</span></span> /home/hello .</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">ENTRYPOINT</span> [<span class="token string">&quot;./hello&quot;</span>] </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Now, use buildx to build for multiple architectures and push to Docker hub.</p><p>Use docker login first if needed and substitute your <strong>own</strong> Hub account.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">docker</span> buildx build <span class="token parameter variable">--platform</span> linux/arm,linux/arm64,linux/amd64 <span class="token parameter variable">-t</span> timtsai2018/hello <span class="token builtin class-name">.</span> <span class="token parameter variable">--push</span> </span>
<span class="line"><span class="token function">docker</span> buildx imagetools inspect timtsai2018/hello</span>
<span class="line"><span class="token comment">#\\</span></span>
<span class="line"><span class="token comment"># Name: docker.io/timtsai2018/hello:latest</span></span>
<span class="line"><span class="token comment"># MediaType: application/vnd.docker.distribution.manifest.list.v2+json</span></span>
<span class="line"><span class="token comment"># Digest: sha256:6f2ad12a9400330107ca8ad1675ab2924ae18c61bc1d3c600fdf9e2212e3bb7a</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># Manifests: </span></span>
<span class="line"><span class="token comment"># Name: docker.io/timtsai2018/hello:latest@sha256:adcdcf8f511cb35f7cf124df3d339bf677a733ab40260e85945e0037cf02c598</span></span>
<span class="line"><span class="token comment"># MediaType: application/vnd.docker.distribution.manifest.v2+json</span></span>
<span class="line"><span class="token comment"># Platform: linux/arm/v7</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># Name: docker.io/timtsai2018/hello:latest@sha256:3dc400e687a365aa5140718fde6cbbe37e050606f00274956e17fa9510df9573</span></span>
<span class="line"><span class="token comment"># MediaType: application/vnd.docker.distribution.manifest.v2+json</span></span>
<span class="line"><span class="token comment"># Platform: linux/arm64</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># Name: docker.io/timtsai2018/hello:latest@sha256:9446cf48281105b4f41f1c697c1258e6d2f9b9389d1c0aa34e2209477ed720cb</span></span>
<span class="line"><span class="token comment"># MediaType: application/vnd.docker.distribution.manifest.v2+json</span></span>
<span class="line"><span class="token comment"># Platform: linux/amd64</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Run using the sha from the manifest and see the output from uname as armv7l, aarch64, and x86_64:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">docker</span> run docker.io/timtsai2018/hello:latest@sha256:adcdcf8f511cb35f7cf124df3d339bf677a733ab40260e85945e0037cf02c598 </span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># Hello, my architecture is Linux buildkitsandbox 4.15.0-50-generic #54-Ubuntu SMP Mon May 6 18:46:08 UTC 2019 armv7l Linux</span></span>
<span class="line"></span>
<span class="line"><span class="token function">docker</span> run docker.io/timtsai2018/hello:latest@sha256:3dc400e687a365aa5140718fde6cbbe37e050606f00274956e17fa9510df9573 </span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># Hello, my architecture is Linux buildkitsandbox 4.15.0-50-generic #54-Ubuntu SMP Mon May 6 18:46:08 UTC 2019 aarch64 Linux</span></span>
<span class="line"></span>
<span class="line"><span class="token function">docker</span> run docker.io/timtsai2018/hello:latest@sha256:9446cf48281105b4f41f1c697c1258e6d2f9b9389d1c0aa34e2209477ed720cb</span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># Hello, my architecture is Linux buildkitsandbox 4.15.0-50-generic #54-Ubuntu SMP Mon May 6 18:46:08 UTC 2019 x86_64 Linux</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="next-steps" tabindex="-1"><a class="header-anchor" href="#next-steps"><span>Next steps</span></a></h2><p>As we have seen, building multi-architecture containers can be created with buildx in the same way as with Docker Desktop for Mac and Windows. Give it a try for yourself and start making the transition to multi-architecture Docker images today.</p>`,9)),s("div",S,[n[41]||(n[41]=s("p",{class:"hint-container-title"},"Further Reading",-1)),a(b,{src:"youtube/zmV5WUmvyz0"}),a(r,{name:"Arm and Docker: Better Together",desc:"Arm® Neoverse™ is about so much more than CPU cores. It's about building the infrastructure foundation for a world of 1 trillion intelligent devices.",url:"https://newsroom.arm.com/news/arm-and-docker-better-together/",logo:"https://newsroom.arm.com/wp-content/uploads/2021/08/cropped-arm_icon-192x192.png",preview:"https://newsroom.arm.com/wp-content/uploads/2023/06/GettyImages-86556990620Arm20Newsroom20Mohamed20Blog20654x314.jpg"}),a(r,{name:"Getting started with Docker on Arm",desc:"Docker has partnered with Arm to drive adoption of containers into the Arm ecosystem. Read on for more information about using Docker to improve software development for the Arm architecture.",url:"https://community.arm.com/arm-community-blogs/b/tools-software-ides-blog/posts/getting-started-with-docker-on-arm/",logo:"https://community.arm.com/cfs-file/__key/themefiles/tc-s-39888112961743d6b482debae733b37d-00000000000000000000000000000000-favicon/arm_2D00_icon_2D00_256x256.png",preview:"https://community.arm.com/cfs-file/__key/communityserver-blogs-components-weblogfiles/00-00-00-21-12/technical_2D00_blog_2D00_image.jpg"}),a(r,{name:"Cross building ARM64 images on Docker Desktop",desc:"Just recently on Dockercon 2019, Docker announced a great feature from their ARM partnership. Now it's possible to cross-build Docker…",url:"https://carlosedp.medium.com/cross-building-arm64-images-on-docker-desktop-254d1e0bc1f9/",logo:"https://miro.medium.com/v2/5d8de952517e8160e40ef9841c781cdc14a5db313057fa3c3de41c6f5b494b19",preview:"https://miro.medium.com/v2/resize:fit:840/0*v5XDnFGcanCw_7vk.jpg"})]),h(" TODO: add ARTICLE CARD "),a(p,d(m({title:"Getting started with Docker for Arm on Linux",desc:"Learn from Docker experts to simplify and advance your app development and management with Docker. Stay up to date on Docker events and new version",link:"https://chanhi2000.github.io/bookshelf/docker.com/getting-started-with-docker-for-arm-on-linux.html",logo:"https://docker.com/app/uploads/2024/02/cropped-docker-logo-favicon-192x192.png",background:"rgba(29,99,237,0.2)"})),null,16)])}const G=v(x,[["render",N]]),P=JSON.parse('{"path":"/docker.com/getting-started-with-docker-for-arm-on-linux.html","title":"Getting started with Docker for Arm on Linux","lang":"en-US","frontmatter":{"lang":"en-US","title":"Getting started with Docker for Arm on Linux","description":"Article(s) > Getting started with Docker for Arm on Linux","icon":"fa-brands fa-docker","category":["DevOps","Docker","Article(s)"],"tag":["blog","docker.com","devops","docker"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Getting started with Docker for Arm on Linux\\",\\"image\\":[\\"https://docker.com/app/uploads/2024/02/docker-default-meta-image-1110x583.png\\"],\\"datePublished\\":\\"2019-06-08T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Tim Tsai\\",\\"url\\":\\"https://docker.com/author/tim-tsai/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/docker.com/getting-started-with-docker-for-arm-on-linux.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Getting started with Docker for Arm on Linux"}],["meta",{"property":"og:description","content":"Article(s) > Getting started with Docker for Arm on Linux"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://docker.com/app/uploads/2024/02/docker-default-meta-image-1110x583.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://docker.com/app/uploads/2024/02/docker-default-meta-image-1110x583.png"}],["meta",{"name":"twitter:image:alt","content":"Getting started with Docker for Arm on Linux"}],["meta",{"property":"article:author","content":"Tim Tsai"}],["meta",{"property":"article:tag","content":"docker"}],["meta",{"property":"article:tag","content":"devops"}],["meta",{"property":"article:tag","content":"docker.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2019-06-08T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Getting started with Docker for Arm on Linux"},{"property":"og:description","content":"Getting started with Docker for Arm on Linux"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/docker.com/getting-started-with-docker-for-arm-on-linux.html"}]],"prev":"/devops/docker/articles/README.md","date":"2019-06-08T00:00:00.000Z","isOriginal":false,"author":[{"name":"Tim Tsai","url":"https://docker.com/author/tim-tsai/"}],"cover":"https://docker.com/app/uploads/2024/02/docker-default-meta-image-1110x583.png"},"git":{},"readingTime":{"minutes":6.63,"words":1988},"filePathRelative":"docker.com/getting-started-with-docker-for-arm-on-linux.md","copyright":{"author":"Tim Tsai"}}');export{G as comp,P as data};
