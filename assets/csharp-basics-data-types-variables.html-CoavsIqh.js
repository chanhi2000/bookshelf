import{_ as b}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as y,d as e,f as s,b as p,a as c,t as v,n as d,g as u,w as n,e as o,r as l,o as k}from"./app-BVguHYKu.js";const f="/bookshelf/assets/image/code-maze.com/csharp-data-types-variables/04.1-WholeNumbersTable.png",w="/bookshelf/assets/image/code-maze.com/csharp-data-types-variables/04.2-TableDecimalNumbers.png",D="/bookshelf/assets/image/code-maze.com/csharp-data-types-variables/04.3-TableCharBool.png",C="/bookshelf/assets/image/code-maze.com/csharp-data-types-variables/04-ValueType.png",T="/bookshelf/assets/image/code-maze.com/csharp-data-types-variables/05-ReferenceType.png",x={},z={id:"frontmatter-title-관련",tabindex:"-1"},_={class:"header-anchor",href:"#frontmatter-title-관련"},V={class:"table-of-contents"},S={class:"hint-container details"},R={href:"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/",target:"_blank",rel:"noopener noreferrer"};function N(m,a){const r=l("VPCard"),i=l("router-link"),h=l("SiteInfo"),t=l("RouteLink"),g=l("VPIcon");return k(),y("div",null,[e("h1",z,[e("a",_,[e("span",null,v(m.$frontmatter.title)+" 관련",1)])]),s(r,d(u({title:"C# > Article(s)",desc:"Article(s)",link:"/programming/cs/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),e("nav",V,[e("ul",null,[e("li",null,[s(i,{to:"#data-type-registration-in-c"},{default:n(()=>a[0]||(a[0]=[o("Data Type Registration in C#")])),_:1,__:[0]})]),e("li",null,[s(i,{to:"#variables-in-c"},{default:n(()=>a[1]||(a[1]=[o("Variables in C#")])),_:1,__:[1]}),e("ul",null,[e("li",null,[s(i,{to:"#contextual-keywords"},{default:n(()=>a[2]||(a[2]=[o("Contextual Keywords")])),_:1,__:[2]})]),e("li",null,[s(i,{to:"#value-and-reference-types"},{default:n(()=>a[3]||(a[3]=[o("Value and Reference Types")])),_:1,__:[3]})])])]),e("li",null,[s(i,{to:"#variable-declarations-and-expressions-in-c"},{default:n(()=>a[4]||(a[4]=[o("Variable Declarations and Expressions in C#")])),_:1,__:[4]})]),e("li",null,[s(i,{to:"#conclusion"},{default:n(()=>a[5]||(a[5]=[o("Conclusion")])),_:1,__:[5]})])])]),a[31]||(a[31]=e("hr",null,null,-1)),s(h,{name:"Data Types, Declarations and Variable Definitions in C#",desc:"Find out more about C# Data Types, what kind of data types exists in C#, how to use declarations and how to use variables as well.",url:"https://code-maze.com/csharp-data-types-variables/",logo:"/assets/image/code-maze.com/favicon.png",preview:"/assets/image/code-maze.com/csharp-data-types-variables/banner.png"}),a[32]||(a[32]=e("p",null,"In C#, different data types are registered differently. Furthermore, different actions are allowed to be executed upon them as well. For different data types, a certain amount of memory space is reserved on our computers.",-1)),a[33]||(a[33]=e("p",null,"With each data type we define:",-1)),a[34]||(a[34]=e("ul",null,[e("li",null,"How to register data in memory"),e("li",null,"The possible values for that data"),e("li",null,"Possible actions on the data")],-1)),a[35]||(a[35]=e("p",null,"So, let’s talk more about data types in C#.",-1)),e("details",S,[a[22]||(a[22]=e("summary",null,"Details",-1)),e("ul",null,[e("li",null,[s(t,{to:"/code-maze.com/csharp-basics-ide-introduction.html"},{default:n(()=>a[6]||(a[6]=[e("strong",null,"Development Environment Setup",-1)])),_:1,__:[6]})]),a[7]||(a[7]=e("li",null,"Data Types, Declarations and Variable Definitions (Current article)",-1))]),c(" - [**Data Types, Declarations and Variable Definitions**](/code-maze.com/csharp-basics-data-types-variables.md) "),e("ul",null,[e("li",null,[s(t,{to:"/code-maze.com/csharp-basics-operators.html"},{default:n(()=>a[8]||(a[8]=[e("strong",null,"Operators in C#",-1)])),_:1,__:[8]})]),e("li",null,[s(t,{to:"/code-maze.com/csharp-basics-type-conversion.html"},{default:n(()=>a[9]||(a[9]=[e("strong",null,"Type Conversion",-1)])),_:1,__:[9]})]),e("li",null,[s(t,{to:"/code-maze.com/csharp-basics-input-output.html"},{default:n(()=>a[10]||(a[10]=[e("strong",null,"Input and Output in C#",-1)])),_:1,__:[10]})]),e("li",null,[s(t,{to:"/code-maze.com/csharp-basics-string-methods.html"},{default:n(()=>a[11]||(a[11]=[e("strong",null,"Working with Strings",-1)])),_:1,__:[11]})]),e("li",null,[s(t,{to:"/code-maze.com/csharp-basics-conditions.html"},{default:n(()=>a[12]||(a[12]=[e("strong",null,"Conditions in C# (If, If-Else, If-ElseIf, Switch-Case)",-1)])),_:1,__:[12]})]),e("li",null,[s(t,{to:"/code-maze.com/csharp-basics-loops.html"},{default:n(()=>a[13]||(a[13]=[e("strong",null,"Loops(While, Do-While, For)",-1)])),_:1,__:[13]})]),e("li",null,[s(t,{to:"/code-maze.com/csharp-basics-handling-exceptions.html"},{default:n(()=>a[14]||(a[14]=[e("strong",null,"Handling Exceptions",-1)])),_:1,__:[14]})]),e("li",null,[s(t,{to:"/code-maze.com/csharp-basics-access-modifiers.html"},{default:n(()=>a[15]||(a[15]=[e("strong",null,"Access Modifiers",-1)])),_:1,__:[15]})]),e("li",null,[s(t,{to:"/code-maze.com/csharp-basics-methods.html"},{default:n(()=>a[16]||(a[16]=[e("strong",null,"Methods",-1)])),_:1,__:[16]})]),e("li",null,[s(t,{to:"/code-maze.com/cshrap-basics-ref-out-keywords.html"},{default:n(()=>a[17]||(a[17]=[e("strong",null,"Ref and Out Keywords",-1)])),_:1,__:[17]})]),e("li",null,[s(t,{to:"/code-maze.com/csharp-basics-recursion.html"},{default:n(()=>a[18]||(a[18]=[e("strong",null,"Recursion and Recursive Methods",-1)])),_:1,__:[18]})]),e("li",null,[s(t,{to:"/code-maze.com/csharp-basics-arrays.html"},{default:n(()=>a[19]||(a[19]=[e("strong",null,"Arrays (single-dimensional and multi-dimensional arrays)",-1)])),_:1,__:[19]})]),e("li",null,[s(t,{to:"/code-maze.com/csharp-basics-streamwriter-streamreader.html"},{default:n(()=>a[20]||(a[20]=[e("strong",null,"Working with Files, StreamWriter and StreamReader",-1)])),_:1,__:[20]})]),e("li",null,[s(t,{to:"/code-maze.com/csharp-basics-file-directory.html"},{default:n(()=>a[21]||(a[21]=[e("strong",null,"Working with Files, File, and Directory",-1)])),_:1,__:[21]})])])]),e("p",null,[a[24]||(a[24]=o("For the complete navigation of this series check out: ")),s(t,{to:"/code-maze.com/csharp-back-to-basics.html"},{default:n(()=>a[23]||(a[23]=[e("strong",null,"C# Back to Basics",-1)])),_:1,__:[23]}),a[25]||(a[25]=o("."))]),a[36]||(a[36]=p('<hr><h2 id="data-type-registration-in-c" tabindex="-1"><a class="header-anchor" href="#data-type-registration-in-c"><span>Data Type Registration in C#</span></a></h2><p>Data types that represent the whole numbers are expressed with a certain number of bits. For unsigned numbers, the range is from 0 to 2N-1, and the signed numbers range is from -2N-1 to 2N-1-1. So if the data type has a size of 8 bits like the sbyte data type, we can represent its range like this: from -27 to 27-1 =&gt; from -128 to 127. The following table contains different data types that represent the whole numbers:</p><figure><img src="'+f+'" alt="whole numbers table - C# Data Types" tabindex="0" loading="lazy"><figcaption>whole numbers table - C# Data Types</figcaption></figure><p>Letter <code>u</code> in front of the type means that type can’t contain negative numbers, it is unsigned.</p><p>The types mentioned above are the whole number types. But in C#, we have the number types with the floating-point.</p><p>We can present them in a table as well:</p><figure><img src="'+w+'" alt="Decimal numbers table in C# Data Types" tabindex="0" loading="lazy"><figcaption>Decimal numbers table in C# Data Types</figcaption></figure><p>In C#, we have two more basic data types:</p><figure><img src="'+D+'" alt="Char-bool table C# Data Types" tabindex="0" loading="lazy"><figcaption>Char-bool table C# Data Types</figcaption></figure><p>To use char type in our code we must place it inside the single quotes: ’a’ or ’A’ or ’3’…</p><p>One more type that is often introduced as the basic data type is the <strong>string</strong> type. But the <strong>string</strong> is not a value type it is a reference type. To use a string in our code we must place the value inside the double quotes: „This is the string type“ or „3452“…</p><p>So, we know we have the value types and reference types, and it is time to talk more about them and variables as well.</p><hr><h2 id="variables-in-c" tabindex="-1"><a class="header-anchor" href="#variables-in-c"><span>Variables in C#</span></a></h2><p>Variable is a name of a memory location in which the application stores values.</p><p>We should create our variables by following examples:</p><ul><li>studentName</li><li>subject</li><li>work_day …</li></ul><p>The wrong examples would be</p><ul><li>student Name</li><li>work-day</li><li>1place</li></ul><p>We should mention that C# is a case-sensitive language so the <strong>studentName</strong> is not the same as the <strong>StudentName</strong>.</p>',21)),e("p",null,[a[27]||(a[27]=o("The C# language has its own set of reserved words, so-called keywords. We can’t use them as a name for our variables. For the list of keywords, you can visit ")),e("a",R,[s(g,{icon:"iconfont icon-csharp"}),a[26]||(a[26]=o("keyword-list"))]),a[28]||(a[28]=o("."))]),a[37]||(a[37]=p(`<p>But if for some reason we want to name our variable with a keyword, to avoid clashes, we can use the <code>@</code> sign in front of the name:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token class-name"><span class="token keyword">int</span></span> @<span class="token keyword">int</span><span class="token punctuation">;</span> <span class="token comment">//valid</span></span>
<span class="line"><span class="token class-name"><span class="token keyword">string</span></span> @<span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment">//valid</span></span>
<span class="line"><span class="token keyword">decimal</span> <span class="token keyword">decimal</span><span class="token punctuation">;</span> <span class="token comment">//not valid</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="contextual-keywords" tabindex="-1"><a class="header-anchor" href="#contextual-keywords"><span>Contextual Keywords</span></a></h3><p>The contextual keywords are the ones that we can use for the variable names but without using the @ sign in front:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="output"><span>output</span></div><div class="language-plaintext line-numbers-mode" data-highlighter="prismjs" data-ext="plaintext"><pre><code class="language-plaintext"><span class="line">add alias ascending async await by descending dynamic equals from get global group in into join</span>
<span class="line">let nameof on orderby partial remove select set unmanaged value var when where yield</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="value-and-reference-types" tabindex="-1"><a class="header-anchor" href="#value-and-reference-types"><span>Value and Reference Types</span></a></h3><p>In C#, we have variables divided into two categories: <strong>Value</strong> type and <strong>Reference</strong> type. The difference is that the value type variables stores their values inside their own memory locations, but the memory location for the reference type variables contains only address to the dynamic memory location where the value is stored.</p><p>Let’s see how the value types behave in a graphic example:</p><figure><img src="`+C+'" alt="Value type C# Data Type" tabindex="0" loading="lazy"><figcaption>Value type C# Data Type</figcaption></figure><p>Let’s do the same for the reference types:</p><figure><img src="'+T+`" alt="Reference type C# Data Types" tabindex="0" loading="lazy"><figcaption>Reference type C# Data Types</figcaption></figure><hr><h2 id="variable-declarations-and-expressions-in-c" tabindex="-1"><a class="header-anchor" href="#variable-declarations-and-expressions-in-c"><span>Variable Declarations and Expressions in C#</span></a></h2><p>We should declare our variables in the following way:</p><p><code>&lt;data type&gt; &lt;variable name&gt;; or &lt;data type&gt; &lt;variable name&gt;, &lt;variable name&gt; ... ;</code></p><p>So a few examples would be:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">class</span> <span class="token class-name">Program</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">int</span></span> age<span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">double</span></span> temperature<span class="token punctuation">,</span> change<span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">Student</span> student<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Just with the declaration, we can’t assign a value to a value type variable. To do that, we need to use expressions in addition:</p><p><code>&lt;data type&gt; &lt;variable name&gt; = &lt;expression&gt; ;</code></p><p>Again, let’s look at this with an example:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">class</span> <span class="token class-name">Program</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">int</span></span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">int</span></span> y <span class="token operator">=</span> <span class="token number">145</span> <span class="token operator">+</span> x<span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">char</span></span> p <span class="token operator">=</span> <span class="token char">&#39;p&#39;</span><span class="token punctuation">;</span></span>
<span class="line">        p <span class="token operator">=</span> <span class="token char">&#39;A&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To add value for the reference type variable, we need to use the <code>new</code> keyword in the expression part (string is an exception to this rule):</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">class</span> <span class="token class-name">Program</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span><span class="token punctuation">(</span><span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We would like to mention that we don’t recommend calling variables with names „x“ or „y“… We have used those names just for the sake of simplicity. It is a better idea to give meaningful names to our variables.</p><hr><h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="#conclusion"><span>Conclusion</span></a></h2><p>Now we have learned how to declare our variables and how to assign values to them as well.</p>`,27)),e("p",null,[s(t,{to:"/code-maze.com/csharp-basics-operators.html"},{default:n(()=>a[29]||(a[29]=[e("strong",null,"In the next post",-1)])),_:1,__:[29]}),a[30]||(a[30]=o(", we are going to talk about operators in C#."))]),c(" TODO: add ARTICLE CARD "),s(r,d(u({title:"Data Types, Declarations and Variable Definitions in C#",desc:"Find out more about C# Data Types, what kind of data types exists in C#, how to use declarations and how to use variables as well.",link:"https://chanhi2000.github.io/bookshelf/code-maze.com/csharp-data-types-variables.html",logo:"/assets/image/code-maze.com/favicon.png",background:"rgba(22,22,22,0.2)"})),null,16)])}const I=b(x,[["render",N]]),j=JSON.parse('{"path":"/code-maze.com/csharp-basics-data-types-variables.html","title":"Data Types, Declarations and Variable Definitions in C#","lang":"en-US","frontmatter":{"lang":"en-US","title":"Data Types, Declarations and Variable Definitions in C#","description":"Article(s) > Data Types, Declarations and Variable Definitions in C#","icon":"iconfont icon-csharp","category":["C#","DotNet","Article(s)"],"tag":["blog","code-maze.com","cs","c#","csharp","dotnet"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Data Types, Declarations and Variable Definitions in C#\\",\\"image\\":[\\"https://chanhi2000.github.io/bookshelf/assets/image/code-maze.com/csharp-data-types-variables/04.1-WholeNumbersTable.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/code-maze.com/csharp-data-types-variables/04.2-TableDecimalNumbers.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/code-maze.com/csharp-data-types-variables/04.3-TableCharBool.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/code-maze.com/csharp-data-types-variables/04-ValueType.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/code-maze.com/csharp-data-types-variables/05-ReferenceType.png\\"],\\"datePublished\\":\\"2018-07-27T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Marinko Spasojević\\",\\"url\\":\\"https://code-maze.com/author/marinko/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/code-maze.com/csharp-basics-data-types-variables.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Data Types, Declarations and Variable Definitions in C#"}],["meta",{"property":"og:description","content":"Article(s) > Data Types, Declarations and Variable Definitions in C#"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://chanhi2000.github.io/bookshelf/assets/image/code-maze.com/csharp-data-types-variables/banner.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://chanhi2000.github.io/bookshelf/assets/image/code-maze.com/csharp-data-types-variables/banner.png"}],["meta",{"name":"twitter:image:alt","content":"Data Types, Declarations and Variable Definitions in C#"}],["meta",{"property":"article:author","content":"Marinko Spasojević"}],["meta",{"property":"article:tag","content":"dotnet"}],["meta",{"property":"article:tag","content":"csharp"}],["meta",{"property":"article:tag","content":"c#"}],["meta",{"property":"article:tag","content":"cs"}],["meta",{"property":"article:tag","content":"code-maze.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2018-07-27T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Data Types, Declarations and Variable Definitions in C#"},{"property":"og:description","content":"Data Types, Declarations and Variable Definitions in C#"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/code-maze.com/csharp-data-types-variables.html"}]],"prev":"/programming/cs/articles/README.md","date":"2018-07-27T00:00:00.000Z","isOriginal":false,"author":[{"name":"Marinko Spasojević","url":"https://code-maze.com/author/marinko/"}],"cover":"/assets/image/code-maze.com/csharp-data-types-variables/banner.png"},"git":{},"readingTime":{"minutes":4.26,"words":1277},"filePathRelative":"code-maze.com/csharp-basics-data-types-variables.md","copyright":{"author":"Marinko Spasojević"}}');export{I as comp,j as data};
