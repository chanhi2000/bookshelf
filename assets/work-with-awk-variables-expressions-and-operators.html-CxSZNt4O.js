import{_ as b}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as v,d as n,f as a,b as i,a as h,t as k,n as d,g as m,w as t,e,r as l,o as f}from"./app-BVguHYKu.js";const w={},x={id:"frontmatter-title",tabindex:"-1"},y={class:"header-anchor",href:"#frontmatter-title"},A={class:"table-of-contents"};function S(u,s){const p=l("VPCard"),c=l("router-link"),g=l("SiteInfo"),o=l("RouteLink"),r=l("VPIcon");return f(),v("div",null,[n("h1",x,[n("a",y,[n("span",null,k(u.$frontmatter.title),1)])]),a(p,d(m({title:"awk > Article(s)",desc:"Article(s)",link:"/tool/awk/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),a(p,d(m({title:"Shell > Article(s)",desc:"Article(s)",link:"/programming/sh/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),n("nav",A,[n("ul",null,[n("li",null,[a(c,{to:"#_1-awk-variables"},{default:t(()=>s[0]||(s[0]=[e("1. Awk Variables")])),_:1,__:[0]})]),n("li",null,[a(c,{to:"#_2-numeric-expressions"},{default:t(()=>s[1]||(s[1]=[e("2. Numeric Expressions")])),_:1,__:[1]})]),n("li",null,[a(c,{to:"#_3-assignment-operators"},{default:t(()=>s[2]||(s[2]=[e("3. Assignment Operators")])),_:1,__:[2]})])])]),s[41]||(s[41]=n("hr",null,null,-1)),a(g,{name:"How to Work with Awk Variables, Expressions, and Operators - Part 8",desc:"We'll explore advanced Awk features for complex text filtering, including variables, numeric expressions, and assignment operators.",url:"https://tecmint.com/work-with-awk-variables-expressions-and-operators",logo:"https://tecmint.com/wp-content/uploads/2020/07/favicon.ico",preview:"https://tecmint.com/wp-content/uploads/2016/07/Learn-Awk-Variables-Numeric-Expressions-Assignment-Operators.png"}),n("p",null,[s[4]||(s[4]=e("The ")),a(o,{to:"/tecmint.com/use-linux-awk-command-to-filter-text-string-in-files.html"},{default:t(()=>s[3]||(s[3]=[n("strong",null,"Awk command series",-1)])),_:1,__:[3]}),s[5]||(s[5]=e(" is getting exciting! I believe that, in the previous seven parts, we walked through some fundamentals of Awk that you need to master to enable you to perform basic text or string filtering in Linux."))]),s[42]||(s[42]=i(`<p>Starting with this part, we shall dive into advanced areas of <strong>Awk</strong> to handle more complex text or string filtering operations. Therefore, we will cover Awk features such as <strong>variables</strong>, <strong>numeric expressions</strong>, and <strong>assignment operators</strong>.</p><p>These concepts are not significantly different from those you may have encountered in many programming languages before, such as Shell, C, Python, and many others. So, there is no need to worry much about this topic; we are simply revising the common ideas of using these features.</p><p>This will probably be one of the easiest Awk command sections to understand, so sit back and let’s get going</p><hr><h2 id="_1-awk-variables" tabindex="-1"><a class="header-anchor" href="#_1-awk-variables"><span>1. Awk Variables</span></a></h2><p>In any programming language, a <strong>variable</strong> is a placeholder that stores a <strong>value</strong>. When you create a variable in a program file, as the file is executed, some space is created in memory that will store the value you specify for the variable.</p><p>You can define <strong>Awk</strong> variables in the same way you define shell variables as follows:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token assign-left variable">variable_name</span><span class="token operator">=</span>value </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>In the syntax above:</p><ul><li><code>variable_name</code>: is the name you give a variable.</li><li><code>value</code>: the value stored in the variable.</li></ul><p>Let’s look at some examples below:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token assign-left variable">computer_name</span><span class="token operator">=</span>”tecmint.com”</span>
<span class="line"><span class="token assign-left variable">port_no</span><span class="token operator">=</span>”22”</span>
<span class="line"><span class="token assign-left variable">email</span><span class="token operator">=</span>”admin@tecmint.com”</span>
<span class="line"><span class="token assign-left variable">server</span><span class="token operator">=</span>”computer_name”</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Take a look at the simple examples above, in the first variable definition, the value <code>tecmint.com</code> is assigned to the variable <code>computer_name</code>.</p><p>Furthermore, the value <code>22</code> is assigned to the variable <code>port_no</code>, it is also possible to assign the value of one variable to another variable as in the last example where we assigned the value of <code>computer_name</code> to the variable server.</p><p>If you can recall, right from <a href="https://tecmint.com/awk-print-fields-columns-with-space-separator/" target="_blank" rel="noopener noreferrer">part 2 of this Awk series</a>, where we covered field editing, we talked about how Awk divides input lines into fields and uses a standard field access operator, <code>$</code> to read the different fields that have been parsed. We can also use variables to store the values of fields as follows.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token assign-left variable">first_name</span><span class="token operator">=</span><span class="token variable">$2</span></span>
<span class="line"><span class="token assign-left variable">second_name</span><span class="token operator">=</span><span class="token variable">$3</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>In the examples above, the value of <code>first_name</code> is set to the second field and <code>second_name</code> is set to the third field.</p>`,17)),n("p",null,[s[6]||(s[6]=e("As an illustration, consider a file named ")),a(r,{icon:"fas fa-file-lines"}),s[7]||(s[7]=n("code",null,"names.txt",-1)),s[8]||(s[8]=e(" which contains a list of users indicating their first and last names plus gender."))]),n("p",null,[s[10]||(s[10]=e("Using the ")),a(o,{to:"/tecmint.com/cat-command-linux.html"},{default:t(()=>s[9]||(s[9]=[n("strong",null,[n("code",null,"cat"),e(" command")],-1)])),_:1,__:[9]}),s[11]||(s[11]=e(", we can view the contents of the file as follows"))]),s[43]||(s[43]=i(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">cat</span> names.txt</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://tecmint.com/wp-content/uploads/2016/07/List-File-Content-Using-cat-Command.png" alt="List File Content Using cat Command" tabindex="0" loading="lazy"><figcaption>List File Content Using cat Command</figcaption></figure><p>Then, we can also use the variables <code>first_name</code> and <code>second_name</code> to store the first and second names of the first user on the list as by running the <strong>Awk</strong> command below:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">awk</span> <span class="token string">&#39;/Aaron/{ first_name=$2 ; second_name=$3 ; print first_name, second_name ; }&#39;</span> names.txt</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://tecmint.com/wp-content/uploads/2016/07/Store-Variables-Using-Awk-Command.png" alt="Store Variables Using Awk Command" tabindex="0" loading="lazy"><figcaption>Store Variables Using Awk Command</figcaption></figure><p>Let us also take a look at another case, when you issue the command <code>uname -a</code> on your terminal, it prints out all your system information.</p><p>The second field contains your <code>hostname</code>, therefore we can store the <strong>hostname</strong> in a variable called <code>hostname</code> and print it using <strong>Awk</strong> as follows:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">uname</span> <span class="token parameter variable">-a</span></span>
<span class="line"><span class="token function">uname</span> <span class="token parameter variable">-a</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;{hostname=$2 ; print hostname ; }&#39;</span> </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://tecmint.com/wp-content/uploads/2016/07/Store-Command-Output-to-Variable-Using-Awk.png" alt="Store Command Output to Variable Using Awk" tabindex="0" loading="lazy"><figcaption>Store Command Output to Variable Using Awk</figcaption></figure><hr><h2 id="_2-numeric-expressions" tabindex="-1"><a class="header-anchor" href="#_2-numeric-expressions"><span>2. Numeric Expressions</span></a></h2><p>In <strong>Awk</strong>, numeric expressions are built using the following numeric operators:</p><ul><li><code>*</code> : multiplication operator</li><li><code>+</code> : addition operator</li><li><code>/</code> : division operator</li><li><code>-</code> : subtraction operator</li><li><code>%</code> : modulus operator</li><li><code>^</code> : exponentiation operator</li></ul><p>The syntax for a numeric expression is:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">operand1 operator operand2</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>In the form above, <code>operand1</code> and <code>operand2</code> can be numbers or variable names, and <code>operator</code> is any of the operators above.</p><p>Below are some examples to demonstrate how to build numeric expressions:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token assign-left variable">counter</span><span class="token operator">=</span><span class="token number">0</span></span>
<span class="line"><span class="token assign-left variable">num1</span><span class="token operator">=</span><span class="token number">5</span></span>
<span class="line"><span class="token assign-left variable">num2</span><span class="token operator">=</span><span class="token number">10</span></span>
<span class="line"><span class="token assign-left variable">num3</span><span class="token operator">=</span>num2-num1</span>
<span class="line"><span class="token assign-left variable">counter</span><span class="token operator">=</span>counter+1</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,18)),n("p",null,[s[12]||(s[12]=e("To understand the use of numeric expressions in ")),s[13]||(s[13]=n("strong",null,"Awk",-1)),s[14]||(s[14]=e(", we shall consider the following example below, with the file ")),a(r,{icon:"fas fa-file-lines"}),s[15]||(s[15]=n("code",null,"domains.txt",-1)),s[16]||(s[16]=e(" which contains all domains owned by ")),s[17]||(s[17]=n("strong",null,"Tecmint",-1)),s[18]||(s[18]=e("."))]),s[44]||(s[44]=i(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="domains.txt"><span>domains.txt</span></div><div class="language-plaintext line-numbers-mode" data-highlighter="prismjs" data-ext="plaintext"><pre><code class="language-plaintext"><span class="line">news.tecmint.com</span>
<span class="line">tecmint.com</span>
<span class="line">linuxsay.com</span>
<span class="line">windows.tecmint.com</span>
<span class="line">tecmint.com</span>
<span class="line">news.tecmint.com</span>
<span class="line">tecmint.com</span>
<span class="line">linuxsay.com</span>
<span class="line">tecmint.com</span>
<span class="line">news.tecmint.com</span>
<span class="line">tecmint.com</span>
<span class="line">linuxsay.com</span>
<span class="line">windows.tecmint.com</span>
<span class="line">tecmint.com</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>To view the contents of the file, use the command below:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">cat</span> domains.txt</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://tecmint.com/wp-content/uploads/2016/07/View-Contents-of-File.png" alt="View Contents of File" tabindex="0" loading="lazy"><figcaption>View Contents of File</figcaption></figure><p>If we want to count the number of times the domain <code>tecmint.com</code> appears in the file, we can write a simple script to do that as follows:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="script.sh"><span>script.sh</span></div><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token shebang important">#!/bin/bash</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token for-or-select variable">file</span> <span class="token keyword">in</span> <span class="token variable">$@</span><span class="token punctuation">;</span> <span class="token keyword">do</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-f</span> <span class="token variable">$file</span> <span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token keyword">then</span></span>
<span class="line">                <span class="token comment">#print out filename</span></span>
<span class="line">                <span class="token builtin class-name">echo</span> <span class="token string">&quot;File is: <span class="token variable">$file</span>&quot;</span></span>
<span class="line">                <span class="token comment">#print a number incrementally for every line containing tecmint.com </span></span>
<span class="line">                <span class="token function">awk</span>  <span class="token string">&#39;/^tecmint.com/ { counter=counter+1 ; printf &quot;%s\\n&quot;, counter ; }&#39;</span>   <span class="token variable">$file</span></span>
<span class="line">        <span class="token keyword">else</span></span>
<span class="line">                <span class="token comment">#print error info incase input is not a file</span></span>
<span class="line">                <span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">$file</span> is not a file, please specify a file.&quot;</span> <span class="token operator">&gt;</span><span class="token file-descriptor important">&amp;2</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">exit</span> <span class="token number">1</span></span>
<span class="line">        <span class="token keyword">fi</span></span>
<span class="line"><span class="token keyword">done</span></span>
<span class="line"><span class="token comment">#terminate script with exit code 0 in case of successful execution </span></span>
<span class="line"><span class="token builtin class-name">exit</span> <span class="token number">0</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><figure><img src="https://tecmint.com/wp-content/uploads/2016/07/Shell-Script-to-Count-a-String-in-File.png" alt="Shell Script to Count a String or Text in File" tabindex="0" loading="lazy"><figcaption>Shell Script to Count a String or Text in File</figcaption></figure>`,7)),n("p",null,[s[19]||(s[19]=e("After creating the script, save it and make it executable, when we run it with the file, ")),a(r,{icon:"fas fa-file-lines"}),s[20]||(s[20]=n("code",null,"domains.txt",-1)),s[21]||(s[21]=e(" as our input, we get the following output:"))]),s[45]||(s[45]=i(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">./script.sh  ~/domains.txt</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://tecmint.com/wp-content/uploads/2016/07/Script-To-Count-String.png" alt="Script to Count String or Text" tabindex="0" loading="lazy"><figcaption>Script to Count String or Text</figcaption></figure>`,2)),n("p",null,[s[22]||(s[22]=e("From the output of the script, there are 6 lines in the file ")),a(r,{icon:"fas fa-file-lines"}),s[23]||(s[23]=n("code",null,"domains.txt",-1)),s[24]||(s[24]=e(" which contain ")),s[25]||(s[25]=n("code",null,"tecmint.com",-1)),s[26]||(s[26]=e(", to confirm that you can manually count them."))]),s[46]||(s[46]=i(`<hr><h2 id="_3-assignment-operators" tabindex="-1"><a class="header-anchor" href="#_3-assignment-operators"><span>3. Assignment Operators</span></a></h2><p>The last <strong>Awk</strong> feature we shall cover is assignment operators, there are several assignment operators in Awk and these include the following:</p><ul><li><code>*=</code> : multiplication assignment operator</li><li><code>+=</code> : addition assignment operator</li><li><code>/=</code> : division assignment operator</li><li><code>-=</code> : subtraction assignment operator</li><li><code>%=</code> : modulus assignment operator</li><li><code>^=</code> : exponentiation assignment operator</li></ul><p>The simplest syntax of an assignment operation in <strong>Awk</strong> is as follows:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token assign-left variable">variable_name</span><span class="token operator">=</span>variable_name operator operand</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Examples:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token assign-left variable">counter</span><span class="token operator">=</span><span class="token number">0</span></span>
<span class="line"><span class="token assign-left variable">counter</span><span class="token operator">=</span>counter+1</span>
<span class="line"></span>
<span class="line"><span class="token assign-left variable">num</span><span class="token operator">=</span><span class="token number">20</span></span>
<span class="line"><span class="token assign-left variable">num</span><span class="token operator">=</span>num-1</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can use the assignment operators above to shorten assignment operations in <strong>Awk</strong>, consider the previous examples, we could perform the assignment in the following form:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">variable_name <span class="token assign-left variable">operator</span><span class="token operator">=</span>operand</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token assign-left variable">counter</span><span class="token operator">=</span><span class="token number">0</span></span>
<span class="line"><span class="token assign-left variable">counter</span><span class="token operator">+=</span><span class="token number">1</span></span>
<span class="line"></span>
<span class="line"><span class="token assign-left variable">num</span><span class="token operator">=</span><span class="token number">20</span></span>
<span class="line">num-<span class="token operator">=</span><span class="token number">1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Therefore, we can alter the <strong>Awk</strong> command in the shell script we just wrote above using <code>+=</code> assignment operator as follows:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="script.sh"><span>script.sh</span></div><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token shebang important">#!/bin/bash</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token for-or-select variable">file</span> <span class="token keyword">in</span> <span class="token variable">$@</span><span class="token punctuation">;</span> <span class="token keyword">do</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-f</span> <span class="token variable">$file</span> <span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token keyword">then</span></span>
<span class="line">                <span class="token comment">#print out filename</span></span>
<span class="line">                <span class="token builtin class-name">echo</span> <span class="token string">&quot;File is: <span class="token variable">$file</span>&quot;</span></span>
<span class="line">                <span class="token comment">#print a number incrementally for every line containing tecmint.com </span></span>
<span class="line">                <span class="token function">awk</span>  <span class="token string">&#39;/^tecmint.com/ { counter+=1 ; printf  &quot;%s\\n&quot;,  counter ; }&#39;</span>   <span class="token variable">$file</span></span>
<span class="line">        <span class="token keyword">else</span></span>
<span class="line">                <span class="token comment">#print error info incase input is not a file</span></span>
<span class="line">                <span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">$file</span> is not a file, please specify a file.&quot;</span> <span class="token operator">&gt;</span><span class="token file-descriptor important">&amp;2</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">exit</span> <span class="token number">1</span></span>
<span class="line">        <span class="token keyword">fi</span></span>
<span class="line"><span class="token keyword">done</span></span>
<span class="line"><span class="token comment">#terminate script with exit code 0 in case of successful execution </span></span>
<span class="line"><span class="token builtin class-name">exit</span> <span class="token number">0</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><figure><img src="https://tecmint.com/wp-content/uploads/2016/07/Alter-Shell-Script.png" alt="Alter Shell Script" tabindex="0" loading="lazy"><figcaption>Alter Shell Script</figcaption></figure>`,14)),n("p",null,[s[28]||(s[28]=e("In this segment of the ")),a(o,{to:"/tecmint.com/use-linux-awk-command-to-filter-text-string-in-files.html"},{default:t(()=>s[27]||(s[27]=[n("strong",null,"Awk command series",-1)])),_:1,__:[27]}),s[29]||(s[29]=e(", we covered some powerful ")),s[30]||(s[30]=n("strong",null,"Awk",-1)),s[31]||(s[31]=e(" features, that is variables, building numeric expressions, and using assignment operators, plus a few illustrations of how we can actually use them."))]),s[47]||(s[47]=n("p",null,"These concepts are not any different from the ones in other programming languages but there may be some significant distinctions under Awk programming.",-1)),n("p",null,[s[33]||(s[33]=e("In ")),s[34]||(s[34]=n("strong",null,"part 9",-1)),s[35]||(s[35]=e(", we shall look at more ")),s[36]||(s[36]=n("strong",null,"Awk",-1)),s[37]||(s[37]=e(" features that are ")),a(o,{to:"/tecmint.com/learn-use-awk-special-patterns-begin-and-end.html"},{default:t(()=>s[32]||(s[32]=[n("strong",null,"special patterns: BEGIN and END",-1)])),_:1,__:[32]}),s[38]||(s[38]=e(". Until then, stay connected to ")),s[39]||(s[39]=n("strong",null,"Tecmint",-1)),s[40]||(s[40]=e("."))]),h(" TODO: add ARTICLE CARD "),a(p,d(m({title:"How to Work with Awk Variables, Expressions, and Operators - Part 8",desc:"We'll explore advanced Awk features for complex text filtering, including variables, numeric expressions, and assignment operators.",link:"https://chanhi2000.github.io/bookshelf/tecmint.com/work-with-awk-variables-expressions-and-operators.html",logo:"https://tecmint.com/wp-content/uploads/2020/07/favicon.ico",background:"rgba(5,86,243,0.2)"})),null,16)])}const E=b(w,[["render",S]]),T=JSON.parse('{"path":"/tecmint.com/work-with-awk-variables-expressions-and-operators.html","title":"How to Work with Awk Variables, Expressions, and Operators - Part 8","lang":"en-US","frontmatter":{"lang":"en-US","title":"How to Work with Awk Variables, Expressions, and Operators - Part 8","description":"Article(s) > How to Work with Awk Variables, Expressions, and Operators - Part 8","icon":"iconfont icon-awk","category":["Linux","Shell","awk","Article(s)"],"tag":["blog","tecmint.com","sh","shell","linux","awk"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to Work with Awk Variables, Expressions, and Operators - Part 8\\",\\"image\\":[\\"https://tecmint.com/wp-content/uploads/2016/07/List-File-Content-Using-cat-Command.png\\",\\"https://tecmint.com/wp-content/uploads/2016/07/Store-Variables-Using-Awk-Command.png\\",\\"https://tecmint.com/wp-content/uploads/2016/07/Store-Command-Output-to-Variable-Using-Awk.png\\",\\"https://tecmint.com/wp-content/uploads/2016/07/View-Contents-of-File.png\\",\\"https://tecmint.com/wp-content/uploads/2016/07/Shell-Script-to-Count-a-String-in-File.png\\",\\"https://tecmint.com/wp-content/uploads/2016/07/Script-To-Count-String.png\\",\\"https://tecmint.com/wp-content/uploads/2016/07/Alter-Shell-Script.png\\"],\\"datePublished\\":\\"2024-08-12T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Aaron Kili\\",\\"url\\":\\"https://tecmint.com/author/aaronkili/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/tecmint.com/work-with-awk-variables-expressions-and-operators.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How to Work with Awk Variables, Expressions, and Operators - Part 8"}],["meta",{"property":"og:description","content":"Article(s) > How to Work with Awk Variables, Expressions, and Operators - Part 8"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://tecmint.com/wp-content/uploads/2016/07/Learn-Awk-Variables-Numeric-Expressions-Assignment-Operators.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://tecmint.com/wp-content/uploads/2016/07/Learn-Awk-Variables-Numeric-Expressions-Assignment-Operators.png"}],["meta",{"name":"twitter:image:alt","content":"How to Work with Awk Variables, Expressions, and Operators - Part 8"}],["meta",{"property":"article:author","content":"Aaron Kili"}],["meta",{"property":"article:tag","content":"awk"}],["meta",{"property":"article:tag","content":"linux"}],["meta",{"property":"article:tag","content":"shell"}],["meta",{"property":"article:tag","content":"sh"}],["meta",{"property":"article:tag","content":"tecmint.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2024-08-12T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > How to Work with Awk Variables, Expressions, and Operators - Part 8"},{"property":"og:description","content":"How to Work with Awk Variables, Expressions, and Operators - Part 8"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/tecmint.com/work-with-awk-variables-expressions-and-operators.html"}]],"prev":"/tool/awk/articles/README.md","date":"2024-08-12T00:00:00.000Z","isOriginal":false,"author":[{"name":"Aaron Kili","url":"https://tecmint.com/author/aaronkili/"}],"cover":"https://tecmint.com/wp-content/uploads/2016/07/Learn-Awk-Variables-Numeric-Expressions-Assignment-Operators.png"},"git":{},"readingTime":{"minutes":5.18,"words":1553},"filePathRelative":"tecmint.com/work-with-awk-variables-expressions-and-operators.md","copyright":{"author":"Aaron Kili"}}');export{E as comp,T as data};
