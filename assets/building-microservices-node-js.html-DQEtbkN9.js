import{_ as h}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as f,d as s,f as e,b as i,a as y,t as w,n as m,g as k,w as t,e as a,r,o as j}from"./app-BVguHYKu.js";const x="/bookshelf/assets/image/blog.logrocket.com/building-microservices-node-js/banner.png",T="/bookshelf/assets/image/blog.logrocket.com/building-microservices-node-js/http-communication-request-response-diagram.png",N="/bookshelf/assets/image/blog.logrocket.com/building-microservices-node-js/event-driven-communication-pattern-diagram.png",P="/bookshelf/assets/image/blog.logrocket.com/building-microservices-node-js/generated-id-post-you-created.png",q="/bookshelf/assets/image/blog.logrocket.com/building-microservices-node-js/new-comment-post-list.png",S={},C={id:"frontmatter-title-관련",tabindex:"-1"},D={class:"header-anchor",href:"#frontmatter-title-관련"},B={class:"table-of-contents"},A={class:"hint-container note"},I={href:"https://blog.logrocket.com/author/muhammedali/",target:"_blank",rel:"noopener noreferrer"};function M(v,n){const u=r("VPCard"),o=r("router-link"),b=r("SiteInfo"),p=r("VPIcon"),d=r("RouteLink"),g=r("Tabs");return j(),f("div",null,[s("h1",C,[s("a",D,[s("span",null,w(v.$frontmatter.title)+" 관련",1)])]),e(u,m(k({title:"Node.js > Article(s)",desc:"Article(s)",link:"/programming/js-node/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),e(u,m(k({title:"MongoDb > Article(s)",desc:"Article(s)",link:"/data-science/mongodb/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",B,[s("ul",null,[s("li",null,[e(o,{to:"#microservices-vs-monolithic-applications"},{default:t(()=>n[0]||(n[0]=[a("Microservices vs. monolithic applications")])),_:1,__:[0]}),s("ul",null,[s("li",null,[e(o,{to:"#what-are-monolithic-applications"},{default:t(()=>n[1]||(n[1]=[a("What are monolithic applications?")])),_:1,__:[1]})]),s("li",null,[e(o,{to:"#what-are-microservices"},{default:t(()=>n[2]||(n[2]=[a("What are microservices?")])),_:1,__:[2]})])])]),s("li",null,[e(o,{to:"#communication-between-microservices"},{default:t(()=>n[3]||(n[3]=[a("Communication between microservices")])),_:1,__:[3]}),s("ul",null,[s("li",null,[e(o,{to:"#http-communication"},{default:t(()=>n[4]||(n[4]=[a("HTTP communication")])),_:1,__:[4]})]),s("li",null,[e(o,{to:"#event-driven-communication-pattern"},{default:t(()=>n[5]||(n[5]=[a("Event-driven communication pattern")])),_:1,__:[5]})])])]),s("li",null,[e(o,{to:"#using-node-js-for-our-microservice"},{default:t(()=>n[6]||(n[6]=[a("Using Node.js for our microservice")])),_:1,__:[6]})]),s("li",null,[e(o,{to:"#build-a-simple-microservice-application-with-node-js"},{default:t(()=>n[7]||(n[7]=[a("Build a simple microservice application with Node.js")])),_:1,__:[7]}),s("ul",null,[s("li",null,[e(o,{to:"#setting-up-the-post-microservice"},{default:t(()=>n[8]||(n[8]=[a("Setting up the post microservice")])),_:1,__:[8]})])])]),s("li",null,[e(o,{to:"#conclusion"},{default:t(()=>n[9]||(n[9]=[a("Conclusion")])),_:1,__:[9]})])])]),n[52]||(n[52]=s("hr",null,null,-1)),e(b,{name:"Building microservices with Node.js",desc:"Build efficient Node.js microservices with MongoDB, exploring the architecture, real-time updates, and seamless communication strategies.",url:"https://blog.logrocket.com/building-microservices-node-js",logo:"/assets/image/blog.logrocket.com/favicon.png",preview:"/assets/image/blog.logrocket.com/building-microservices-node-js/banner.png"}),s("div",A,[n[13]||(n[13]=s("p",{class:"hint-container-title"},"Editor’s note",-1)),s("p",null,[n[11]||(n[11]=a("This article was last updated by ")),s("a",I,[e(p,{icon:"fas fa-globe"}),n[10]||(n[10]=a("Muhammed Ali"))]),n[12]||(n[12]=a(" on 22 October 2024 to cover using MongoDB change streams to enable real-time data synchronization between microservices."))])]),n[53]||(n[53]=s("figure",null,[s("img",{src:x,alt:"Building Microservices With Node.js",tabindex:"0",loading:"lazy"}),s("figcaption",null,"Building Microservices With Node.js")],-1)),n[54]||(n[54]=s("p",null,"In early software development, applications were built as monolithic structures, tightly coupling all components into a single system. This approach makes even minor changes challenging, as any fault in one component can disrupt the entire system.",-1)),s("p",null,[n[15]||(n[15]=a("Today, we can avoid these issues by ")),e(d,{to:"/blog.logrocket.com/improve-microservice-architecture-graphql-api-gateways.html"},{default:t(()=>n[14]||(n[14]=[s("strong",null,"using microservices",-1)])),_:1,__:[14]}),n[16]||(n[16]=a(". Microservices allow us to develop each component independently, so faults in one part don’t impact the whole application. In this article, we’ll dive into microservices, demonstrate how to create a microservice with Node.js, and explore how this approach is reshaping software development."))]),n[55]||(n[55]=i('<div class="hint-container note"><p class="hint-container-title">Prerequisites</p><p>To follow along, you’ll need:</p><ul><li>Node.js installed in your machine</li><li>Basic knowledge of JavaScript and Node.js</li></ul></div><hr><h2 id="microservices-vs-monolithic-applications" tabindex="-1"><a class="header-anchor" href="#microservices-vs-monolithic-applications"><span>Microservices vs. monolithic applications</span></a></h2><h3 id="what-are-monolithic-applications" tabindex="-1"><a class="header-anchor" href="#what-are-monolithic-applications"><span>What are monolithic applications?</span></a></h3><p>A monolithic application is a single-tiered software where all components (e.g., <code>books</code> and <code>users</code> in a library management system) are interconnected and dependent on a single codebase. Any fault in one component affects the entire system.</p>',5)),e(g,{data:[{id:"Pros of monolithic architecture"},{id:"Cons of monolithic architecture"}],active:0},{title0:t(({value:l,isActive:c})=>n[17]||(n[17]=[a("Pros of monolithic architecture")])),title1:t(({value:l,isActive:c})=>n[18]||(n[18]=[a("Cons of monolithic architecture")])),tab0:t(({value:l,isActive:c})=>n[19]||(n[19]=[s("ul",null,[s("li",null,[s("strong",null,"Cost-effective to build"),a(": Less expensive initial development because all components share the same environment")]),s("li",null,[s("strong",null,"Simplicity"),a(": Easier to develop, test, and deploy when all components are unified")])],-1)])),tab1:t(({value:l,isActive:c})=>n[20]||(n[20]=[s("ul",null,[s("li",null,[s("strong",null,"Lack of scalability"),a(": Scaling usually means scaling the entire application")]),s("li",null,[s("strong",null,"Flexibility issues"),a(": Any modification requires redeploying the entire system")]),s("li",null,[s("strong",null,"Reliability concerns"),a(": A single point of failure can bring down the entire system")])],-1)])),_:1}),n[56]||(n[56]=i('<h3 id="what-are-microservices" tabindex="-1"><a class="header-anchor" href="#what-are-microservices"><span>What are microservices?</span></a></h3><p>Microservices architecture consists of small, autonomous services where each feature (e.g., <code>payment</code>, <code>cart</code> in an ecommerce store) operates independently with its own server and database. Applications built with this kind of architecture are loosely coupled, also referred to as distributed applications.</p><p>In the ecommerce store example, models for <code>cart</code> and <code>customers</code> would communicate with each other using APIs like REST. Because we’ll develop our store features independently from each other, if our system develops a fault, we can easily identify which feature to debug and avoid having to bring down the entire application.</p>',3)),e(g,{data:[{id:"Pros of microservices"},{id:"Cons of microservices"}],active:0},{title0:t(({value:l,isActive:c})=>n[21]||(n[21]=[a("Pros of microservices")])),title1:t(({value:l,isActive:c})=>n[22]||(n[22]=[a("Cons of microservices")])),tab0:t(({value:l,isActive:c})=>n[23]||(n[23]=[s("ul",null,[s("li",null,[s("strong",null,"Scalability"),a(": Unlike monolithic applications, apps developed using microservices can be scaled independently based on demand")]),s("li",null,[s("strong",null,"Flexibility"),a(": Individual components can be developed, tested, and deployed independently. You can even use different languages to develop different features in a microservice application")])],-1)])),tab1:t(({value:l,isActive:c})=>n[24]||(n[24]=[s("ul",null,[s("li",null,[s("strong",null,"Complexity in management"),a(": Requires expertise in handling distributed systems because integration and end-to-end testing can be challenging")]),s("li",null,[s("strong",null,"Higher operational costs"),a(": Each microservice may become bulky, resulting in high maintenance costs")]),s("li",null,[s("strong",null,"Migration challenges"),a(": Transitioning from monolithic to microservices can be challenging, particularly in locating services within a distributed network")])],-1)])),_:1}),n[57]||(n[57]=s("hr",null,null,-1)),n[58]||(n[58]=s("h2",{id:"communication-between-microservices",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#communication-between-microservices"},[s("span",null,"Communication between microservices")])],-1)),n[59]||(n[59]=s("p",null,"Choosing a microservice architectural pattern comes with some challenges; one of these is service-to-service communication. Services are a loosely coupled part of an application that together contribute to the application’s overall performance.",-1)),s("p",null,[n[26]||(n[26]=a("To achieve effective performance, there has to be a ")),e(d,{to:"/blog.logrocket.com/methods-for-microservice-communication.html"},{default:t(()=>n[25]||(n[25]=[s("strong",null,"means of communication between the microservices",-1)])),_:1,__:[25]}),n[27]||(n[27]=a(". In a microservice application, communication is made possible through an inter-service communication protocol like HTTP(s), gRPC, or message brokers."))]),n[60]||(n[60]=i('<p>Let’s review some of the ways in which services establish communication in a microservice architecture.</p><h3 id="http-communication" tabindex="-1"><a class="header-anchor" href="#http-communication"><span>HTTP communication</span></a></h3><p>HTTP communication is a kind of synchronous communication pattern where a service is dependent on another to perform:</p><figure><img src="'+T+'" alt="HTTP Communication Request Response Diagram" tabindex="0" loading="lazy"><figcaption>HTTP Communication Request Response Diagram</figcaption></figure><p>The image above represents the HTTP request-response cycle, where the client makes a request and waits for a response from the server-side application.</p><h3 id="event-driven-communication-pattern" tabindex="-1"><a class="header-anchor" href="#event-driven-communication-pattern"><span>Event-driven communication pattern</span></a></h3><p>The event-driven communication pattern entails an interaction between a service provider and a service consumer. The service consumer requires a resource from an external source. It then performs some computations and relays the response to the client:</p><figure><img src="'+N+'" alt="Event-Driven Communication Pattern Diagram" tabindex="0" loading="lazy"><figcaption>Event-Driven Communication Pattern Diagram</figcaption></figure><hr><h2 id="using-node-js-for-our-microservice" tabindex="-1"><a class="header-anchor" href="#using-node-js-for-our-microservice"><span>Using Node.js for our microservice</span></a></h2><p>You can use any programming language to develop a microservice, like Java, C#, or Python, but Node.js is a good choice for a few reasons:</p>',11)),s("ul",null,[n[30]||(n[30]=s("li",null,"Node uses an event-driven architecture, enabling efficient, real-time application development",-1)),s("li",null,[e(d,{to:"/blog.logrocket.com/complete-guide-threads-node-js.html"},{default:t(()=>n[28]||(n[28]=[s("strong",null,"Node.js’ single-threading and asynchronous capabilities",-1)])),_:1,__:[28]}),n[29]||(n[29]=a(" support a non-blocking mechanism"))]),n[31]||(n[31]=s("li",null,"Developers benefit from an uninterrupted workflow, enjoying Node’s speed, scalability, and easy maintenance",-1))]),n[61]||(n[61]=i(`<hr><h2 id="build-a-simple-microservice-application-with-node-js" tabindex="-1"><a class="header-anchor" href="#build-a-simple-microservice-application-with-node-js"><span>Build a simple microservice application with Node.js</span></a></h2><p>In this section, we’ll develop two microservices for a simple blog application using Node.js and MongoDB. One service will manage posts, while the other will handle comments.</p><p>We’ll also implement real-time communication between these services using MongoDB change streams, which enable you to listen to real-time data changes in your MongoDB collections. By using <code>db.collection.watch()</code>, you can react to data updates, inserts, or deletes as they occur. In our case, the comment microservice will notify the post microservice whenever a comment is added, and the post will update accordingly.</p><div class="hint-container note"><p class="hint-container-title">Prerequisites</p><ul><li><strong>MongoDB</strong>: Ensure that your MongoDB instance is set up as a replica set, as change streams require this configuration</li><li><strong>Node.js</strong> <strong>and</strong> <strong>npm</strong>: Make sure Node.js and npm are installed on your system</li></ul></div><h3 id="setting-up-the-post-microservice" tabindex="-1"><a class="header-anchor" href="#setting-up-the-post-microservice"><span>Setting up the post microservice</span></a></h3><p>Create a new folder called <code>blog</code> and initialize a Node.js project:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">npm</span> init <span class="token parameter variable">-y</span></span>
<span class="line"><span class="token function">npm</span> <span class="token function">install</span> express mongoose cors</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,8)),s("p",null,[n[32]||(n[32]=a("Then, create ")),e(p,{icon:"fa-brands fa-js"}),n[33]||(n[33]=s("code",null,"postService.js",-1)),n[34]||(n[34]=a(" and ")),e(p,{icon:"fa-brands fa-js"}),n[35]||(n[35]=s("code",null,"commentService.js",-1)),n[36]||(n[36]=a(" files in the ")),e(p,{icon:"fas fa-folder-open"}),n[37]||(n[37]=s("code",null,"blog",-1)),n[38]||(n[38]=a(" folder. In the ")),e(p,{icon:"fa-brands fa-js"}),n[39]||(n[39]=s("code",null,"postService.js",-1)),n[40]||(n[40]=a(" file, paste in the following code, which will handle the post microservice:"))]),n[62]||(n[62]=i(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="blog/postService.js"><span>blog/postService.js</span></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> mongoose <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./db&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> PostSchema <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mongoose<span class="token punctuation">.</span>Schema</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">title</span><span class="token operator">:</span> String<span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">content</span><span class="token operator">:</span> String<span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">comments</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">      <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">text</span><span class="token operator">:</span> String<span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">createdAt</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> Date<span class="token punctuation">,</span> <span class="token keyword">default</span><span class="token operator">:</span> Date<span class="token punctuation">.</span>now <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">createdAt</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> Date<span class="token punctuation">,</span> <span class="token keyword">default</span><span class="token operator">:</span> Date<span class="token punctuation">.</span>now <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> Post <span class="token operator">=</span> mongoose<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token string">&#39;Post&#39;</span><span class="token punctuation">,</span> PostSchema<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// Listen to MongoDB Change Streams for the comments collection</span></span>
<span class="line">mongoose<span class="token punctuation">.</span>connection<span class="token punctuation">.</span><span class="token function">once</span><span class="token punctuation">(</span><span class="token string">&#39;open&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Post service connected to MongoDB&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">const</span> changeStream <span class="token operator">=</span> mongoose<span class="token punctuation">.</span>connection<span class="token punctuation">.</span><span class="token function">collection</span><span class="token punctuation">(</span><span class="token string">&#39;comments&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    changeStream<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;change&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">change</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>change<span class="token punctuation">.</span>operationType <span class="token operator">===</span> <span class="token string">&#39;insert&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> comment <span class="token operator">=</span> change<span class="token punctuation">.</span>fullDocument<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token comment">// Find the associated post and update its comments array</span></span>
<span class="line">          <span class="token keyword">await</span> Post<span class="token punctuation">.</span><span class="token function">findByIdAndUpdate</span><span class="token punctuation">(</span></span>
<span class="line">            comment<span class="token punctuation">.</span>postId<span class="token punctuation">,</span></span>
<span class="line">            <span class="token punctuation">{</span> <span class="token literal-property property">$push</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">comments</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">text</span><span class="token operator">:</span> comment<span class="token punctuation">.</span>text<span class="token punctuation">,</span> <span class="token literal-property property">createdAt</span><span class="token operator">:</span> comment<span class="token punctuation">.</span>createdAt <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token punctuation">{</span> <span class="token keyword">new</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span></span>
<span class="line">          <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Updated post with new comment: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>comment<span class="token punctuation">.</span>text<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;Failed to update post with new comment:&#39;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&#39;/posts&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> post <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Post</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">await</span> post<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">201</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>post<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/posts&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> posts <span class="token operator">=</span> <span class="token keyword">await</span> Post<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>posts<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">PORT</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Post service running on port </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">PORT</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>The code defines a <code>Post</code> model with fields for the title, content, an array of comments, and timestamps. The application connects to MongoDB and establishes a change stream on the <code>comments</code> collection, listening for insert events to update the corresponding post’s comments array in real time.</p>`,2)),s("p",null,[n[41]||(n[41]=a("Now, let’s create a file to handle the database (")),e(p,{icon:"fa-brands fa-js"}),n[42]||(n[42]=s("code",null,"db.js",-1)),n[43]||(n[43]=a(") and paste in the following code:"))]),n[63]||(n[63]=i(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="db.js"><span>db.js</span></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> mongoose <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;mongoose&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;dotenv&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">mongoose<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">MONGO_URI</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">useNewUrlParser</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">useUnifiedTopology</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">mongoose<span class="token punctuation">.</span>connection<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;connected&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Connected to MongoDB&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> mongoose<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,1)),s("p",null,[n[44]||(n[44]=a("Next, create the ")),e(p,{icon:"fas fa-file-lines"}),n[45]||(n[45]=s("code",null,".env",-1)),n[46]||(n[46]=a(" file, which will contain the database URI and port:"))]),n[64]||(n[64]=i(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title=".env"><span>.env</span></div><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token assign-left variable">MONGO_URI</span><span class="token operator">=</span>mongodb://localhost:27017,localhost:27018,localhost:27019/test?replicaSet<span class="token operator">=</span>rs0</span>
<span class="line"><span class="token assign-left variable">PORT</span><span class="token operator">=</span><span class="token number">4000</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></div>`,1)),s("p",null,[n[47]||(n[47]=a("Next, paste the following code in the file for ")),n[48]||(n[48]=s("code",null,"CommentService",-1)),n[49]||(n[49]=a(" (")),e(p,{icon:"fa-brands fa-js"}),n[50]||(n[50]=s("code",null,"commentService.js",-1)),n[51]||(n[51]=a("):"))]),n[65]||(n[65]=i(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="commentService.js"><span>commentService.js</span></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> mongoose <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./db&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> CommentSchema <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mongoose<span class="token punctuation">.</span>Schema</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">postId</span><span class="token operator">:</span> mongoose<span class="token punctuation">.</span>Schema<span class="token punctuation">.</span>Types<span class="token punctuation">.</span>ObjectId<span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">text</span><span class="token operator">:</span> String<span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">createdAt</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> Date<span class="token punctuation">,</span> <span class="token keyword">default</span><span class="token operator">:</span> Date<span class="token punctuation">.</span>now <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> Comment <span class="token operator">=</span> mongoose<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token string">&#39;Comment&#39;</span><span class="token punctuation">,</span> CommentSchema<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&#39;/comments&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> comment <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Comment</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">await</span> comment<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">201</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>comment<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/comments/:postId&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> comments <span class="token operator">=</span> <span class="token keyword">await</span> Comment<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">postId</span><span class="token operator">:</span> req<span class="token punctuation">.</span>params<span class="token punctuation">.</span>postId <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>comments<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">4001</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Comment service running on port 4001&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>The code above defines a <code>CommentSchema</code> that includes fields for <code>postId</code>, <code>text</code>, and <code>createdAt</code>, with <code>postId</code> being a reference to the ID of the related post. A Mongoose model named <code>Comment</code> is created based on this schema.</p><p>The Express app is configured to parse JSON requests and includes two routes: a <code>POST</code> route at <code>/comments</code> that saves a new comment to the database and responds with the created comment and a <code>GET</code> route at <code>/comments/:postId</code> that retrieves and returns all comments associated with a specified <code>postId</code>.</p><p>Now you can run each microservice in separate terminal/command line windows:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">node</span> commentService.js</span>
<span class="line"><span class="token function">node</span> postService.js</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>On another terminal, run the following command to create a new post:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">curl</span> <span class="token parameter variable">-X</span> POST http://localhost:4000/posts <span class="token punctuation">\\</span></span>
<span class="line"><span class="token parameter variable">-H</span> <span class="token string">&quot;Content-Type: application/json&quot;</span> <span class="token punctuation">\\</span></span>
<span class="line"><span class="token parameter variable">-d</span> <span class="token string">&#39;{</span>
<span class="line">  &quot;title&quot;: &quot;My First Post&quot;,</span>
<span class="line">  &quot;content&quot;: &quot;This is the content of my first post.&quot;</span>
<span class="line">}&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now run the following command to check the list of posts and get the ID of the post you just created:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">curl</span> http://localhost:4000/posts</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="`+P+`" alt="The Generated ID Of The Post You Created" tabindex="0" loading="lazy"><figcaption>The Generated ID Of The Post You Created</figcaption></figure><p>Now we can create a comment by attaching the associated post using its ID:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">curl</span> <span class="token parameter variable">-X</span> POST http://localhost:4001/comments <span class="token punctuation">\\</span></span>
<span class="line"><span class="token parameter variable">-H</span> <span class="token string">&quot;Content-Type: application/json&quot;</span> <span class="token punctuation">\\</span></span>
<span class="line"><span class="token parameter variable">-d</span> <span class="token string">&#39;{</span>
<span class="line">  &quot;postId&quot;: &quot;672a2b5ab2c87aa17bd7b49b&quot;,</span>
<span class="line">  &quot;text&quot;: &quot;This is a comment on the post.&quot;</span>
<span class="line">}&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now, when you check the post lists again, you should see the comment you just added:</p><figure><img src="`+q+'" alt="The New Comment You Added In The Post Lists" tabindex="0" loading="lazy"><figcaption>The New Comment You Added In The Post Lists</figcaption></figure><hr><h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="#conclusion"><span>Conclusion</span></a></h2><p>In this guide, we explored the advantages of microservices over monolithic applications, especially for flexibility, scalability, and independent service management. We demonstrated how to build a simple microservice with Node.js, connecting two independent services — a <code>posts</code> service and a <code>comments</code> service — using MongoDB change streams for real-time updates.</p><p>Using Node.js’ event-driven architecture and MongoDB’s real-time capabilities, microservices can offer efficient, scalable solutions adaptable to complex applications.</p><p>We’d love to hear your experiences and insights on microservices in the comments below!</p>',19)),y(" TODO: add ARTICLE CARD "),e(u,m(k({title:"Building microservices with Node.js",desc:"Build efficient Node.js microservices with MongoDB, exploring the architecture, real-time updates, and seamless communication strategies.",link:"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/building-microservices-node-js.html",logo:"/assets/image/blog.logrocket.com/favicon.png",background:"rgba(112,76,182,0.2)"})),null,16)])}const E=h(S,[["render",M]]),U=JSON.parse('{"path":"/blog.logrocket.com/building-microservices-node-js.html","title":"Building microservices with Node.js","lang":"en-US","frontmatter":{"lang":"en-US","title":"Building microservices with Node.js","description":"Article(s) > Building microservices with Node.js","icon":"fa-brands fa-node","category":["Node.js","MongoDB","Article(s)"],"tag":["blog","blog.logrocket.com","node","nodejs","node-js","mongodb"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Building microservices with Node.js\\",\\"image\\":[\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/building-microservices-node-js/banner.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/building-microservices-node-js/http-communication-request-response-diagram.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/building-microservices-node-js/event-driven-communication-pattern-diagram.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/building-microservices-node-js/generated-id-post-you-created.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/building-microservices-node-js/new-comment-post-list.png\\"],\\"datePublished\\":\\"2024-10-22T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Frank Joseph\\",\\"url\\":\\"https://blog.logrocket.com/author/frankjoseph/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/building-microservices-node-js.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Building microservices with Node.js"}],["meta",{"property":"og:description","content":"Article(s) > Building microservices with Node.js"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/building-microservices-node-js/banner.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/building-microservices-node-js/banner.png"}],["meta",{"name":"twitter:image:alt","content":"Building microservices with Node.js"}],["meta",{"property":"article:author","content":"Frank Joseph"}],["meta",{"property":"article:tag","content":"mongodb"}],["meta",{"property":"article:tag","content":"node-js"}],["meta",{"property":"article:tag","content":"nodejs"}],["meta",{"property":"article:tag","content":"node"}],["meta",{"property":"article:tag","content":"blog.logrocket.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2024-10-22T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Building microservices with Node.js"},{"property":"og:description","content":"Building microservices with Node.js"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/building-microservices-node-js.html"}]],"prev":"/programming/js-node/articles/README.md","date":"2024-10-22T00:00:00.000Z","isOriginal":false,"author":[{"name":"Frank Joseph","url":"https://blog.logrocket.com/author/frankjoseph/"}],"cover":"/assets/image/blog.logrocket.com/building-microservices-node-js/banner.png"},"git":{},"readingTime":{"minutes":6.27,"words":1882},"filePathRelative":"blog.logrocket.com/building-microservices-node-js.md","copyright":{"author":"Frank Joseph"}}');export{E as comp,U as data};
