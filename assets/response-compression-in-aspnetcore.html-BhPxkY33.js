import{_ as m}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as g,d as s,f as a,b as r,t as v,n as k,g as h,w as o,e,r as p,o as b}from"./app-BVguHYKu.js";const f={},y={id:"frontmatter-title-á„€á…ªá†«á„…á…§á†«",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-á„€á…ªá†«á„…á…§á†«"},C={class:"table-of-contents"},R={href:"https://en.wikipedia.org/wiki/CRIME",target:"_blank",rel:"noopener noreferrer"},S={href:"https://en.wikipedia.org/wiki/BREACH",target:"_blank",rel:"noopener noreferrer"},A={href:"https://learn.microsoft.com/en-us/aspnet/core/performance/response-compression?view=aspnetcore-7.0",target:"_blank",rel:"noopener noreferrer"};function P(l,n){const c=p("VPCard"),t=p("router-link"),u=p("SiteInfo"),i=p("VPIcon"),d=p("RouteLink");return b(),g("div",null,[s("h1",y,[s("a",w,[s("span",null,v(l.$frontmatter.title)+" ê´€ë ¨",1)])]),a(c,k(h({title:"C# > Article(s)",desc:"Article(s)",link:"/programming/cs/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",C,[s("ul",null,[s("li",null,[a(t,{to:"#configuring-response-compression"},{default:o(()=>n[0]||(n[0]=[e("Configuring Response Compression")])),_:1,__:[0]})]),s("li",null,[a(t,{to:"#when-should-you-use-response-compression"},{default:o(()=>n[1]||(n[1]=[e("When Should You Use Response Compression?")])),_:1,__:[1]})]),s("li",null,[a(t,{to:"#configuring-compression-providers"},{default:o(()=>n[2]||(n[2]=[e("Configuring Compression Providers")])),_:1,__:[2]})]),s("li",null,[a(t,{to:"#how-much-can-you-save"},{default:o(()=>n[3]||(n[3]=[e("How Much Can You Save?")])),_:1,__:[3]})]),s("li",null,[a(t,{to:"#in-summary"},{default:o(()=>n[4]||(n[4]=[e("In Summary")])),_:1,__:[4]})])])]),n[20]||(n[20]=s("hr",null,null,-1)),a(u,{name:"Response Compression In ASP.NET Core",desc:"Reducing the size of your API responses can noticeably improve the performance of your application. And since network bandwidth is a limited resource, you should at least consider the benefits of response compression.",url:"https://milanjovanovic.tech/blog/response-compression-in-aspnetcore/",logo:"https://milanjovanovic.tech/profile_favicon.png",preview:"https://milanjovanovic.tech/blog-covers/mnw_044.png"}),n[21]||(n[21]=r(`<p>Reducing the size of your API responses can noticeably improve the performance of your application.</p><p>And since network bandwidth is a limited resource, you should at least consider the benefits of <strong>response compression</strong>.</p><p>Here&#39;s what you&#39;ll learn in this week&#39;s newsletter:</p><ul><li>How to configure <strong>response compression</strong> in .NET</li><li>Server-based vs. application-based compression</li><li>Possible <strong>security risks</strong> and <strong>mitigation strategies</strong></li><li>How to configure the available compression providers</li><li>How much network bandwidth you could be saving</li></ul><p>Let&#39;s get started!</p><hr><h2 id="configuring-response-compression" tabindex="-1"><a class="header-anchor" href="#configuring-response-compression"><span>Configuring Response Compression</span></a></h2><p>Using <strong>response compression</strong> in an .NET applications is remarkably easy.</p><p>You only have to call these two methods:</p><ul><li><code>AddResponseCompression</code> - to configure the default services for response compression</li><li><code>UseResponseCompression</code> - to add the response compression middleware to the request pipeline</li></ul><p>The <code>UseResponseCompression</code> method should be called before any middleware that compresses responses.</p><p><strong>Response compression</strong> isn&#39;t turned on by default for HTTPS, so you have to enable it by setting <code>EnableForHttps</code> to <code>true</code>.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token class-name"><span class="token keyword">var</span></span> builder <span class="token operator">=</span> WebApplication<span class="token punctuation">.</span><span class="token function">CreateBuilder</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddResponseCompression</span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    options<span class="token punctuation">.</span>EnableForHttps <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> app <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">UseResponseCompression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">MapGet</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&quot;This response will be compressed ðŸ“¦&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>It really is that simple.</p><p>But...</p><hr><h2 id="when-should-you-use-response-compression" tabindex="-1"><a class="header-anchor" href="#when-should-you-use-response-compression"><span>When Should You Use Response Compression?</span></a></h2><p>Ideally, you want to be using <strong>server-based response compression</strong> if your application server supports it.</p><p>Because the middleware performs <strong>response compression</strong> at the <strong>application level</strong>, it will typically have worse performance.</p><p>If you are hosting your application and you can&#39;t use server-based compression, then using the response compression middleware is justified.</p>`,20)),s("p",null,[n[7]||(n[7]=e("One more concern should be ")),n[8]||(n[8]=s("strong",null,"security",-1)),n[9]||(n[9]=e(", because using ")),n[10]||(n[10]=s("strong",null,"response compression over HTTPS",-1)),n[11]||(n[11]=e(" can expose you to ")),s("a",R,[a(i,{icon:"fa-brands fa-wikipedia-w"}),n[5]||(n[5]=e("CRIME"))]),n[12]||(n[12]=e(" and ")),s("a",S,[a(i,{icon:"fa-brands fa-wikipedia-w"}),n[6]||(n[6]=e("BREACH"))]),n[13]||(n[13]=e(" attacks"))]),n[22]||(n[22]=s("p",null,"Here's what you can do to improve security:",-1)),s("ul",null,[n[16]||(n[16]=s("li",null,[e("You can mitigate CRIME and BREACH attacks by introducing "),s("strong",null,"anti-forgery tokens"),e(" in ASP.NET Core")],-1)),n[17]||(n[17]=s("li",null,"Don't send application secrets as part of the request body",-1)),s("li",null,[n[15]||(n[15]=e("Implement a ")),a(d,{to:"/milanjovanovic.tech/how-to-use-rate-limiting-in-aspnet-core.html"},{default:o(()=>n[14]||(n[14]=[s("strong",null,"rate limiter",-1)])),_:1,__:[14]})])]),n[23]||(n[23]=r(`<hr><h2 id="configuring-compression-providers" tabindex="-1"><a class="header-anchor" href="#configuring-compression-providers"><span>Configuring Compression Providers</span></a></h2><p>There are two compression providers added by default when you call <code>AddResponseCompression</code>:</p><ul><li><code>BrotliCompressionProvider</code></li><li><code>GzipCompressionProvider</code></li></ul><p>You can further customize the available providers by adding custom compression providers if you want to.</p><p>Compression will default to <strong>Brotli</strong> compression when it&#39;s supported by the client. Otherwise, it will default to <strong>Gzip</strong> if that is the supported compression format.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddResponseCompression</span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    options<span class="token punctuation">.</span>EnableForHttps <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">    options<span class="token punctuation">.</span>Providers<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Add</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>BrotliCompressionProvider<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    options<span class="token punctuation">.</span>Providers<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Add</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>GzipCompressionProvider<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    options<span class="token punctuation">.</span>MimeTypes <span class="token operator">=</span> ResponseCompressionDefaults<span class="token punctuation">.</span>MimeTypes<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The interesting thing is you can configure the <code>CompressionLevel</code> for the <strong>Brotli</strong> and <strong>Gzip</strong> compression providers.</p><p>There are four possible values:</p><ul><li><code>Optimal</code> - tries to balance response size and compression speed</li><li><code>Fastest</code> - sacrifices optimal compression for improved speed</li><li><code>NoCompression</code> - self explanatory</li><li><code>SmallestSize</code> - sacrifices compression speed to make the output as small as possible</li></ul><p>The default value is <code>CompressionLevel.Fastest</code>.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Configure</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>BrotliCompressionProviderOptions<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    options<span class="token punctuation">.</span>Level <span class="token operator">=</span> CompressionLevel<span class="token punctuation">.</span>Optimal<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Configure</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>GzipCompressionProviderOptions<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    options<span class="token punctuation">.</span>Level <span class="token operator">=</span> CompressionLevel<span class="token punctuation">.</span>SmallestSize<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="how-much-can-you-save" tabindex="-1"><a class="header-anchor" href="#how-much-can-you-save"><span>How Much Can You Save?</span></a></h2><p>Let&#39;s find out how much network bandwidth we can save by using <strong>response compression</strong>.</p><p>Here&#39;s a minimal API endpoint returning a list of <code>Message</code> objects:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">app<span class="token punctuation">.</span><span class="token function">MapGet</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Results<span class="token punctuation">.</span><span class="token function">Ok</span><span class="token punctuation">(</span></span>
<span class="line">    Enumerable</span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">Range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>num <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Message</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            Id <span class="token operator">=</span> num<span class="token punctuation">,</span></span>
<span class="line">            Content <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">$&quot;This is the message #</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">num</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And here are the results with different providers and compression levels:</p><ul><li>No compression - 4.5kB</li><li><strong>Gzip</strong> + <code>CompressionLevel.Fastest</code> - 569B</li><li><strong>Gzip</strong> + <code>CompressionLevel.SmallestSize</code> - 539B</li><li><strong>Gzip</strong> + <code>CompressionLevel.Optimal</code> - 554B</li><li><strong>Brotli</strong> + <code>CompressionLevel.Fastest</code> - 400B</li><li><strong>Brotli</strong> + <code>CompressionLevel.SmallestSize</code> - 296B</li><li><strong>Brotli</strong> + <code>CompressionLevel.Optimal</code> - 319B</li></ul><p><strong>Brotli</strong> is the clear winner, which is why it&#39;s the <strong>default compression provider</strong>.</p><p>In the best case scenario, you can reduce the response size by ~93.5%. Multiply this by the number of requests you&#39;re serving daily, and then you can begin to estimate the possible network savings.</p><p>One more thing I noticed is that using <code>CompressionLevel.SmallestSize</code> has a noticeable <strong>negative impact</strong> on response time. I can&#39;t say this was surprising, so I suggest to simply keep using the default compression level.</p><hr><h2 id="in-summary" tabindex="-1"><a class="header-anchor" href="#in-summary"><span>In Summary</span></a></h2>`,24)),s("p",null,[s("a",A,[a(i,{icon:"fa-brands fa-microsoft"}),n[18]||(n[18]=e("Response compression"))]),n[19]||(n[19]=e(" is an interesting technique to improve API performance and reduce network costs."))]),n[24]||(n[24]=r('<p>Ideally, you&#39;d want to be using <strong>server-based response compression</strong> if it&#39;s supported by your application server. If that&#39;s not the case, <strong>application-based compression</strong> is available in .NET with the response compression middleware.</p><p>What&#39;s the cost of response compression?</p><p>It will increase the CPU load, and can expose some security risks over HTTPS, but there are ways to mitigate this.</p><p>In my experience, the <strong>default configuration values</strong> for the compression provider and compression level give excellent results.</p><p>That&#39;s all for this week.</p><p>See you next Saturday.</p><div class="hint-container info"><p class="hint-container-title">Today&#39;s action step</p><p>To see the value of response compression, I suggest enabling it in your application and examining the changes in response size. You can try the different compression providers by varying the <code>Accept-Encoding</code> header, and also configure different compression levels in your application.</p></div>',7))])}const E=m(f,[["render",P]]),B=JSON.parse('{"path":"/milanjovanovic.tech/response-compression-in-aspnetcore.html","title":"Response Compression In ASP.NET Core","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Response Compression In ASP.NET Core","description":"Article(s) > Response Compression In ASP.NET Core","icon":"iconfont icon-csharp","category":["C#","DotNet","Article(s)"],"tag":["blog","milanjovanovic.tech","cs","c#","csharp","dotnet"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Response Compression In ASP.NET Core\\",\\"image\\":[\\"https://milanjovanovic.tech/blog-covers/mnw_044.png\\"],\\"datePublished\\":\\"2023-07-01T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Milan JovanoviÄ‡\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/response-compression-in-aspnetcore.html"}],["meta",{"property":"og:site_name","content":"ðŸ“šBookshelf"}],["meta",{"property":"og:title","content":"Response Compression In ASP.NET Core"}],["meta",{"property":"og:description","content":"Article(s) > Response Compression In ASP.NET Core"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://milanjovanovic.tech/blog-covers/mnw_044.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://milanjovanovic.tech/blog-covers/mnw_044.png"}],["meta",{"name":"twitter:image:alt","content":"Response Compression In ASP.NET Core"}],["meta",{"property":"article:author","content":"Milan JovanoviÄ‡"}],["meta",{"property":"article:tag","content":"dotnet"}],["meta",{"property":"article:tag","content":"csharp"}],["meta",{"property":"article:tag","content":"c#"}],["meta",{"property":"article:tag","content":"cs"}],["meta",{"property":"article:tag","content":"milanjovanovic.tech"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2023-07-01T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Response Compression In ASP.NET Core"},{"property":"og:description","content":"Response Compression In ASP.NET Core"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/response-compression-in-aspnetcore.html"}]],"prev":"/programming/cs/articles/README.md","date":"2023-07-01T00:00:00.000Z","isOriginal":false,"author":"Milan JovanoviÄ‡","cover":"https://milanjovanovic.tech/blog-covers/mnw_044.png"},"git":{},"readingTime":{"minutes":3.25,"words":974},"filePathRelative":"milanjovanovic.tech/response-compression-in-aspnetcore.md","copyright":{"author":"Milan JovanoviÄ‡"}}');export{E as comp,B as data};
