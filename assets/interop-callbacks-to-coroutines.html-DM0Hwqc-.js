import{_ as k}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as m,d as n,f as a,b as h,a as u,t as b,n as e,g as o,w as p,e as l,r as i,o as v}from"./app-BVguHYKu.js";const f={},g={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},y={class:"table-of-contents"},C={class:"hint-container info"};function F(r,s){const t=i("VPCard"),c=i("router-link"),d=i("SiteInfo");return v(),m("div",null,[n("h1",g,[n("a",w,[n("span",null,b(r.$frontmatter.title)+" 관련",1)])]),a(t,e(o({title:"Kotlin > Article(s)",desc:"Article(s)",link:"/programming/java/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),n("nav",y,[n("ul",null,[n("li",null,[a(c,{to:"#callback-functions-that-return-a-single-value"},{default:p(()=>s[0]||(s[0]=[l("Callback functions that return a single value")])),_:1,__:[0]})]),n("li",null,[a(c,{to:"#turning-callback-functions-into-flow"},{default:p(()=>s[1]||(s[1]=[l("Turning callback functions into Flow")])),_:1,__:[1]})]),n("li",null,[a(c,{to:"#conclusion"},{default:p(()=>s[2]||(s[2]=[l("Conclusion")])),_:1,__:[2]})])])]),s[6]||(s[6]=n("hr",null,null,-1)),a(d,{name:"How to turn callback functions into suspend functions or Flow",desc:"A guide on how to correctly convert callback-based functions into suspending functions or Flows in Kotlin Coroutines.",url:"https://kt.academy/article/interop-callbacks-to-coroutines",logo:"https://kt.academy/logo.png",preview:"https://marcinmoskala.com/kt-academy-articles/promotion/interop_callbacks_to_coroutines.png"}),s[7]||(s[7]=n("p",null,[l("When we use Kotlin Coroutines, it is generally best to choose libraries that support them natively. Nowadays, most libraries do, but there are still some that don't. Many libraries instead provide callback-based APIs, so an API with functions that start some process and then call a callback when the result is available. In this article, we will discuss how to turn such callback functions into suspending functions or "),n("code",null,"Flow"),l(", so that they can be used in Kotlin Coroutines.")],-1)),s[8]||(s[8]=n("p",null,"This article is a part of a series about interoperability between Kotlin Coroutines and other libraries.",-1)),n("div",C,[s[3]||(s[3]=n("p",{class:"hint-container-title"},"This series includes:",-1)),a(t,e(o({title:"Calling blocking functions from suspending functions",desc:"A guide on how to correctly convert blocking functions into suspending functions in Kotlin Coroutines.",link:"/kt.academy/interop-blocking-to-coroutines.md",logo:"https://kt.academy/logo.png",background:"rgba(243,139,49,0.2)"})),null,16),a(t,e(o({title:"How to turn callback functions into suspend functions or Flow",desc:"A guide on how to correctly convert callback-based functions into suspending functions or Flows in Kotlin Coroutines.",link:"/kt.academy/interop-callbacks-to-coroutines.md",logo:"https://kt.academy/logo.png",background:"rgba(243,139,49,0.2)"})),null,16),s[4]||(s[4]=n("ul",null,[n("li",null,[n("a",{href:"https://kt.academy/article/interop-coroutines-to-blocking",target:"_blank",rel:"noopener noreferrer"},"Turning suspending functions into blocking functions or CompletableFuture")])],-1)),a(t,e(o({title:"Suspending functions or flows into callbacks",desc:"A guide on how to correctly convert suspending functions or flows into callback-based functions in Kotlin Coroutines.",link:"/kt.academy/interop-coroutines-to-callback.md",logo:"https://kt.academy/logo.png",background:"rgba(243,139,49,0.2)"})),null,16),s[5]||(s[5]=n("ul",null,[n("li",null,[n("a",{href:"https://kt.academy/article/interop-flows-to-streams",target:"_blank",rel:"noopener noreferrer"},"Kotlin Flow to RxJava or Reactor and vice versa")]),n("li",null,[n("a",{href:"https://kt.academy/article/interop-coroutines-to-streams",target:"_blank",rel:"noopener noreferrer"},"Using Kotlin Coroutines with Java Streams")]),n("li",null,[n("a",{href:"https://kt.academy/article/interop-suspending-functions-flow",target:"_blank",rel:"noopener noreferrer"},"Flow from suspending functions and vice versa")])],-1)),u(" TODO: VPCard ")]),s[9]||(s[9]=h(`<hr><h2 id="callback-functions-that-return-a-single-value" tabindex="-1"><a class="header-anchor" href="#callback-functions-that-return-a-single-value"><span>Callback functions that return a single value</span></a></h2><p>When we have a callback function that returns a single value, the most basic way to adapt it to Kotlin Coroutines-friendly API is to define a suspending function. Suspending functions that return value suggest that they will suspend the coroutine that calls them until the value is available.</p><p>To implement such functions, we use <code>suspendCancellableCoroutine</code> function (do not use <code>suspendCoroutine</code>, as it does not support cancellation or testing). <code>suspendCancellableCoroutine</code> suspends the current coroutine, and provides a continuation object that can be used to resume the coroutine later. It is used by most libraries that support suspending API, like Ktor Client or Retrofit. Typically, those libraries start a process of getting a value, and store the continuation object in some collection. They have some observer that listens for results from started requests, and when any result is available, it resumes appropriate continuation with the value.</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token comment">// Simplified implementation of a suspending function that fetches a user</span></span>
<span class="line"><span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">fetchUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">val</span> port <span class="token operator">=</span> <span class="token function">startProcessOfFetchingUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    suspendCancellableCoroutine <span class="token punctuation">{</span> cont <span class="token operator">-&gt;</span></span>
<span class="line">        waitingCalls<span class="token punctuation">[</span>port<span class="token punctuation">]</span> <span class="token operator">=</span> cont</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">​</span>
<span class="line"><span class="token comment">// Map to store waiting continuations</span></span>
<span class="line"><span class="token keyword">val</span> waitingCalls <span class="token operator">=</span> mutableMapOf<span class="token operator">&lt;</span>Int<span class="token punctuation">,</span> Continuation<span class="token operator">&lt;</span><span class="token operator">*</span><span class="token operator">&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">​</span>
<span class="line"><span class="token comment">// Example listener for all requests on a network card</span></span>
<span class="line"><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">val</span> <span class="token punctuation">(</span>port<span class="token punctuation">,</span> result<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">checkResponsesOnNetworkCard</span><span class="token punctuation">(</span><span class="token punctuation">)</span> </span>
<span class="line">    waitingCalls<span class="token punctuation">[</span>port<span class="token punctuation">]</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span> cont <span class="token operator">-&gt;</span></span>
<span class="line">        waitingCalls<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>isSuccess<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// Resume with the value if successful</span></span>
<span class="line">            cont<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">toValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> </span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// Resume with exception if failed</span></span>
<span class="line">            cont<span class="token punctuation">.</span><span class="token function">resumeWithException</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">toException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When we need to adapt a callback function that returns a single value, we use the similar pattern. We start the process of getting a value, and then we suspend the coroutine until the value is available. When the value is available, we resume the continuation with it. The problem is what about exceptions? One popular approach is to throw them from suspension point, in such case we should use <code>resumeWithException</code>. The other option is to use <code>Result</code> type, which is a type that can hold either a value or an exception. In such case we should use <code>resume</code> with <code>Result</code> value.</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token comment">// Returning a value in case of success, and throwin an exception in case of failure</span></span>
<span class="line"><span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">requestNews</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> News <span class="token operator">=</span> suspendCancellableCoroutine<span class="token operator">&lt;</span>News<span class="token operator">&gt;</span> <span class="token punctuation">{</span> cont <span class="token operator">-&gt;</span></span>
<span class="line">    <span class="token function">requestNews</span><span class="token punctuation">(</span></span>
<span class="line">        onSuccess <span class="token operator">=</span> <span class="token punctuation">{</span> news <span class="token operator">-&gt;</span> cont<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span>news<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        onError <span class="token operator">=</span> <span class="token punctuation">{</span> e <span class="token operator">-&gt;</span> cont<span class="token punctuation">.</span><span class="token function">resumeWithException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">​</span>
<span class="line"><span class="token comment">// Returning a Result type that can hold either a value or an exception</span></span>
<span class="line"><span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">requestNews</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Result<span class="token operator">&lt;</span>News<span class="token operator">&gt;</span> <span class="token operator">=</span>suspendCancellableCoroutine <span class="token punctuation">{</span> cont <span class="token operator">-&gt;</span></span>
<span class="line">    <span class="token function">requestNews</span><span class="token punctuation">(</span></span>
<span class="line">        onSuccess <span class="token operator">=</span> <span class="token punctuation">{</span> news <span class="token operator">-&gt;</span> cont<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span>Result<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>news<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        onError <span class="token operator">=</span> <span class="token punctuation">{</span> e <span class="token operator">-&gt;</span> cont<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span>Result<span class="token punctuation">.</span><span class="token function">failure</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If we wanted to turn such a function into a <code>Flow</code> that emits a single value, we can use this simple pattern:</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">fun</span> <span class="token function">requestNewsFlow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Flow<span class="token operator">&lt;</span>News<span class="token operator">&gt;</span> <span class="token operator">=</span> flow <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">val</span> news <span class="token operator">=</span> <span class="token function">requestNews</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// suspending function that returns a single value</span></span>
<span class="line">    <span class="token function">emit</span><span class="token punctuation">(</span>news<span class="token punctuation">)</span> <span class="token comment">// emit the value</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="turning-callback-functions-into-flow" tabindex="-1"><a class="header-anchor" href="#turning-callback-functions-into-flow"><span>Turning callback functions into Flow</span></a></h2><p>When we have a callback that calls its callback multiple times, we should use <code>Flow</code> to adapt it to Kotlin Coroutines. <code>Flow</code> is a type that represents a stream of values that can be collected asynchronously. It is a good fit for callback functions that call their callback multiple times, as it allows us to collect all the values in a suspending way.</p><p>The simplest idiomatic way to turn a callback function into a <code>Flow</code> is to use the <code>callbackFlow</code> builder. It allows us to create a flow that emits values from a callback function. Here is an example of how to use it:</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">fun</span> <span class="token function">flowFrom</span><span class="token punctuation">(</span>api<span class="token operator">:</span> CallbackBasedApi<span class="token punctuation">)</span><span class="token operator">:</span> Flow<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">=</span> callbackFlow <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">val</span> callback <span class="token operator">=</span> <span class="token keyword">object</span> <span class="token operator">:</span> Callback <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onNextValue</span><span class="token punctuation">(</span>value<span class="token operator">:</span> T<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">trySendBlocking</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onApiError</span><span class="token punctuation">(</span>cause<span class="token operator">:</span> Throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token function">CancellationException</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;API Error&quot;</span></span><span class="token punctuation">,</span> cause<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    api<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span></span>
<span class="line">    awaitClose <span class="token punctuation">{</span> api<span class="token punctuation">.</span><span class="token function">unregister</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Basically <code>callbackFlow</code> creates a flow that starts a callback function. Receiver of this flow received values from a channel, and inside <code>callbackFlow</code> we send to this channel. We use:</p><ul><li><code>trySendBlocking</code> to send values to the channel.</li><li><code>cancel</code> to cancel the flow when an error occurs, such error flows down to the collector.</li><li><code>close</code> to close the channel when the callback function is completed, so the flow completes as well.</li></ul><p><code>awaitClose</code> must be used at the end to prevent this <code>callbackFlow</code> from completing immediately. It also allows us to unregister the callback when the flow is no longer collected.</p><p>Beware, that the channel used by <code>callbackFlow</code> is not unlimited. It has a buffer size of 64, so if the collector is slow and there are already 64 values in the channel, the <code>trySendBlocking</code> will block until this collector consumes a value. You should consider how this will affect your callback API. You can increase the buffer size by adding <code>buffer</code> operator to the flow.</p><p>Another thing to consider is that <code>trySendBlocking</code> will result with a failure if the channel is cancelled or failed. If you want to handle such cases, you can use <code>onFailure</code> to log or handle the failure. Considering those two optional changes, the final code might look like this:</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">fun</span> <span class="token function">flowFrom</span><span class="token punctuation">(</span>api<span class="token operator">:</span> CallbackBasedApi<span class="token punctuation">)</span><span class="token operator">:</span> Flow<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">=</span> callbackFlow <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">val</span> callback <span class="token operator">=</span> <span class="token keyword">object</span> <span class="token operator">:</span> Callback <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onNextValue</span><span class="token punctuation">(</span>value<span class="token operator">:</span> T<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">trySendBlocking</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">onFailure</span> <span class="token punctuation">{</span> throwable <span class="token operator">-&gt;</span></span>
<span class="line">                <span class="token comment">// Downstream has been cancelled or failed, can log here</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onApiError</span><span class="token punctuation">(</span>cause<span class="token operator">:</span> Throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token function">CancellationException</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;API Error&quot;</span></span><span class="token punctuation">,</span> cause<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    api<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span></span>
<span class="line">    awaitClose <span class="token punctuation">{</span> api<span class="token punctuation">.</span><span class="token function">unregister</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">buffer</span><span class="token punctuation">(</span>Channel<span class="token punctuation">.</span>UNLIMITED<span class="token punctuation">)</span> <span class="token comment">// Unlimited buffer size so that trySendBlocking never blocks</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="#conclusion"><span>Conclusion</span></a></h2><p>In this article, we discussed how to turn callback functions into suspending functions and <code>Flow</code>. We started with the simplest case of a callback function that returns a single value, and then we moved to the more complex case of a callback function that calls its callback multiple times. Hopefully, this article will help you to adapt your callback-based APIs to Kotlin Coroutines and make your code more idiomatic and easier to read.</p>`,23)),u(" TODO: add ARTICLE CARD "),a(t,e(o({title:"How to turn callback functions into suspend functions or Flow",desc:"A guide on how to correctly convert callback-based functions into suspending functions or Flows in Kotlin Coroutines.",link:"https://chanhi2000.github.io/bookshelf/kt.academy/interop-callbacks-to-coroutines.html",logo:"https://kt.academy/logo.png",background:"rgba(243,139,49,0.2)"})),null,16)])}const A=k(f,[["render",F]]),T=JSON.parse('{"path":"/kt.academy/interop-callbacks-to-coroutines.html","title":"How to turn callback functions into suspend functions or Flow","lang":"en-US","frontmatter":{"lang":"en-US","title":"How to turn callback functions into suspend functions or Flow","description":"Article(s) > How to turn callback functions into suspend functions or Flow","icon":"iconfont icon-kotlin","category":["Java","Kotlin","Article(s)"],"tag":["blog","kt.academy","java","kotlin"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to turn callback functions into suspend functions or Flow\\",\\"image\\":[\\"https://marcinmoskala.com/kt-academy-articles/promotion/interop_callbacks_to_coroutines.png\\"],\\"datePublished\\":\\"2025-07-14T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Marcin Moskała\\",\\"url\\":\\"https://kt.academy/user/marcinmoskala\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/kt.academy/interop-callbacks-to-coroutines.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How to turn callback functions into suspend functions or Flow"}],["meta",{"property":"og:description","content":"Article(s) > How to turn callback functions into suspend functions or Flow"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://marcinmoskala.com/kt-academy-articles/promotion/interop_callbacks_to_coroutines.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://marcinmoskala.com/kt-academy-articles/promotion/interop_callbacks_to_coroutines.png"}],["meta",{"name":"twitter:image:alt","content":"How to turn callback functions into suspend functions or Flow"}],["meta",{"property":"article:author","content":"Marcin Moskała"}],["meta",{"property":"article:tag","content":"kotlin"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:tag","content":"kt.academy"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2025-07-14T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > How to turn callback functions into suspend functions or Flow"},{"property":"og:description","content":"How to turn callback functions into suspend functions or Flow"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/kt.academy/interop-callbacks-to-coroutines.html"}]],"prev":"/programming/java/articles/README.md","date":"2025-07-14T00:00:00.000Z","isOriginal":false,"author":[{"name":"Marcin Moskała","url":"https://kt.academy/user/marcinmoskala"}],"cover":"https://marcinmoskala.com/kt-academy-articles/promotion/interop_callbacks_to_coroutines.png"},"git":{},"readingTime":{"minutes":4.8,"words":1439},"filePathRelative":"kt.academy/interop-callbacks-to-coroutines.md","copyright":{"author":"Marcin Moskała"}}');export{A as comp,T as data};
