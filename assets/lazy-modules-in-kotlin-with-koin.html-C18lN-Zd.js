import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as g,d as e,f as o,b as r,t as m,n as h,g as f,w as t,e as a,r as l,o as y}from"./app-BVguHYKu.js";const k={},b={id:"frontmatter-title-á„€á…ªá†«á„…á…§á†«",tabindex:"-1"},v={class:"header-anchor",href:"#frontmatter-title-á„€á…ªá†«á„…á…§á†«"},z={class:"table-of-contents"},w={href:"https://insert-koin.io/docs/reference/koin-core/lazy-modules/#defining-lazy-modules-experimental",target:"_blank",rel:"noopener noreferrer"},K={href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/lazy.html",target:"_blank",rel:"noopener noreferrer"},L={href:"https://insert-koin.io/",target:"_blank",rel:"noopener noreferrer"},M={href:"https://insert-koin.io/docs/reference/koin-core/lazy-modules#background-loading-with-kotlin-coroutines-experimental",target:"_blank",rel:"noopener noreferrer"},B={href:"https://kotlinlang.org/docs/coroutines-overview.html",target:"_blank",rel:"noopener noreferrer"};function x(d,n){const p=l("VPCard"),i=l("router-link"),u=l("SiteInfo"),s=l("VPIcon");return y(),g("div",null,[e("h1",b,[e("a",v,[e("span",null,m(d.$frontmatter.title)+" ê´€ë ¨",1)])]),o(p,h(f({title:"Android > Article(s)",desc:"Article(s)",link:"/programming/java-android/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),e("nav",z,[e("ul",null,[e("li",null,[o(i,{to:"#streamlining-your-app-with-lazy-modules"},{default:t(()=>n[0]||(n[0]=[a("Streamlining Your App with Lazy Modules")])),_:1,__:[0]}),e("ul",null,[e("li",null,[o(i,{to:"#defining-lazy-modules-in-koin"},{default:t(()=>n[1]||(n[1]=[a("Defining Lazy Modules in Koin")])),_:1,__:[1]})]),e("li",null,[o(i,{to:"#important-note-on-lazy-modules"},{default:t(()=>n[2]||(n[2]=[a("Important Note on Lazy Modules")])),_:1,__:[2]})])])]),e("li",null,[o(i,{to:"#enhancing-performance-with-background-loading"},{default:t(()=>n[3]||(n[3]=[a("Enhancing Performance with Background Loading")])),_:1,__:[3]}),e("ul",null,[e("li",null,[o(i,{to:"#hybrid-loading-for-optimal-performance"},{default:t(()=>n[4]||(n[4]=[a("Hybrid Loading for Optimal Performance")])),_:1,__:[4]})])])]),e("li",null,[o(i,{to:"#optimizing-performance-with-background-loading"},{default:t(()=>n[5]||(n[5]=[a("Optimizing Performance with Background Loading")])),_:1,__:[5]}),e("ul",null,[e("li",null,[o(i,{to:"#fine-tuning-with-coroutine-dispatchers"},{default:t(()=>n[6]||(n[6]=[a("Fine-Tuning with Coroutine Dispatchers")])),_:1,__:[6]})])])])])]),n[24]||(n[24]=e("hr",null,null,-1)),o(u,{name:"Leveraging Lazy Modules and Background Loading in Kotlin with Koin",desc:"Boost Kotlin apps with Koin's lazy modules and background loading to enhance performance and scalability, using asynchronous techniques for efficiency.",url:"https://blog.kotzilla.io/lazy-modules-in-kotlin-with-koin",logo:"https://blog.kotzilla.io/hubfs/favicon.png",preview:"https://blog.kotzilla.io/hubfs/Screenshot%202024-04-16%20at%2011.59.30.png"}),e("p",null,[n[8]||(n[8]=a("One of the lesser-discussed yet powerful features in the Kotlin ecosystem is Koinâ€™s support for ")),e("a",w,[o(s,{icon:"fas fa-globe"}),n[7]||(n[7]=a("lazy modules"))]),n[9]||(n[9]=a(" and background loading. While experimental, these features can be crucial tools in your arsenal for building scalable and responsive applications. Stay tuned, this feature will be stable in the upcoming Koin 3.6 release ðŸ”¥"))]),n[25]||(n[25]=e("p",null,"This blog post revisits these concepts, showing how you can leverage them to enhance your Kotlin applications.",-1)),n[26]||(n[26]=e("hr",null,null,-1)),n[27]||(n[27]=e("h2",{id:"streamlining-your-app-with-lazy-modules",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#streamlining-your-app-with-lazy-modules"},[e("span",null,"Streamlining Your App with Lazy Modules")])],-1)),e("p",null,[e("a",K,[o(s,{icon:"iconfont icon-kotlin"}),n[10]||(n[10]=a("Lazy loading"))]),n[12]||(n[12]=a(" is a design pattern commonly used to defer the initialization of an object until the point at which it is needed. It can significantly boost an application's performance by reducing initial load time. ")),e("a",L,[o(s,{icon:"fas fa-globe"}),n[11]||(n[11]=a("Koin"))]),n[13]||(n[13]=a(", a lightweight dependency injection framework for Kotlin, integrates this concept beautifully through its support for lazy modules."))]),n[28]||(n[28]=r(`<h3 id="defining-lazy-modules-in-koin" tabindex="-1"><a class="header-anchor" href="#defining-lazy-modules-in-koin"><span>Defining Lazy Modules in Koin</span></a></h3><p>Lazy modules offer you the flexibility to delay resource initialization until they are actually required. To declare a lazy Koin module, utilize the <code>lazyModule</code> function. This strategy avoids upfront resource allocation, instead opting to load them in the background when Koin initiates. Here&#39;s a guide on how to define lazy modules ðŸ‘‡</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token comment">// Declaring some lazy modules</span></span>
<span class="line"><span class="token keyword">val</span> m2 lazyModule <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">singleOf</span><span class="token punctuation">(</span><span class="token operator">::</span> ClassB<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// Including m2 in another lazy module</span></span>
<span class="line"><span class="token keyword">val</span> m1 <span class="token operator">=</span> lazyModule <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">includes</span> <span class="token punctuation">(</span>m2<span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">singleOf</span><span class="token punctuation">(</span><span class="token operator">::</span>ClassA<span class="token punctuation">)</span> <span class="token punctuation">{</span> bind<span class="token operator">&lt;</span>IClassA<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In this example, <code>m2</code> is a lazy module that provides <code>ClassB.m1</code> is another lazy module that includes <code>m2</code> and provides <code>ClassA</code>, binding it to <code>IClassA</code>. The <code>includes</code> method allows you to nest lazy modules, organizing your dependency graph elegantly and efficiently.</p><h3 id="important-note-on-lazy-modules" tabindex="-1"><a class="header-anchor" href="#important-note-on-lazy-modules"><span>Important Note on Lazy Modules</span></a></h3><p>Lazy modules will not trigger any resource allocation until they have been explicitly loaded. This lazy loading mechanism ensures that your application remains light and responsive, loading only what it needs, when it needs it.</p><hr><h2 id="enhancing-performance-with-background-loading" tabindex="-1"><a class="header-anchor" href="#enhancing-performance-with-background-loading"><span>Enhancing Performance with Background Loading</span></a></h2>`,8)),e("p",null,[n[15]||(n[15]=a("Once you've defined your lazy modules, Koin allows you to load them in the background, leveraging ")),e("a",M,[o(s,{icon:"fas fa-globe"}),n[14]||(n[14]=a("Kotlin coroutines"))]),n[16]||(n[16]=a(". This asynchronous loading can significantly improve your application's startup time and overall performance. Your applicationâ€™s startup time is minimized, and resources are used as efficiently as possible."))]),n[29]||(n[29]=e("h3",{id:"hybrid-loading-for-optimal-performance",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#hybrid-loading-for-optimal-performance"},[e("span",null,"Hybrid Loading for Optimal Performance")])],-1)),n[30]||(n[30]=e("p",null,"A key enhancement to consider is the hybrid loading strategy, where 20% of the application's core components are loaded synchronously to quickly display the first screen, while the remaining 80% are loaded asynchronously. This approach ensures that users are immediately greeted with a responsive UI, while the bulk of the application's resources are efficiently loaded in the background, optimizing both startup time and performance.",-1)),n[31]||(n[31]=e("p",null,[a("To implement this, define the critical components needed for the initial screen in a standard Koin module, and load this synchronously within your "),e("code",null,"startKoin"),a(" block. The rest of your components, not immediately required, should be defined in lazy modules, and set to be loaded asynchronously.")],-1)),n[32]||(n[32]=e("p",null,"This balanced approach allows for an immediate user interaction layer while efficiently managing resource loading and application initialization in the background.",-1)),n[33]||(n[33]=e("hr",null,null,-1)),n[34]||(n[34]=e("h2",{id:"optimizing-performance-with-background-loading",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#optimizing-performance-with-background-loading"},[e("span",null,"Optimizing Performance with Background Loading")])],-1)),e("p",null,[n[18]||(n[18]=a("Beyond just defining lazy modules, Koin enables these modules to be loaded in the background, thanks to the power of ")),e("a",B,[o(s,{icon:"iconfont icon-kotlin"}),n[17]||(n[17]=a("Kotlin coroutines"))]),n[19]||(n[19]=a(". This asynchronous loading further optimizes the applicationâ€™s performance and responsiveness. To load your lazy modules in the background, you can use the ")),n[20]||(n[20]=e("code",null,"KoinApplication.lazyModules",-1)),n[21]||(n[21]=a(" function within your ")),n[22]||(n[22]=e("code",null,"startKoin",-1)),n[23]||(n[23]=a(" block. Koin provides several utility functions to manage this process, including waiting for all start jobs to complete or running code after the loading is finished:"))]),n[35]||(n[35]=r(`<div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line">startkoin <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Loading lazy Modules in the background </span></span>
<span class="line">    <span class="token function">lazyModules</span><span class="token punctuation">(</span>m1<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">val</span> koin <span class="token operator">=</span> KoinPlatform<span class="token punctuation">.</span><span class="token function">getKoin</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Waiting for all loading jobs to finish </span></span>
<span class="line">koin<span class="token punctuation">.</span><span class="token function">waitAllStartJobs</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Running code after loading is complete</span></span>
<span class="line">koin<span class="token punctuation">.</span><span class="token function">runOnKoinStarted</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// Code to run after background load is complete</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="fine-tuning-with-coroutine-dispatchers" tabindex="-1"><a class="header-anchor" href="#fine-tuning-with-coroutine-dispatchers"><span>Fine-Tuning with Coroutine Dispatchers</span></a></h3><p>By default, Koin uses Kotlin&#39;s <code>Dispatchers.Default</code> for coroutine execution. However, the <code>lazyModules</code> function allows you to specify a different dispatcher, such as <code>Dispatchers.IO</code>, tailoring the background loading process to your application&#39;s specific needs.</p><p>Although these ideas of lazy modules and background loading are well-established, they&#39;re often underestimated, yet they have tremendous potential in enhancing Kotlin applications. By integrating these features, you can unleash a higher level of responsiveness, efficiency, and scalability within your applications.</p><p>Let&#39;s goðŸ”¥</p>`,5))])}const P=c(k,[["render",x]]),S=JSON.parse('{"path":"/blog.kotzilla.io/lazy-modules-in-kotlin-with-koin.html","title":"Leveraging Lazy Modules and Background Loading in Kotlin with Koin","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Leveraging Lazy Modules and Background Loading in Kotlin with Koin","description":"Article(s) > Leveraging Lazy Modules and Background Loading in Kotlin with Koin","icon":"fa-brands fa-android","category":["Java","Kotlin","Android","Article(s)"],"tag":["blog","blog.kotzilla.io","java","kotiln","android","gradle","koin"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Leveraging Lazy Modules and Background Loading in Kotlin with Koin\\",\\"image\\":[\\"https://blog.kotzilla.io/hubfs/Screenshot%202024-04-16%20at%2011.59.30.png\\"],\\"datePublished\\":\\"2024-04-16T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.kotzilla.io/lazy-modules-in-kotlin-with-koin.html"}],["meta",{"property":"og:site_name","content":"ðŸ“šBookshelf"}],["meta",{"property":"og:title","content":"Leveraging Lazy Modules and Background Loading in Kotlin with Koin"}],["meta",{"property":"og:description","content":"Article(s) > Leveraging Lazy Modules and Background Loading in Kotlin with Koin"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://blog.kotzilla.io/hubfs/Screenshot%202024-04-16%20at%2011.59.30.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://blog.kotzilla.io/hubfs/Screenshot%202024-04-16%20at%2011.59.30.png"}],["meta",{"name":"twitter:image:alt","content":"Leveraging Lazy Modules and Background Loading in Kotlin with Koin"}],["meta",{"property":"article:tag","content":"koin"}],["meta",{"property":"article:tag","content":"gradle"}],["meta",{"property":"article:tag","content":"android"}],["meta",{"property":"article:tag","content":"kotiln"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:tag","content":"blog.kotzilla.io"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2024-04-16T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Leveraging Lazy Modules and Background Loading in Kotlin with Koin"},{"property":"og:description","content":"Leveraging Lazy Modules and Background Loading in Kotlin with Koin"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/blog.kotzilla.io/lazy-modules-in-kotlin-with-koin.html"}]],"prev":"/programming/java-android/articles/README.md","date":"2024-04-16T00:00:00.000Z","isOriginal":false,"cover":"https://blog.kotzilla.io/hubfs/Screenshot%202024-04-16%20at%2011.59.30.png"},"git":{},"readingTime":{"minutes":3.12,"words":936},"filePathRelative":"blog.kotzilla.io/lazy-modules-in-kotlin-with-koin.md"}');export{P as comp,S as data};
