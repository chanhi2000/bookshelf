import{_ as g}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as v,d as s,f as a,b as l,a as b,t as f,n as d,g as c,w as t,e,r as p,o as h}from"./app-BVguHYKu.js";const y={},w={id:"frontmatter-title-관련",tabindex:"-1"},D={class:"header-anchor",href:"#frontmatter-title-관련"},x={class:"table-of-contents"},T={class:"hint-container note"},j={href:"https://docker.com/",target:"_blank",rel:"noopener noreferrer"},R={href:"https://docker.com/resources/what-container",target:"_blank",rel:"noopener noreferrer"},S={href:"https://hub.docker.com/",target:"_blank",rel:"noopener noreferrer"},O={href:"https://hub.docker.com/",target:"_blank",rel:"noopener noreferrer"},E={class:"hint-container tip"},A={href:"https://linuxconfig.org/bash-scripting-tutorial-for-beginners",target:"_blank",rel:"noopener noreferrer"},N={href:"https://docs.docker.com/docker-for-windows/install/",target:"_blank",rel:"noopener noreferrer"},P={href:"https://docs.docker.com/docker-for-mac/install/",target:"_blank",rel:"noopener noreferrer"},C={href:"https://docs.docker.com/compose/",target:"_blank",rel:"noopener noreferrer"},I={href:"https://nginx.com/",target:"_blank",rel:"noopener noreferrer"},L={href:"https://rabbitmq.com/",target:"_blank",rel:"noopener noreferrer"},q={href:"https://docs.docker.com/compose/install/",target:"_blank",rel:"noopener noreferrer"},M={href:"https://docs.docker.com/compose/reference/",target:"_blank",rel:"noopener noreferrer"},B={id:"env-file",tabindex:"-1"},z={class:"header-anchor",href:"#env-file"},U={href:"http://docs.docker.com",target:"_blank",rel:"noopener noreferrer"},H={href:"https://blog.logrocket.com/tag/docker",target:"_blank",rel:"noopener noreferrer"},W={href:"https://docs.djangoproject.com/en/4.0/",target:"_blank",rel:"noopener noreferrer"};function G(u,n){const r=p("VPCard"),o=p("router-link"),i=p("VPIcon"),m=p("SiteInfo"),k=p("RouteLink");return h(),v("div",null,[s("h1",w,[s("a",D,[s("span",null,f(u.$frontmatter.title)+" 관련",1)])]),a(r,d(c({title:"Django > Article(s)",desc:"Article(s)",link:"/programming/py-django/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),a(r,d(c({title:"Docker > Article(s)",desc:"Article(s)",link:"/devops/docker/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",x,[s("ul",null,[s("li",null,[a(o,{to:"#what-is-docker"},{default:t(()=>n[0]||(n[0]=[e("What is Docker?")])),_:1,__:[0]})]),s("li",null,[a(o,{to:"#why-should-you-use-docker"},{default:t(()=>n[1]||(n[1]=[e("Why should you use Docker?")])),_:1,__:[1]}),s("ul",null,[s("li",null,[a(o,{to:"#remote-services"},{default:t(()=>n[2]||(n[2]=[e("Remote services")])),_:1,__:[2]})]),s("li",null,[a(o,{to:"#cost-efficiency"},{default:t(()=>n[3]||(n[3]=[e("Cost efficiency")])),_:1,__:[3]})]),s("li",null,[a(o,{to:"#scalability"},{default:t(()=>n[4]||(n[4]=[e("Scalability")])),_:1,__:[4]})]),s("li",null,[a(o,{to:"#security"},{default:t(()=>n[5]||(n[5]=[e("Security")])),_:1,__:[5]})])])]),s("li",null,[a(o,{to:"#docker-installation"},{default:t(()=>n[6]||(n[6]=[e("Docker installation")])),_:1,__:[6]})]),s("li",null,[a(o,{to:"#setting-up-and-dockerizing-a-django-app"},{default:t(()=>n[7]||(n[7]=[e("Setting up and Dockerizing a Django app")])),_:1,__:[7]}),s("ul",null,[s("li",null,[a(o,{to:"#step-1"},{default:t(()=>n[8]||(n[8]=[e("Step 1")])),_:1,__:[8]})]),s("li",null,[a(o,{to:"#step-2"},{default:t(()=>n[9]||(n[9]=[e("Step 2")])),_:1,__:[9]})]),s("li",null,[a(o,{to:"#step-3"},{default:t(()=>n[10]||(n[10]=[e("Step 3")])),_:1,__:[10]})]),s("li",null,[a(o,{to:"#step-4"},{default:t(()=>n[11]||(n[11]=[e("Step 4")])),_:1,__:[11]})])])]),s("li",null,[a(o,{to:"#creating-the-dockerfiles-and-docker-cli"},{default:t(()=>n[12]||(n[12]=[e("Creating the Dockerfiles and Docker CLI")])),_:1,__:[12]})]),s("li",null,[a(o,{to:"#running-the-app-in-docker"},{default:t(()=>n[13]||(n[13]=[e("Running the app in Docker")])),_:1,__:[13]})]),s("li",null,[a(o,{to:"#running-multiple-containers-with-docker-compose"},{default:t(()=>n[14]||(n[14]=[e("Running multiple containers with Docker Compose")])),_:1,__:[14]})]),s("li",null,[a(o,{to:"#using-docker-compose-with-a-django-app"},{default:t(()=>n[15]||(n[15]=[e("Using Docker Compose with a Django app")])),_:1,__:[15]})]),s("li",null,[a(o,{to:"#building-and-running-docker-compose-scripts"},{default:t(()=>n[16]||(n[16]=[e("Building and running Docker Compose scripts")])),_:1,__:[16]})]),s("li",null,[a(o,{to:"#supporting-files-in-a-django-application"},{default:t(()=>n[17]||(n[17]=[e("Supporting files in a Django application")])),_:1,__:[17]}),s("ul",null,[s("li",null,[a(o,{to:"#env-file"},{default:t(()=>[a(i,{icon:"fas fa-file-lines"}),n[18]||(n[18]=e(".env file"))]),_:1,__:[18]})]),s("li",null,[a(o,{to:"#the-nginx-dockerfile"},{default:t(()=>n[19]||(n[19]=[e("The Nginx Dockerfile")])),_:1,__:[19]})]),s("li",null,[a(o,{to:"#the-nginx-config-file"},{default:t(()=>n[20]||(n[20]=[e("The Nginx config file")])),_:1,__:[20]})])])]),s("li",null,[a(o,{to:"#conclusion"},{default:t(()=>n[21]||(n[21]=[e("Conclusion")])),_:1,__:[21]})])])]),n[156]||(n[156]=s("hr",null,null,-1)),a(m,{name:"Dockerizing a Django app",desc:"Docker isolates your application and its dependencies and ensures consistent runtime protocols regardless of server configurations.",url:"https://blog.logrocket.com/dockerizing-django-app/",logo:"/assets/image/blog.logrocket.com/favicon.png",preview:"/assets/image/blog.logrocket.com/dockerizing-a-django-app/banner.png"}),s("div",T,[n[25]||(n[25]=s("p",{class:"hint-container-title"},"Editor's note",-1)),s("p",null,[n[22]||(n[22]=e("This article was updated on 8 April 2022 to provide more information to some key terms, explain each of the commands in the ")),a(i,{icon:"fa-brands fa-docker"}),n[23]||(n[23]=s("code",null,"Dockerfile",-1)),n[24]||(n[24]=e(", and break down the Django app setup into clearer steps."))])]),n[157]||(n[157]=s("p",null,"To actualize a Django project, most of the time you need an off-the-shelf solution in the form of a library or dependency.",-1)),s("p",null,[n[26]||(n[26]=e("This is typically not an issue, and is often documented in the ")),a(i,{icon:"fas fa-file-lines"}),n[27]||(n[27]=s("code",null,"requirements.txt",-1)),n[28]||(n[28]=e(" file that will contain the list of packages or dependencies along with their respective version that you need to run your project."))]),n[158]||(n[158]=s("p",null,"The trouble starts when you attempt to share the entire project with another individual who wishes to run and test it because, unfortunately, the user will have to perform the setup from scratch every time you make significant changes in the libraries and dependencies.",-1)),s("p",null,[n[30]||(n[30]=e("This is where containerization and ")),s("a",j,[a(i,{icon:"fa-brands fa-docker"}),n[29]||(n[29]=e("Docker"))]),n[31]||(n[31]=e(" come in. Docker isolates your application and its dependencies and ensures consistent runtime protocols for your applications regardless of the configurations of the servers hosting your application."))]),n[159]||(n[159]=s("hr",null,null,-1)),n[160]||(n[160]=s("h2",{id:"what-is-docker",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#what-is-docker"},[s("span",null,"What is Docker?")])],-1)),s("p",null,[n[33]||(n[33]=e("Docker is an open-source tool that manages the development, testing and deployment of ")),s("a",R,[a(i,{icon:"fa-brands fa-docker"}),n[32]||(n[32]=e("containerized applications"))]),n[34]||(n[34]=e("."))]),n[161]||(n[161]=s("p",null,"It offers hardware virtualization at the OS level and is suitable for modern architecture. This allows developers to package and ship software and its dependencies in order to distribute it as containers.",-1)),n[162]||(n[162]=s("p",null,"It's an incredibly popular containerization platform that solves the library and dependency issues once and for all.",-1)),n[163]||(n[163]=s("p",null,"But its best feature? Regardless of host or underlying infrastructure, your containerized application will always run the same way.",-1)),n[164]||(n[164]=s("p",null,"In simple terms, you can now wrap up all the pieces your software needs in a single unit, called a Docker image, then ship or share this image with anyone. As long as the recipient has Docker installed on their machine, they will be able to run or test your project. Gone are the days of wondering why a project works on one machine and not another.",-1)),s("p",null,[n[36]||(n[36]=e("Docker also offers a service called ")),s("a",S,[a(i,{icon:"fa-brands fa-docker"}),n[35]||(n[35]=e("DockerHub"))]),n[37]||(n[37]=e(" that allows you to share and manage Docker images among other developers and larger communities — essentially, it's a “GitHub” for Docker images."))]),n[165]||(n[165]=s("p",null,"It shares some similarities with the code repository platform, such as uploading and downloading images via CLI commands contained within the Docker CLI.",-1)),n[166]||(n[166]=s("hr",null,null,-1)),n[167]||(n[167]=s("h2",{id:"why-should-you-use-docker",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#why-should-you-use-docker"},[s("span",null,"Why should you use Docker?")])],-1)),n[168]||(n[168]=s("h3",{id:"remote-services",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#remote-services"},[s("span",null,"Remote services")])],-1)),s("p",null,[n[39]||(n[39]=e("A developer can pull Docker images from ")),s("a",O,[a(i,{icon:"fa-brands fa-docker"}),n[38]||(n[38]=e("Docker Hub"))]),n[40]||(n[40]=e("to any machine that hosts its containers. Implying that you can always retrieve a Docker image, build it, and run an instance of it from wherever you are and whenever you want."))]),n[169]||(n[169]=l('<h3 id="cost-efficiency" tabindex="-1"><a class="header-anchor" href="#cost-efficiency"><span>Cost efficiency</span></a></h3><p>Docker allows you to support several containers with one infrastructure rather than using multiple virtual machines to run identical copies of the virtual OS managed by the hypervisor, which can be expensive to maintain.</p><h3 id="scalability" tabindex="-1"><a class="header-anchor" href="#scalability"><span>Scalability</span></a></h3><p>Docker containers can efficiently scale-up applications to withstand more load and automatically decrease the computing load of your application when the amount of requests reduces.</p><h3 id="security" tabindex="-1"><a class="header-anchor" href="#security"><span>Security</span></a></h3><p>Containers are immutable, meaning that when you change the configuration of an image, you have to rebuild the image and run a new instance.</p>',6)),s("div",E,[n[44]||(n[44]=s("p",{class:"hint-container-title"},"Prerequisites for using Docker",-1)),s("ul",null,[n[43]||(n[43]=s("li",null,"Proficiency in Django development",-1)),s("li",null,[n[42]||(n[42]=e("Intermediate level with CLI and ")),s("a",A,[a(i,{icon:"fas fa-globe"}),n[41]||(n[41]=e("bash"))])])])]),n[170]||(n[170]=s("hr",null,null,-1)),n[171]||(n[171]=s("h2",{id:"docker-installation",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#docker-installation"},[s("span",null,"Docker installation")])],-1)),s("p",null,[n[47]||(n[47]=e("This tutorial uses YAML files to perform Docker scripting and executes the files via the Docker CLI. This guide will explore setting up Docker on an Ubuntu machine. If you are using a different OS, you can check out the documentation for getting started with ")),s("a",N,[a(i,{icon:"fa-brands fa-docker"}),n[45]||(n[45]=e("Windows"))]),n[48]||(n[48]=e(" and ")),s("a",P,[a(i,{icon:"fa-brands fa-docker"}),n[46]||(n[46]=e("macOS"))]),n[49]||(n[49]=e("."))]),n[172]||(n[172]=l(`<p>To download and set up Docker, run the command below on your terminal:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">sudo</span> <span class="token function">apt-get</span> update  </span>
<span class="line"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> docker-ce docker-ce-cli containerd.io </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="setting-up-and-dockerizing-a-django-app" tabindex="-1"><a class="header-anchor" href="#setting-up-and-dockerizing-a-django-app"><span>Setting up and Dockerizing a Django app</span></a></h2>`,4)),s("p",null,[n[51]||(n[51]=e("This guide assumes you are already proficient in Django, so there won't be any emphasis on the structure of a Django app. If you are new to Django, ")),a(k,{to:"/blog.logrocket.com/creating-an-app-with-react-and-django.html"},{default:t(()=>n[50]||(n[50]=[s("strong",null,"here",-1)])),_:1,__:[50]}),n[52]||(n[52]=e(" is a tutorial to get you up to speed."))]),n[173]||(n[173]=s("p",null,[e("Let's skip ahead to the steps for running a basic Django REST framework app in Docker and displaying the default page. Consider it the "),s("code",null,"Hello, world!"),e(" of Django and Docker.")],-1)),s("p",null,[n[53]||(n[53]=e("Using the guide provided in this tutorial, you can Dockerize any previous or future Django project you may have, especially one that has libraries listed in ")),a(i,{icon:"fas fa-file-lines"}),n[54]||(n[54]=s("code",null,"requirements.txt",-1)),n[55]||(n[55]=e("."))]),n[174]||(n[174]=l(`<h3 id="step-1" tabindex="-1"><a class="header-anchor" href="#step-1"><span>Step 1</span></a></h3><p>To start, run the below command and follow the steps afterwards:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">django-admin startproject dj_docker_drf</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,3)),s("ul",null,[n[64]||(n[64]=s("li",null,"Navigate into your project folder",-1)),n[65]||(n[65]=s("li",null,[e("Start an app named "),s("code",null,"sample")],-1)),s("li",null,[n[56]||(n[56]=e("Add ")),n[57]||(n[57]=s("code",null,"rest_framework",-1)),n[58]||(n[58]=e(" and ")),n[59]||(n[59]=s("code",null,"sample",-1)),n[60]||(n[60]=e(" to the ")),n[61]||(n[61]=s("code",null,"INSTALLED_APPS",-1)),n[62]||(n[62]=e(" list in ")),a(i,{icon:"fa-brands fa-python"}),n[63]||(n[63]=s("code",null,"settings.py",-1))])]),n[175]||(n[175]=s("h3",{id:"step-2",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#step-2"},[s("span",null,"Step 2")])],-1)),s("p",null,[n[66]||(n[66]=e("In the ")),a(i,{icon:"fa-brands fa-python"}),n[67]||(n[67]=s("code",null,"views.py",-1)),n[68]||(n[68]=e(" file, add the below code snippet that returns the message, “HELLO WORLD FROM DJANGO AND DOCKER”."))]),n[176]||(n[176]=l(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="views.py"><span>views.py</span></div><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code class="language-python"><span class="line"><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>views <span class="token keyword">import</span> APIView </span>
<span class="line"><span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> JsonResponse</span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">HomeView</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span> </span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span> </span>
<span class="line">        <span class="token keyword">return</span> JsonResponse<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">:</span> <span class="token string">&#39;HELLO WORLD FROM DJANGO AND DOCKER&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="step-3" tabindex="-1"><a class="header-anchor" href="#step-3"><span>Step 3</span></a></h3><p>Connect the main URL file and the app URL file so that <code>HomeView</code> is the default view when a user accesses the app on the browser.</p>`,3)),s("p",null,[n[69]||(n[69]=e("In order to allow access to the Django app from any server or IP address, ensure that ")),n[70]||(n[70]=s("code",null,"ALLOWED_HOSTS",-1)),n[71]||(n[71]=e(" in the ")),a(i,{icon:"fa-brands fa-python"}),n[72]||(n[72]=s("code",null,"settings.py",-1)),n[73]||(n[73]=e(" file is set to ")),n[74]||(n[74]=s("code",null,"*",-1)),n[75]||(n[75]=e(", as shown in the snippet below:"))]),n[177]||(n[177]=l(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="settings.py"><span>settings.py</span></div><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code class="language-python"><span class="line">ALLOWED_HOSTS <span class="token operator">=</span> <span class="token punctuation">[</span>‘<span class="token operator">*</span>’<span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></div><h3 id="step-4" tabindex="-1"><a class="header-anchor" href="#step-4"><span>Step 4</span></a></h3>`,2)),s("p",null,[n[76]||(n[76]=e("Finally, create a ")),a(i,{icon:"fas fa-file-lines"}),n[77]||(n[77]=s("code",null,"requirements.txt",-1)),n[78]||(n[78]=e(" file in your root project folder and add the DRF library:"))]),n[178]||(n[178]=l(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="requirement.txt"><span>requirement.txt</span></div><div class="language-plaintext line-numbers-mode" data-highlighter="prismjs" data-ext="plaintext"><pre><code class="language-plaintext"><span class="line">django-rest-framework==0.1.0 </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></div><p>The app is now ready to be Dockerized.</p><hr><h2 id="creating-the-dockerfiles-and-docker-cli" tabindex="-1"><a class="header-anchor" href="#creating-the-dockerfiles-and-docker-cli"><span>Creating the Dockerfiles and Docker CLI</span></a></h2><p>Notice that the Dockerfile is named. This is to allow the Docker CLI to track it.</p>`,5)),s("p",null,[n[79]||(n[79]=e("In your project root, create a file named ")),a(i,{icon:"fa-brands fa-docker"}),n[80]||(n[80]=s("code",null,"Dockerfile",-1)),n[81]||(n[81]=e(" without an extension and add the following snippet to the file:"))]),n[179]||(n[179]=l(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="Dockerfile"><span>Dockerfile</span></div><div class="language-docker line-numbers-mode" data-highlighter="prismjs" data-ext="docker"><pre><code class="language-docker"><span class="line"><span class="token comment"># base image </span></span>
<span class="line"><span class="token instruction"><span class="token keyword">FROM</span> python:3.8 </span></span>
<span class="line"><span class="token comment"># setup environment variable</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">ENV</span> DockerHOME=/home/app/webapp</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># set work directory</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">RUN</span> mkdir -p <span class="token variable">$DockerHOME</span></span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># where your code lives</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">WORKDIR</span> <span class="token variable">$DockerHOME</span></span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># set environment variables</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">ENV</span> PYTHONDONTWRITEBYTECODE 1</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">ENV</span> PYTHONUNBUFFERED 1</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># install dependencies</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">RUN</span> pip install --upgrade pip</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># copy whole project to your docker home directory.</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">COPY</span> . <span class="token variable">$DockerHOME</span></span></span>
<span class="line"><span class="token comment"># run this command to install all dependencies</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">RUN</span> pip install -r requirements.txt</span></span>
<span class="line"><span class="token comment"># port where the Django app runs</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">EXPOSE</span> 8000</span></span>
<span class="line"><span class="token comment"># start server </span></span>
<span class="line"><span class="token instruction"><span class="token keyword">CMD</span> python manage.py runserver </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Let&#39;s explore the Dockerfile and what each of the commands do.</p>`,2)),s("ul",null,[n[86]||(n[86]=l("<li><code>FROM python:3.8</code> : This installs a Python image into the Docker image. This is also the version of Python that will run the application in the container</li><li><code>ENV DockerHOME=/home/app/webapp</code>: Here we declare the working directory and assign it to the variable name <code>DockerHOME</code>. This will be the root directory of the Django app in the container</li><li><code>RUN mkdir -p $DockerHOME</code>: This creates the directory with the specified path assigned to the <code>DockerHOME</code> variable within the image</li><li><code>WORKDIR $DockerHOME</code>: This explicitly tells Docker to set the provided directory as the location where the application will reside within the container</li><li><code>RUN pip install --upgrade pip</code>: This updates the <code>pip</code> version that will be used to install the dependencies for the application</li><li><code>COPY . $DockerHOME</code>: This copies every other necessary file and its respective contents into the app folder that is the root directory of the application within the container</li>",6)),s("li",null,[n[82]||(n[82]=s("code",null,"RUN pip install -r requirements.txt",-1)),n[83]||(n[83]=e(": This command installs all the dependencies defined in the ")),a(i,{icon:"fas fa-file-lines"}),n[84]||(n[84]=s("code",null,"requirements.txt",-1)),n[85]||(n[85]=e(" file into your application within the container"))]),n[87]||(n[87]=s("li",null,[s("code",null,"EXPOSE 8000"),e(": This command releases port 8000 within the container, where the Django app will run")],-1)),n[88]||(n[88]=s("li",null,[s("code",null,"CMD python manage.py runserver"),e(": This command starts the server and runs the application")],-1))]),n[180]||(n[180]=s("hr",null,null,-1)),n[181]||(n[181]=s("h2",{id:"running-the-app-in-docker",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#running-the-app-in-docker"},[s("span",null,"Running the app in Docker")])],-1)),n[182]||(n[182]=s("p",null,"To run the app, you need to perform two steps:",-1)),s("ol",null,[s("li",null,[n[89]||(n[89]=e("Build the image: This is done using the ")),n[90]||(n[90]=s("code",null,"build",-1)),n[91]||(n[91]=e(" command, which uses the ")),a(i,{icon:"fa-brands fa-docker"}),n[92]||(n[92]=s("code",null,"Dockerfile",-1)),n[93]||(n[93]=e(" you just created. To build the image, run the command below:")),n[94]||(n[94]=s("code",null,"docker build . -t docker-django-v0.0",-1)),n[95]||(n[95]=e(".This command should be executed in the directory where the Docker file lives. The ")),n[96]||(n[96]=s("code",null,"-t",-1)),n[97]||(n[97]=e(" flag tags the image so that it can be referenced when you want to run the container."))]),n[98]||(n[98]=s("li",null,[e("Run the image: This is done using the "),s("code",null,"docker run"),e(" command. This will convert the built image into a running container. To run the app, execute the below command:"),s("code",null,"docker run docker-django-v0.0")],-1))]),n[183]||(n[183]=s("p",null,"You can proceed to view your app in the browser at localhost:8000.",-1)),n[184]||(n[184]=s("hr",null,null,-1)),n[185]||(n[185]=s("h2",{id:"running-multiple-containers-with-docker-compose",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#running-multiple-containers-with-docker-compose"},[s("span",null,"Running multiple containers with Docker Compose")])],-1)),n[186]||(n[186]=s("p",null,"There are instances where you may want to run multiple containers in Docker and execute them in a specific order.",-1)),s("p",null,[n[100]||(n[100]=e("This is where ")),s("a",C,[a(i,{icon:"fa-brands fa-docker"}),n[99]||(n[99]=e("Docker Compose"))]),n[101]||(n[101]=e(" comes in handy."))]),n[187]||(n[187]=s("p",null,"Docker Compose is a tool for defining and running multi-container applications of any kind. If you have an application comprising several containers, you will use the Docker Compose CLI to run them all in the required order that you specify.",-1)),n[188]||(n[188]=s("p",null,"Take, for example, a web application with the following components:",-1)),s("ol",null,[s("li",null,[n[103]||(n[103]=e("Web server container such as ")),s("a",I,[a(i,{icon:"iconfont icon-nginx"}),n[102]||(n[102]=e("Nginx"))])]),n[106]||(n[106]=s("li",null,"Application container that hosts the Django app",-1)),n[107]||(n[107]=s("li",null,"Database container that hosts the production database, such as PostgreSQL",-1)),s("li",null,[n[105]||(n[105]=e("A message container that hosts the message broker, such as ")),s("a",L,[a(i,{icon:"iconfont icon-erl-rabbitmq"}),n[104]||(n[104]=e("RabbitMQ"))])])]),n[189]||(n[189]=s("p",null,"To run such a system, you will declare the directives in a Docker Compose YAML file. Here, you define how the images will be built, on which port will each of the images will be accessible, and most importantly, the order in which the containers should execute (i.e., which container depends on another container for the project to run successfully).",-1)),n[190]||(n[190]=s("hr",null,null,-1)),n[191]||(n[191]=s("h2",{id:"using-docker-compose-with-a-django-app",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#using-docker-compose-with-a-django-app"},[s("span",null,"Using Docker Compose with a Django app")])],-1)),s("p",null,[n[109]||(n[109]=e("Let's explore Docker Compose using the scenario demonstrated above: a Django app with a PostgreSQL database, RabbitMQ message broker, and an Nginx load balancer. Follow this ")),s("a",q,[a(i,{icon:"fa-brands fa-docker"}),n[108]||(n[108]=e("guide"))]),n[110]||(n[110]=e(" to install the CLI tool on your host operating system."))]),n[192]||(n[192]=s("p",null,"With Docker Compose (and, similarly to Docker), a particular file with a specific name is required. The CLI tool reads this file and uses it to spin up the Docker images and run them.",-1)),s("p",null,[n[111]||(n[111]=e("To create a Docker Compose file, create a YAML file and name it ")),a(i,{icon:"iconfont icon-yaml"}),a(i,{icon:"iconfont icon-yaml"}),n[112]||(n[112]=s("code",null,"docker-compose.yml",-1)),n[113]||(n[113]=e(". This ideally should exist at the root directory of your project."))]),n[193]||(n[193]=l(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="docker-compose.yaml"><span>docker-compose.yaml</span></div><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml"><pre><code class="language-yaml"><span class="line"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&#39;3.7&#39;</span></span>
<span class="line"><span class="token key atrule">services</span><span class="token punctuation">:</span> <span class="token comment"># the different images that will be running as containers</span></span>
<span class="line">  <span class="token key atrule">nginx</span><span class="token punctuation">:</span> <span class="token comment"># service name</span></span>
<span class="line">    <span class="token comment"># location of the dockerfile that defines the nginx image. The dockerfile will be used to spin up an image during the build stage.</span></span>
<span class="line">    <span class="token key atrule">build</span><span class="token punctuation">:</span> ./nginx </span>
<span class="line">    <span class="token comment"># map the machine port 1339 to the container port 80. Any traffic from 1339 externally will be passed to port 80 of the NGINX container. You can access this container viea localhost:1339</span></span>
<span class="line">    <span class="token key atrule">ports</span><span class="token punctuation">:</span> <span class="token punctuation">-</span> 1339<span class="token punctuation">:</span><span class="token number">80</span> </span>
<span class="line">    <span class="token comment"># static storages provisioned since django does not handle static files in production</span></span>
<span class="line">    <span class="token key atrule">volumes</span><span class="token punctuation">:</span> <span class="token punctuation">-</span> static_volume<span class="token punctuation">:</span>/home/app/microservice/static </span>
<span class="line">    </span>
<span class="line">    <span class="token comment"># will only start if web is up and running</span></span>
<span class="line">    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span> <span class="token punctuation">-</span> web</span>
<span class="line">    <span class="token comment"># restart service when it fails</span></span>
<span class="line">    <span class="token key atrule">restart</span><span class="token punctuation">:</span> <span class="token string">&quot;on-failure&quot;</span></span>
<span class="line">  <span class="token key atrule">web</span><span class="token punctuation">:</span> <span class="token comment"># service name</span></span>
<span class="line">    <span class="token comment"># build the image for the web service from the dockerfile in parent directory. </span></span>
<span class="line">    <span class="token key atrule">build</span><span class="token punctuation">:</span> . </span>
<span class="line">    <span class="token comment"># command directive passes the parameters to the service and they will be executed by the service. In this example, these are django commands which will be executed in the container where django lives. </span></span>
<span class="line">    <span class="token key atrule">command</span><span class="token punctuation">:</span> sh <span class="token punctuation">-</span>c &quot;python manage.py makemigrations <span class="token important">&amp;&amp;</span></span>
<span class="line">                    python manage.py migrate <span class="token important">&amp;&amp;</span></span>
<span class="line">                    gunicorn microservice_sample_app.wsgi<span class="token punctuation">:</span>application <span class="token punctuation">-</span><span class="token punctuation">-</span>bind 0.0.0.0<span class="token punctuation">:</span>$<span class="token punctuation">{</span>APP_PORT<span class="token punctuation">}</span>&quot;</span>
<span class="line">    <span class="token comment"># map data and files from parent directory in host to microservice directory in docker container</span></span>
<span class="line">    <span class="token key atrule">volumes</span><span class="token punctuation">:</span> </span>
<span class="line">      <span class="token punctuation">-</span> .<span class="token punctuation">:</span>/microservice</span>
<span class="line">      <span class="token punctuation">-</span> static_volume<span class="token punctuation">:</span>/home/app/microservice/static </span>
<span class="line">    <span class="token comment"># file where env variables are stored. Used as best practice so as not to expose secret keys </span></span>
<span class="line">    <span class="token key atrule">env_file</span><span class="token punctuation">:</span> </span>
<span class="line">      <span class="token punctuation">-</span> .env</span>
<span class="line">    <span class="token comment"># name of the env file # name of the image </span></span>
<span class="line">    <span class="token key atrule">image</span><span class="token punctuation">:</span> microservice_app </span>
<span class="line">    <span class="token comment"># expose the port to other services defined here so that they can access this service via the exposed port. In the case of Django, this is 8000 by default</span></span>
<span class="line">    <span class="token key atrule">expose</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> $<span class="token punctuation">{</span>APP_PORT<span class="token punctuation">}</span> <span class="token comment"># retrieved from the .env file</span></span>
<span class="line">    <span class="token key atrule">restart</span><span class="token punctuation">:</span> <span class="token string">&quot;on-failure&quot;</span> </span>
<span class="line">    <span class="token comment"># cannot start if db service is not up and running </span></span>
<span class="line">    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> db</span>
<span class="line">  <span class="token key atrule">db</span><span class="token punctuation">:</span> <span class="token comment"># service name</span></span>
<span class="line">    <span class="token comment"># image name of the postgres database. during build, this will be pulled from dockerhub and a container spun up from it.</span></span>
<span class="line">    <span class="token key atrule">image</span><span class="token punctuation">:</span> postgres<span class="token punctuation">:</span>11<span class="token punctuation">-</span>alpine</span>
<span class="line">    <span class="token key atrule">volumes</span><span class="token punctuation">:</span> </span>
<span class="line">      <span class="token punctuation">-</span> ./init.sql<span class="token punctuation">:</span>/docker<span class="token punctuation">-</span>entrypoint<span class="token punctuation">-</span>initdb.d/init.sql</span>
<span class="line">      <span class="token punctuation">-</span> postgres_data<span class="token punctuation">:</span>/var/lib/postgresql/data/ </span>
<span class="line">    <span class="token comment"># access credentials from the .env file</span></span>
<span class="line">    <span class="token key atrule">environment</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> POSTGRES_PASSWORD=$<span class="token punctuation">{</span>POSTGRES_PASSWORD<span class="token punctuation">}</span> </span>
<span class="line">      <span class="token punctuation">-</span> POSTGRES_DB=$<span class="token punctuation">{</span>DB_NAME<span class="token punctuation">}</span> <span class="token punctuation">-</span> PGPORT=$<span class="token punctuation">{</span>DB_PORT<span class="token punctuation">}</span> </span>
<span class="line">      <span class="token punctuation">-</span> POSTGRES_USER=$<span class="token punctuation">{</span>POSTGRES_USER<span class="token punctuation">}</span></span>
<span class="line">    <span class="token key atrule">restart</span><span class="token punctuation">:</span> <span class="token string">&quot;on-failure&quot;</span></span>
<span class="line">  <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token comment"># image to be pulled from dockerhub during building</span></span>
<span class="line">    <span class="token key atrule">image</span><span class="token punctuation">:</span> rabbitmq<span class="token punctuation">:</span>3<span class="token punctuation">-</span>management<span class="token punctuation">-</span>alpine </span>
<span class="line">    <span class="token comment"># container name </span></span>
<span class="line">    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> rabbitmq </span>
<span class="line">    <span class="token key atrule">volumes</span><span class="token punctuation">:</span> </span>
<span class="line">      <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token punctuation">-</span> ./.docker/rabbitmq/etc/<span class="token punctuation">:</span>/etc/rabbitmq/</span>
<span class="line">        <span class="token punctuation">-</span> ./.docker/rabbitmq/data/<span class="token punctuation">:</span>/var/lib/rabbitmq/</span>
<span class="line">    <span class="token key atrule">rabbitmq_logs</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> ./.docker/rabbitmq/logs/<span class="token punctuation">:</span>/var/log/rabbitmq/</span>
<span class="line">    <span class="token comment"># environment variables from the referenced .env file</span></span>
<span class="line">    <span class="token key atrule">environment</span><span class="token punctuation">:</span> </span>
<span class="line">      <span class="token key atrule">RABBITMQ_ERLANG_COOKIE</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>RABBITMQ_ERLANG_COOKIE<span class="token punctuation">}</span> </span>
<span class="line">      <span class="token comment"># auth cretendials</span></span>
<span class="line">      <span class="token key atrule">RABBITMQ_DEFAULT_USER</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>RABBITMQ_DEFAULT_USER<span class="token punctuation">}</span></span>
<span class="line">      <span class="token key atrule">RABBITMQ_DEFAULT_PASS</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>RABBITMQ_DEFAULT_PASS<span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment"># map external ports to this specific container&#39;s internal ports</span></span>
<span class="line">    <span class="token key atrule">ports</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> 5672<span class="token punctuation">:</span><span class="token number">5672</span></span>
<span class="line">      <span class="token punctuation">-</span> 15672<span class="token punctuation">:</span><span class="token number">15672</span></span>
<span class="line">    <span class="token comment"># can only start if web service is running </span></span>
<span class="line">    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span> </span>
<span class="line">      <span class="token punctuation">-</span> web</span>
<span class="line"></span>
<span class="line"><span class="token key atrule">volumes</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">postgres_data</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">static_volume</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">rabbitmq_logs</span><span class="token punctuation">:</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>One of the highlights of Docker Compose is the <code>depends_on</code> directive. From the above script, we can deduce that:</p><ul><li>Nginx depends on web</li><li>Web depends on DB</li><li>RabbitMQ depends on web</li></ul><p>With this setup, DB is the first service we need to start up, followed by web, then RabbitMQ, and lastly, Nginx.</p><p>When you decide to terminate the environment and stop the running containers, the order will be in reverse — that is, Nginx will be the first to run and DB the last.</p><hr><h2 id="building-and-running-docker-compose-scripts" tabindex="-1"><a class="header-anchor" href="#building-and-running-docker-compose-scripts"><span>Building and running Docker Compose scripts</span></a></h2><p>Just like a Docker script, the Docker Compose script has a similar structure in that it has <code>build</code> and <code>run</code> commands.</p>`,8)),s("p",null,[n[114]||(n[114]=e("The ")),n[115]||(n[115]=s("code",null,"build",-1)),n[116]||(n[116]=e(" command will build all the images defined under ")),n[117]||(n[117]=s("code",null,"services",-1)),n[118]||(n[118]=e(" within the ")),a(i,{icon:"iconfont icon-yaml"}),n[119]||(n[119]=s("code",null,"docker-compose.yml",-1)),n[120]||(n[120]=e(" in the order of the dependency hierarchy."))]),n[194]||(n[194]=l(`<p>Luckily, there is also a command that combines both <code>build</code> and <code>run</code> — this is called <code>up</code>. To run this command, execute the command here:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">docker-compose</span> up</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>You can also add the <code>--build</code> flag. This is useful when you&#39;ve run this command before and want to build new images.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">docker-compose</span> up <span class="token parameter variable">--build</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Once you&#39;re done with the containers, you may wish to shut them all down and remove any static storage they were using, such as the PostgreSQL static volume. To do this, run the following command:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">docker-compose</span> down <span class="token parameter variable">-V</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>The <code>-V</code> flag stands for volumes. This ensures that the containers and attached volumes are shut down.</p>`,7)),s("p",null,[n[122]||(n[122]=e("Follow the official ")),s("a",M,[a(i,{icon:"fa-brands fa-docker"}),n[121]||(n[121]=e("documentation"))]),n[123]||(n[123]=e(" to learn more about various Docker Compose commands and their usage."))]),n[195]||(n[195]=s("hr",null,null,-1)),n[196]||(n[196]=s("h2",{id:"supporting-files-in-a-django-application",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#supporting-files-in-a-django-application"},[s("span",null,"Supporting files in a Django application")])],-1)),s("p",null,[n[124]||(n[124]=e("There are some files referenced in the script above that make the file less bulky, thus making code management easier. These include the ")),a(i,{icon:"fas fa-file-lines"}),n[125]||(n[125]=s("code",null,".env",-1)),n[126]||(n[126]=e(" file, the Nginx's Dockerfile and config files. Below are samples of what each entails:"))]),s("h3",B,[s("a",z,[s("span",null,[a(i,{icon:"fas fa-file-lines"}),n[127]||(n[127]=s("code",null,".env",-1)),n[128]||(n[128]=e(" file"))])])]),n[197]||(n[197]=l(`<p>The main purpose of this file is to store variables, such as keys and credentials. Environment variables are a set of key-value pairs for the current user environment. This is a safe coding practice that ensures your personal keys are not exposed.</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title=".env"><span>.env</span></div><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token comment">#Django</span></span>
<span class="line"><span class="token assign-left variable">SECRET_KEY</span><span class="token operator">=</span><span class="token string">&quot;my_secret_key&quot;</span></span>
<span class="line"><span class="token assign-left variable">DEBUG</span><span class="token operator">=</span><span class="token number">1</span></span>
<span class="line"><span class="token assign-left variable">ALLOWED_HOSTS</span><span class="token operator">=</span>localhost <span class="token number">127.0</span>.0.1 <span class="token number">0.0</span>.0.0 <span class="token punctuation">[</span>::1<span class="token punctuation">]</span> *</span>
<span class="line"></span>
<span class="line"><span class="token comment"># database access credentials</span></span>
<span class="line"><span class="token assign-left variable">ENGINE</span><span class="token operator">=</span>django.db.backend.postgresql</span>
<span class="line"><span class="token assign-left variable">DB_NAME</span><span class="token operator">=</span>testdb</span>
<span class="line"><span class="token assign-left variable">POSTGRES_USER</span><span class="token operator">=</span>testuser</span>
<span class="line"><span class="token assign-left variable">POSTGRES_PASSWORD</span><span class="token operator">=</span>testpassword</span>
<span class="line"><span class="token assign-left variable">DB_HOST</span><span class="token operator">=</span>db</span>
<span class="line"><span class="token assign-left variable">DB_PORT</span><span class="token operator">=</span><span class="token number">5432</span> <span class="token assign-left variable">APP_PORT</span><span class="token operator">=</span><span class="token number">8000</span></span>
<span class="line"><span class="token comment">#superuser details </span></span>
<span class="line"><span class="token assign-left variable">DJANGO_SU_NAME</span><span class="token operator">=</span>test</span>
<span class="line"><span class="token assign-left variable">DJANGO_SU_EMAIL</span><span class="token operator">=</span>admin12@admin.com</span>
<span class="line"><span class="token assign-left variable">DJANGO_SU_PASSWORD</span><span class="token operator">=</span>mypass123 </span>
<span class="line"><span class="token comment">#rabbitmq</span></span>
<span class="line">RABBITMQ_ERLANG_COOKIE: test_cookie</span>
<span class="line">RABBITMQ_DEFAULT_USER: default_user</span>
<span class="line">RABBITMQ_DEFAULT_PASS: sample_password</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="the-nginx-dockerfile" tabindex="-1"><a class="header-anchor" href="#the-nginx-dockerfile"><span>The Nginx Dockerfile</span></a></h3>`,3)),s("p",null,[n[129]||(n[129]=e("This is hosted in an ")),a(i,{icon:"fas fa-folder-open"}),n[130]||(n[130]=s("code",null,"nginx",-1)),n[131]||(n[131]=e(" folder within the root directory. It mainly contains two directives: the image name pulled from Dockerhub; and the location of the configuration files."))]),s("p",null,[n[132]||(n[132]=e("Create a folder with the name ")),a(i,{icon:"fas fa-folder-open"}),n[133]||(n[133]=s("code",null,"nginx",-1)),n[134]||(n[134]=e(". In this folder, create another ")),a(i,{icon:"fa-brands fa-docker"}),n[135]||(n[135]=s("code",null,"Dockerfile",-1)),n[136]||(n[136]=e(" and add the code snippet below:"))]),n[198]||(n[198]=l(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="Dockerfile"><span>Dockerfile</span></div><div class="language-docker line-numbers-mode" data-highlighter="prismjs" data-ext="docker"><pre><code class="language-docker"><span class="line"><span class="token instruction"><span class="token keyword">FROM</span> nginx:1.19.0-alpine</span></span>
<span class="line"></span>
<span class="line"><span class="token instruction"><span class="token keyword">RUN</span> rm /etc/nginx/conf.d/default.conf</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">COPY</span> nginx.conf /etc/nginx/conf.d</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="the-nginx-config-file" tabindex="-1"><a class="header-anchor" href="#the-nginx-config-file"><span>The Nginx config file</span></a></h3>`,2)),s("p",null,[n[137]||(n[137]=e("This is where you write the Nginx configuration logic. This file should be located in the same folder — the ")),a(i,{icon:"fas fa-folder-open"}),n[138]||(n[138]=s("code",null,"nginx",-1)),n[139]||(n[139]=e(" folder, as the Nginx Dockerfile."))]),s("p",null,[n[140]||(n[140]=e("This config file dictates how the Nginx container will behave. Below is a sample script that lives in a file typically named ")),a(i,{icon:"iconfont icon-nginx"}),n[141]||(n[141]=s("code",null,"nginx.conf",-1)),n[142]||(n[142]=e("."))]),n[199]||(n[199]=l(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="nginx.conf"><span>nginx.conf</span></div><div class="language-conf line-numbers-mode" data-highlighter="prismjs" data-ext="conf"><pre><code class="language-conf"><span class="line">upstream microservice { # name of our web image</span>
<span class="line">    server web:8000; # default django port</span>
<span class="line">}</span>
<span class="line"></span>
<span class="line">server {</span>
<span class="line">    listen 80; # default external port. Anything coming from port 80 will go through NGINX</span>
<span class="line">    location / { </span>
<span class="line">        proxy_pass http://microservice_app;</span>
<span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span>
<span class="line">        proxy_set_header Host $host;</span>
<span class="line">        proxy_redirect off;</span>
<span class="line">    }</span>
<span class="line">    location /static/ {</span>
<span class="line">        alias /home/app/microservice/static/; # where our static files are hosted </span>
<span class="line">    }</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><hr><h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="#conclusion"><span>Conclusion</span></a></h2><p>Docker is a convenient tool for backend developers. The Docker tips and guidelines in this tutorial are vital for DevOps and full-stack developer positions in any organization.</p><p>This tutorial demonstrates how you can setup your Docker in your Django application, build a Docker image and run an instance of the image as a container.</p>`,5)),s("p",null,[n[143]||(n[143]=e("We also discussed how to use the ")),n[144]||(n[144]=s("code",null,"docker compose",-1)),n[145]||(n[145]=e(" commands, through the ")),a(i,{icon:"iconfont icon-yaml"}),n[146]||(n[146]=s("code",null,"Docker-compose.yml",-1)),n[147]||(n[147]=e(" file to build and run multiple containers in a specific order."))]),s("p",null,[n[150]||(n[150]=e("If you'll like to learn more about Docker and integrate it in your applications, this ")),s("a",U,[a(i,{icon:"fas fa-docker"}),n[148]||(n[148]=e("documentation"))]),n[151]||(n[151]=e(" is a good resource to explore. You can also explore how to integrate Docker with other tools ")),s("a",H,[a(i,{icon:"fas fa-globe"}),n[149]||(n[149]=e("here"))]),n[152]||(n[152]=e("."))]),s("p",null,[n[154]||(n[154]=e("The ")),s("a",W,[a(i,{icon:"iconfont icon-django"}),n[153]||(n[153]=e("Django documentation"))]),n[155]||(n[155]=e(" is a useful resource if you're also interested in honing or building your skills in Django."))]),n[200]||(n[200]=s("p",null,"Thanks for reading!",-1)),b(" TODO: add ARTICLE CARD "),a(r,d(c({title:"Dockerizing a Django app",desc:"Docker isolates your application and its dependencies and ensures consistent runtime protocols regardless of server configurations.",link:"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/dockerizing-django-app.html",logo:"/assets/image/blog.logrocket.com/favicon.png",background:"rgba(112,76,182,0.2)"})),null,16)])}const $=g(y,[["render",G]]),Q=JSON.parse('{"path":"/blog.logrocket.com/dockerizing-a-django-app.html","title":"Dockerizing a Django app","lang":"en-US","frontmatter":{"lang":"en-US","title":"Dockerizing a Django app","description":"Article(s) > Dockerizing a Django app","icon":"iconfont icon-django","category":["Python","Django","DevOps","Docker","Article(s)"],"tag":["blog","blog.logrocket.com","python","py","django","py-django","devops","docker"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Dockerizing a Django app\\",\\"image\\":[\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/dockerizing-a-django-app/banner.png\\"],\\"datePublished\\":\\"2022-04-08T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kimaru Thagana\\",\\"url\\":\\"https://blog.logrocket.com/author/kimaruthagana/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/dockerizing-a-django-app.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Dockerizing a Django app"}],["meta",{"property":"og:description","content":"Article(s) > Dockerizing a Django app"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/dockerizing-a-django-app/banner.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/dockerizing-a-django-app/banner.png"}],["meta",{"name":"twitter:image:alt","content":"Dockerizing a Django app"}],["meta",{"property":"article:author","content":"Kimaru Thagana"}],["meta",{"property":"article:tag","content":"docker"}],["meta",{"property":"article:tag","content":"devops"}],["meta",{"property":"article:tag","content":"py-django"}],["meta",{"property":"article:tag","content":"django"}],["meta",{"property":"article:tag","content":"py"}],["meta",{"property":"article:tag","content":"python"}],["meta",{"property":"article:tag","content":"blog.logrocket.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2022-04-08T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Dockerizing a Django app"},{"property":"og:description","content":"Dockerizing a Django app"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/dockerizing-django-app.html"}]],"prev":"/programming/py-django/articles/README.md","date":"2022-04-08T00:00:00.000Z","isOriginal":false,"author":[{"name":"Kimaru Thagana","url":"https://blog.logrocket.com/author/kimaruthagana/"}],"cover":"/assets/image/blog.logrocket.com/dockerizing-a-django-app/banner.png"},"git":{},"readingTime":{"minutes":10.89,"words":3267},"filePathRelative":"blog.logrocket.com/dockerizing-a-django-app.md","copyright":{"author":"Kimaru Thagana"}}');export{$ as comp,Q as data};
