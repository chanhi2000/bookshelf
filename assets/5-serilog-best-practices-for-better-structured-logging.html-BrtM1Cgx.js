import{_ as k}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as m,d as a,f as e,b as l,t as v,n as b,g as y,w as t,e as s,r as i,o as f}from"./app-BVguHYKu.js";const q={},h={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},S={class:"table-of-contents"},x={href:"https://serilog.net/",target:"_blank",rel:"noopener noreferrer"},I={href:"https://github.com/serilog/serilog/wiki/Provided-Sinks",target:"_blank",rel:"noopener noreferrer"},C={href:"https://github.com/serilog-contrib/serilog-sinks-applicationinsights",target:"_blank",rel:"noopener noreferrer"},T={href:"https://github.com/serilog/serilog-sinks-console",target:"_blank",rel:"noopener noreferrer"},R={href:"https://github.com/datalust/serilog-sinks-seq",target:"_blank",rel:"noopener noreferrer"},L={href:"https://github.com/serilog/serilog/wiki/Enrichment",target:"_blank",rel:"noopener noreferrer"},P={href:"https://github.com/serilog/serilog/wiki/Enrichment#the-logcontext",target:"_blank",rel:"noopener noreferrer"},j={href:"https://datalust.co/seq",target:"_blank",rel:"noopener noreferrer"},B={href:"https://docker.com/",target:"_blank",rel:"noopener noreferrer"},N={href:"https://youtu.be/mT8ZkXafuZk",target:"_blank",rel:"noopener noreferrer"};function A(c,n){const u=i("VPCard"),p=i("router-link"),d=i("SiteInfo"),o=i("VPIcon"),r=i("RouteLink"),g=i("VidStack");return f(),m("div",null,[a("h1",h,[a("a",w,[a("span",null,v(c.$frontmatter.title)+" 관련",1)])]),e(u,b(y({title:"C# > Article(s)",desc:"Article(s)",link:"/programming/cs/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),a("nav",S,[a("ul",null,[a("li",null,[e(p,{to:"#use-the-configuration-system"},{default:t(()=>n[0]||(n[0]=[s("Use The Configuration System")])),_:1,__:[0]})]),a("li",null,[e(p,{to:"#use-serilog-request-logging"},{default:t(()=>n[1]||(n[1]=[s("Use Serilog Request Logging")])),_:1,__:[1]})]),a("li",null,[e(p,{to:"#enrich-your-logs-with-correlationid"},{default:t(()=>n[2]||(n[2]=[s("Enrich Your Logs With CorrelationId")])),_:1,__:[2]})]),a("li",null,[e(p,{to:"#log-important-application-events"},{default:t(()=>n[3]||(n[3]=[s("Log Important Application Events")])),_:1,__:[3]})]),a("li",null,[e(p,{to:"#use-seq-for-local-development"},{default:t(()=>n[4]||(n[4]=[s("Use Seq for Local Development")])),_:1,__:[4]})]),a("li",null,[e(p,{to:"#summary"},{default:t(()=>n[5]||(n[5]=[s("Summary")])),_:1,__:[5]})])])]),n[69]||(n[69]=a("hr",null,null,-1)),e(d,{name:"5 Serilog Best Practices For Better Structured Logging",desc:"Serilog is a structured logging library for .NET. It's also my preferred logging library in the projects I'm developing. I want to share 5 practical tips for better structured logging with Serilog.",url:"https://milanjovanovic.tech/blog/5-serilog-best-practices-for-better-structured-logging/",logo:"https://milanjovanovic.tech/profile_favicon.png",preview:"https://milanjovanovic.tech/blog-covers/mnw_068.png"}),a("p",null,[n[8]||(n[8]=s(".")),a("a",x,[e(o,{icon:"fas fa-globe"}),n[6]||(n[6]=s("Serilog"))]),n[9]||(n[9]=s(" is a ")),e(r,{to:"/milanjovanovic.tech/structured-logging-in-asp-net-core-with-serilog.html"},{default:t(()=>n[7]||(n[7]=[s("structured logging")])),_:1,__:[7]}),n[10]||(n[10]=s(" library for .NET."))]),n[70]||(n[70]=a("p",null,"It's also my preferred logging library in the projects I'm developing.",-1)),a("p",null,[n[14]||(n[14]=s("Serilog supports many logging destinations called ")),a("a",I,[n[11]||(n[11]=s("Sinks. (")),e(o,{icon:"iconfont icon-github"}),n[12]||(n[12]=a("code",null,"serilog/serilog",-1)),n[13]||(n[13]=s(")"))])]),a("p",null,[n[18]||(n[18]=s("The log destinations range from console and file sinks to managed logging services such as ")),a("a",C,[n[15]||(n[15]=s("Application Insights. (")),e(o,{icon:"iconfont icon-github"}),n[16]||(n[16]=a("code",null,"serilog-contrib/serilog-sinks-applicationinsights",-1)),n[17]||(n[17]=s(")"))])]),n[71]||(n[71]=l(`<p>Today, I want to share 5 practical tips for better structured logging with Serilog.</p><hr><h2 id="use-the-configuration-system" tabindex="-1"><a class="header-anchor" href="#use-the-configuration-system"><span>Use The Configuration System</span></a></h2><p>There are two ways you can configure Serilog in ASP.NET Core:</p><ul><li>Fluent API</li><li>Configuration system</li></ul><p>The Fluent API allows you to write code and easily configure Serilog. The downside is you are hardcoding your configuration. Any configuration changes require deploying a new version.</p><p>I prefer using the ASP.NET configuration system to set up Serilog. The benefit is you can change the logging configuration without redeploying your application.</p><p>You&#39;ll need to install the <code>Serilog.Settings.Configuration</code> library.</p><p>This allows you to configure Serilog using the configuration system:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">builder<span class="token punctuation">.</span>Host<span class="token punctuation">.</span><span class="token function">UseSerilog</span><span class="token punctuation">(</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> loggerConfig<span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line">    loggerConfig<span class="token punctuation">.</span>ReadFrom<span class="token punctuation">.</span><span class="token function">Configuration</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>Configuration<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,10)),a("p",null,[n[25]||(n[25]=s("Here's a Serilog configuration with ")),a("a",T,[n[19]||(n[19]=s("Console (")),e(o,{icon:"iconfont icon-github"}),n[20]||(n[20]=a("code",null,"serilog/serilog-sinks-console",-1)),n[21]||(n[21]=s(")"))]),n[26]||(n[26]=s(" and ")),a("a",R,[n[22]||(n[22]=s("Seq (")),e(o,{icon:"iconfont icon-github"}),n[23]||(n[23]=a("code",null,"datalust/serilog-sinks-seq",-1)),n[24]||(n[24]=s(")"))]),n[27]||(n[27]=s(" sinks."))]),a("p",null,[n[31]||(n[31]=s("We also configure a few ")),a("a",L,[n[28]||(n[28]=s("Serilog enrichers (")),e(o,{icon:"iconfont icon-github"}),n[29]||(n[29]=a("code",null,"serilog/serilog",-1)),n[30]||(n[30]=s(")"))]),n[32]||(n[32]=s("to enrich application logs with extra information."))]),n[72]||(n[72]=l(`<div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json"><pre><code class="language-json"><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;Serilog&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;Using&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;Serilog.Sinks.Console&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Serilog.Sinks.Seq&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;MinimumLevel&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">&quot;Default&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Information&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;Override&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">&quot;Microsoft&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Information&quot;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;WriteTo&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">      <span class="token punctuation">{</span> <span class="token property">&quot;Name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Console&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">&quot;Name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Seq&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token property">&quot;Args&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">&quot;serverUrl&quot;</span><span class="token operator">:</span> <span class="token string">&quot;http://localhost:5341&quot;</span> <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;Enrich&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;FromLogContext&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;WithMachineName&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;WithThreadId&quot;</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="use-serilog-request-logging" tabindex="-1"><a class="header-anchor" href="#use-serilog-request-logging"><span>Use Serilog Request Logging</span></a></h2><p>You can install the <code>Serilog.AspNetCore</code> library to add Serilog logging for the ASP.NET Core request pipeline. It adds ASP.NET&#39;s internal operations to the same Serilog sinks as your application events.</p><p>All you need to do is call the <code>UseSerilogRequestLogging</code> method:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">app<span class="token punctuation">.</span><span class="token function">UseSerilogRequestLogging</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>The <code>SourceContext</code> for these structured logs is <code>Serilog.AspNetCore.RequestLoggingMiddleware</code>.</p><p>Here&#39;s an example structured log produced by this middleware:</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json"><pre><code class="language-json"><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;@t&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2023-12-16T00:00:00.0000000Z&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;@mt&quot;</span><span class="token operator">:</span> <span class="token string">&quot;HTTP {RequestMethod} {RequestPath} responded {StatusCode} in {Elapsed:0.0000} ms&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;@m&quot;</span><span class="token operator">:</span> <span class="token string">&quot;HTTP POST /api/users responded 409 in 24.7928 ms&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;@i&quot;</span><span class="token operator">:</span> <span class="token string">&quot;37aa1435&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;@r&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;24.7928&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;@tr&quot;</span><span class="token operator">:</span> <span class="token string">&quot;61a449a8606fdb64e88d6c64b7b7354e&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;@sp&quot;</span><span class="token operator">:</span> <span class="token string">&quot;163ed90674cb12f6&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;ConnectionId&quot;</span><span class="token operator">:</span> <span class="token string">&quot;0HMVSP0L8FVEN&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;CorrelationId&quot;</span><span class="token operator">:</span> <span class="token string">&quot;0HMVSP0L8FVEN:0000000B&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;Elapsed&quot;</span><span class="token operator">:</span> <span class="token number">24.792778</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;RequestId&quot;</span><span class="token operator">:</span> <span class="token string">&quot;0HMVSP0L8FVEN:0000000B&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;RequestMethod&quot;</span><span class="token operator">:</span> <span class="token string">&quot;POST&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;RequestPath&quot;</span><span class="token operator">:</span> <span class="token string">&quot;/api/users&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;SourceContext&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Serilog.AspNetCore.RequestLoggingMiddleware&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;StatusCode&quot;</span><span class="token operator">:</span> <span class="token number">409</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="enrich-your-logs-with-correlationid" tabindex="-1"><a class="header-anchor" href="#enrich-your-logs-with-correlationid"><span>Enrich Your Logs With CorrelationId</span></a></h2><p>How can you track all the logs belonging to the same request?</p><p>You can add a <code>CorrelationId</code> property to your structured logs.</p><p>This also works across multiple applications. You need to pass the <code>CorrelationId</code> using an HTTP header. For example, you could use a custom <code>X-Correlation-Id</code> header.</p>`,14)),a("p",null,[n[37]||(n[37]=s("In the ")),n[38]||(n[38]=a("code",null,"RequestContextLoggingMiddleware",-1)),n[39]||(n[39]=s(", I'm adding the ")),n[40]||(n[40]=a("code",null,"CorrelationId",-1)),n[41]||(n[41]=s(" to the Serilog ")),a("a",P,[n[33]||(n[33]=a("code",null,"LogContext",-1)),n[34]||(n[34]=s(" (")),e(o,{icon:"iconfont icon-github"}),n[35]||(n[35]=a("code",null,"serilog/serilog",-1)),n[36]||(n[36]=s(")"))]),n[42]||(n[42]=s(". This will make it available to all logs created during this application request."))]),n[73]||(n[73]=l(`<div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestContextLoggingMiddleware</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">string</span></span> CorrelationIdHeaderName <span class="token operator">=</span> <span class="token string">&quot;X-Correlation-Id&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">RequestDelegate</span> _next<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token function">RequestContextLoggingMiddleware</span><span class="token punctuation">(</span><span class="token class-name">RequestDelegate</span> next<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        _next <span class="token operator">=</span> next<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">Task</span> <span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token class-name">HttpContext</span> context<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">string</span></span> correlationId <span class="token operator">=</span> <span class="token function">GetCorrelationId</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">using</span> <span class="token punctuation">(</span>LogContext<span class="token punctuation">.</span><span class="token function">PushProperty</span><span class="token punctuation">(</span><span class="token string">&quot;CorrelationId&quot;</span><span class="token punctuation">,</span> correlationId<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> _next<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">GetCorrelationId</span><span class="token punctuation">(</span><span class="token class-name">HttpContext</span> context<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Headers<span class="token punctuation">.</span><span class="token function">TryGetValue</span><span class="token punctuation">(</span></span>
<span class="line">            CorrelationIdHeaderName<span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token class-name">StringValues</span> correlationId<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> correlationId<span class="token punctuation">.</span><span class="token function">FirstOrDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">??</span> context<span class="token punctuation">.</span>TraceIdentifier<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),a("p",null,[n[44]||(n[44]=s("I like to create an extension method for adding the ")),e(r,{to:"/milanjovanovic.tech/3-ways-to-create-middleware-in-asp-net-core.html"},{default:t(()=>n[43]||(n[43]=[s("middleware.")])),_:1,__:[43]}),n[45]||(n[45]=s(" The ")),n[46]||(n[46]=a("code",null,"UseRequestContextLogging",-1)),n[47]||(n[47]=s(" method will add the ")),n[48]||(n[48]=a("code",null,"RequestContextLoggingMiddleware",-1)),n[49]||(n[49]=s(" to the request pipeline. Note that the order of registering middleware is important. If you want the ")),n[50]||(n[50]=a("code",null,"CorrelationId",-1)),n[51]||(n[51]=s(" in all your logs, you want to place this middleware at the start."))]),n[74]||(n[74]=l(`<div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">IApplicationBuilder</span> <span class="token function">UseRequestContextLogging</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token keyword">this</span> <span class="token class-name">IApplicationBuilder</span> app<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    app<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">UseMiddleware</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>RequestContextLoggingMiddleware<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> app<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="log-important-application-events" tabindex="-1"><a class="header-anchor" href="#log-important-application-events"><span>Log Important Application Events</span></a></h2><p>In general, I try to log important events in my application. This includes current request information, errors, failures, unexpected values, branching points, etc.</p>`,4)),a("p",null,[n[53]||(n[53]=s("I'm a proponent of using the ")),e(r,{to:"/milanjovanovic.tech/functional-error-handling-in-dotnet-with-the-result-pattern.html"},{default:t(()=>n[52]||(n[52]=[s("Result pattern")])),_:1,__:[52]}),n[54]||(n[54]=s(" to express application failures. So, having a custom middleware to log request processing results is important."))]),a("p",null,[n[56]||(n[56]=s("Some developers prefer using exceptions to achieve the same functionality. I disagree with this. Using exceptions for flow control is a bad practice. But still, don't forget to add a ")),e(r,{to:"/milanjovanovic.tech/global-error-handling-in-aspnetcore-8.html"},{default:t(()=>n[55]||(n[55]=[s("global exception handler")])),_:1,__:[55]}),n[57]||(n[57]=s(" for unhandled exceptions."))]),a("p",null,[n[59]||(n[59]=s("If you're using the ")),e(r,{to:"/milanjovanovic.tech/cqrs-pattern-with-mediatr.html"},{default:t(()=>n[58]||(n[58]=[s("CQRS pattern with MediatR")])),_:1,__:[58]}),n[60]||(n[60]=s(", you can easily add logging for all application requests."))]),n[75]||(n[75]=l(`<p>In the <code>RequestLoggingPipelineBehavior</code> I&#39;m pushing the <code>Error</code> property to the <code>LogContext</code>. The error object is deconstructed into a JSON value in the structured log. This lets me filter my logs based on the error details.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">internal</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">RequestLoggingPipelineBehavior<span class="token punctuation">&lt;</span>TRequest<span class="token punctuation">,</span> TResponse<span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IPipelineBehavior<span class="token punctuation">&lt;</span>TRequest<span class="token punctuation">,</span> TResponse<span class="token punctuation">&gt;</span></span></span></span>
<span class="line">    <span class="token keyword">where</span> <span class="token class-name">TRequest</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token keyword">class</span></span></span>
<span class="line">    <span class="token keyword">where</span> <span class="token class-name">TResponse</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Result</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">ILogger</span> _logger<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token function">RequestLoggingPipelineBehavior</span><span class="token punctuation">(</span><span class="token class-name">ILogger</span> logger<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        _logger <span class="token operator">=</span> logger<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>TResponse<span class="token punctuation">&gt;</span></span> <span class="token function">Handle</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token class-name">TRequest</span> request<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">RequestHandlerDelegate<span class="token punctuation">&lt;</span>TResponse<span class="token punctuation">&gt;</span></span> next<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">CancellationToken</span> cancellationToken<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">string</span></span> requestName <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">TRequest</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        _logger<span class="token punctuation">.</span><span class="token function">LogInformation</span><span class="token punctuation">(</span></span>
<span class="line">            <span class="token string">&quot;Processing request {RequestName}&quot;</span><span class="token punctuation">,</span> requestName<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">TResponse</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>IsSuccess<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            _logger<span class="token punctuation">.</span><span class="token function">LogInformation</span><span class="token punctuation">(</span></span>
<span class="line">                <span class="token string">&quot;Completed request {RequestName}&quot;</span><span class="token punctuation">,</span> requestName<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">else</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">using</span> <span class="token punctuation">(</span>LogContext<span class="token punctuation">.</span><span class="token function">PushProperty</span><span class="token punctuation">(</span><span class="token string">&quot;Error&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span>Error<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">{</span></span>
<span class="line">                _logger<span class="token punctuation">.</span><span class="token function">LogError</span><span class="token punctuation">(</span></span>
<span class="line">                    <span class="token string">&quot;Completed request {RequestName} with error&quot;</span><span class="token punctuation">,</span> requestName<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> result<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="use-seq-for-local-development" tabindex="-1"><a class="header-anchor" href="#use-seq-for-local-development"><span>Use Seq for Local Development</span></a></h2>`,4)),a("p",null,[n[62]||(n[62]=s(".")),a("a",j,[e(o,{icon:"fas fa-globe"}),n[61]||(n[61]=s("Seq"))]),n[63]||(n[63]=s(" is a self-hosted search, analysis, and alerting server built for structured log data. It's free to use for local development. It offers advanced search and filtering capabilities on the structured log data."))]),a("p",null,[n[65]||(n[65]=s("You can spin up a Seq instance in a ")),a("a",B,[e(o,{icon:"fa-brands fa-docker"}),n[64]||(n[64]=s("Docker"))]),n[66]||(n[66]=s(" container:"))]),n[76]||(n[76]=l(`<div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml"><pre><code class="language-yaml"><span class="line"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&#39;3.4&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token key atrule">services</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">seq</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">image</span><span class="token punctuation">:</span> datalust/seq<span class="token punctuation">:</span>latest</span>
<span class="line">    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> seq</span>
<span class="line">    <span class="token key atrule">environment</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> ACCEPT_EULA=Y</span>
<span class="line">    <span class="token key atrule">ports</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> 5341<span class="token punctuation">:</span><span class="token number">5341</span></span>
<span class="line">      <span class="token punctuation">-</span> 8081<span class="token punctuation">:</span><span class="token number">80</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can start filtering data when you configure Serilog to write application logs to the Seq instance.</p><figure><img src="https://milanjovanovic.tech/blogs/mnw_068/seq.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h2 id="summary" tabindex="-1"><a class="header-anchor" href="#summary"><span>Summary</span></a></h2><p>Structured logs follow follow the same structure. And since structured logs are machine-readable, you can search them for specific information. Structured logs provide more context and details about application errors. They make it easier to identify and fix problems.</p><p>You can use Serilog&#39;s powerful <code>LogContext</code> to enrich your logs with a <code>CorrelationId</code>. This lets you easily track all logs related to a single application request.</p><p>When you have structured logging set up, you&#39;ll want to search and analyze your logs. Seq is an excellent tool for this that you can use for local development.</p>`,8)),a("p",null,[n[68]||(n[68]=s("If you want to get started with Seq, check out my ")),a("a",N,[e(o,{icon:"fa-brands fa-youtube"}),n[67]||(n[67]=s("beginner Seq tutorial."))])]),e(g,{src:"youtube/mT8ZkXafuZk"}),n[77]||(n[77]=a("p",null,"Thanks for reading, and stay awesome!",-1))])}const F=k(q,[["render",A]]),V=JSON.parse('{"path":"/milanjovanovic.tech/5-serilog-best-practices-for-better-structured-logging.html","title":"5 Serilog Best Practices For Better Structured Logging","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"5 Serilog Best Practices For Better Structured Logging","description":"Article(s) > 5 Serilog Best Practices For Better Structured Logging","icon":"iconfont icon-csharp","category":["C#","DotNet","Article(s)"],"tag":["blog","milanjovanovic.tech","cs","c#","csharp","dotnet"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"5 Serilog Best Practices For Better Structured Logging\\",\\"image\\":[\\"https://milanjovanovic.tech/blogs/mnw_068/seq.png\\"],\\"datePublished\\":\\"2023-12-16T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Milan Jovanović\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/5-serilog-best-practices-for-better-structured-logging.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"5 Serilog Best Practices For Better Structured Logging"}],["meta",{"property":"og:description","content":"Article(s) > 5 Serilog Best Practices For Better Structured Logging"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://milanjovanovic.tech/blog-covers/mnw_068.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://milanjovanovic.tech/blog-covers/mnw_068.png"}],["meta",{"name":"twitter:image:alt","content":"5 Serilog Best Practices For Better Structured Logging"}],["meta",{"property":"article:author","content":"Milan Jovanović"}],["meta",{"property":"article:tag","content":"dotnet"}],["meta",{"property":"article:tag","content":"csharp"}],["meta",{"property":"article:tag","content":"c#"}],["meta",{"property":"article:tag","content":"cs"}],["meta",{"property":"article:tag","content":"milanjovanovic.tech"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2023-12-16T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > 5 Serilog Best Practices For Better Structured Logging"},{"property":"og:description","content":"5 Serilog Best Practices For Better Structured Logging"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/5-serilog-best-practices-for-better-structured-logging.html"}]],"prev":"/programming/cs/articles/README.md","date":"2023-12-16T00:00:00.000Z","isOriginal":false,"author":"Milan Jovanović","cover":"https://milanjovanovic.tech/blog-covers/mnw_068.png"},"git":{},"readingTime":{"minutes":4.22,"words":1266},"filePathRelative":"milanjovanovic.tech/5-serilog-best-practices-for-better-structured-logging.md","copyright":{"author":"Milan Jovanović"}}');export{F as comp,V as data};
