import{_ as v}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as m,d as s,f as e,b as u,a as g,t as h,n as l,g as i,w as p,e as a,r,o as b}from"./app-BVguHYKu.js";const f={},y={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},S={class:"table-of-contents"},j={href:"https://svelte.dev/",target:"_blank",rel:"noopener noreferrer"},x={class:"hint-container info"},q={href:"https://svelte-5-preview.vercel.app/docs/introduction",target:"_blank",rel:"noopener noreferrer"},T={href:"https://github.com/arackaf/svelte-5-intro-blog",target:"_blank",rel:"noopener noreferrer"},I={href:"https://svelte.dev/docs/svelte-store",target:"_blank",rel:"noopener noreferrer"},$={href:"https://svelte.dev/blog/runes",target:"_blank",rel:"noopener noreferrer"},V={class:"hint-container info"};function P(k,n){const o=r("VPCard"),t=r("router-link"),d=r("SiteInfo"),c=r("VPIcon");return b(),m("div",null,[s("h1",y,[s("a",w,[s("span",null,h(k.$frontmatter.title)+" 관련",1)])]),e(o,l(i({title:"Svelte.js > Article(s)",desc:"Article(s)",link:"/programming/js-svelte/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",S,[s("ul",null,[s("li",null,[e(t,{to:"#the-plan"},{default:p(()=>n[0]||(n[0]=[a("The Plan")])),_:1,__:[0]})]),s("li",null,[e(t,{to:"#state"},{default:p(()=>n[1]||(n[1]=[a("State")])),_:1,__:[1]}),s("ul",null,[s("li",null,[e(t,{to:"#stores"},{default:p(()=>n[2]||(n[2]=[a("Stores")])),_:1,__:[2]})])])]),s("li",null,[e(t,{to:"#state-in-svelte-5"},{default:p(()=>n[3]||(n[3]=[a("State in Svelte 5")])),_:1,__:[3]}),s("ul",null,[s("li",null,[e(t,{to:"#runes"},{default:p(()=>n[4]||(n[4]=[a("Runes")])),_:1,__:[4]})]),s("li",null,[e(t,{to:"#what-about-stores"},{default:p(()=>n[5]||(n[5]=[a("What about stores?")])),_:1,__:[5]})])])]),s("li",null,[e(t,{to:"#props"},{default:p(()=>n[6]||(n[6]=[a("Props")])),_:1,__:[6]}),s("ul",null,[s("li",null,[e(t,{to:"#svelte-5-version"},{default:p(()=>n[7]||(n[7]=[a("Svelte 5 version")])),_:1,__:[7]})]),s("li",null,[e(t,{to:"#but-wait-there-s-more"},{default:p(()=>n[8]||(n[8]=[a("But wait, there’s more!")])),_:1,__:[8]})]),s("li",null,[e(t,{to:"#what-changed"},{default:p(()=>n[9]||(n[9]=[a("What changed?")])),_:1,__:[9]})])])]),s("li",null,[e(t,{to:"#effects"},{default:p(()=>n[10]||(n[10]=[a("Effects")])),_:1,__:[10]})]),s("li",null,[e(t,{to:"#interop"},{default:p(()=>n[11]||(n[11]=[a("Interop")])),_:1,__:[11]})]),s("li",null,[e(t,{to:"#parting-thoughts"},{default:p(()=>n[12]||(n[12]=[a("Parting thoughts")])),_:1,__:[12]})])])]),n[37]||(n[37]=s("hr",null,null,-1)),e(d,{name:"Introducing Svelte 5",desc:"Svelte 5 introduces significant improvements in reactivity, state management, and prop handling, maintaining its user-friendly Developer Experience (DX). ",url:"https://frontendmasters.com/blog/introducing-svelte-5/",logo:"https://frontendmasters.com/favicon.ico",preview:"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/3067"}),s("p",null,[s("a",j,[e(c,{icon:"iconfont icon-svelte"}),n[13]||(n[13]=a("Svelte"))]),n[14]||(n[14]=a(" has always been a delightful, simple, and fun framework to use. It’s a framework that’s always prioritized developer experience (DX), while producing a light and fast result with minimal JavaScript. It achieves this nice DX by giving users dirt simple idioms and a required compiler that makes everything work. Unfortunately, it used to be fairly easy to break Svelte’s reactivity. It doesn’t matter how fast a website is if it’s broken."))]),n[38]||(n[38]=s("p",null,[a("These reliability problems with reactivity are gone in Svelte 5. In this post, we’ll get into the exciting Svelte 5 release (in Beta at the time of this writing). Svelte is the latest framework to add "),s("strong",null,"signals"),a(" to power their reactivity. Svelte is now every bit as capable of handling robust web applications, with complex state, as alternatives like React and Solid. Best of all, it achieved this with only minimal hits to DX. It’s every bit as fun and easy to use as it was, but it’s now truly reliable, while still producing faster and lighter sites.")],-1)),s("div",x,[n[15]||(n[15]=s("p",{class:"hint-container-title"},"Article Series",-1)),e(o,l(i({title:"Introducing Svelte 5",desc:"Svelte 5 introduces significant improvements in reactivity, state management, and prop handling, maintaining its user-friendly Developer Experience (DX). ",link:"/frontendmasters.com/introducing-svelte-5.md",logo:"https://frontendmasters.com/favicon.ico",background:"rgba(188,75,52,0.2)"})),null,16),e(o,l(i({title:"Snippets in Svelte 5",desc:"Out with slots, in with snippets.",link:"/frontendmasters.com/snippets-in-svelte-5.md",logo:"https://frontendmasters.com/favicon.ico",background:"rgba(188,75,52,0.2)"})),null,16),e(o,l(i({title:"Fine-Grained Reactivity in Svelte 5",desc:"Svelte is already quite lightweight and fast, but Svelte 5 still overs big improvements in fine-grained reactivity, meaning re-rendering as absolutely little as possible. ",link:"/frontendmasters.com/fine-grained-reactivity-in-svelte-5.md",logo:"https://frontendmasters.com/favicon.ico",background:"rgba(188,75,52,0.2)"})),null,16)]),n[39]||(n[39]=s("p",null,"Let’s jump in!",-1)),n[40]||(n[40]=s("hr",null,null,-1)),n[41]||(n[41]=s("h2",{id:"the-plan",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#the-plan"},[s("span",null,"The Plan")])],-1)),n[42]||(n[42]=s("p",null,"Let’s go through various pieces of Svelte, look at the “old” way, and then see how Svelte 5 changes things for the better.",-1)),n[43]||(n[43]=s("p",null,"If you find this helpful, let me know, as I’d love to cover snippets and Svelte’s exciting new fine-grained reactivity.",-1)),n[44]||(n[44]=s("p",null,"As of this writing, Svelte 5 is late in the Beta phase. The API should be stable, although it’s certainly possible some new things might get added.",-1)),s("p",null,[n[19]||(n[19]=a("The docs are also still in beta, so ")),s("a",q,[e(c,{icon:"fas fa-globe"}),n[16]||(n[16]=a("here’s a preview URL for them"))]),n[20]||(n[20]=a(". Svelte 5 ")),n[21]||(n[21]=s("em",null,"might",-1)),n[22]||(n[22]=a(" be released when you read this, at which point these docs will be on the main Svelte page. If you’d like to see the code samples below in action, you can find them in")),s("a",T,[n[17]||(n[17]=a("this repo (")),e(c,{icon:"iconfont icon-github"}),n[18]||(n[18]=a(")"))]),n[23]||(n[23]=a("."))]),e(d,{name:"arackaf/svelte-5-intro-blog",desc:"Contribute to arackaf/svelte-5-intro-blog development by creating an account on GitHub.",url:"https://github.com/arackaf/svelte-5-intro-blog/",logo:"https://github.githubassets.com/favicons/favicon-dark.svg",preview:"https://opengraph.githubassets.com/7d50084613f9c4b82518ba668606d6e20d54b8db57186c3045a827ec4fa3f03c/arackaf/svelte-5-intro-blog"}),n[45]||(n[45]=u(`<hr><h2 id="state" tabindex="-1"><a class="header-anchor" href="#state"><span>State</span></a></h2><p>Effectively managing state is probably the most crucial task for any web framework, so let’s start there.</p><p>State used to be declared with regular, plain old variable declarations, using<code>let</code>.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Derived state was declared with a quirky, but technically valid JavaScript syntax of<code>$:</code>. For example:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token literal-property property">$</span><span class="token operator">:</span> doubleValue <span class="token operator">=</span> value <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Svelte’s compiler would (in theory) track changes to<code>value</code>, and update<code>doubleValue</code>accordingly. I say <em>in theory</em> since, depending on how creatively you used<code>value</code>, some of the re-assignments might not make it to all of the derived state that used it.</p><p>You could also put entire code blocks after<code>$:</code>and run arbitrary code. Svelte would look at what you were referencing inside the code block, and re-run it when those things changed.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token literal-property property">$</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Value is &quot;</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="stores" tabindex="-1"><a class="header-anchor" href="#stores"><span>Stores</span></a></h3>`,11)),s("p",null,[n[25]||(n[25]=a("Those variable declarations, and the special")),n[26]||(n[26]=s("code",null,"$:",-1)),n[27]||(n[27]=a("syntax was limited to Svelte components. If you wanted to build some portable state you could define anywhere, and pass around, you’d use a")),s("a",I,[e(c,{icon:"iconfont icon-svelte"}),n[24]||(n[24]=a("store"))]),n[28]||(n[28]=a("."))]),n[46]||(n[46]=u(`<p>We won’t go through the whole API, but here’s a minimal example of a store in action. We’ll define a piece of state that holds a number, and, based on what that number is at anytime, spit out a label indicating whether the number is even or odd. It’s silly, but it should show us how stores work.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> derived<span class="token punctuation">,</span> writable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;svelte/store&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createNumberInfo</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">initialValue</span><span class="token operator">:</span> number <span class="token operator">=</span> <span class="token number">0</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token function">writable</span><span class="token punctuation">(</span>initialValue<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> derivedInfo <span class="token operator">=</span> <span class="token function">derived</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token parameter">value</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">      value<span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">label</span><span class="token operator">:</span> value <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">?</span> <span class="token string">&quot;Odd number&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;Even number&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">update</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">newValue</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      value<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">numberInfo</span><span class="token operator">:</span> derivedInfo<span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Writable stores exist to write values to. <em>Derived</em> stores take one or more <em>other</em> stores, read their current values, and project a new payload. If you want to provide a mechanism to set a new value, close over what you need to. To consume a store’s value, prefix it with a<code>$</code>in a Svelte component. It’s not shown here, but there’s also a<code>subscribe</code>method on stores, and a<code>get</code>import. If the store returns an object with properties, you can either “dot through” to them, or you can use a reactive assignment (<code>$:</code>) to get those nested values. The example below shows both, and this distinction will come up later when we talk about interoperability between Svelte 4 and 5.</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre><code class="language-html"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"> </span>
<span class="line">  <span class="token keyword">import</span> <span class="token punctuation">{</span> createNumberInfo <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./numberInfoStore&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">let</span> store <span class="token operator">=</span> <span class="token function">createNumberInfo</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token literal-property property">$</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> numberInfo<span class="token punctuation">,</span> update <span class="token punctuation">}</span> <span class="token operator">=</span> store<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token literal-property property">$</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> label<span class="token punctuation">,</span> value <span class="token punctuation">}</span> <span class="token operator">=</span> $numberInfo<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>flex flex-col gap-2 p-5<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>{$numberInfo.value}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>{$numberInfo.label}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>{value}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>{label}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line">  &lt;button onclick={() =&gt; update($numberInfo.value + 1)}&gt;</span>
<span class="line">    Increment count</span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This was the <em>old</em> Svelte.</p><p>This is a post on the <em>new</em> Svelte, so let’s turn our attention there.</p><hr><h2 id="state-in-svelte-5" tabindex="-1"><a class="header-anchor" href="#state-in-svelte-5"><span>State in Svelte 5</span></a></h2><p>Things are substantially simpler in Svelte 5. Pretty much everything is managed by something new called “runes.” Let’s see what that means.</p><h3 id="runes" tabindex="-1"><a class="header-anchor" href="#runes"><span>Runes</span></a></h3>`,10)),s("p",null,[n[30]||(n[30]=a("Svelte 5 joins the increasing number of JavaScript frameworks that use the concept of ")),n[31]||(n[31]=s("em",null,"signals",-1)),n[32]||(n[32]=a(". There is a new feature called ")),n[33]||(n[33]=s("em",null,"runes",-1)),n[34]||(n[34]=a(" and under the covers they use signals. These accomplish a wide range of features from state to props and even side effects. ")),s("a",$,[e(c,{icon:"iconfont icon-svelte"}),n[29]||(n[29]=a("Here’s a good introduction to runes"))]),n[35]||(n[35]=a("."))]),n[47]||(n[47]=u(`<p>To create a piece of state, we use the<code>$state</code>rune. You don’t import it, you just use it — it’s part of the Svelte language.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token function">$state</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>For values with non-inferable types, you can provide a generic</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">let</span> currentUser <span class="token operator">=</span> $state<span class="token operator">&lt;</span>User <span class="token operator">|</span> <span class="token keyword">null</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>What if you want to create some derived state? Before we did:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token literal-property property">$</span><span class="token operator">:</span> countTimes2 <span class="token operator">=</span> count <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>In Svelte 5 we use the<code>$derived</code>rune.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">let</span> countTimes2 <span class="token operator">=</span> <span class="token function">$derived</span><span class="token punctuation">(</span>count <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Note that we pass in a raw<em>expression</em>. Svelte will run it, see what it depends on, and re-run it as needed. There’s also a<code>$derived.by</code>rune if you want to pass an actual function.</p><p>If you want to use these state values in a Svelte template, you just<em>use them</em>. No need for special<code>$</code>syntax to prefix the runes like we did with stores. You reference the values in your templates, and they update as needed.</p><p>If you want to<em>update</em>a state value, you assign to it:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">count <span class="token operator">=</span> count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// or count++;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="what-about-stores" tabindex="-1"><a class="header-anchor" href="#what-about-stores"><span>What about stores?</span></a></h3><p>We saw before that defining portable state outside of components was accomplished via stores. Stores are not deprecated in Svelte 5, but there’s a good chance they’re on their way out of the framework. You no longer need them, and they’re replaced with what we’ve<em>already seen</em>. That’s right, the<code>$state</code>and<code>$derived</code>runes we saw before can be defined outside of components in top-level TypeScript (or JavaScript) files. Just be sure to name your file with a<code>.svelte.ts</code>extension, so the Svelte compiler knows to enable runes in these files. Let’s take a look!</p><p>Let’s re-implement our number / label code from before, in Svelte 5. This is what it looked like with stores:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> derived<span class="token punctuation">,</span> writable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;svelte/store&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createNumberInfo</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">initialValue</span><span class="token operator">:</span> number <span class="token operator">=</span> <span class="token number">0</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token function">writable</span><span class="token punctuation">(</span>initialValue<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> derivedInfo <span class="token operator">=</span> <span class="token function">derived</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token parameter">value</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">      value<span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">label</span><span class="token operator">:</span> value <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">?</span> <span class="token string">&quot;Odd number&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;Even number&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">update</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">newValue</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      value<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">numberInfo</span><span class="token operator">:</span> derivedInfo<span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Here it is with runes:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createNumberInfo</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">initialValue</span><span class="token operator">:</span> number <span class="token operator">=</span> <span class="token number">0</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token function">$state</span><span class="token punctuation">(</span>initialValue<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">let</span> label <span class="token operator">=</span> <span class="token function">$derived</span><span class="token punctuation">(</span>value <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">?</span> <span class="token string">&quot;Odd number&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;Even number&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">update</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">newValue</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      value <span class="token operator">=</span> newValue<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">get</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> value<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">get</span> <span class="token function">label</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> label<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>It’s 3 lines shorter, but more importantly,<em>much</em>simpler. We declared our state. We computed our derived state. And we send them both back, along with a method that updates our state.</p><p>You may be wondering why we did this:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">get</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> value<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token keyword">get</span> <span class="token function">label</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> label<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>rather than just referencing those properties. The reason is that<em>reading</em>that state, at any given point in time, evaluates the state rune, and, if we’re reading it in a reactive context (like a Svelte component binding, or inside of a <code>$derived</code> expression), then a subscription is set up to update any time that piece of state is updated. If we had done it like this:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// this won&#39;t work</span></span>
<span class="line"><span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">update</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">newValue</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    value <span class="token operator">=</span> newValue<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  value<span class="token punctuation">,</span></span>
<span class="line">  label<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That wouldn’t have worked because those <code>value</code> and <code>label</code> pieces of state would be <em>read and evaluated right there</em> in the return value, with those raw values getting injected into that object. They would not be reactive, and they would never update.</p><p>That’s about it! Svelte 5 ships a few universal state primitives which can be used outside of components and easily constructed into larger reactive structures. What’s especially exciting is that Svelte’s component bindings are also updated, and now support fine-grained reactivity that didn’t used to exist.</p><hr><h2 id="props" tabindex="-1"><a class="header-anchor" href="#props"><span>Props</span></a></h2><p>Defining state inside of a component isn’t too useful if you can’t pass it on to other components as props. Props are also reworked in Svelte 5 in a way that makes them simpler, and also, as we’ll see, includes a nice trick to make TypeScript integration more powerful.</p><p>Svelte 4 props were another example of hijacking existing JavaScript syntax to do something unrelated. To declare a prop on a component, you’d use the <code>export</code> keyword. It was weird, but it worked.</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="ChildComponent.svelte"><span>ChildComponent.svelte</span></div><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre><code class="language-html"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"> <span class="token keyword">export</span> <span class="token keyword">let</span> <span class="token literal-property property">name</span><span class="token operator">:</span> string<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">export</span> <span class="token keyword">let</span> <span class="token literal-property property">age</span><span class="token operator">:</span> number<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">export</span> <span class="token keyword">let</span> <span class="token literal-property property">currentValue</span><span class="token operator">:</span> string<span class="token punctuation">;</span> </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>flex flex-col gap-2<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  {name} {age}</span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">bind:</span>value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>{currentValue}</span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>This component created three props. It also bound the<code>currentValue</code>prop into the <code>&lt;input&gt;</code>, so it would change as the user typed. Then to render this component, we’d do something like this:</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre><code class="language-html"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"></span>
<span class="line">  <span class="token keyword">import</span> ChildComponent <span class="token keyword">from</span> <span class="token string">&quot;./ChildComponent.svelte&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">let</span> currentValue <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span> </span>
<span class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line">Current value in parent: {currentValue}</span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ChildComponent</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Bob<span class="token punctuation">&quot;</span></span> <span class="token attr-name">age</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>{20}</span> <span class="token attr-name"><span class="token namespace">bind:</span>currentValue</span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This is Svelte 4, so<code>let currentValue = &#39;&#39;</code>is a piece of state that can change. We pass props for name and age, but we also have<code>bind:currentValue</code>which is a shorthand for<code>bind:currentValue={currentValue}</code>. This creates a<em>two-way binding</em>. As the child changes the value of this prop, it propagates the change upward, to the parent. This is a very cool feature of Svelte, but it’s also easy to misuse, so exercise caution.</p><p>If we type in the ChildComponent’s <code>&lt;input&gt;</code>, we’ll see <code>currentValue</code> update in the parent component.</p><h3 id="svelte-5-version" tabindex="-1"><a class="header-anchor" href="#svelte-5-version"><span>Svelte 5 version</span></a></h3><p>Let’s see what these props look like in Svelte 5.</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre><code class="language-html"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"> </span>
<span class="line">  type Props <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">name</span><span class="token operator">:</span> string<span class="token punctuation">;</span></span>
<span class="line">    <span class="token literal-property property">age</span><span class="token operator">:</span> number<span class="token punctuation">;</span></span>
<span class="line">    <span class="token literal-property property">currentValue</span><span class="token operator">:</span> string<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">let</span> <span class="token punctuation">{</span> age<span class="token punctuation">,</span> name<span class="token punctuation">,</span> currentValue <span class="token operator">=</span> <span class="token function">$bindable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token operator">:</span> Props <span class="token operator">=</span> <span class="token function">$props</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>flex flex-col gap-2<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  {name} {age}</span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">bind:</span>value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>{currentValue}</span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The props are defined via the<code>$props</code>rune, from which we destructure the individual values.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">let</span> <span class="token punctuation">{</span> age<span class="token punctuation">,</span> name<span class="token punctuation">,</span> currentValue <span class="token operator">=</span> <span class="token function">$bindable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token operator">:</span> Props <span class="token operator">=</span> <span class="token function">$props</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>We can apply typings directly to the destructuring expression. In order to indicate that a prop<em>can be</em>(but doesn’t have to be) bound to the parent, like we saw above, we use the<code>$bindable</code>rune, like this</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token operator">=</span> <span class="token function">$bindable</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>If you want to provide a default value, assign it to the destructured value. To assign a default value to a bindable prop, pass that value to the<code>$bindable</code>rune.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">let</span> <span class="token punctuation">{</span> age <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">&quot;foo&quot;</span><span class="token punctuation">,</span> currentValue <span class="token operator">=</span> <span class="token function">$bindable</span><span class="token punctuation">(</span><span class="token string">&quot;bar&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token operator">:</span> Props <span class="token operator">=</span> <span class="token function">$props</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="but-wait-there-s-more" tabindex="-1"><a class="header-anchor" href="#but-wait-there-s-more"><span>But wait, there’s more!</span></a></h3><p>One of the most exciting changes to Svelte’s prop handling is the improved TypeScript integration. We saw that you can assign types, above. But what if we want to do something like this (in React)</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">type</span> <span class="token class-name">Props<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  items<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function-variable function">onSelect</span><span class="token operator">:</span> <span class="token punctuation">(</span>item<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> AutoComplete <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>props<span class="token operator">:</span> Props<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We want a React component that receives an array of items, as well as a callback that takes a single item (of the same type). This works in React. How would we do it in Svelte?</p><p>At first, it looks easy.</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre><code class="language-html"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"></span>
<span class="line">  type Props<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">items</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function-variable function">onSelect</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">item</span><span class="token operator">:</span> <span class="token constant">T</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">let</span> <span class="token punctuation">{</span> items<span class="token punctuation">,</span> onSelect <span class="token punctuation">}</span><span class="token operator">:</span> Props<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token function">$props</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">//         Error here _________^</span></span>
<span class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The first<code>T</code>is a generic<em>parameter</em>, which is defined as part of the<code>Props</code>type. This is fine. The problem is, we need to instantiate that generic type with an actual value for T when we attempt to use it in the destructuring. The<code>T</code>that I used there is undefined. It doesn’t exist. TypeScript has no idea what that<code>T</code>is because it hasn’t been defined.</p><h3 id="what-changed" tabindex="-1"><a class="header-anchor" href="#what-changed"><span>What changed?</span></a></h3><p>Why did this work so easily with React? The reason is, React components are<em>functions</em>. You can define a generic function, and when you<em>call it</em>TypeScript will<em>infer</em>(if it can) the values of its generic types. It does this by looking at the arguments you pass to the function. With React,<em>rendering</em>a component is conceptually the same as calling it, so TypeScript is able to look at the various props you pass, and infer the generic types as needed.</p><p>Svelte components are not functions. They’re a proprietary bit of code thrown into a <code>.svelte</code> file that the Svelte compiler turns into something useful. We do still render Svelte components, and TypeScript could easily look at the props we pass, and infer back the generic types as needed. The root of the problem, though, is that we haven’t (yet) declared any generic types that are associated with the<em>component itself</em>. With React components, these are the same generic types we declare for any function. What do we do for Svelte?</p><p>Fortunately, the Svelte maintainers thought of this. You can declare generic types for the component itself with the<code>generics</code>attribute on the<code>&lt;script&gt;</code>tag at the top of your Svelte component:</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre><code class="language-html"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span> <span class="token attr-name">generics</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>T<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"> </span>
<span class="line">  type Props<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">items</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function-variable function">onSelect</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">item</span><span class="token operator">:</span> <span class="token constant">T</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">let</span> <span class="token punctuation">{</span> items<span class="token punctuation">,</span> onSelect <span class="token punctuation">}</span><span class="token operator">:</span> Props<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token function">$props</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can even define constraints on your generic arg:</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre><code class="language-html"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span> <span class="token attr-name">generics</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>T extends { name: string }<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"></span>
<span class="line">  type Props<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">items</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function-variable function">onSelect</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">item</span><span class="token operator">:</span> <span class="token constant">T</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">let</span> <span class="token punctuation">{</span> items<span class="token punctuation">,</span> onSelect <span class="token punctuation">}</span><span class="token operator">:</span> Props<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token function">$props</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>TypeScript will enforce this. If you violate that constraint like this:</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre><code class="language-html"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"></span>
<span class="line">  <span class="token keyword">import</span> AutoComplete <span class="token keyword">from</span> <span class="token string">&quot;./AutoComplete.svelte&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">let</span> items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Adam&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Rich&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">let</span> <span class="token function-variable function">onSelect</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">item</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> number <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span> </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AutoComplete</span> <span class="token attr-name">{items}</span> <span class="token attr-name">{onSelect}</span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>TypeScript will let you know:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="log"><span>log</span></div><div class="language-plaintesxt line-numbers-mode" data-highlighter="prismjs" data-ext="plaintesxt"><pre><code class="language-plaintesxt"><span class="line">Type &#39;(item: { id: number; }) =&gt; void&#39; is not assignable to type &#39;(item: { name: string; }) =&gt; void&#39;. Types of parameters &#39;item&#39; and &#39;item&#39; are incompatible.  </span>
<span class="line">  </span>
<span class="line">Property &#39;id&#39; is missing in type &#39;{ name: string; }&#39; but required in type &#39;{ id: number; }&#39;.</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><hr><h2 id="effects" tabindex="-1"><a class="header-anchor" href="#effects"><span>Effects</span></a></h2><p>Let’s wrap up with something comparatively easy: side effects. As we saw before, briefly, in Svelte 4 you could run code for side effects inside of<code>$:</code>reactive blocks</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token literal-property property">$</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>someStateValue1<span class="token punctuation">,</span> someStateValue2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That code would re-run when either of those values changed.</p><p>Svelte 5 introduces the<code>$effect</code>rune. This will run after state has changed, and been applied to the dom. It is for<em>side effects</em>. Things like resetting the scroll position after state changes. It is<em>not</em>for synchronizing state. If you’re using the<code>$effect</code>rune to synchronize state, you’re probably doing something wrong (the same goes for the<code>useEffect</code>hook in React).</p><p>The code is pretty anti-climactic.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token function">$effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Current count is &quot;</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When this code first starts, and anytime count changes, you’ll see this log. To make it more interesting, let’s pretend we have a current timestamp value that auto-updates:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">let</span> timestamp <span class="token operator">=</span> <span class="token function">$state</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  timestamp <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We want to include that value when we log, but we<em>don’t</em>want our effect to run whenever our timestamp changes; we only want it to run when count changes. Svelte provides an<code>untrack</code>utility for that</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> untrack <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;svelte&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">$effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> timestampValue <span class="token operator">=</span> <span class="token function">untrack</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> timestamp<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Current count is &quot;</span><span class="token punctuation">,</span> count<span class="token punctuation">,</span> <span class="token string">&quot;at&quot;</span><span class="token punctuation">,</span> timestampValue<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="interop" tabindex="-1"><a class="header-anchor" href="#interop"><span>Interop</span></a></h2><p>Massive upgrades where an entire app is updated to use a new framework version’s APIs are seldom feasible, so it should come as no surprise that Svelte 5 continues to support Svelte 4. You can upgrade your app incrementally. Svelte 5 components can render Svelte 4 components, and Svelte 4 components can render Svelte 5 components. The one thing you can’t do is mix and match within a single component. You cannot use reactive assignments<code>$:</code>in the same component that’s using Runes (the Svelte compiler will remind you if you forget).</p><p>Since stores are not yet deprecated, they can continue to be used in Svelte 5 components. Remember the<code>createNumberInfo</code>method from before, which returned an object with a store on it? We can use it in Svelte 5. This component is perfectly valid, and works.</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre><code class="language-html"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"> </span>
<span class="line">  <span class="token keyword">import</span> <span class="token punctuation">{</span> createNumberInfo <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../svelte4/numberInfoStore&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> numberPacket <span class="token operator">=</span> <span class="token function">createNumberInfo</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> store <span class="token operator">=</span> numberPacket<span class="token punctuation">.</span>numberInfo<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">let</span> junk <span class="token operator">=</span> <span class="token function">$state</span><span class="token punctuation">(</span><span class="token string">&#39;Hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>Run value: {junk}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>Number value: {$store.value}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line">&lt;button onclick={() =&gt; numberPacket.update($store.value + 1)}&gt;Update<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>But the rule against reactive assignments still holds; we cannot use one to destructure values off of stores when we’re in Svelte 5 components. We<em>have to</em>“dot through” to nested properties with things like<code>{$store.value}</code>in the binding (which always works) rather than:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token literal-property property">$</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> value <span class="token punctuation">}</span> <span class="token operator">=</span> $store<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>… which generates the error of:</p><blockquote><p><code>$:</code>is not allowed in runes mode, use<code>$derived</code>or<code>$effect</code>instead</p></blockquote><p>The error is even clear enough to give you another alternative to inlining those nested properties, which is to create a<code>$derived</code>state:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token function">$derived</span><span class="token punctuation">(</span>$store<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// or let { value } = $derived($store);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Personally I’m not a huge fan of mixing the new<code>$derived</code>primitive with the old Svelte 4 syntax of<code>$store</code>, but that’s a matter of taste.</p><hr><h2 id="parting-thoughts" tabindex="-1"><a class="header-anchor" href="#parting-thoughts"><span>Parting thoughts</span></a></h2><p>Svelte 5 has shipped some incredibly exciting changes. We covered the new, more reliable reactivity primitives, the improved prop management with tighter TypeScript integration, and the new side effect primitive. But we haven’t come closing to covering everything. Not only are there more variations on the<code>$state</code>rune, but Svelte 5 also updated it’s event handling mechanism, and even shipped an exciting new way to re-use “snippets” of HTML.</p><p>Svelte 5 is worth a serious look for your next project.</p>`,89)),s("div",V,[n[36]||(n[36]=s("p",{class:"hint-container-title"},"Article Series",-1)),e(o,l(i({title:"Introducing Svelte 5",desc:"Svelte 5 introduces significant improvements in reactivity, state management, and prop handling, maintaining its user-friendly Developer Experience (DX). ",link:"/frontendmasters.com/introducing-svelte-5.md",logo:"https://frontendmasters.com/favicon.ico",background:"rgba(188,75,52,0.2)"})),null,16),e(o,l(i({title:"Snippets in Svelte 5",desc:"Out with slots, in with snippets.",link:"/frontendmasters.com/snippets-in-svelte-5.md",logo:"https://frontendmasters.com/favicon.ico",background:"rgba(188,75,52,0.2)"})),null,16),e(o,l(i({title:"Fine-Grained Reactivity in Svelte 5",desc:"Svelte is already quite lightweight and fast, but Svelte 5 still overs big improvements in fine-grained reactivity, meaning re-rendering as absolutely little as possible. ",link:"/frontendmasters.com/fine-grained-reactivity-in-svelte-5.md",logo:"https://frontendmasters.com/favicon.ico",background:"rgba(188,75,52,0.2)"})),null,16)]),g(" TODO: add ARTICLE CARD "),e(o,l(i({title:"Introducing Svelte 5",desc:"Svelte 5 introduces significant improvements in reactivity, state management, and prop handling, maintaining its user-friendly Developer Experience (DX). ",link:"https://chanhi2000.github.io/bookshelf/frontendmasters.com/introducing-svelte-5.html",logo:"https://frontendmasters.com/favicon.ico",background:"rgba(188,75,52,0.2)"})),null,16)])}const C=v(f,[["render",P]]),W=JSON.parse('{"path":"/frontendmasters.com/introducing-svelte-5.html","title":"Introducing Svelte 5","lang":"en-US","frontmatter":{"lang":"en-US","title":"Introducing Svelte 5","description":"Article(s) > Introducing Svelte 5","icon":"iconfont icon-svelte","category":["Node.js","Svelte.js","Article(s)"],"tag":["blog","frontendmasters.com","node","nodejs","node-js","svelte","sveltejs","svelte-js"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Introducing Svelte 5\\",\\"image\\":[\\"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/3067\\"],\\"datePublished\\":\\"2024-07-19T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Adam Rackis\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/frontendmasters.com/introducing-svelte-5.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Introducing Svelte 5"}],["meta",{"property":"og:description","content":"Article(s) > Introducing Svelte 5"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/3067"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/3067"}],["meta",{"name":"twitter:image:alt","content":"Introducing Svelte 5"}],["meta",{"property":"article:author","content":"Adam Rackis"}],["meta",{"property":"article:tag","content":"svelte-js"}],["meta",{"property":"article:tag","content":"sveltejs"}],["meta",{"property":"article:tag","content":"svelte"}],["meta",{"property":"article:tag","content":"node-js"}],["meta",{"property":"article:tag","content":"nodejs"}],["meta",{"property":"article:tag","content":"node"}],["meta",{"property":"article:tag","content":"frontendmasters.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2024-07-19T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Introducing Svelte 5"},{"property":"og:description","content":"Introducing Svelte 5"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/frontendmasters.com/introducing-svelte-5.html"}]],"prev":"/programming/js-svelte/articles/README.md","date":"2024-07-19T00:00:00.000Z","isOriginal":false,"author":"Adam Rackis","cover":"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/3067"},"git":{},"readingTime":{"minutes":11.95,"words":3584},"filePathRelative":"frontendmasters.com/introducing-svelte-5.md","copyright":{"author":"Adam Rackis"}}');export{C as comp,W as data};
