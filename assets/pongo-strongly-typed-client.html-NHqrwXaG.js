import{_ as g}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as m,d as s,f as e,b as i,a as v,t as b,n as c,g as d,w as p,e as a,r as l,o as h}from"./app-BVguHYKu.js";const y={},f={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},T={class:"table-of-contents"},A={href:"https://architecture-weekly.com/p/talk-is-cheap-show-me-the-numbers",target:"_blank",rel:"noopener noreferrer"},L={href:"https://event-driven-io.github.io/emmett/getting-started.html",target:"_blank",rel:"noopener noreferrer"},S={href:"https://event-driven-io.github.io/Pongo/getting-started.html",target:"_blank",rel:"noopener noreferrer"},I={href:"https://event-driven-io.github.io/emmett/getting-started.html",target:"_blank",rel:"noopener noreferrer"},E={href:"https://event-driven-io.github.io/Pongo/getting-started.html",target:"_blank",rel:"noopener noreferrer"},P={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",target:"_blank",rel:"noopener noreferrer"},N={href:"https://docs.npmjs.com/cli/v8/commands/npx",target:"_blank",rel:"noopener noreferrer"},x={href:"https://postgresql.org/docs/current/explicit-locking.html#ADVISORY-LOCKS",target:"_blank",rel:"noopener noreferrer"},O={href:"https://github.com/event-driven-io/Pongo/blob/c3ed330a3ddf7793e6d508309cd2f729c6b19cb2/src/packages/dumbo/src/core/schema/schemaComponent.ts",target:"_blank",rel:"noopener noreferrer"},U={href:"https://github.com/event-driven-io/Pongo/blob/c3ed330a3ddf7793e6d508309cd2f729c6b19cb2/samples/simple-ts/src/typedClient.ts",target:"_blank",rel:"noopener noreferrer"},C={href:"https://github.com/event-driven-io/Pongo/releases/tag/0.14.0",target:"_blank",rel:"noopener noreferrer"};function D(u,n){const r=l("VPCard"),o=l("router-link"),k=l("SiteInfo"),t=l("VPIcon");return h(),m("div",null,[s("h1",f,[s("a",w,[s("span",null,b(u.$frontmatter.title)+" 관련",1)])]),e(r,c(d({title:"TypeScript > Article(s)",desc:"Article(s)",link:"/programming/ts/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),e(r,c(d({title:"Postgres > Article(s)",desc:"Article(s)",link:"/data-science/postgres/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",T,[s("ul",null,[s("li",null,[e(o,{to:"#strongly-typed-client"},{default:p(()=>n[0]||(n[0]=[a("Strongly Typed Client")])),_:1,__:[0]}),s("ul",null,[s("li",null,[e(o,{to:"#pongo-gets-command-line"},{default:p(()=>n[1]||(n[1]=[a("Pongo gets command line")])),_:1,__:[1]})])])]),s("li",null,[e(o,{to:"#sample-configuration-generation"},{default:p(()=>n[2]||(n[2]=[a("Sample configuration generation")])),_:1,__:[2]}),s("ul",null,[s("li",null,[e(o,{to:"#performing-database-migrations"},{default:p(()=>n[3]||(n[3]=[a("Performing Database Migrations")])),_:1,__:[3]})]),s("li",null,[e(o,{to:"#added-possibility-to-disable-generating-pongo-schema-upfront"},{default:p(()=>n[4]||(n[4]=[a("Added possibility to disable generating Pongo schema upfront")])),_:1,__:[4]})]),s("li",null,[e(o,{to:"#tldr"},{default:p(()=>n[5]||(n[5]=[a("TLDR")])),_:1,__:[5]})])])])])]),n[42]||(n[42]=s("hr",null,null,-1)),e(k,{name:"Pongo gets strongly-typed client, migrations, and command line tooling",desc:"Event-Driven by Oskar Dudycz",url:"https://event-driven.io/en/pongo_strongly_typed_client",logo:"/assets/image/event-driven.io/favicon.jfif",preview:"https://event-driven.io/static/e864253c01617691383cd1762ddb91db/2a4de/2024-09-13-cover.png"}),n[43]||(n[43]=s("p",null,[s("strong",null,"When you think upfront and want to make things right, there’s an interesting feedback loop. Quite often, things start to click, often in a surprising way.")],-1)),s("p",null,[s("strong",null,[n[9]||(n[9]=a("I recently wrote on ")),s("a",A,[e(t,{icon:"fas fa-globe"}),n[6]||(n[6]=a("Architecture Weekly about my performance investigations"))]),n[10]||(n[10]=a(" in ")),s("a",L,[e(t,{icon:"fas fa-globe"}),n[7]||(n[7]=a("Emmett"))]),n[11]||(n[11]=a(" and ")),s("a",S,[e(t,{icon:"fas fa-globe"}),n[8]||(n[8]=a("Pongo"))]),n[12]||(n[12]=a("."))]),n[13]||(n[13]=a(" One of the conclusions was that schema needs to be generated upfront. Initially, it was generated once on the first call. That reduced boilerplate and was good enough for many cases but not for serverless."))]),s("p",null,[n[16]||(n[16]=a("To generate the ")),s("a",I,[e(t,{icon:"fas fa-globe"}),n[14]||(n[14]=a("Emmett"))]),n[17]||(n[17]=a(" PostgreSQL schema, I also wanted to be able to generate it for ")),s("a",E,[e(t,{icon:"fas fa-globe"}),n[15]||(n[15]=a("Pongo"))]),n[18]||(n[18]=a(" documents that I use for read models."))]),n[44]||(n[44]=i(`<p>Pongo documents are stored in collections, and collections are regular (well, almost) PostgreSQL tables. So, to know what to generate, I had to add some way to know what collections I’ll have. There’s no such API in vanilla Mongo, so I have to add it. And that’s fine, as I want to make Pongo a superset of Mongo.</p><p>My initial idea was to provide a list of collections with names. This list could later contain a JSON schema definition, database indexes, etc. I also had to add an option to provide the database list. Pongo (just like Mongo) allows different dbs to be used.</p><p>The naive version could look like this:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">const</span> schema <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;postgres&#39;</span><span class="token punctuation">,</span> collections<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;orders&#39;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token function">pongoClient</span><span class="token punctuation">(</span>postgresConnectionString<span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">  schema<span class="token operator">:</span> <span class="token punctuation">{</span> definition<span class="token operator">:</span> schema <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That would give me the information I need to set up users and order tables for collections in the default Postgres database. I could call it a day, but…</p>`,5)),s("p",null,[n[20]||(n[20]=a("But then I thought, well, wouldn’t it be nice to generate a strongly typed TypeScript client? Having schema makes that possible! I “just” have to use a sneaky feature like ")),s("a",P,[e(t,{icon:"fa-brands fa-firefox"}),n[19]||(n[19]=a("Proxy type"))]),n[21]||(n[21]=a(". So I did, and bang, here we are with the new release!"))]),n[45]||(n[45]=i(`<hr><h2 id="strongly-typed-client" tabindex="-1"><a class="header-anchor" href="#strongly-typed-client"><span>Strongly Typed Client</span></a></h2><p>The API needs to be a bit more advanced, but I think it’s still straightforward and explicit. You need to define schema like:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">type</span> <span class="token class-name">User</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  _id<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line">  address<span class="token operator">?</span><span class="token operator">:</span> Address<span class="token punctuation">;</span></span>
<span class="line">  tags<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">Customer</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  _id<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  address<span class="token operator">?</span><span class="token operator">:</span> Address<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> schema <span class="token operator">=</span> pongoSchema<span class="token punctuation">.</span><span class="token function">client</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  database<span class="token operator">:</span> pongoSchema<span class="token punctuation">.</span><span class="token function">db</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    users<span class="token operator">:</span> pongoSchema<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">collection</span><span class="token generic class-name"><span class="token operator">&lt;</span>User<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    customers<span class="token operator">:</span> pongoSchema<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">collection</span><span class="token generic class-name"><span class="token operator">&lt;</span>Customer<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#39;customers&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And pass it to the client, getting the typed version.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">const</span> typedClient <span class="token operator">=</span> <span class="token function">pongoClient</span><span class="token punctuation">(</span>postgresConnectionString<span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">  schema<span class="token operator">:</span> <span class="token punctuation">{</span> definition<span class="token operator">:</span> schema <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 👇 client have the same database as we defined above, and the collection</span></span>
<span class="line"><span class="token keyword">const</span> users <span class="token operator">=</span> typedClient<span class="token punctuation">.</span>database<span class="token punctuation">.</span>users<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> doc<span class="token operator">:</span> User <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  _id<span class="token operator">:</span> <span class="token function">randomUUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  name<span class="token operator">:</span> <span class="token string">&#39;Anita&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  age<span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> inserted <span class="token operator">=</span> <span class="token keyword">await</span> users<span class="token punctuation">.</span><span class="token function">insertOne</span><span class="token punctuation">(</span>doc<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 👇 yup, the collection is fully typed!</span></span>
<span class="line"><span class="token keyword">const</span> pongoDoc <span class="token operator">=</span> <span class="token keyword">await</span> users<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  name<span class="token operator">:</span> <span class="token string">&#39;Anita&#39;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>I think that’s much better developer experience, than the Mongo API that tells us always to do calls like:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">const</span> db  <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">db</span><span class="token punctuation">(</span><span class="token string">&#39;postgres&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> users <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">collection</span><span class="token generic class-name"><span class="token operator">&lt;</span>User<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Of course, if you like it, you can still use it. It’s great to have more options!</p><p>Internally, it generates the collections upfront and assigns them to the typed properties. If you want to know how that works internally, reply to this article, and I can explain how sausages are made in the follow-up!</p><h3 id="pongo-gets-command-line" tabindex="-1"><a class="header-anchor" href="#pongo-gets-command-line"><span>Pongo gets command line</span></a></h3><p>And we’re getting back to the announced synergy between making things right. Having schema also enabled upfront schema generation and even migration. To make that accessible, I added command line tooling.</p><p>You can either install it globally through:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> @event-driven-io/pongo</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>And run it with:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">pongo</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,16)),s("p",null,[n[23]||(n[23]=a("or without installing it globally by using ")),s("a",N,[e(t,{icon:"fa-brands fa-npm"}),n[22]||(n[22]=a("npx"))])]),n[46]||(n[46]=i(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">npx @event-driven-io/pongo</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Cool, but what do you get from it?</p><hr><h2 id="sample-configuration-generation" tabindex="-1"><a class="header-anchor" href="#sample-configuration-generation"><span>Sample configuration generation</span></a></h2><p>You can generate the sample config by calling:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">npx @event-driven-io/pongo config sample <span class="token parameter variable">--generate</span> <span class="token parameter variable">--file</span> ./src/pongoConfig.ts <span class="token parameter variable">--collection</span> <span class="token function">users</span> <span class="token parameter variable">--collection</span> orders</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>This command will create a config file in the selected location with predefined users and orders collections. It’ll look as follows:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> pongoSchema <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@event-driven-io/pongo&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">User</span> <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> description<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> date<span class="token operator">:</span> Date <span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">Order</span> <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> description<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> date<span class="token operator">:</span> Date <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span></span>
<span class="line">  schema<span class="token operator">:</span> pongoSchema<span class="token punctuation">.</span><span class="token function">client</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    database<span class="token operator">:</span> pongoSchema<span class="token punctuation">.</span><span class="token function">db</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">      users<span class="token operator">:</span> pongoSchema<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">collection</span><span class="token generic class-name"><span class="token operator">&lt;</span>User<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      orders<span class="token operator">:</span> pongoSchema<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">collection</span><span class="token generic class-name"><span class="token operator">&lt;</span>Order<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#39;orders&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Or just print it with:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">npx @event-driven-io/pongo config sample <span class="token parameter variable">--print</span> <span class="token parameter variable">--collection</span> <span class="token function">users</span> <span class="token parameter variable">--collection</span> customers</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Then, you can use adjust the generated typing and import it to your application.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> pongoClient <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@event-driven-io/pongo&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> config <span class="token keyword">from</span> <span class="token string">&#39;./pongo.config&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> pongo <span class="token operator">=</span> <span class="token function">pongoClient</span><span class="token punctuation">(</span>connectionString<span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">  schema<span class="token operator">:</span> <span class="token punctuation">{</span> definition<span class="token operator">:</span> config<span class="token punctuation">.</span>schema <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="performing-database-migrations" tabindex="-1"><a class="header-anchor" href="#performing-database-migrations"><span>Performing Database Migrations</span></a></h3><p>Having the existing configuration file and command-line tooling opens even more options. You not only get a strongly typed client but also can generate and perform migrations based on it!</p><p>You can do it with new command line tooling:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">npx @event-driven-io/pongo migrate run <span class="token parameter variable">--config</span> ./dist/pongoConfig.js <span class="token punctuation">\\</span></span>
<span class="line"><span class="token parameter variable">--connectionString</span> postgresql://postgres:postgres@localhost:5432/postgres</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>It’ll automatically run the migrations based on the defined collections.</p><p>If you’re unsure and don’t trust it fully, you can also add the <em>—-dryRun</em> parameter. This will run the migration in the transaction and roll it back without making any changes.</p><p><strong>You can also use migration CLI in your build pipelines.</strong> You might not want to pass the connection string there, as it’s not secured way. No worries, you can also set <em>DB_CONNECTION_STRING</em> environment variable and run it as</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">npx @event-driven-io/pongo migrate run <span class="token parameter variable">--config</span> ./dist/pongoConfig.js</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>You can also run it by providing a collections list:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">npx @event-driven-io/pongo migrate run <span class="token parameter variable">--collection</span> <span class="token function">users</span> <span class="token parameter variable">--collection</span> customers <span class="token punctuation">\\</span></span>
<span class="line"><span class="token parameter variable">--connectionString</span> postgresql://postgres:postgres@localhost:5432/postgres</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>You can also just print migrations to see what schema structures will be generated by calling:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">npx @event-driven-io/pongo migrate sql <span class="token parameter variable">--print</span> <span class="token parameter variable">--collection</span> <span class="token function">users</span> <span class="token parameter variable">--collection</span> customers</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>It will print:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> migrations <span class="token punctuation">(</span></span>
<span class="line">    id <span class="token keyword">SERIAL</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span></span>
<span class="line">    name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">UNIQUE</span><span class="token punctuation">,</span></span>
<span class="line">    application <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;default&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    sql_hash <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">timestamp</span> <span class="token keyword">TIMESTAMP</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> users <span class="token punctuation">(</span></span>
<span class="line">    _id           <span class="token keyword">TEXT</span>           <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span> </span>
<span class="line">    <span class="token keyword">data</span>          JSONB          <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> </span>
<span class="line">    metadata      JSONB          <span class="token operator">NOT</span> <span class="token boolean">NULL</span>     <span class="token keyword">DEFAULT</span> <span class="token string">&#39;{}&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    _version      <span class="token keyword">BIGINT</span>         <span class="token operator">NOT</span> <span class="token boolean">NULL</span>     <span class="token keyword">DEFAULT</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">    _partition    <span class="token keyword">TEXT</span>           <span class="token operator">NOT</span> <span class="token boolean">NULL</span>     <span class="token keyword">DEFAULT</span> <span class="token string">&#39;png_global&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    _archived     <span class="token keyword">BOOLEAN</span>        <span class="token operator">NOT</span> <span class="token boolean">NULL</span>     <span class="token keyword">DEFAULT</span> <span class="token boolean">FALSE</span><span class="token punctuation">,</span></span>
<span class="line">    _created      TIMESTAMPTZ    <span class="token operator">NOT</span> <span class="token boolean">NULL</span>     <span class="token keyword">DEFAULT</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    _updated      TIMESTAMPTZ    <span class="token operator">NOT</span> <span class="token boolean">NULL</span>     <span class="token keyword">DEFAULT</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> customers <span class="token punctuation">(</span></span>
<span class="line">    _id           <span class="token keyword">TEXT</span>           <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span> </span>
<span class="line">    <span class="token keyword">data</span>          JSONB          <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> </span>
<span class="line">    metadata      JSONB          <span class="token operator">NOT</span> <span class="token boolean">NULL</span>     <span class="token keyword">DEFAULT</span> <span class="token string">&#39;{}&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    _version      <span class="token keyword">BIGINT</span>         <span class="token operator">NOT</span> <span class="token boolean">NULL</span>     <span class="token keyword">DEFAULT</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">    _partition    <span class="token keyword">TEXT</span>           <span class="token operator">NOT</span> <span class="token boolean">NULL</span>     <span class="token keyword">DEFAULT</span> <span class="token string">&#39;png_global&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    _archived     <span class="token keyword">BOOLEAN</span>        <span class="token operator">NOT</span> <span class="token boolean">NULL</span>     <span class="token keyword">DEFAULT</span> <span class="token boolean">FALSE</span><span class="token punctuation">,</span></span>
<span class="line">    _created      TIMESTAMPTZ    <span class="token operator">NOT</span> <span class="token boolean">NULL</span>     <span class="token keyword">DEFAULT</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    _updated      TIMESTAMPTZ    <span class="token operator">NOT</span> <span class="token boolean">NULL</span>     <span class="token keyword">DEFAULT</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,26)),s("p",null,[n[25]||(n[25]=a("This first ")),n[26]||(n[26]=s("em",null,"migrations",-1)),n[27]||(n[27]=a(" table is essential, as it keeps all the migrations running so far. So, if you run the migration CLI once, it’ll only run the migrations once. Migrations are using internally ")),s("a",x,[e(t,{icon:"iconfont icon-postgresql"}),n[24]||(n[24]=a("Postgres Advisory Locks"))]),n[28]||(n[28]=a(" to ensure that no migrations are happening in parallel. Safety first!"))]),n[47]||(n[47]=s("p",null,"In the future, you’ll also be able to provide your custom schema and data migrations through it!",-1)),s("p",null,[n[32]||(n[32]=a("You already got ")),s("a",O,[n[29]||(n[29]=a("Schema Components abstraction (")),e(t,{icon:"iconfont icon-github"}),n[30]||(n[30]=s("code",null,"event-driven-io/Pongo",-1)),n[31]||(n[31]=a(")"))]),n[33]||(n[33]=a(". They define the database schema as a tree structure. They’re used for database collection, allowing migration through code. They’re exposed in the schema property. In the longer term, it’ll be possible to add your own, like indexes, migrations, etc."))]),n[48]||(n[48]=i(`<h3 id="added-possibility-to-disable-generating-pongo-schema-upfront" tabindex="-1"><a class="header-anchor" href="#added-possibility-to-disable-generating-pongo-schema-upfront"><span>Added possibility to disable generating Pongo schema upfront</span></a></h3><p>And we’re getting to performance. It appears that running schema migrations automatically is an excellent developer experience but not ideal for regular deployment. Surprise!</p><p>Now, thanks to the schema and CLI tooling for migrations, you can run migrations manually (or through the build process) and can ignore the automated migration in the Pongo client and get the performance boost:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">const</span> typedClient <span class="token operator">=</span> <span class="token function">pongoClient</span><span class="token punctuation">(</span>postgresConnectionString<span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">  schema<span class="token operator">:</span> <span class="token punctuation">{</span> autoMigration<span class="token operator">:</span> <span class="token string">&#39;None&#39;</span><span class="token punctuation">,</span> definition<span class="token operator">:</span> schema <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This will disable any automated schema generation. As a result, your application will have fewer database calls, opened connections, and overhead!</p><h3 id="tldr" tabindex="-1"><a class="header-anchor" href="#tldr"><span>TLDR</span></a></h3><p>The need for those changes appeared unexpectedly. I had to improve the performance for non-pooled connections (e.g., in a serverless environment). I could have done a quick patch and called it a day, but I did a sanity check and rethought that a bit. That led to a bit more work but also surprising synergy and opening more options for the future.</p><p>I’m pretty happy about that.</p><p><strong>I think that’ll also boost the developer experience even more!</strong></p><p>Expect the follow up in Emmett.</p><p><strong>What are your thoughts?</strong></p><div class="hint-container info"><p class="hint-container-title">Info</p><p>Read more about building Emmett and Pongo in:</p><ul><li><a href="/en/introducing_emmett/" target="_blank" rel="noopener noreferrer">Announcing Emmett! Take your event-driven applications back to the future!</a></li><li><a href="/en/introducting_pongo/" target="_blank" rel="noopener noreferrer">Pongo - Mongo but on Postgres and with strong consistency benefits</a></li><li><a href="/en/emmett_postgresql_event_store/" target="_blank" rel="noopener noreferrer">Event Sourcing on PostgreSQL in Node.js just became possible with Emmett</a></li><li><a href="/en/introducing_emmett/" target="_blank" rel="noopener noreferrer">Testing Event Sourcing, Emmett edition</a></li><li><a href="/en/emmett_projections_testing/" target="_blank" rel="noopener noreferrer">Writing and testing event-driven projections with Emmett, Pongo and PostgreSQL</a></li><li><a href="/en/projections_and_event_metadata/" target="_blank" rel="noopener noreferrer">Using event metadata in event-driven projections</a></li><li><a href="/en/custom_test_container_on_esdb_example/" target="_blank" rel="noopener noreferrer">How to configure a custom Test Container on the EventStoreDB example</a></li><li><a href="/en/inmemory_message_bus_in_typescript/" target="_blank" rel="noopener noreferrer">How to build an in-memory Message Bus in TypeScript</a></li></ul></div>`,12)),s("p",null,[n[40]||(n[40]=a("Check also the ")),s("a",U,[n[34]||(n[34]=a("sample (")),e(t,{icon:"iconfont icon-github"}),n[35]||(n[35]=s("code",null,"event-driven-io/Pongo",-1)),n[36]||(n[36]=a(")"))]),n[41]||(n[41]=a(" and ")),s("a",C,[n[37]||(n[37]=a("release notes (")),e(t,{icon:"iconfont icon-github"}),n[38]||(n[38]=s("code",null,"event-driven-io/Pongo",-1)),n[39]||(n[39]=a(")"))])]),n[49]||(n[49]=s("p",null,"Cheers!",-1)),n[50]||(n[50]=s("p",null,"Oskar",-1)),v(" TODO: add ARTICLE CARD "),e(r,c(d({title:"Pongo gets strongly-typed client, migrations, and command line tooling",desc:"Event-Driven by Oskar Dudycz",link:"https://chanhi2000.github.io/bookshelf/event-driven.io/pongo_strongly_typed_client.html",logo:"/assets/image/event-driven.io/favicon.jfif",background:"rgba(255,255,0,0.2)"})),null,16)])}const R=g(y,[["render",D]]),M=JSON.parse('{"path":"/event-driven.io/pongo-strongly-typed-client.html","title":"Pongo gets strongly-typed client, migrations, and command line tooling","lang":"en-US","frontmatter":{"lang":"en-US","title":"Pongo gets strongly-typed client, migrations, and command line tooling","description":"Article(s) > Pongo gets strongly-typed client, migrations, and command line tooling","icon":"iconfont icon-typescript","category":["TypeScript","PostgreSQL","Article(s)"],"tag":["blog","event-driven.io","ts","typescript","sql","db","postgres","postgresql"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Pongo gets strongly-typed client, migrations, and command line tooling\\",\\"image\\":[\\"https://event-driven.io/static/e864253c01617691383cd1762ddb91db/2a4de/2024-09-13-cover.png\\"],\\"datePublished\\":\\"2024-09-13T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Oskar Dudycz\\",\\"url\\":\\"https://event-driven.io/en/about/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/event-driven.io/pongo-strongly-typed-client.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Pongo gets strongly-typed client, migrations, and command line tooling"}],["meta",{"property":"og:description","content":"Article(s) > Pongo gets strongly-typed client, migrations, and command line tooling"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://event-driven.io/static/e864253c01617691383cd1762ddb91db/2a4de/2024-09-13-cover.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://event-driven.io/static/e864253c01617691383cd1762ddb91db/2a4de/2024-09-13-cover.png"}],["meta",{"name":"twitter:image:alt","content":"Pongo gets strongly-typed client, migrations, and command line tooling"}],["meta",{"property":"article:author","content":"Oskar Dudycz"}],["meta",{"property":"article:tag","content":"postgresql"}],["meta",{"property":"article:tag","content":"postgres"}],["meta",{"property":"article:tag","content":"db"}],["meta",{"property":"article:tag","content":"sql"}],["meta",{"property":"article:tag","content":"typescript"}],["meta",{"property":"article:tag","content":"ts"}],["meta",{"property":"article:tag","content":"event-driven.io"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2024-09-13T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Pongo gets strongly-typed client, migrations, and command line tooling"},{"property":"og:description","content":"Pongo gets strongly-typed client, migrations, and command line tooling"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/event-driven.io/pongo-strongly-typed-client.html"}]],"prev":"/programming/ts/articles/README.md","date":"2024-09-13T00:00:00.000Z","isOriginal":false,"author":[{"name":"Oskar Dudycz","url":"https://event-driven.io/en/about/"}],"cover":"https://event-driven.io/static/e864253c01617691383cd1762ddb91db/2a4de/2024-09-13-cover.png"},"git":{},"readingTime":{"minutes":6.09,"words":1828},"filePathRelative":"event-driven.io/pongo-strongly-typed-client.md","copyright":{"author":"Oskar Dudycz"}}');export{R as comp,M as data};
