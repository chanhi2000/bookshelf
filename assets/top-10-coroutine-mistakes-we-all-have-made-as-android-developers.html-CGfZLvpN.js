import{_ as g}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as b,d as e,f as o,b as r,a as f,t as y,n as m,g as h,w as a,e as s,r as d,o as w}from"./app-BVguHYKu.js";const A={},x={id:"frontmatter-title-관련",tabindex:"-1"},M={class:"header-anchor",href:"#frontmatter-title-관련"},I={class:"table-of-contents"},C={class:"hint-container tip"},H={class:"hint-container info"},T={href:"mailto:dobri.kostadinov@gmail.com",target:"_blank",rel:"noopener noreferrer"},W={href:"https://linkedin.com/in/dobrikostadinov/",target:"_blank",rel:"noopener noreferrer"},D={href:"https://medium.com/@dobri.kostadinov",target:"_blank",rel:"noopener noreferrer"},S={class:"hint-container info"},N={href:"https://proandroiddev.com/top-10-coroutine-mistakes-we-all-have-made-as-android-developers-187d5e14d212",target:"_blank",rel:"noopener noreferrer"};function E(k,n){const c=d("VPCard"),l=d("router-link"),v=d("SiteInfo"),p=d("Tabs"),u=d("VPIcon");return w(),b("div",null,[e("h1",x,[e("a",M,[e("span",null,y(k.$frontmatter.title)+" 관련",1)])]),o(c,m(h({title:"Android > Article(s)",desc:"Article(s)",link:"/programming/java-android/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),e("nav",I,[e("ul",null,[e("li",null,[o(l,{to:"#introduction"},{default:a(()=>n[0]||(n[0]=[s("Introduction")])),_:1,__:[0]})]),e("li",null,[o(l,{to:"#_1-blocking-the-main-thread"},{default:a(()=>n[1]||(n[1]=[s("1. Blocking the Main Thread")])),_:1,__:[1]})]),e("li",null,[o(l,{to:"#_2-ignoring-coroutine-scope-hierarchy"},{default:a(()=>n[2]||(n[2]=[s("2. Ignoring Coroutine Scope Hierarchy")])),_:1,__:[2]})]),e("li",null,[o(l,{to:"#_3-mishandling-exception-propagation"},{default:a(()=>n[3]||(n[3]=[s("3. Mishandling Exception Propagation")])),_:1,__:[3]})]),e("li",null,[o(l,{to:"#_4-using-the-wrong-coroutine-builder"},{default:a(()=>n[4]||(n[4]=[s("4. Using the Wrong Coroutine Builder")])),_:1,__:[4]})]),e("li",null,[o(l,{to:"#_5-overusing-globalscope"},{default:a(()=>n[5]||(n[5]=[s("5. Overusing GlobalScope")])),_:1,__:[5]})]),e("li",null,[o(l,{to:"#_6-not-considering-thread-safety"},{default:a(()=>n[6]||(n[6]=[s("6. Not Considering Thread Safety")])),_:1,__:[6]})]),e("li",null,[o(l,{to:"#_7-forgetting-to-cancel-coroutines"},{default:a(()=>n[7]||(n[7]=[s("7. Forgetting to Cancel Coroutines")])),_:1,__:[7]})]),e("li",null,[o(l,{to:"#_8-blocking-inside-coroutines"},{default:a(()=>n[8]||(n[8]=[s("8. Blocking Inside Coroutines")])),_:1,__:[8]})]),e("li",null,[o(l,{to:"#_9-misusingwithcontext"},{default:a(()=>n[9]||(n[9]=[s("9. MisusingwithContext")])),_:1,__:[9]})]),e("li",null,[o(l,{to:"#_10-not-testing-coroutines-properly"},{default:a(()=>n[10]||(n[10]=[s("10. Not Testing Coroutines Properly")])),_:1,__:[10]})])])]),n[88]||(n[88]=e("hr",null,null,-1)),o(v,{name:"Top 10 Coroutine Mistakes We All Have Made as Android Developers",desc:"As Android developers, Kotlin coroutines have become an indispensable tool in our asynchronous programming toolkit. They simplify concurrent tasks, make code more readable, and help us avoid the callback hell that was prevalent with earlier approaches. However, coroutines come with their own set of challenges, and it’s easy to fall into common pitfalls that can lead to bugs, crashes, or suboptimal performance.",url:"https://droidcon.com/top-10-coroutine-mistakes-we-all-have-made-as-android-developers",logo:"https://droidcon.com/wp-content/uploads/2021/07/favicon-300x300.png",preview:"https://droidcon.com/wp-content/uploads/2024/11/1_Bhfzsp01NibPkNYmWy9YyA.webp"}),n[89]||(n[89]=e("h2",{id:"introduction",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#introduction"},[e("span",null,"Introduction")])],-1)),n[90]||(n[90]=e("p",null,"As Android developers, Kotlin coroutines have become an indispensable tool in our asynchronous programming toolkit. They simplify concurrent tasks, make code more readable, and help us avoid the callback hell that was prevalent with earlier approaches. However, coroutines come with their own set of challenges, and it’s easy to fall into common pitfalls that can lead to bugs, crashes, or suboptimal performance.",-1)),n[91]||(n[91]=e("p",null,"In this article, we’ll explore the top 10 coroutine mistakes that many of us have made (often unknowingly) and provide guidance on how to avoid them. Whether you’re a seasoned developer or just starting with coroutines, this guide aims to enhance your understanding and help you write more robust asynchronous code.",-1)),n[92]||(n[92]=e("hr",null,null,-1)),n[93]||(n[93]=e("h2",{id:"_1-blocking-the-main-thread",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_1-blocking-the-main-thread"},[e("span",null,"1. Blocking the Main Thread")])],-1)),o(p,{data:[{id:"The Mistake"},{id:"Why It Happens"},{id:"How to Avoid It"}],active:0},{title0:a(({value:t,isActive:i})=>n[11]||(n[11]=[s("The Mistake")])),title1:a(({value:t,isActive:i})=>n[12]||(n[12]=[s("Why It Happens")])),title2:a(({value:t,isActive:i})=>n[13]||(n[13]=[s("How to Avoid It")])),tab0:a(({value:t,isActive:i})=>n[14]||(n[14]=[e("p",null,[s("Running long-running or blocking tasks on the"),e("code",null,"Main"),s("dispatcher, which can freeze the UI and lead to Application Not Responding (ANR) errors.")],-1)])),tab1:a(({value:t,isActive:i})=>n[15]||(n[15]=[e("p",null,[s("It’s easy to forget which dispatcher is being used, especially in complex codebases. Developers might launch a coroutine without specifying a dispatcher, inadvertently using the"),e("code",null,"Main"),s("dispatcher by default.")],-1)])),tab2:a(({value:t,isActive:i})=>n[16]||(n[16]=[e("p",null,"Always specify the appropriate dispatcher for your coroutine:",-1)])),_:1}),n[94]||(n[94]=r(`<div class="hint-container tip"><p class="hint-container-title">Example</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token comment">// Wrong</span></span>
<span class="line">GlobalScope<span class="token punctuation">.</span><span class="token function">launch</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Long-running task</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Correct</span></span>
<span class="line">GlobalScope<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>IO<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Long-running task</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Use<code>Dispatchers.IO</code>for I/O operations and<code>Dispatchers.Default</code>for CPU-intensive tasks. Reserve<code>Dispatchers.Main</code>for updating the UI.</p></div><hr><h2 id="_2-ignoring-coroutine-scope-hierarchy" tabindex="-1"><a class="header-anchor" href="#_2-ignoring-coroutine-scope-hierarchy"><span>2. Ignoring Coroutine Scope Hierarchy</span></a></h2>`,3)),o(p,{data:[{id:"The Mistake"},{id:"Why It Happens"},{id:"How to Avoid It"}],active:0},{title0:a(({value:t,isActive:i})=>n[17]||(n[17]=[s("The Mistake")])),title1:a(({value:t,isActive:i})=>n[18]||(n[18]=[s("Why It Happens")])),title2:a(({value:t,isActive:i})=>n[19]||(n[19]=[s("How to Avoid It")])),tab0:a(({value:t,isActive:i})=>n[20]||(n[20]=[e("p",null,"Not properly structuring coroutine scopes, leading to unmanaged coroutines that outlive their intended lifecycle, causing memory leaks or crashes.",-1)])),tab1:a(({value:t,isActive:i})=>n[21]||(n[21]=[e("p",null,[s("Using"),e("code",null,"GlobalScope"),s("indiscriminately or failing to cancel coroutines when a component is destroyed.")],-1)])),tab2:a(({value:t,isActive:i})=>n[22]||(n[22]=[e("p",null,"Use structured concurrency by tying coroutines to a specific lifecycle:",-1),e("ul",null,[e("li",null,[s("In activities or fragments, use"),e("code",null,"lifecycleScope"),s("or"),e("code",null,"viewLifecycleOwner.lifecycleScope"),s(".")]),e("li",null,[s("In ViewModels, use"),e("code",null,"viewModelScope"),s(".")])],-1)])),_:1}),n[95]||(n[95]=r(`<div class="hint-container tip"><p class="hint-container-title">Example</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token comment">// In a ViewModel</span></span>
<span class="line">viewModelScope<span class="token punctuation">.</span><span class="token function">launch</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Coroutine work</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This ensures that coroutines are cancelled appropriately when the associated lifecycle is destroyed.</p></div><hr><h2 id="_3-mishandling-exception-propagation" tabindex="-1"><a class="header-anchor" href="#_3-mishandling-exception-propagation"><span>3. Mishandling Exception Propagation</span></a></h2>`,3)),o(p,{data:[{id:"The Mistake"},{id:"Why It Happens"},{id:"How to Avoid It"}],active:0},{title0:a(({value:t,isActive:i})=>n[23]||(n[23]=[s("The Mistake")])),title1:a(({value:t,isActive:i})=>n[24]||(n[24]=[s("Why It Happens")])),title2:a(({value:t,isActive:i})=>n[25]||(n[25]=[s("How to Avoid It")])),tab0:a(({value:t,isActive:i})=>n[26]||(n[26]=[e("p",null,"Failing to handle exceptions within coroutines properly, which can cause unexpected crashes or silent failures.",-1)])),tab1:a(({value:t,isActive:i})=>n[27]||(n[27]=[e("p",null,[s("Assuming that"),e("code",null,"try-catch"),s("blocks will work the same way inside coroutines or not understanding how exceptions propagate in coroutine hierarchies.")],-1)])),tab2:a(({value:t,isActive:i})=>n[28]||(n[28]=[e("ul",null,[e("li",null,[s("Use"),e("code",null,"try-catch"),s("within the coroutine to handle exceptions. Be cautious to check for"),e("code",null,"CancellationException"),s(", as it’s used to signal coroutine cancellation, and should typically be rethrown to allow the coroutine to cancel properly.")]),e("li",null,"For structured concurrency, exceptions in child coroutines are propagated to the parent.")],-1)])),_:1}),n[96]||(n[96]=r(`<div class="hint-container tip"><p class="hint-container-title">Example</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line">viewModelScope<span class="token punctuation">.</span><span class="token function">launch</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// Suspended function that might throw an exception</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> Exception<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!</span><span class="token keyword">is</span> CancellationException<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// Handle exception</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">throw</span> e <span class="token comment">// Rethrow to respect cancellation</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Alternatively, use a<code>CoroutineExceptionHandler</code>for unhandled exceptions:</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">val</span> exceptionHandler <span class="token operator">=</span> CoroutineExceptionHandler <span class="token punctuation">{</span> \\_<span class="token punctuation">,</span> throwable <span class="token operator">-&gt;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>throwable <span class="token operator">!</span><span class="token keyword">is</span> CancellationException<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// Handle unhandled exception</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">viewModelScope<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span>exceptionHandler<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Suspended function that might throw an exception</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><hr><h2 id="_4-using-the-wrong-coroutine-builder" tabindex="-1"><a class="header-anchor" href="#_4-using-the-wrong-coroutine-builder"><span>4. Using the Wrong Coroutine Builder</span></a></h2>`,3)),o(p,{data:[{id:"The Mistake"},{id:"Why It Happens"},{id:"How to Avoid It"}],active:0},{title0:a(({value:t,isActive:i})=>n[29]||(n[29]=[s("The Mistake")])),title1:a(({value:t,isActive:i})=>n[30]||(n[30]=[s("Why It Happens")])),title2:a(({value:t,isActive:i})=>n[31]||(n[31]=[s("How to Avoid It")])),tab0:a(({value:t,isActive:i})=>n[32]||(n[32]=[e("p",null,[s("Confusing"),e("code",null,"launch"),s("and"),e("code",null,"async"),s("builders, leading to unintended behavior, such as missing results or unnecessary concurrency.")],-1)])),tab1:a(({value:t,isActive:i})=>n[33]||(n[33]=[e("p",null,[s("Misunderstanding the difference between"),e("code",null,"launch"),s("(which returns"),e("code",null,"Job"),s(") and"),e("code",null,"async"),s("(which returns"),e("code",null,"Deferred"),s("and is meant for obtaining a result).")],-1)])),tab2:a(({value:t,isActive:i})=>n[34]||(n[34]=[e("ul",null,[e("li",null,[s("Use"),e("code",null,"launch"),s("when you don’t need a result and want to fire off a coroutine.")]),e("li",null,[s("Use"),e("code",null,"async"),s("when you need to compute a value asynchronously.")])],-1)])),_:1}),n[97]||(n[97]=r(`<div class="hint-container tip"><p class="hint-container-title">Example</p><div class="language-kotiln line-numbers-mode" data-highlighter="prismjs" data-ext="kotiln"><pre><code class="language-kotiln"><span class="line">// Using async when you need a result</span>
<span class="line">val deferredResult = async {</span>
<span class="line">    computeValue()</span>
<span class="line">}</span>
<span class="line">val result = deferredResult.await()</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><hr><h2 id="_5-overusing-globalscope" tabindex="-1"><a class="header-anchor" href="#_5-overusing-globalscope"><span>5. Overusing GlobalScope</span></a></h2>`,3)),o(p,{data:[{id:"The Mistake"},{id:"Why It Happens"},{id:"How to Avoid It"}],active:0},{title0:a(({value:t,isActive:i})=>n[35]||(n[35]=[s("The Mistake")])),title1:a(({value:t,isActive:i})=>n[36]||(n[36]=[s("Why It Happens")])),title2:a(({value:t,isActive:i})=>n[37]||(n[37]=[s("How to Avoid It")])),tab0:a(({value:t,isActive:i})=>n[38]||(n[38]=[e("p",null,[s("Relying on"),e("code",null,"GlobalScope"),s("for launching coroutines, which can lead to coroutines that run longer than needed and are difficult to manage.")],-1)])),tab1:a(({value:t,isActive:i})=>n[39]||(n[39]=[e("p",null,"Forgetting to consider the coroutine’s lifecycle or for the sake of simplicity in examples and tutorials.",-1)])),tab2:a(({value:t,isActive:i})=>n[40]||(n[40]=[e("p",null,[s("Avoid"),e("code",null,"GlobalScope"),s("unless absolutely necessary. Instead, use structured concurrency with appropriate scopes:")],-1),e("ul",null,[e("li",null,[e("code",null,"lifecycleScope"),s("for UI-related components.")]),e("li",null,[e("code",null,"viewModelScope"),s("for ViewModels.")]),e("li",null,[s("Custom"),e("code",null,"CoroutineScope"),s("with proper cancellation.")])],-1)])),_:1}),n[98]||(n[98]=e("hr",null,null,-1)),n[99]||(n[99]=e("h2",{id:"_6-not-considering-thread-safety",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_6-not-considering-thread-safety"},[e("span",null,"6. Not Considering Thread Safety")])],-1)),o(p,{data:[{id:"The Mistake"},{id:"Why It Happens"},{id:"How to Avoid It"}],active:0},{title0:a(({value:t,isActive:i})=>n[41]||(n[41]=[s("The Mistake")])),title1:a(({value:t,isActive:i})=>n[42]||(n[42]=[s("Why It Happens")])),title2:a(({value:t,isActive:i})=>n[43]||(n[43]=[s("How to Avoid It")])),tab0:a(({value:t,isActive:i})=>n[44]||(n[44]=[e("p",null,"Accessing or modifying shared mutable data from multiple coroutines without proper synchronization, leading to race conditions.",-1)])),tab1:a(({value:t,isActive:i})=>n[45]||(n[45]=[e("p",null,"Assuming that coroutines handle threading for you and neglecting the need for thread safety in shared resources.",-1)])),tab2:a(({value:t,isActive:i})=>n[46]||(n[46]=[e("ul",null,[e("li",null,"Use thread-safe data structures."),e("li",null,[s("Synchronize access with"),e("code",null,"Mutex"),s("or"),e("code",null,"Atomic"),s("classes.")]),e("li",null,"Confine mutable state to specific threads or coroutines.")],-1)])),_:1}),n[100]||(n[100]=r(`<div class="hint-container tip"><p class="hint-container-title">Example using<code>Mutex</code></p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">val</span> mutex <span class="token operator">=</span> <span class="token function">Mutex</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">var</span> sharedResource <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line"></span>
<span class="line">coroutineScope<span class="token punctuation">.</span><span class="token function">launch</span> <span class="token punctuation">{</span></span>
<span class="line">    mutex<span class="token punctuation">.</span><span class="token function">withLock</span> <span class="token punctuation">{</span></span>
<span class="line">        sharedResource<span class="token operator">++</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><hr><h2 id="_7-forgetting-to-cancel-coroutines" tabindex="-1"><a class="header-anchor" href="#_7-forgetting-to-cancel-coroutines"><span>7. Forgetting to Cancel Coroutines</span></a></h2>`,3)),o(p,{data:[{id:"The Mistake"},{id:"Why It Happens"},{id:"How to Avoid It"}],active:0},{title0:a(({value:t,isActive:i})=>n[47]||(n[47]=[s("The Mistake")])),title1:a(({value:t,isActive:i})=>n[48]||(n[48]=[s("Why It Happens")])),title2:a(({value:t,isActive:i})=>n[49]||(n[49]=[s("How to Avoid It")])),tab0:a(({value:t,isActive:i})=>n[50]||(n[50]=[e("p",null,"Not cancelling coroutines when they’re no longer needed, which can waste resources or cause unintended side effects.",-1)])),tab1:a(({value:t,isActive:i})=>n[51]||(n[51]=[e("p",null,"Overlooking cancellation logic or not handling it properly in custom scopes.",-1)])),tab2:a(({value:t,isActive:i})=>n[52]||(n[52]=[e("ul",null,[e("li",null,"Use structured concurrency so that coroutines are cancelled automatically."),e("li",null,"When using custom scopes, ensure that you cancel them at the appropriate time.")],-1)])),_:1}),n[101]||(n[101]=r(`<div class="hint-container tip"><p class="hint-container-title">Example</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">val</span> job <span class="token operator">=</span> <span class="token function">CoroutineScope</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>IO<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">launch</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Work</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Cancel when done</span></span>
<span class="line">job<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><hr><h2 id="_8-blocking-inside-coroutines" tabindex="-1"><a class="header-anchor" href="#_8-blocking-inside-coroutines"><span>8. Blocking Inside Coroutines</span></a></h2>`,3)),o(p,{data:[{id:"The Mistake"},{id:"Why It Happens"},{id:"How to Avoid It"}],active:0},{title0:a(({value:t,isActive:i})=>n[53]||(n[53]=[s("The Mistake")])),title1:a(({value:t,isActive:i})=>n[54]||(n[54]=[s("Why It Happens")])),title2:a(({value:t,isActive:i})=>n[55]||(n[55]=[s("How to Avoid It")])),tab0:a(({value:t,isActive:i})=>n[56]||(n[56]=[e("p",null,[s("Using blocking calls like"),e("code",null,"Thread.sleep()"),s("or heavy computations inside coroutines without switching to an appropriate dispatcher, which can block the underlying thread.")],-1)])),tab1:a(({value:t,isActive:i})=>n[57]||(n[57]=[e("p",null,"Misunderstanding that coroutines are lightweight threads and thinking that blocking operations are safe within them.",-1)])),tab2:a(({value:t,isActive:i})=>n[58]||(n[58]=[e("ul",null,[e("li",null,"Avoid blocking calls inside coroutines."),e("li",null,[s("Use suspend functions like"),e("code",null,"delay()"),s("instead of"),e("code",null,"Thread.sleep()"),s(".")]),e("li",null,[s("Offload heavy computations to"),e("code",null,"Dispatchers.Default"),s(".")])],-1)])),_:1}),n[102]||(n[102]=r(`<div class="hint-container tip"><p class="hint-container-title">Example</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token comment">// Wrong</span></span>
<span class="line"><span class="token function">launch</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>IO<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Correct</span></span>
<span class="line"><span class="token function">launch</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>IO<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><hr><h2 id="_9-misusingwithcontext" tabindex="-1"><a class="header-anchor" href="#_9-misusingwithcontext"><span>9. Misusing<code>withContext</code></span></a></h2>`,3)),o(p,{data:[{id:"The Mistake"},{id:"Why It Happens"},{id:"How to Avoid It"}],active:0},{title0:a(({value:t,isActive:i})=>n[59]||(n[59]=[s("The Mistake")])),title1:a(({value:t,isActive:i})=>n[60]||(n[60]=[s("Why It Happens")])),title2:a(({value:t,isActive:i})=>n[61]||(n[61]=[s("How to Avoid It")])),tab0:a(({value:t,isActive:i})=>n[62]||(n[62]=[e("p",null,[s("Using"),e("code",null,"withContext"),s("incorrectly, such as nesting it unnecessarily or misunderstanding its purpose, leading to code that’s hard to read or inefficient.")],-1)])),tab1:a(({value:t,isActive:i})=>n[63]||(n[63]=[e("p",null,[s("Confusion about context switching and the scope of"),e("code",null,"withContext"),s(".")],-1)])),tab2:a(({value:t,isActive:i})=>n[64]||(n[64]=[e("ul",null,[e("li",null,[s("Use"),e("code",null,"withContext"),s("to switch the context for a specific block of code.")]),e("li",null,[s("Don’t nest"),e("code",null,"withContext"),s("calls without need.")]),e("li",null,[s("Keep"),e("code",null,"withContext"),s("blocks as small as possible.")])],-1)])),_:1}),n[103]||(n[103]=r(`<div class="hint-container tip"><p class="hint-container-title">Example</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token comment">// Correct usage</span></span>
<span class="line"><span class="token keyword">val</span> result <span class="token operator">=</span> <span class="token function">withContext</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>IO<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Perform I/O operation</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><hr><h2 id="_10-not-testing-coroutines-properly" tabindex="-1"><a class="header-anchor" href="#_10-not-testing-coroutines-properly"><span>10. Not Testing Coroutines Properly</span></a></h2>`,3)),o(p,{data:[{id:"The Mistake"},{id:"Why It Happens"},{id:"How to Avoid It"}],active:0},{title0:a(({value:t,isActive:i})=>n[65]||(n[65]=[s("The Mistake")])),title1:a(({value:t,isActive:i})=>n[66]||(n[66]=[s("Why It Happens")])),title2:a(({value:t,isActive:i})=>n[67]||(n[67]=[s("How to Avoid It")])),tab0:a(({value:t,isActive:i})=>n[68]||(n[68]=[e("p",null,"Neglecting to write proper tests for coroutine-based code, or writing tests that don’t handle coroutines correctly, leading to flaky or unreliable tests.",-1)])),tab1:a(({value:t,isActive:i})=>n[69]||(n[69]=[e("p",null,"Testing asynchronous code is more complex, and developers might not be familiar with the testing tools available for coroutines.",-1)])),tab2:a(({value:t,isActive:i})=>n[70]||(n[70]=[e("ul",null,[e("li",null,[s("Use"),e("code",null,"runBlockingTest"),s("or"),e("code",null,"runTest"),s("from"),e("code",null,"kotlinx-coroutines-test"),s("for unit testing coroutines.")]),e("li",null,[s("Leverage"),e("code",null,"TestCoroutineDispatcher"),s("and"),e("code",null,"TestCoroutineScope"),s("to control coroutine execution in tests.")]),e("li",null,"Ensure that you advance time properly when testing code with delays or timeouts.")],-1)])),_:1}),e("div",C,[n[84]||(n[84]=r(`<p class="hint-container-title">Example</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token annotation builtin">@Test</span></span>
<span class="line"><span class="token keyword">fun</span> <span class="token function">testCoroutine</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runTest <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">val</span> result <span class="token operator">=</span> <span class="token function">mySuspendingFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">assertEquals</span><span class="token punctuation">(</span>expectedResult<span class="token punctuation">,</span> result<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="#conclusion"><span>Conclusion</span></a></h2><p>Coroutines are powerful, but with great power comes great responsibility. By being aware of these common mistakes and understanding how to avoid them, you can write more efficient, reliable, and maintainable asynchronous code in your Android applications.</p><p>Remember:</p><ul><li>Always choose the correct dispatcher.</li><li>Tie your coroutines to the appropriate lifecycle.</li><li>Handle exceptions thoughtfully.</li><li>Be mindful of coroutine scopes and cancellation.</li><li>Test your coroutine code thoroughly.</li></ul><p>By following these best practices, you’ll harness the full potential of Kotlin coroutines and provide a smoother, more responsive experience for your app users.</p>`,8)),e("div",H,[n[82]||(n[82]=e("p",{class:"hint-container-title"},"Dobri Kostadinov",-1)),n[83]||(n[83]=e("p",null,"Android Consultant | Trainer",-1)),e("p",null,[e("a",T,[o(u,{icon:"fas fa-envelope"}),n[71]||(n[71]=s("Email me"))]),n[78]||(n[78]=s("|")),e("a",W,[n[72]||(n[72]=s("Follow me on LinkedIn (")),o(u,{icon:"fa-brands fa-linkedin"}),n[73]||(n[73]=e("code",null,"dobrikostadinov",-1)),n[74]||(n[74]=s(")"))]),n[79]||(n[79]=s("|")),e("a",D,[n[75]||(n[75]=s("Follow me on Medium (")),o(u,{icon:"fa-brands fa-medium"}),n[76]||(n[76]=e("code",null,"dobri.kostadinov",-1)),n[77]||(n[77]=s(")"))]),n[80]||(n[80]=s("|")),n[81]||(n[81]=e("a",{href:"https://buymeacoffee.com/dobri.kostadinov",target:"_blank",rel:"noopener noreferrer"},"Buy me a coffee",-1))])])]),e("div",S,[n[87]||(n[87]=e("p",{class:"hint-container-title"},"Info",-1)),e("p",null,[n[86]||(n[86]=s("This article is previously published on ")),e("a",N,[o(u,{icon:"fa-brands fa-medium"}),n[85]||(n[85]=e("code",null,"proandroiddev",-1))])]),o(v,{name:"Top 10 Coroutine Mistakes We All Have Made as Android Developers",desc:"Understanding and Avoiding Common Pitfalls in Asynchronous Programming with Kotlin Coroutines",url:"https://proandroiddev.com/top-10-coroutine-mistakes-we-all-have-made-as-android-developers-187d5e14d212/",logo:"https://miro.medium.com/v2/resize:fill:256:256/1*A8VytPZQhvUf_MG6hm_Dlw.png",preview:"https://miro.medium.com/v2/resize:fit:1024/1*Bhfzsp01NibPkNYmWy9YyA.png"})]),f(" TODO: add ARTICLE CARD "),o(c,m(h({title:"Top 10 Coroutine Mistakes We All Have Made as Android Developers",desc:"As Android developers, Kotlin coroutines have become an indispensable tool in our asynchronous programming toolkit. They simplify concurrent tasks, make code more readable, and help us avoid the callback hell that was prevalent with earlier approaches. However, coroutines come with their own set of challenges, and it’s easy to fall into common pitfalls that can lead to bugs, crashes, or suboptimal performance.",link:"https://chanhi2000.github.io/bookshelf/droidcon.com/top-10-coroutine-mistakes-we-all-have-made-as-android-developers.html",logo:"https://droidcon.com/wp-content/uploads/2021/07/favicon-300x300.png",background:"rgba(4,20,221,0.2)"})),null,16)])}const B=g(A,[["render",E]]),j=JSON.parse('{"path":"/droidcon.com/top-10-coroutine-mistakes-we-all-have-made-as-android-developers.html","title":"Top 10 Coroutine Mistakes We All Have Made as Android Developers","lang":"en-US","frontmatter":{"lang":"en-US","title":"Top 10 Coroutine Mistakes We All Have Made as Android Developers","description":"Article(s) > Top 10 Coroutine Mistakes We All Have Made as Android Developers","icon":"fa-brands fa-android","category":["Java","Kotlin","Android","Article(s)"],"tag":["blog","droidcon.com","java","kotlin","android"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Top 10 Coroutine Mistakes We All Have Made as Android Developers\\",\\"image\\":[\\"https://droidcon.com/wp-content/uploads/2024/11/1_Bhfzsp01NibPkNYmWy9YyA.webp\\"],\\"datePublished\\":\\"2024-11-22T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Dobri Kostadinov\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/droidcon.com/top-10-coroutine-mistakes-we-all-have-made-as-android-developers.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Top 10 Coroutine Mistakes We All Have Made as Android Developers"}],["meta",{"property":"og:description","content":"Article(s) > Top 10 Coroutine Mistakes We All Have Made as Android Developers"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://droidcon.com/wp-content/uploads/2024/11/1_Bhfzsp01NibPkNYmWy9YyA.webp"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://droidcon.com/wp-content/uploads/2024/11/1_Bhfzsp01NibPkNYmWy9YyA.webp"}],["meta",{"name":"twitter:image:alt","content":"Top 10 Coroutine Mistakes We All Have Made as Android Developers"}],["meta",{"property":"article:author","content":"Dobri Kostadinov"}],["meta",{"property":"article:tag","content":"android"}],["meta",{"property":"article:tag","content":"kotlin"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:tag","content":"droidcon.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2024-11-22T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Top 10 Coroutine Mistakes We All Have Made as Android Developers"},{"property":"og:description","content":"Top 10 Coroutine Mistakes We All Have Made as Android Developers"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/droidcon.com/top-10-coroutine-mistakes-we-all-have-made-as-android-developers.html"}]],"prev":"/programming/java-android/articles/README.md","date":"2024-11-22T00:00:00.000Z","isOriginal":false,"author":"Dobri Kostadinov","cover":"https://droidcon.com/wp-content/uploads/2024/11/1_Bhfzsp01NibPkNYmWy9YyA.webp"},"git":{},"readingTime":{"minutes":5.66,"words":1698},"filePathRelative":"droidcon.com/top-10-coroutine-mistakes-we-all-have-made-as-android-developers.md","copyright":{"author":"Dobri Kostadinov"}}');export{B as comp,j as data};
