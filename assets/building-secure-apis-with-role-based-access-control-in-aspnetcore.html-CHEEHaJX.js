import{_ as v}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as h,d as s,f as e,b as i,a as g,t as b,n as r,g as u,w as t,e as a,r as o,o as y}from"./app-BVguHYKu.js";const w={},f={id:"frontmatter-title-관련",tabindex:"-1"},A={class:"header-anchor",href:"#frontmatter-title-관련"},C={class:"table-of-contents"},P={href:"https://auth0.com/docs/manage-users/access-control/rbac",target:"_blank",rel:"noopener noreferrer"},R={href:"https://learn.microsoft.com/en-us/aspnet/core/security/authorization/introduction",target:"_blank",rel:"noopener noreferrer"};function T(d,n){const l=o("VPCard"),p=o("router-link"),k=o("SiteInfo"),c=o("VPIcon"),m=o("RouteLink");return y(),h("div",null,[s("h1",f,[s("a",A,[s("span",null,b(d.$frontmatter.title)+" 관련",1)])]),e(l,r(u({title:"C# > Article(s)",desc:"Article(s)",link:"/programming/cs/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",C,[s("ul",null,[s("li",null,[e(p,{to:"#understanding-rbac-components"},{default:t(()=>n[0]||(n[0]=[a("Understanding RBAC Components")])),_:1,__:[0]})]),s("li",null,[e(p,{to:"#building-a-custom-authorization-handler"},{default:t(()=>n[1]||(n[1]=[a("Building a Custom Authorization Handler")])),_:1,__:[1]})]),s("li",null,[e(p,{to:"#creating-clean-apis-with-extension-methods"},{default:t(()=>n[2]||(n[2]=[a("Creating Clean APIs with Extension Methods")])),_:1,__:[2]})]),s("li",null,[e(p,{to:"#extension-points-for-production"},{default:t(()=>n[3]||(n[3]=[a("Extension Points for Production")])),_:1,__:[3]}),s("ul",null,[s("li",null,[e(p,{to:"#type-safe-permissions-with-enums"},{default:t(()=>n[4]||(n[4]=[a("Type-Safe Permissions with Enums")])),_:1,__:[4]})]),s("li",null,[e(p,{to:"#server-side-permission-resolution"},{default:t(()=>n[5]||(n[5]=[a("Server-Side Permission Resolution")])),_:1,__:[5]})])])]),s("li",null,[e(p,{to:"#takeaway"},{default:t(()=>n[6]||(n[6]=[a("Takeaway")])),_:1,__:[6]})])])]),n[18]||(n[18]=s("hr",null,null,-1)),e(k,{name:"Building Secure APIs with Role-Based Access Control in ASP.NET Core",desc:"Learn how to implement Role-Based Access Control (RBAC) in ASP.NET Core with custom authorization handlers, permission-based policies, and clean extension methods for both Minimal APIs and MVC controllers.",url:"https://milanjovanovic.tech/blog/building-secure-apis-with-role-based-access-control-in-aspnetcore",logo:"https://milanjovanovic.tech/profile_favicon.png",preview:"https://milanjovanovic.tech/blog-covers/mnw_161.png"}),n[19]||(n[19]=i('<p>Authentication tells you <strong>who</strong> the user is. Authorization tells you <strong>what</strong> they can do.</p><p>Most .NET developers start with simple role-based checks: &quot;Is this user an Admin?&quot; But as your application grows, you quickly realize that roles alone aren&#39;t enough. You need <strong>granular permissions</strong> that can be combined and assigned flexibly.</p><p>That&#39;s where <strong>Role-Based Access Control (RBAC)</strong> shines. Instead of hardcoding role checks everywhere, you define specific permissions and let roles carry those permissions. A user might be a <code>Manager</code> role, but what matters is whether they have the <code>users:delete</code> permission.</p><p>Let me show you how to build a flexible, <strong>permission-based authorization</strong> system in ASP.NET Core.</p><hr><h2 id="understanding-rbac-components" tabindex="-1"><a class="header-anchor" href="#understanding-rbac-components"><span>Understanding RBAC Components</span></a></h2>',6)),s("p",null,[s("a",P,[e(c,{icon:"fas fa-globe"}),n[7]||(n[7]=a("RBAC"))]),n[8]||(n[8]=a(" has three key components that work together:"))]),n[20]||(n[20]=i('<p><strong>Users</strong> → assigned to → <strong>Roles</strong> → which contain → <strong>Permissions</strong></p><p>Here&#39;s how it flows:</p><ul><li><strong>Users</strong>: Individual people using your system</li><li><strong>Roles</strong>: Groups of related permissions (Admin, Manager, Editor)</li><li><strong>Permissions</strong>: Specific actions users can perform (users:read, orders:create, reports:delete)</li></ul><figure><img src="https://milanjovanovic.tech/blogs/mnw_161/rbac.png?imwidth=3840" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>The beauty is in the flexibility. You can assign multiple roles to a user, and roles can be modified without touching user assignments. Need to give all Managers the ability to export reports? Just add the <code>reports:export</code> permission to the <code>Manager</code> role.</p><p>This is much more maintainable than checking if someone is specifically an <code>Admin</code> or <code>Super Manager</code> in your code.</p><p>It also adds an extra extension point: you can implement custom permissions for some users without creating new roles.</p><hr><h2 id="building-a-custom-authorization-handler" tabindex="-1"><a class="header-anchor" href="#building-a-custom-authorization-handler"><span>Building a Custom Authorization Handler</span></a></h2>',9)),s("p",null,[s("a",R,[e(c,{icon:"fa-brands fa-microsoft"}),n[9]||(n[9]=a("ASP.NET Core's authorization system"))]),n[10]||(n[10]=a(" is built around ")),n[11]||(n[11]=s("strong",null,"policies",-1)),n[12]||(n[12]=a(" and ")),n[13]||(n[13]=s("strong",null,"requirements",-1)),n[14]||(n[14]=a(". Let's create a custom handler that checks permissions stored in the user's claims:"))]),n[21]||(n[21]=i(`<div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PermissionAuthorizationRequirement</span><span class="token punctuation">(</span><span class="token keyword">params</span> <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> allowedPermissions<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">:</span> AuthorizationHandler<span class="token operator">&lt;</span>PermissionAuthorizationRequirement<span class="token operator">&gt;</span><span class="token punctuation">,</span> IAuthorizationRequirement</span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> AllowedPermissions <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> allowedPermissions<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name">Task</span> <span class="token function">HandleRequirementAsync</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token class-name">AuthorizationHandlerContext</span> context<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">PermissionAuthorizationRequirement</span> requirement<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> permission <span class="token keyword">in</span> requirement<span class="token punctuation">.</span>AllowedPermissions<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name"><span class="token keyword">bool</span></span> found <span class="token operator">=</span> context<span class="token punctuation">.</span>User<span class="token punctuation">.</span><span class="token function">FindFirst</span><span class="token punctuation">(</span>c <span class="token operator">=&gt;</span></span>
<span class="line">                c<span class="token punctuation">.</span>Type <span class="token operator">==</span> CustomClaimTypes<span class="token punctuation">.</span>Permission <span class="token operator">&amp;&amp;</span></span>
<span class="line">                c<span class="token punctuation">.</span>Value <span class="token operator">==</span> permission<span class="token punctuation">)</span> <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>found<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">{</span></span>
<span class="line">                context<span class="token punctuation">.</span><span class="token function">Succeed</span><span class="token punctuation">(</span>requirement<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">return</span> Task<span class="token punctuation">.</span>CompletedTask<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Here&#39;s what&#39;s happening under the hood:</p><p>The class combines both the <strong>requirement</strong> (what permissions are needed) and the <strong>handler</strong> (how to check them). This keeps related logic together and reduces boilerplate.</p><p>The handler looks through the user&#39;s claims for any claim with type <code>Permission</code> that matches one of the required permissions. It&#39;s an <strong>OR operation</strong> - the user only needs <strong>one</strong> of the specified permissions to proceed.</p><p>If a matching permission is found, we call <code>context.Succeed(requirement)</code> and break out early. No need to check the remaining permissions.</p><p>Alternatively, you could implement an <strong>AND operation</strong> if your use case requires all permissions to be present.</p><p>You&#39;ll need to define your custom claim type:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">CustomClaimTypes</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">string</span></span> Permission <span class="token operator">=</span> <span class="token string">&quot;permission&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And then you&#39;ll use this when issuing JWT tokens or setting up user claims.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token class-name"><span class="token keyword">var</span></span> permissions <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token punctuation">(</span></span>
<span class="line">        <span class="token keyword">from</span> role <span class="token keyword">in</span> dbContext<span class="token punctuation">.</span>Roles</span>
<span class="line">        <span class="token keyword">join</span> permission <span class="token keyword">in</span> dbContext<span class="token punctuation">.</span>RolePermissions <span class="token keyword">on</span> role<span class="token punctuation">.</span>Id equals permission<span class="token punctuation">.</span>RoleId</span>
<span class="line">        <span class="token keyword">where</span> <span class="token class-name">roles</span><span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>role<span class="token punctuation">.</span>Name<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">select</span> permission<span class="token punctuation">.</span>Name<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">Distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">ToArrayAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">List<span class="token punctuation">&lt;</span>Claim<span class="token punctuation">&gt;</span></span> claims <span class="token operator">=</span></span>
<span class="line"><span class="token punctuation">[</span></span>
<span class="line">    <span class="token keyword">new</span><span class="token punctuation">(</span>JwtRegisteredClaimNames<span class="token punctuation">.</span>Sub<span class="token punctuation">,</span> user<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">new</span><span class="token punctuation">(</span>JwtRegisteredClaimNames<span class="token punctuation">.</span>Email<span class="token punctuation">,</span> user<span class="token punctuation">.</span>Email<span class="token operator">!</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token range operator">..</span>roles<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>r <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Claim</span><span class="token punctuation">(</span>ClaimTypes<span class="token punctuation">.</span>Role<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token range operator">..</span>permissions<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>p <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Claim</span><span class="token punctuation">(</span>CustomClaimTypes<span class="token punctuation">.</span>Permission<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> tokenDescriptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SecurityTokenDescriptor</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    Subject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ClaimsIdentity</span><span class="token punctuation">(</span>claims<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    Expires <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>UtcNow<span class="token punctuation">.</span><span class="token function">AddMinutes</span><span class="token punctuation">(</span>configuration<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetValue</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;Jwt:ExpirationInMinutes&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    SigningCredentials <span class="token operator">=</span> credentials<span class="token punctuation">,</span></span>
<span class="line">    Issuer <span class="token operator">=</span> configuration<span class="token punctuation">[</span><span class="token string">&quot;Jwt:Issuer&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    Audience <span class="token operator">=</span> configuration<span class="token punctuation">[</span><span class="token string">&quot;Jwt:Audience&quot;</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> tokenHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JsonWebTokenHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name"><span class="token keyword">string</span></span> accessToken <span class="token operator">=</span> tokenHandler<span class="token punctuation">.</span><span class="token function">CreateToken</span><span class="token punctuation">(</span>tokenDescriptor<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="creating-clean-apis-with-extension-methods" tabindex="-1"><a class="header-anchor" href="#creating-clean-apis-with-extension-methods"><span>Creating Clean APIs with Extension Methods</span></a></h2><p>Raw authorization policies work, but they&#39;re verbose. Let&#39;s create extension methods that make the developer experience much cleaner:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">PermissionExtensions</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">RequirePermission</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token keyword">this</span> <span class="token class-name">AuthorizationPolicyBuilder</span> builder<span class="token punctuation">,</span></span>
<span class="line">        <span class="token keyword">params</span> <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> allowedPermissions<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        builder<span class="token punctuation">.</span><span class="token function">AddRequirements</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">PermissionAuthorizationRequirement</span><span class="token punctuation">(</span>allowedPermissions<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now you can use this with <strong>Minimal APIs</strong>:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Permissions</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">string</span></span> UsersRead <span class="token operator">=</span> <span class="token string">&quot;users:read&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">string</span></span> UsersUpdate <span class="token operator">=</span> <span class="token string">&quot;users:update&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">string</span></span> UsersDelete <span class="token operator">=</span> <span class="token string">&quot;users:delete&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">MapGet</span><span class="token punctuation">(</span><span class="token string">&quot;me&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">ApplicationDbContext</span> dbContext<span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> user <span class="token operator">=</span> <span class="token keyword">await</span> dbContext<span class="token punctuation">.</span>Users</span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">AsNoTracking</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>u <span class="token operator">=&gt;</span> u<span class="token punctuation">.</span>Id <span class="token operator">==</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>User<span class="token punctuation">.</span><span class="token function">FindFirstValue</span><span class="token punctuation">(</span>JwtRegisteredClaimNames<span class="token punctuation">.</span>Sub<span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>u <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">UserDto</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            u<span class="token punctuation">.</span>Id<span class="token punctuation">,</span></span>
<span class="line">            u<span class="token punctuation">.</span>Email<span class="token punctuation">,</span></span>
<span class="line">            u<span class="token punctuation">.</span>FirstName<span class="token punctuation">,</span></span>
<span class="line">            u<span class="token punctuation">.</span>LastName</span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">SingleOrDefaultAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> Results<span class="token punctuation">.</span><span class="token function">Ok</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token function">RequireAuthorization</span><span class="token punctuation">(</span>policy <span class="token operator">=&gt;</span> policy<span class="token punctuation">.</span><span class="token function">RequirePermission</span><span class="token punctuation">(</span>Permissions<span class="token punctuation">.</span>UsersRead<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>For <strong>MVC Controllers</strong>, create an attribute:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">AttributeUsage</span><span class="token attribute-arguments"><span class="token punctuation">(</span>AttributeTargets<span class="token punctuation">.</span>Method <span class="token operator">|</span> AttributeTargets<span class="token punctuation">.</span>Class<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequirePermissionAttribute</span><span class="token punctuation">(</span><span class="token keyword">params</span> <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> permissions<span class="token punctuation">)</span> <span class="token punctuation">:</span> AuthorizeAttribute</span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token function">RequirePermissionAttribute</span><span class="token punctuation">(</span><span class="token keyword">params</span> <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> permissions<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span><span class="token named-parameter punctuation">policy</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">,</span> permissions<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then register the policy in your DI container:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddAuthorizationBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">AddPolicy</span><span class="token punctuation">(</span><span class="token string">&quot;users:read&quot;</span><span class="token punctuation">,</span> policy <span class="token operator">=&gt;</span> policy<span class="token punctuation">.</span><span class="token function">RequirePermission</span><span class="token punctuation">(</span>Permissions<span class="token punctuation">.</span>UsersRead<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">AddPolicy</span><span class="token punctuation">(</span><span class="token string">&quot;users:update&quot;</span><span class="token punctuation">,</span> policy <span class="token operator">=&gt;</span> policy<span class="token punctuation">.</span><span class="token function">RequirePermission</span><span class="token punctuation">(</span>Permissions<span class="token punctuation">.</span>UsersUpdate<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Usage becomes clean:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">RequirePermission</span><span class="token attribute-arguments"><span class="token punctuation">(</span>Permissions<span class="token punctuation">.</span>UsersUpdate<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>IActionResult<span class="token punctuation">&gt;</span></span> <span class="token function">UpdateUser</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> id<span class="token punctuation">,</span> <span class="token class-name">UpdateUserRequest</span> request<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Your logic here</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="extension-points-for-production" tabindex="-1"><a class="header-anchor" href="#extension-points-for-production"><span>Extension Points for Production</span></a></h2><p>The basic implementation works great, but we could improve it further. Here are two key extension points:</p><h3 id="type-safe-permissions-with-enums" tabindex="-1"><a class="header-anchor" href="#type-safe-permissions-with-enums"><span>Type-Safe Permissions with Enums</span></a></h3><p>Instead of magic strings, use enums for compile-time safety:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Permission</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    UsersRead<span class="token punctuation">,</span></span>
<span class="line">    UsersUpdate<span class="token punctuation">,</span></span>
<span class="line">    UsersDelete<span class="token punctuation">,</span></span>
<span class="line">    OrdersCreate<span class="token punctuation">,</span></span>
<span class="line">    ReportsExport</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You&#39;ll have to convert these to strings when issuing claims and checking permissions. And also convert from a string to an enum, when reading from claims and validating the permissions.</p><h3 id="server-side-permission-resolution" tabindex="-1"><a class="header-anchor" href="#server-side-permission-resolution"><span>Server-Side Permission Resolution</span></a></h3><p>Rather than storing all permissions in JWT tokens (which can get large), fetch them server-side using <code>IClaimsTransformation</code>:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PermissionClaimsTransformation</span><span class="token punctuation">(</span><span class="token class-name">IPermissionService</span> permissionService<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">:</span> IClaimsTransformation</span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>ClaimsPrincipal<span class="token punctuation">&gt;</span></span> <span class="token function">TransformAsync</span><span class="token punctuation">(</span><span class="token class-name">ClaimsPrincipal</span> principal<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>principal<span class="token punctuation">.</span>Identity<span class="token punctuation">?.</span>IsAuthenticated <span class="token operator">!=</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> principal<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> userId <span class="token operator">=</span> principal<span class="token punctuation">.</span><span class="token function">FindFirst</span><span class="token punctuation">(</span>ClaimTypes<span class="token punctuation">.</span>NameIdentifier<span class="token punctuation">)</span><span class="token punctuation">?.</span>Value<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>userId <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> principal<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// Fetch permissions from database, then cache</span></span>
<span class="line">        <span class="token comment">// IMPORTANT: Cache these results to avoid DB hits on every request</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> permissions <span class="token operator">=</span> <span class="token keyword">await</span> permissionService<span class="token punctuation">.</span><span class="token function">GetUserPermissionsAsync</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> claimsIdentity <span class="token operator">=</span> <span class="token punctuation">(</span>ClaimsIdentity<span class="token punctuation">)</span>principal<span class="token punctuation">.</span>Identity<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> permission <span class="token keyword">in</span> permissions<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            claimsIdentity<span class="token punctuation">.</span><span class="token function">AddClaim</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Claim</span><span class="token punctuation">(</span>CustomClaimTypes<span class="token punctuation">.</span>Permission<span class="token punctuation">,</span> permission<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> principal<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Register it in your DI container:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddScoped</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IClaimsTransformation<span class="token punctuation">,</span> PermissionClaimsTransformation<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>This approach keeps your JWTs lightweight while still providing fast authorization checks through claims.</p>`,35)),s("p",null,[n[16]||(n[16]=a("You can learn more about claims transformation in my ")),e(m,{to:"/milanjovanovic.tech/master-claims-transformation-for-flexible-aspnetcore-authorization.html"},{default:t(()=>n[15]||(n[15]=[s("strong",null,"previous article",-1)])),_:1,__:[15]}),n[17]||(n[17]=a("."))]),n[22]||(n[22]=i('<hr><h2 id="takeaway" tabindex="-1"><a class="header-anchor" href="#takeaway"><span>Takeaway</span></a></h2><p><strong>RBAC</strong> transforms authorization from a maintenance headache into a flexible, scalable system.</p><p><strong>Start with permissions</strong>: Define what actions users can perform, not what roles they have.</p><p><strong>Custom authorization handlers</strong> give you complete control over how permissions are validated.</p><p><strong>Extension methods</strong> make the developer experience clean and consistent across your API.</p><p>For production systems, consider <strong>type-safe enums</strong> and <strong>server-side permission resolution</strong> to keep your tokens lean and your code maintainable.</p><p>The result? Authorization logic that&#39;s easy to understand, test, and modify as your application evolves.</p><hr>',9)),g(" TODO: add ARTICLE CARD "),e(l,r(u({title:"Building Secure APIs with Role-Based Access Control in ASP.NET Core",desc:"Learn how to implement Role-Based Access Control (RBAC) in ASP.NET Core with custom authorization handlers, permission-based policies, and clean extension methods for both Minimal APIs and MVC controllers.",link:"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/building-secure-apis-with-role-based-access-control-in-aspnetcore.html",logo:"https://milanjovanovic.tech/profile_favicon.png",background:"rgba(79,70,229,0.2)"})),null,16)])}const I=v(w,[["render",T]]),q=JSON.parse('{"path":"/milanjovanovic.tech/building-secure-apis-with-role-based-access-control-in-aspnetcore.html","title":"Building Secure APIs with Role-Based Access Control in ASP.NET Core","lang":"en-US","frontmatter":{"lang":"en-US","title":"Building Secure APIs with Role-Based Access Control in ASP.NET Core","description":"Article(s) > Building Secure APIs with Role-Based Access Control in ASP.NET Core","icon":"iconfont icon-csharp","category":["C#","DotNet","Article(s)"],"tag":["blog","milanjovanovic.tech","cs","c#","csharp","dotnet"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Building Secure APIs with Role-Based Access Control in ASP.NET Core\\",\\"image\\":[\\"https://milanjovanovic.tech/blogs/mnw_161/rbac.png?imwidth=3840\\"],\\"datePublished\\":\\"2025-09-27T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Milan Jovanović\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/building-secure-apis-with-role-based-access-control-in-aspnetcore.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Building Secure APIs with Role-Based Access Control in ASP.NET Core"}],["meta",{"property":"og:description","content":"Article(s) > Building Secure APIs with Role-Based Access Control in ASP.NET Core"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://milanjovanovic.tech/blog-covers/mnw_161.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://milanjovanovic.tech/blog-covers/mnw_161.png"}],["meta",{"name":"twitter:image:alt","content":"Building Secure APIs with Role-Based Access Control in ASP.NET Core"}],["meta",{"property":"article:author","content":"Milan Jovanović"}],["meta",{"property":"article:tag","content":"dotnet"}],["meta",{"property":"article:tag","content":"csharp"}],["meta",{"property":"article:tag","content":"c#"}],["meta",{"property":"article:tag","content":"cs"}],["meta",{"property":"article:tag","content":"milanjovanovic.tech"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2025-09-27T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Building Secure APIs with Role-Based Access Control in ASP.NET Core"},{"property":"og:description","content":"Building Secure APIs with Role-Based Access Control in ASP.NET Core"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/building-secure-apis-with-role-based-access-control-in-aspnetcore.html"}]],"prev":"/programming/cs/articles/README.md","date":"2025-09-27T00:00:00.000Z","isOriginal":false,"author":"Milan Jovanović","cover":"https://milanjovanovic.tech/blog-covers/mnw_161.png"},"git":{},"readingTime":{"minutes":4.37,"words":1311},"filePathRelative":"milanjovanovic.tech/building-secure-apis-with-role-based-access-control-in-aspnetcore.md","copyright":{"author":"Milan Jovanović"}}');export{I as comp,q as data};
