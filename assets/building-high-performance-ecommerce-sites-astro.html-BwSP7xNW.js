import{_ as v}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as m,d as n,f as p,b as g,a as b,t as y,n as i,g as r,w as t,e as a,r as o,o as h}from"./app-BVguHYKu.js";const f="/bookshelf/assets/image/blog.logrocket.com/building-high-performance-ecommerce-sites-astro/banner.png",w="/bookshelf/assets/image/blog.logrocket.com/building-high-performance-ecommerce-sites-astro/img1-Astro-installation-setup.png",x="/bookshelf/assets/image/blog.logrocket.com/building-high-performance-ecommerce-sites-astro/img2-User-registration-page.png",P="/bookshelf/assets/image/blog.logrocket.com/building-high-performance-ecommerce-sites-astro/img3-User-login-page.png",S="/bookshelf/assets/image/blog.logrocket.com/building-high-performance-ecommerce-sites-astro/img4-Modifying-user-role-admin-MongoDB.png",A="/bookshelf/assets/image/blog.logrocket.com/building-high-performance-ecommerce-sites-astro/img5-Protected-routes-admin-role-UI.png",I="/bookshelf/assets/image/blog.logrocket.com/building-high-performance-ecommerce-sites-astro/img6-Dialog-form-admin-create-new-product.png",C="/bookshelf/assets/image/blog.logrocket.com/building-high-performance-ecommerce-sites-astro/img7-Table-admin-view-remove-products-list.png",R="/bookshelf/assets/image/blog.logrocket.com/building-high-performance-ecommerce-sites-astro/img8-Sample-product-details-page.png",N="/bookshelf/assets/image/blog.logrocket.com/building-high-performance-ecommerce-sites-astro/img9-Sample-cart-details-page.png",L="/bookshelf/assets/image/blog.logrocket.com/building-high-performance-ecommerce-sites-astro/img10-User-checkout-flow-shipping-page.avif",M="/bookshelf/assets/image/blog.logrocket.com/building-high-performance-ecommerce-sites-astro/img11-User-checkout-flow-payment-page.png",O="/bookshelf/assets/image/blog.logrocket.com/building-high-performance-ecommerce-sites-astro/img12-User-checkout-flow-place-order.png",j="/bookshelf/assets/image/blog.logrocket.com/building-high-performance-ecommerce-sites-astro/img13-Sample-order-details-page.png",F="/bookshelf/assets/image/blog.logrocket.com/building-high-performance-ecommerce-sites-astro/img14-Admin-order-management-page.png",E="/bookshelf/assets/image/blog.logrocket.com/building-high-performance-ecommerce-sites-astro/img15-Admin-user-management-page.png",U="/bookshelf/assets/image/blog.logrocket.com/building-high-performance-ecommerce-sites-astro/img16-User-account-management-page.png",T="/bookshelf/assets/image/blog.logrocket.com/building-high-performance-ecommerce-sites-astro/img17-Final-Astro-ecommerce-project-homepage.png",D={},q={id:"frontmatter-title-관련",tabindex:"-1"},H={class:"header-anchor",href:"#frontmatter-title-관련"},B={class:"table-of-contents"},_={href:"https://github.com/bonarhyme/astro-ecommerce-frontend",target:"_blank",rel:"noopener noreferrer"};function z(u,s){const l=o("VPCard"),e=o("router-link"),k=o("SiteInfo"),c=o("RouteLink"),d=o("VPIcon");return h(),m("div",null,[n("h1",q,[n("a",H,[n("span",null,y(u.$frontmatter.title)+" 관련",1)])]),p(l,i(r({title:"Astro.js > Article(s)",desc:"Article(s)",link:"/programming/js-astro/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),n("nav",B,[n("ul",null,[n("li",null,[p(e,{to:"#strong-vs-static-vs-dynamic-typing"},{default:t(()=>s[0]||(s[0]=[a("Strong vs. static vs. dynamic typing")])),_:1,__:[0]})]),n("li",null,[p(e,{to:"#introducing-our-ecommerce-project"},{default:t(()=>s[1]||(s[1]=[a("Introducing our ecommerce project")])),_:1,__:[1]}),n("ul",null,[n("li",null,[p(e,{to:"#prepare-custom-ecommerce-backend-code"},{default:t(()=>s[2]||(s[2]=[a("Prepare custom ecommerce backend code")])),_:1,__:[2]})])])]),n("li",null,[p(e,{to:"#setting-up-our-astro-project"},{default:t(()=>s[3]||(s[3]=[a("Setting up our Astro project")])),_:1,__:[3]}),n("ul",null,[n("li",null,[p(e,{to:"#defining-global-states-and-api-functions"},{default:t(()=>s[4]||(s[4]=[a("Defining global states and API functions")])),_:1,__:[4]})]),n("li",null,[p(e,{to:"#creating-the-layout"},{default:t(()=>s[5]||(s[5]=[a("Creating the layout")])),_:1,__:[5]})]),n("li",null,[p(e,{to:"#setting-up-message-loader-dialog-heading-and-button-components"},{default:t(()=>s[6]||(s[6]=[a("Setting up message, loader, dialog, heading, and button components")])),_:1,__:[6]})]),n("li",null,[p(e,{to:"#working-on-the-user-registration-and-login-pages"},{default:t(()=>s[7]||(s[7]=[a("Working on the user registration and login pages")])),_:1,__:[7]})]),n("li",null,[p(e,{to:"#setting-up-the-page-for-creating-and-viewing-products"},{default:t(()=>s[8]||(s[8]=[a("Setting up the page for creating and viewing products")])),_:1,__:[8]})]),n("li",null,[p(e,{to:"#working-on-the-product-details-page"},{default:t(()=>s[9]||(s[9]=[a("Working on the product details page")])),_:1,__:[9]})]),n("li",null,[p(e,{to:"#setting-up-the-cart-page"},{default:t(()=>s[10]||(s[10]=[a("Setting up the cart page")])),_:1,__:[10]})]),n("li",null,[p(e,{to:"#working-on-the-checkout-page"},{default:t(()=>s[11]||(s[11]=[a("Working on the checkout page")])),_:1,__:[11]})]),n("li",null,[p(e,{to:"#setting-up-the-checkoutcart-component-and-checkout-astro-page"},{default:t(()=>s[12]||(s[12]=[a("Setting up the CheckoutCart component and checkout.astro page")])),_:1,__:[12]})]),n("li",null,[p(e,{to:"#working-on-the-order-details-page"},{default:t(()=>s[13]||(s[13]=[a("Working on the order details page")])),_:1,__:[13]})]),n("li",null,[p(e,{to:"#setting-up-the-order-management-page"},{default:t(()=>s[14]||(s[14]=[a("Setting up the order management page")])),_:1,__:[14]})]),n("li",null,[p(e,{to:"#working-on-the-user-management-page"},{default:t(()=>s[15]||(s[15]=[a("Working on the user management page")])),_:1,__:[15]})]),n("li",null,[p(e,{to:"#setting-up-the-account-page"},{default:t(()=>s[16]||(s[16]=[a("Setting up the account page")])),_:1,__:[16]})]),n("li",null,[p(e,{to:"#working-on-the-homepage"},{default:t(()=>s[17]||(s[17]=[a("Working on the homepage")])),_:1,__:[17]})])])]),n("li",null,[p(e,{to:"#conclusion"},{default:t(()=>s[18]||(s[18]=[a("Conclusion")])),_:1,__:[18]})])])]),s[30]||(s[30]=n("hr",null,null,-1)),p(k,{name:"Building high-performance ecommerce sites with Astro",desc:"Learn to set up a completely custom Astro ecommerce implementation that's also highly performant and type-safe in this straightforward guide.",url:"https://blog.logrocket.com/building-high-performance-ecommerce-sites-astro",logo:"/assets/image/blog.logrocket.com/favicon.png",preview:"/assets/image/blog.logrocket.com/building-high-performance-ecommerce-sites-astro/banner.png"}),n("p",null,[s[20]||(s[20]=a("In this tutorial, we’ll explore how to develop a type-safe ecommerce site with Astro. ")),p(c,{to:"/blog.logrocket.com/understanding-astro-islands-architecture.html"},{default:t(()=>s[19]||(s[19]=[n("strong",null,"Astro’s innovative islands architecture",-1)])),_:1,__:[19]}),s[21]||(s[21]=a(" empowers developers to create content-first websites using type-safe Markdown and MDX APIs. It also integrates smoothly with frontend frameworks like React, Vue, and more."))]),s[31]||(s[31]=n("figure",null,[n("img",{src:f,alt:"Building High Performance Ecommerce Sites With Astro",tabindex:"0",loading:"lazy"}),n("figcaption",null,"Building High Performance Ecommerce Sites With Astro")],-1)),s[32]||(s[32]=n("p",null,"We’ll focus on constructing a high-performance web app that leverages Astro, React, and TypeScript. Additionally, we’ll integrate our app with a custom server for a comprehensive understanding.",-1)),n("p",null,[s[23]||(s[23]=a("Before delving into the ecommerce site implementation, let’s delve into the significance of ")),p(c,{to:"/blog.logrocket.com/using-strongly-typed-vs-statically-typed-code.html"},{default:t(()=>s[22]||(s[22]=[n("strong",null,"strong and static typing",-1)])),_:1,__:[22]}),s[24]||(s[24]=a(" in frontend projects to understand why we’re using TypeScript in this project."))]),s[33]||(s[33]=g('<hr><h2 id="strong-vs-static-vs-dynamic-typing" tabindex="-1"><a class="header-anchor" href="#strong-vs-static-vs-dynamic-typing"><span>Strong vs. static vs. dynamic typing</span></a></h2><p>Strong typing typically implies that once a variable is defined, its value type doesn’t automatically convert to another type when interacting with a variable of a different type. Python serves as an excellent example of strong typing.</p><p>For instance, consider having the variables <code>age = 25</code> and <code>name = &quot;Bonarhyme&quot;</code>. Due to strong typing, attempting to run operations like <code>sum = age + name</code> would result in a <code>TypeError</code>. This error indicates that such operations are invalid because the types of the variables do not match.</p><p>Strong typing has many benefits. For example, it:</p><ul><li>Helps prevent automatic type conversion, allowing for a more explicit action to convert variable types</li><li>Permits compilers to be really strict about the type of a variable</li><li>Prevents data loss and most errors relating to data types</li><li>Allows for a better code readability</li></ul><p>However, keep in mind that with strong typing, more time is spent on code compilation. Strongly typed languages also rely on compilation in order to detect errors.</p><p>Static typing, on the other hand, will throw an error for the code above at compile time and not just when it’s run. In fact, it will not allow the code to be run at all because of the error in the code. Examples of languages with static typing include TypeScript and Java. Statically typed languages:</p><ul><li>Help prevent runtime errors</li><li>Enhance code clarity</li><li>Ensure that errors are caught before the code is executed</li><li>Allow for a better long-term DX</li><li>Can improve performance by optimizing based on the defined types</li></ul><p>However, they also generally allow for more boilerplate code and have a tougher learning curve. Furthermore, static typing tends to be verbose and essentially makes developers write code duplicates.</p><p>Not all statically typed languages have strong typing — some might be more dynamic than others, allowing some sort of flexibility in type conversions. Generally, with dynamic typing, the type of a variable in a programing language is assigned at runtime by an interpreter.</p><p>Dynamically typed languages like Ruby and JavaScript are able to infer types and perform some sort of type conversion between variables. Although this provides some level of flexibility, it can produce less optimized code since runtime errors are possible and type errors are only detected later during code execution.</p><p>Combining strong and static typing helps solve the problems of dynamic typing and enhances code performance by preventing errors like inadvertent variable type reassignments. Statically typed languages also offer a structured way of defining types, which serves as valuable documentation for future code maintainers.</p><p>Since utilizing a language that is both statically and strongly typed is notably beneficial in frontend projects, we’ll be using TypeScript in this Astro ecommerce project. This will help us optimize our code and ensure that variable types can’t be automatically changed but should be explicitly implemented.</p><hr><h2 id="introducing-our-ecommerce-project" tabindex="-1"><a class="header-anchor" href="#introducing-our-ecommerce-project"><span>Introducing our ecommerce project</span></a></h2><p>Astro provides a convenient, easy-to-use <a href="https://astro.build/themes/details/astro-ecommerce/" target="_blank" rel="noopener noreferrer">template for ecommerce projects called Astro Ecommerce</a>. However, it’s pretty straightforward to set up a completely custom implementation, which is what we’re going to demonstrate in this tutorial.</p><p>The ecommerce site we will build will enable users to create an account and log in, as well as fetch and update their profile. Authenticated users will be able to view the product listing, select a product, add and remove items from their carts, and place and manage orders.</p><p>Any orders that users place will only be completed once they make a payment using their selected payment platform. The site will also feature screens for admins to manage users, products, and orders.</p><p>As a bonus, our project will also feature a review and rating system for products.</p><h3 id="prepare-custom-ecommerce-backend-code" tabindex="-1"><a class="header-anchor" href="#prepare-custom-ecommerce-backend-code"><span>Prepare custom ecommerce backend code</span></a></h3><p>To keep the focus of this tutorial on our frontend ecommerce site, we won’t dive into our backend implementation in detail. Generally, the backend was built with TypeScript using Express.js as the backend framework and MongoDB as the database.</p><p>The source code for the server can be found <a href="https://github.com/bonarhyme/astrojs-ecommerce-backend" target="_blank" rel="noopener noreferrer">here on Github</a>. You can also examine the available endpoints that we will consume for our Astro ecommerce site:</p><table><thead><tr><th>Name</th><th>Endpoint</th><th>Type</th><th>Category</th><th>Description</th></tr></thead><tbody><tr><td>User Register</td><td>/api/users/register</td><td>POST</td><td>Public</td><td>Allow unauth. users to create a new account</td></tr><tr><td>User Login</td><td>/api/users/login</td><td>POST</td><td>Public</td><td>Allow unauth. users to generate a new login session</td></tr><tr><td>Fetch User Profile</td><td>/api/users/profile</td><td>GET</td><td>Protected</td><td>Allow a user to fetch their profile</td></tr><tr><td>Update User Profile</td><td>/api/users/profile</td><td>PUT</td><td>Protected</td><td>Allow a user to update their profile</td></tr><tr><td>List Users</td><td>/api/users</td><td>GET</td><td>Private</td><td>Allow admins to fetch all users</td></tr><tr><td>Delete User</td><td>/api/users/:id</td><td>DELETE</td><td>Private</td><td>Allow admins to remove a users</td></tr><tr><td>Get User by ID</td><td>/api/users/:id</td><td>GET</td><td>Private</td><td>Allow admins to fetch a user’s profile</td></tr><tr><td>Update User by ID</td><td>/api/users/:id</td><td>PUT</td><td>Private</td><td>Allow admins to update a user’s profile</td></tr><tr><td>Get products</td><td>/api/products</td><td>GET</td><td>Public</td><td>Allow unauth. to users fetch products</td></tr><tr><td>Get Product by ID</td><td>/api/products/:id</td><td>GET</td><td>Public</td><td>Allow unauth. users to fetch a single product</td></tr><tr><td>Delete Product by ID</td><td>/api/products/:id</td><td>DELETE</td><td>Private</td><td>Allow admins to delete a product</td></tr><tr><td>Create Product</td><td>/api/products</td><td>POST</td><td>Private</td><td>Allow admins to create a new product</td></tr><tr><td>Update Product</td><td>/api/products/:id</td><td>PUT</td><td>Private</td><td>Allow admins to update a product</td></tr><tr><td>Create Product Review</td><td>/api/products/:id/reviews</td><td>POST</td><td>Protected</td><td>Allow users to create a product review</td></tr><tr><td>Add order Items</td><td>/api/orders</td><td>POST</td><td>Protected</td><td>Allow users to add an order item</td></tr><tr><td>Get Order by ID</td><td>/api/orders/:id</td><td>GET</td><td>Protected</td><td>Allow users to fetch a single order</td></tr><tr><td>Update Order to Paid</td><td>/api/orders/:id/pay</td><td>PUT</td><td>Protected</td><td>Allow users to update their payment info</td></tr><tr><td>Get My Orders</td><td>/api/orders/myorders</td><td>GET</td><td>Protected</td><td>Allow users to fetch all their orders</td></tr><tr><td>Get Orders</td><td>/api/orders</td><td>GET</td><td>Private</td><td>Allow admins to fetch all orders</td></tr><tr><td>Update Order To Delivered</td><td>/api/orders/:id/deliver</td><td>PUT</td><td>Private</td><td>Allow admins to update the delivery status</td></tr></tbody></table><hr><h2 id="setting-up-our-astro-project" tabindex="-1"><a class="header-anchor" href="#setting-up-our-astro-project"><span>Setting up our Astro project</span></a></h2><p>First, create a folder named something like <code>astro-ecommerce</code> and then follow the <a href="https://astro.build/" target="_blank" rel="noopener noreferrer">official Astro setup guidelines</a>. You can also just open your terminal, run <code>npm create astro@latest</code>, and follow the prompts, ensuring your setup matches what’s shown below:</p><figure><img src="'+w+`" alt="Screenshot Showing Astro Installation And Setup Process" tabindex="0" loading="lazy"><figcaption>Screenshot Showing Astro Installation And Setup Process</figcaption></figure><p>Next, we will create the necessary folders and files inside the <code>src</code> directory. There are a lot to create, but ultimately, our <code>src</code> folder structure should now look like this:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// src folder structure</span></span>
<span class="line">src</span>
<span class="line"> ┣ components</span>
<span class="line"> ┃ ┣ AddReview<span class="token punctuation">.</span>tsx</span>
<span class="line"> ┃ ┣ AdminManageOrders<span class="token punctuation">.</span>tsx</span>
<span class="line"> ┃ ┣ AdminManageProducts<span class="token punctuation">.</span>tsx</span>
<span class="line"> ┃ ┣ AdminManageUsers<span class="token punctuation">.</span>tsx</span>
<span class="line"> ┃ ┣ Button<span class="token punctuation">.</span>tsx</span>
<span class="line"> ┃ ┣ CartItem<span class="token punctuation">.</span>tsx</span>
<span class="line"> ┃ ┣ CartList<span class="token punctuation">.</span>tsx</span>
<span class="line"> ┃ ┣ CheckoutCart<span class="token punctuation">.</span>tsx</span>
<span class="line"> ┃ ┣ CreateProduct<span class="token punctuation">.</span>tsx</span>
<span class="line"> ┃ ┣ Dialog<span class="token punctuation">.</span>tsx</span>
<span class="line"> ┃ ┣ Heading<span class="token punctuation">.</span>tsx</span>
<span class="line"> ┃ ┣ Loader<span class="token punctuation">.</span>tsx</span>
<span class="line"> ┃ ┣ LoginForm<span class="token punctuation">.</span>tsx</span>
<span class="line"> ┃ ┣ Message<span class="token punctuation">.</span>tsx</span>
<span class="line"> ┃ ┣ OrderDetails<span class="token punctuation">.</span>tsx</span>
<span class="line"> ┃ ┣ Payment<span class="token punctuation">.</span>tsx</span>
<span class="line"> ┃ ┣ PaymentProcessor<span class="token punctuation">.</span>tsx</span>
<span class="line"> ┃ ┣ PlaceOrder<span class="token punctuation">.</span>tsx</span>
<span class="line"> ┃ ┣ Product<span class="token punctuation">.</span>tsx</span>
<span class="line"> ┃ ┣ ProductDetails<span class="token punctuation">.</span>tsx</span>
<span class="line"> ┃ ┣ ProductList<span class="token punctuation">.</span>tsx</span>
<span class="line"> ┃ ┣ Profile<span class="token punctuation">.</span>tsx</span>
<span class="line"> ┃ ┣ Rating<span class="token punctuation">.</span>tsx</span>
<span class="line"> ┃ ┣ RegisterForm<span class="token punctuation">.</span>tsx</span>
<span class="line"> ┃ ┣ Select<span class="token punctuation">.</span>tsx</span>
<span class="line"> ┃ ┣ Shipping<span class="token punctuation">.</span>tsx</span>
<span class="line"> ┃ ┗ Showcase<span class="token punctuation">.</span>tsx</span>
<span class="line"> ┣ layouts</span>
<span class="line"> ┃ ┣ Footer<span class="token punctuation">.</span>astro</span>
<span class="line"> ┃ ┣ Header<span class="token punctuation">.</span>tsx</span>
<span class="line"> ┃ ┗ Layout<span class="token punctuation">.</span>astro</span>
<span class="line"> ┣ pages</span>
<span class="line"> ┃ ┣ order</span>
<span class="line"> ┃ ┃ ┗ <span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>astro</span>
<span class="line"> ┃ ┣ product</span>
<span class="line"> ┃ ┃ ┗ <span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>astro</span>
<span class="line"> ┃ ┣ account<span class="token punctuation">.</span>astro</span>
<span class="line"> ┃ ┣ cart<span class="token punctuation">.</span>astro</span>
<span class="line"> ┃ ┣ checkout<span class="token punctuation">.</span>astro</span>
<span class="line"> ┃ ┣ index<span class="token punctuation">.</span>astro</span>
<span class="line"> ┃ ┣ login<span class="token punctuation">.</span>astro</span>
<span class="line"> ┃ ┣ manage<span class="token operator">-</span>orders<span class="token punctuation">.</span>astro</span>
<span class="line"> ┃ ┣ manage<span class="token operator">-</span>products<span class="token punctuation">.</span>astro</span>
<span class="line"> ┃ ┣ manage<span class="token operator">-</span>users<span class="token punctuation">.</span>astro</span>
<span class="line"> ┃ ┗ register<span class="token punctuation">.</span>astro</span>
<span class="line"> ┣ state</span>
<span class="line"> ┃ ┣ auth<span class="token punctuation">.</span>ts</span>
<span class="line"> ┃ ┣ cart<span class="token punctuation">.</span>ts</span>
<span class="line"> ┃ ┣ order<span class="token punctuation">.</span>ts</span>
<span class="line"> ┃ ┣ products<span class="token punctuation">.</span>ts</span>
<span class="line"> ┃ ┗ user<span class="token punctuation">.</span>ts</span>
<span class="line"> ┗ env<span class="token punctuation">.</span>d<span class="token punctuation">.</span>ts</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Once you’ve created all the folders and files above, the next step is to add the React and Tailwind integrations as well as install the necessary dependencies. Run the following commands in your terminal to do so:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">npx astro add react</span>
<span class="line">npx astro add tailwind </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>These commands will also update the <code>astro.config.mjs</code> file like so:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// astro.config.mjs</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;astro/config&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> tailwind <span class="token keyword">from</span> <span class="token string">&#39;@astrojs/tailwind&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> react <span class="token keyword">from</span> <span class="token string">&#39;@astrojs/react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// https://astro.build/config</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token string">&#39;server&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">integrations</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">tailwind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">react</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>After that we will open the terminal and run the following command:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">npm install axios react<span class="token operator">-</span>icons react<span class="token operator">-</span>paystack nanostores</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>This will install:</p><ul><li><code>axios</code>: A package we’ll use to make API calls to the server</li><li><code>react-icons</code>: A library that provides many free icons from popular icon libraries</li><li><code>react-paystack</code>: A payment platform for web apps</li><li><code>nanostores</code>: The recommended global state management library for Astro</li></ul><p>Note that we must set the <code>ouput</code> to <code>server</code> inside the <code>astro.config.mjs</code> file since we want Astro to render our site on the server side.</p><h3 id="defining-global-states-and-api-functions" tabindex="-1"><a class="header-anchor" href="#defining-global-states-and-api-functions"><span>Defining global states and API functions</span></a></h3><p>Let’s add all the code for state management using <code>nanostores</code>. We’ll also set up asynchronous functions that we can use to make API calls within the app. Starting with these steps will make it easier to follow along with the rest of the tutorial.</p><p>First, open the <code>state/auth.ts</code> file, import the necessary dependencies, and define the interfaces and initial states that we’ll use for the API calls:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token comment">// state/auth.ts</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> atom<span class="token punctuation">,</span> map <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;nanostores&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">&#39;axios&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">AuthState</span> <span class="token punctuation">{</span></span>
<span class="line">  id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  _id<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  email<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  isAdmin<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span></span>
<span class="line">  token<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> authInitialState <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  id<span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  name<span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  email<span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  isAdmin<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">  token<span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// Next code below here</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Next, initialize the various global states using <code>atom</code> or <code>map</code> from <code>nanostores</code>. <code>atom</code> should be used to initialize primitive values and arrays while <code>map</code> should be used strictly for <code>objects</code> and <code>undefined</code> values. Hence, we will initialize <code>loading</code>, <code>error</code>, and <code>value</code> states for <code>auth</code> APIs like so:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token comment">// state/auth.ts</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> loadingRegister <span class="token operator">=</span> <span class="token generic-function"><span class="token function">atom</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> errorRegister <span class="token operator">=</span> <span class="token generic-function"><span class="token function">atom</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> loadingLogin <span class="token operator">=</span> <span class="token generic-function"><span class="token function">atom</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> errorLogin <span class="token operator">=</span> <span class="token generic-function"><span class="token function">atom</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> authState <span class="token operator">=</span> <span class="token generic-function"><span class="token function">map</span><span class="token generic class-name"><span class="token operator">&lt;</span>AuthState<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>authInitialState<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">SERVER_URL</span> <span class="token operator">=</span> <span class="token string">&#39;http://localhost:5211&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We added the <code>SERVER_URL</code> inside the <code>state.auth.ts</code> file so we can reuse it wherever we want to make an API call. TypeScript’s typing behavior ensures that we don’t mix up variables.</p><p>Generally, to get the value from the <code>nanostores</code> variable, we call a <code>get</code> method attached to it. To modify the variable, we use the <code>set</code> method. For example, in <code>loadingRegister</code>, we can:</p><ul><li>Update the value with <code>loadingRegister.set(true);</code></li><li>Get the value of the variable with <code>loadingRegister.get()</code></li></ul><p>Next, let’s create the <code>registerRequest</code> and <code>loginRequest</code> asynchronous functions:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token comment">// state/auth.ts</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">registerRequest</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> email<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> password<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  errorRegister<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  loadingRegister<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">post</span><span class="token generic class-name"><span class="token operator">&lt;</span>AuthState<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">SERVER_URL</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/api/users/register</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> email<span class="token punctuation">,</span> password <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    authState<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>authState<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">...</span>response<span class="token punctuation">.</span>data <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> message <span class="token operator">=</span> error<span class="token punctuation">.</span>response <span class="token operator">&amp;&amp;</span> error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>message <span class="token operator">?</span> error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>message <span class="token operator">:</span> error<span class="token punctuation">.</span>message<span class="token punctuation">;</span></span>
<span class="line">    errorRegister<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span></span>
<span class="line">    loadingRegister<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">loginRequest</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>email<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> password<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  errorLogin<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  loadingLogin<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">post</span><span class="token generic class-name"><span class="token operator">&lt;</span>AuthState<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">SERVER_URL</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/api/users/login</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token punctuation">{</span> email<span class="token punctuation">,</span> password <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    authState<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>authState<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">...</span>response<span class="token punctuation">.</span>data <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> message <span class="token operator">=</span> error<span class="token punctuation">.</span>response <span class="token operator">&amp;&amp;</span> error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>message <span class="token operator">?</span> error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>message <span class="token operator">:</span> error<span class="token punctuation">.</span>message<span class="token punctuation">;</span></span>
<span class="line">    errorLogin<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span></span>
<span class="line">    loadingLogin<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In the code above, <code>registerRequest</code> accepts <code>name</code>, <code>email</code>, and <code>password</code> variables with their appropriate types. Meanwhile, <code>loginRequest</code> accepts just <code>email</code> and <code>password</code>.</p><p>Notice how we systematically update the values of the appropriate states:</p><ul><li>Set the <code>error</code> state to <code>undefined</code></li><li>Set the <code>loading</code> state to <code>true</code></li><li>Wrap our code in a <code>try...catch</code> block <ul><li>In the <code>try</code> block, we send a request to the <a href="#prepare-custom-ecommerce-backend-code">appropriate API endpoint</a> using <code>axios</code>, specifying the expected response type for type safety. We then store successful authentication results to <code>localStorage</code> before redirecting the user to the homepage</li><li>In the <code>catch</code> block, we access the appropriate error message and we set the message to the <code>error</code> state if an error occurs</li></ul></li><li>The <code>finally</code> block resets the loading state to <code>false</code></li></ul><p>The pattern above ensures systematic state management for authentication processes in our project. We’ll reuse this approach for secure endpoint access by adding config objects as needed for API requests.</p><p>We’re done with the state management for authentication at this point, so let’s move on to the state for managing users and profiles. Open the <code>state/user.ts</code> file and add the following:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token comment">// state/user.ts</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">&#39;axios&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> atom<span class="token punctuation">,</span> map <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;nanostores&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token constant">SERVER_URL</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./auth&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> AuthState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./auth&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Omit is TypeScript utility code. Use it to remove one or more types from a given type</span></span>
<span class="line"><span class="token class-name"><span class="token keyword">export</span></span> <span class="token keyword">type</span> <span class="token class-name">IUser</span> <span class="token operator">=</span> Omit<span class="token operator">&lt;</span>AuthState<span class="token punctuation">,</span> <span class="token string">&#39;token&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">IUsers</span> <span class="token operator">=</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>IUser<span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> loadingGetProfile <span class="token operator">=</span> <span class="token generic-function"><span class="token function">atom</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> errorGetProfile <span class="token operator">=</span> <span class="token generic-function"><span class="token function">atom</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> getProfileState <span class="token operator">=</span> <span class="token generic-function"><span class="token function">map</span><span class="token generic class-name"><span class="token operator">&lt;</span>IUser<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> loadingUpdateProfile <span class="token operator">=</span> <span class="token generic-function"><span class="token function">atom</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> errorUpdateProfile <span class="token operator">=</span> <span class="token generic-function"><span class="token function">atom</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> updateProfileState <span class="token operator">=</span> <span class="token generic-function"><span class="token function">map</span><span class="token generic class-name"><span class="token operator">&lt;</span>IUser<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Admin state to fetch all users</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> loadingUsers <span class="token operator">=</span> <span class="token generic-function"><span class="token function">atom</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> errorUsers <span class="token operator">=</span> <span class="token generic-function"><span class="token function">atom</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> usersState <span class="token operator">=</span> <span class="token generic-function"><span class="token function">atom</span><span class="token generic class-name"><span class="token operator">&lt;</span>IUsers<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Admin state to make a user an admin</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> loadingUpdateUser <span class="token operator">=</span> <span class="token generic-function"><span class="token function">atom</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> errorUpdateUser <span class="token operator">=</span> <span class="token generic-function"><span class="token function">atom</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">profileGetRequest</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  errorGetProfile<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  loadingGetProfile<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> user <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">      headers<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        Authorization<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Bearer </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>user<span class="token operator">?.</span>token<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span>IUser<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">SERVER_URL</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/api/users/profile</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">{</span> hhh<span class="token operator">:</span> response <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    getProfileState<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> message <span class="token operator">=</span> error<span class="token punctuation">.</span>response <span class="token operator">&amp;&amp;</span> error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>message <span class="token operator">?</span> error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>message <span class="token operator">:</span> error<span class="token punctuation">.</span>message<span class="token punctuation">;</span></span>
<span class="line">    errorGetProfile<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span></span>
<span class="line">    loadingGetProfile<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">profileUpdateRequest</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> email<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  errorUpdateProfile<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  loadingUpdateProfile<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> user <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">      headers<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        Authorization<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Bearer </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>user<span class="token operator">?.</span>token<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">put</span><span class="token generic class-name"><span class="token operator">&lt;</span>IUser<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">SERVER_URL</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/api/users/profile</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token punctuation">{</span> email<span class="token punctuation">,</span> name <span class="token punctuation">}</span><span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">{</span> hhh<span class="token operator">:</span> response <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    getProfileState<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> message <span class="token operator">=</span> error<span class="token punctuation">.</span>response <span class="token operator">&amp;&amp;</span> error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>message <span class="token operator">?</span> error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>message <span class="token operator">:</span> error<span class="token punctuation">.</span>message<span class="token punctuation">;</span></span>
<span class="line">    errorUpdateProfile<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span></span>
<span class="line">    loadingUpdateProfile<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">usersRequest</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  errorUsers<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  loadingUsers<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> user <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">      headers<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        Authorization<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Bearer </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>user<span class="token operator">?.</span>token<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span>IUsers<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">SERVER_URL</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/api/users/</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">{</span> hhh<span class="token operator">:</span> response <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    usersState<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> message <span class="token operator">=</span> error<span class="token punctuation">.</span>response <span class="token operator">&amp;&amp;</span> error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>message <span class="token operator">?</span> error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>message <span class="token operator">:</span> error<span class="token punctuation">.</span>message<span class="token punctuation">;</span></span>
<span class="line">    errorUsers<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span></span>
<span class="line">    loadingUsers<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">makeAdminRequest</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  errorUpdateUser<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  loadingUpdateUser<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> user <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">      headers<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        Authorization<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Bearer </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>user<span class="token operator">?.</span>token<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">put</span><span class="token generic class-name"><span class="token operator">&lt;</span>IUser<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">SERVER_URL</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/api/users/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token punctuation">{</span> isAdmin<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">{</span> hhh<span class="token operator">:</span> response <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> message <span class="token operator">=</span> error<span class="token punctuation">.</span>response <span class="token operator">&amp;&amp;</span> error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>message <span class="token operator">?</span> error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>message <span class="token operator">:</span> error<span class="token punctuation">.</span>message<span class="token punctuation">;</span></span>
<span class="line">    errorUpdateUser<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span></span>
<span class="line">    loadingUpdateUser<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In the code above:</p><ul><li><code>profileGetRequest</code> allows users to fetch their profiles</li><li><code>profileUpdateRequest</code> allows users to update their profiles</li><li><code>usersRequest</code> allows admins to fetch a list of users</li><li><code>makeAdminRequest</code> allows permitted users to assign the admin role to other users</li></ul><p>Notice how the code pattern is the same as before except for the config, which contains the headers and other metadata for our specific request. In this case, <code>Authorization</code> uses the <code>token</code> we get when we create or log into an account. Essentially, we extract the <code>token</code> from the <code>user</code> object stored in <code>localStorage</code>.</p><p>Next, let’s open the <code>state/product.ts</code> and add the global states and functions to fetch APIs. We’ll handle listing, creating, deleting, getting, and reviewing products. Pay careful attention to the <a href="https://blog.logrocket.com/types-vs-interfaces-typescript/" target="_blank" rel="noopener noreferrer">types and interfaces</a> to create a proper statically typed site, which helps us write code with integrity and allows our code editor to help us with autocompletion:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token comment">// state/product.ts</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">&#39;axios&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> atom<span class="token punctuation">,</span> map <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;nanostores&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token constant">SERVER_URL</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./auth&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// interface for review. This matches the model in the server</span></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">IReview</span> <span class="token punctuation">{</span></span>
<span class="line">  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  rating<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line">  comment<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  user<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// inteface for a product. This matches the model in the server</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">IProduct</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  _id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  user<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span></span>
<span class="line">  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  image<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  brand<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  category<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  description<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  reviews<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>IReview<span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line">  rating<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line">  numReviews<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line">  price<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line">  countInStock<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// This is the response we are expecting when we fetch a product list from our custom server</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">ProductListRequest</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  products<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>IProduct<span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span></span>
<span class="line">  page<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line">  pages<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> loadingProductList <span class="token operator">=</span> <span class="token generic-function"><span class="token function">atom</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> errorProductList <span class="token operator">=</span> <span class="token generic-function"><span class="token function">atom</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> productListState <span class="token operator">=</span> <span class="token generic-function"><span class="token function">map</span><span class="token generic class-name"><span class="token operator">&lt;</span>ProductListRequest<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  page<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">  pages<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">  products<span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> loadingCreateProduct <span class="token operator">=</span> <span class="token generic-function"><span class="token function">atom</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> errorCreateProduct <span class="token operator">=</span> <span class="token generic-function"><span class="token function">atom</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> loadingDeleteProduct <span class="token operator">=</span> <span class="token generic-function"><span class="token function">atom</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> errorDeleteProduct <span class="token operator">=</span> <span class="token generic-function"><span class="token function">atom</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> loadingGetProduct <span class="token operator">=</span> <span class="token generic-function"><span class="token function">atom</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> errorGetProduct <span class="token operator">=</span> <span class="token generic-function"><span class="token function">atom</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> productGetState <span class="token operator">=</span> <span class="token generic-function"><span class="token function">map</span><span class="token generic class-name"><span class="token operator">&lt;</span>IProduct<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> loadingReviewProduct <span class="token operator">=</span> <span class="token generic-function"><span class="token function">atom</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> errorReviewProduct <span class="token operator">=</span> <span class="token generic-function"><span class="token function">atom</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> productReviewState <span class="token operator">=</span> <span class="token generic-function"><span class="token function">map</span><span class="token generic class-name"><span class="token operator">&lt;</span>IProduct<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> listProductRequest <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>keyword <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> pageNumber <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  errorProductList<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  loadingProductList<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span>ProductListRequest<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span></span>
<span class="line">      <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">SERVER_URL</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/api/products?keyword=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>keyword<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&amp;pageNumber=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>pageNumber<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    productListState<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>productListState<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">...</span>response<span class="token punctuation">.</span>data <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">{</span> data<span class="token operator">:</span> response<span class="token punctuation">.</span>data <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> message <span class="token operator">=</span> error<span class="token punctuation">.</span>response <span class="token operator">&amp;&amp;</span> error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>message <span class="token operator">?</span> error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>message <span class="token operator">:</span> error<span class="token punctuation">.</span>message<span class="token punctuation">;</span></span>
<span class="line">    errorProductList<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span></span>
<span class="line">    loadingProductList<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">createProductRequest</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span></span>
<span class="line">  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span></span>
<span class="line">  price<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span></span>
<span class="line">  brand<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span></span>
<span class="line">  category<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span></span>
<span class="line">  countInStock<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span></span>
<span class="line">  description<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span></span>
<span class="line">  image<span class="token operator">:</span> <span class="token builtin">string</span></span>
<span class="line"><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  errorCreateProduct<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  loadingCreateProduct<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> user <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">      headers<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        Authorization<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Bearer </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>user<span class="token operator">?.</span>token<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">post</span><span class="token generic class-name"><span class="token operator">&lt;</span>IProduct<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span></span>
<span class="line">      <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">SERVER_URL</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/api/products</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">{</span> name<span class="token punctuation">,</span> price<span class="token punctuation">,</span> brand<span class="token punctuation">,</span> category<span class="token punctuation">,</span> countInStock<span class="token punctuation">,</span> description<span class="token punctuation">,</span> image <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      config</span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">{</span> productCreated<span class="token operator">:</span> response <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> message <span class="token operator">=</span> error<span class="token punctuation">.</span>response <span class="token operator">&amp;&amp;</span> error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>message <span class="token operator">?</span> error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>message <span class="token operator">:</span> error<span class="token punctuation">.</span>message<span class="token punctuation">;</span></span>
<span class="line">    errorCreateProduct<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span></span>
<span class="line">    loadingCreateProduct<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">deleteProductRequest</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  errorDeleteProduct<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  loadingDeleteProduct<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> user <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">      headers<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        Authorization<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Bearer </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>user<span class="token operator">?.</span>token<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">delete</span><span class="token generic class-name"><span class="token operator">&lt;</span>ProductListRequest<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">SERVER_URL</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/api/products/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">{</span> data<span class="token operator">:</span> response<span class="token punctuation">.</span>data <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> message <span class="token operator">=</span> error<span class="token punctuation">.</span>response <span class="token operator">&amp;&amp;</span> error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>message <span class="token operator">?</span> error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>message <span class="token operator">:</span> error<span class="token punctuation">.</span>message<span class="token punctuation">;</span></span>
<span class="line">    errorDeleteProduct<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span></span>
<span class="line">    loadingDeleteProduct<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> getProductRequest <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> ui<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>IProduct <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token operator">&gt;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    ui <span class="token operator">&amp;&amp;</span> errorGetProduct<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    ui <span class="token operator">&amp;&amp;</span> loadingGetProduct<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> user <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">      headers<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        Authorization<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Bearer </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>user<span class="token operator">?.</span>token<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span>IProduct<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">SERVER_URL</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/api/products/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">      ui <span class="token operator">&amp;&amp;</span> productGetState<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>response<span class="token operator">?.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> response<span class="token operator">?.</span>data<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> message <span class="token operator">=</span> error<span class="token punctuation">.</span>response <span class="token operator">&amp;&amp;</span> error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>message <span class="token operator">?</span> error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>message <span class="token operator">:</span> error<span class="token punctuation">.</span>message<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">      ui <span class="token operator">&amp;&amp;</span> errorGetProduct<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span></span>
<span class="line">    loadingGetProduct<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> reviewProductRequest <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span></span>
<span class="line">  id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span></span>
<span class="line">  rating<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span></span>
<span class="line">  comment<span class="token operator">:</span> <span class="token builtin">string</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>IProduct <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token operator">&gt;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  errorReviewProduct<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  loadingReviewProduct<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> user <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">      headers<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        Authorization<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Bearer </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>user<span class="token operator">?.</span>token<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">post</span><span class="token generic class-name"><span class="token operator">&lt;</span>IProduct<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span></span>
<span class="line">      <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">SERVER_URL</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/api/products/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/reviews</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">{</span> rating<span class="token operator">:</span> <span class="token function">Number</span><span class="token punctuation">(</span>rating<span class="token punctuation">)</span><span class="token punctuation">,</span> comment <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      config</span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    productReviewState<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>response<span class="token operator">?.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> response<span class="token operator">?.</span>data<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> message <span class="token operator">=</span> error<span class="token punctuation">.</span>response <span class="token operator">&amp;&amp;</span> error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>message <span class="token operator">?</span> error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>message <span class="token operator">:</span> error<span class="token punctuation">.</span>message<span class="token punctuation">;</span></span>
<span class="line">    errorReviewProduct<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span></span>
<span class="line">    loadingReviewProduct<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Next, we’ll create the state and functions for <code>order</code> processes. We’ll handle placing an order, getting a single order, updating an order’s payment status, updating an order’s delivery status, allowing admins to fetch all the orders in the system, and allowing users to fetch orders they’ve placed:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token comment">// state/order.ts</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token constant">SERVER_URL</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./auth&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> atom<span class="token punctuation">,</span> map <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;nanostores&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">&#39;axios&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> ICartItem <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./cart&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">OrderItem</span> <span class="token punctuation">{</span></span>
<span class="line">  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  qty<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line">  image<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  price<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line">  product<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">IOrder</span> <span class="token punctuation">{</span></span>
<span class="line">  _id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  user<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span></span>
<span class="line">  orderItems<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>OrderItem<span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line">  shippingAddress<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    address<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">    city<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">    postalCode<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">    country<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">  paymentMethod<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  paymentResult<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    message<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">    reference<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">    status<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">    transactionId<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">    user<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">  itemsPrice<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line">  taxPrice<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line">  shippingPrice<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line">  totalPrice<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line">  isPaid<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span></span>
<span class="line">  paidAt<span class="token operator">:</span> Date <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line">  isDelivered<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span></span>
<span class="line">  deliveredAt<span class="token operator">:</span> Date <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">IPaymentResult</span> <span class="token punctuation">{</span></span>
<span class="line">  message<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  reference<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  status<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  transactionId<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> loadingPlaceOrder <span class="token operator">=</span> <span class="token generic-function"><span class="token function">atom</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> errorPlaceOrder <span class="token operator">=</span> <span class="token generic-function"><span class="token function">atom</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> loadingGetOrder <span class="token operator">=</span> <span class="token generic-function"><span class="token function">atom</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> errorGetOrder <span class="token operator">=</span> <span class="token generic-function"><span class="token function">atom</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> orderGetState <span class="token operator">=</span> <span class="token generic-function"><span class="token function">map</span><span class="token generic class-name"><span class="token operator">&lt;</span>IOrder<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> loadingPay <span class="token operator">=</span> <span class="token generic-function"><span class="token function">atom</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> errorPay <span class="token operator">=</span> <span class="token generic-function"><span class="token function">atom</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> payState <span class="token operator">=</span> <span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> loadingDelivery <span class="token operator">=</span> <span class="token generic-function"><span class="token function">atom</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> errorDelivery <span class="token operator">=</span> <span class="token generic-function"><span class="token function">atom</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> loadingOrderList <span class="token operator">=</span> <span class="token generic-function"><span class="token function">atom</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> errorOrderList <span class="token operator">=</span> <span class="token generic-function"><span class="token function">atom</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> orderListState <span class="token operator">=</span> <span class="token generic-function"><span class="token function">atom</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">Array</span><span class="token operator">&lt;</span>IOrder<span class="token operator">&gt;&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> loadingMyOrderList <span class="token operator">=</span> <span class="token generic-function"><span class="token function">atom</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> errorMyOrderList <span class="token operator">=</span> <span class="token generic-function"><span class="token function">atom</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> myOrderListState <span class="token operator">=</span> <span class="token generic-function"><span class="token function">atom</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">Array</span><span class="token operator">&lt;</span>IOrder<span class="token operator">&gt;&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> placeOrderRequest <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span></span>
<span class="line">  orderItems<span class="token operator">:</span> ICartItem<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  shippingAddress<span class="token operator">:</span> IOrder<span class="token punctuation">[</span><span class="token string">&#39;shippingAddress&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  paymentMethod<span class="token operator">:</span> IOrder<span class="token punctuation">[</span><span class="token string">&#39;paymentMethod&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  itemsPrice<span class="token operator">:</span> IOrder<span class="token punctuation">[</span><span class="token string">&#39;itemsPrice&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  taxPrice<span class="token operator">:</span> IOrder<span class="token punctuation">[</span><span class="token string">&#39;taxPrice&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  totalPrice<span class="token operator">:</span> IOrder<span class="token punctuation">[</span><span class="token string">&#39;totalPrice&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  shippingPrice<span class="token operator">:</span> IOrder<span class="token punctuation">[</span><span class="token string">&#39;shippingPrice&#39;</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  errorPlaceOrder<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  loadingPlaceOrder<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> user <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">      headers<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        Authorization<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Bearer </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>user<span class="token operator">?.</span>token<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">post</span><span class="token generic class-name"><span class="token operator">&lt;</span>IOrder<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span></span>
<span class="line">      <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">SERVER_URL</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/api/orders</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">{</span></span>
<span class="line">        orderItems<span class="token punctuation">,</span></span>
<span class="line">        shippingAddress<span class="token punctuation">,</span></span>
<span class="line">        paymentMethod<span class="token punctuation">,</span></span>
<span class="line">        itemsPrice<span class="token punctuation">,</span></span>
<span class="line">        taxPrice<span class="token punctuation">,</span></span>
<span class="line">        totalPrice<span class="token punctuation">,</span></span>
<span class="line">        shippingPrice<span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      config</span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    localStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span><span class="token string">&#39;cart&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/order/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>response<span class="token operator">?.</span>data<span class="token operator">?.</span>_id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> message <span class="token operator">=</span> error<span class="token punctuation">.</span>response <span class="token operator">&amp;&amp;</span> error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>message <span class="token operator">?</span> error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>message <span class="token operator">:</span> error<span class="token punctuation">.</span>message<span class="token punctuation">;</span></span>
<span class="line">    errorPlaceOrder<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span></span>
<span class="line">    loadingPlaceOrder<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">getOrderDetailsRequest</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  errorGetOrder<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  loadingGetOrder<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> user <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">      headers<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        Authorization<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Bearer </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>user<span class="token operator">?.</span>token<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span>IOrder<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">SERVER_URL</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/api/orders/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    orderGetState<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> message <span class="token operator">=</span> error<span class="token punctuation">.</span>response <span class="token operator">&amp;&amp;</span> error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>message <span class="token operator">?</span> error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>message <span class="token operator">:</span> error<span class="token punctuation">.</span>message<span class="token punctuation">;</span></span>
<span class="line">    errorGetOrder<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span></span>
<span class="line">    loadingGetOrder<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">payRequest</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> paymentResult<span class="token operator">:</span> IPaymentResult<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  errorPay<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  loadingPay<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> user <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">      headers<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        Authorization<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Bearer </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>user<span class="token operator">?.</span>token<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">SERVER_URL</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/api/orders/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/pay</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> paymentResult<span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">{</span> response <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> message <span class="token operator">=</span> error<span class="token punctuation">.</span>response <span class="token operator">&amp;&amp;</span> error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>message <span class="token operator">?</span> error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>message <span class="token operator">:</span> error<span class="token punctuation">.</span>message<span class="token punctuation">;</span></span>
<span class="line">    errorPay<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span></span>
<span class="line">    loadingPay<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">deliveryRequest</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  errorDelivery<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  loadingDelivery<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> user <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">      headers<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        Authorization<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Bearer </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>user<span class="token operator">?.</span>token<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">SERVER_URL</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/api/orders/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/deliver</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">{</span> response <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> message <span class="token operator">=</span> error<span class="token punctuation">.</span>response <span class="token operator">&amp;&amp;</span> error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>message <span class="token operator">?</span> error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>message <span class="token operator">:</span> error<span class="token punctuation">.</span>message<span class="token punctuation">;</span></span>
<span class="line">    errorDelivery<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span></span>
<span class="line">    loadingDelivery<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">listOrdersRequest</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  errorOrderList<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  loadingOrderList<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> user <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">      headers<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        Authorization<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Bearer </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>user<span class="token operator">?.</span>token<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">Array</span><span class="token operator">&lt;</span>IOrder<span class="token operator">&gt;&gt;</span></span></span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">SERVER_URL</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/api/orders</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">{</span> hhh<span class="token operator">:</span> response <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    orderListState<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> message <span class="token operator">=</span> error<span class="token punctuation">.</span>response <span class="token operator">&amp;&amp;</span> error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>message <span class="token operator">?</span> error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>message <span class="token operator">:</span> error<span class="token punctuation">.</span>message<span class="token punctuation">;</span></span>
<span class="line">    errorOrderList<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span></span>
<span class="line">    loadingOrderList<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">listMyOrdersRequest</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  errorMyOrderList<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  loadingMyOrderList<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> user <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">      headers<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        Authorization<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Bearer </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>user<span class="token operator">?.</span>token<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">Array</span><span class="token operator">&lt;</span>IOrder<span class="token operator">&gt;&gt;</span></span></span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">SERVER_URL</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/api/orders/myorders</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">{</span> hhh<span class="token operator">:</span> response <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    myOrderListState<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> message <span class="token operator">=</span> error<span class="token punctuation">.</span>response <span class="token operator">&amp;&amp;</span> error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>message <span class="token operator">?</span> error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>message <span class="token operator">:</span> error<span class="token punctuation">.</span>message<span class="token punctuation">;</span></span>
<span class="line">    errorMyOrderList<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span></span>
<span class="line">    loadingMyOrderList<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You may notice in this file that when importing a type or an interface, we specified it as a type. This is the pattern for importing types recommended by the Astro team.</p><p>Also in this file, we imported the necessary dependencies and variables, then defined the interface and types for our APIs. Next, we initialized our global states and created our functions with their respective, properly typed parameters.</p><p>You may also notice that after an order is placed successfully in the <code>placeOrderRequest</code> function, we remove the cart from <code>localStorage</code>. There are other states — such as <code>cart</code>, <code>shippingAddress</code>, and <code>paymentMethod</code> — that we’ll store in our <code>localStorage</code>, but we’ll address them later.</p><p>The last state to handle for now is the <code>cart</code> state. Here, we’ll handle features like adding, modifying, and removing products in the cart. As usual, we’ll import the necessary dependencies and functions, then define our interfaces and initialize our global states:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token comment">// state/cart.ts</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> atom <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;nanostores&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> getProductRequest <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./products&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">ICartItem</span> <span class="token punctuation">{</span></span>
<span class="line">  product<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  qty<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line">  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  image<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  price<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line">  countInStock<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> loadingAddCart <span class="token operator">=</span> <span class="token generic-function"><span class="token function">atom</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> errorAddCart <span class="token operator">=</span> <span class="token generic-function"><span class="token function">atom</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> cart <span class="token operator">=</span> <span class="token generic-function"><span class="token function">atom</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">Array</span><span class="token operator">&lt;</span>ICartItem<span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Other code below here</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>After that, we will add a function to add an item to a cart:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token comment">// state/cart.ts</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">addToCart</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> qty<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">    errorAddCart<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    loadingAddCart<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// Get product first</span></span>
<span class="line">    <span class="token keyword">const</span> productResponse <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getProductRequest</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// Check if product is available and not less than requested quantity</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>productResponse<span class="token operator">?.</span>countInStock <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> qty <span class="token operator">||</span> <span class="token operator">!</span>productResponse<span class="token operator">?.</span>countInStock<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;Few items remaining... Reduce quantity&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// Define cart items from state</span></span>
<span class="line">    <span class="token keyword">const</span> cartItems <span class="token operator">=</span> cart<span class="token operator">?.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// Get existing cart iytem</span></span>
<span class="line">    <span class="token keyword">const</span> existingCartItem <span class="token operator">=</span> cartItems<span class="token operator">?.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> item<span class="token punctuation">.</span>product <span class="token operator">===</span> productResponse<span class="token operator">?.</span>_id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// Selected Cart item has been previously selected</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>existingCartItem<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// Update the existing item&#39;s quantity</span></span>
<span class="line">      <span class="token keyword">const</span> updatedCartItem <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>existingCartItem<span class="token punctuation">,</span> qty <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token comment">// Update the list of cart items with the modified cart item</span></span>
<span class="line">      <span class="token keyword">const</span> updatedCartItems <span class="token operator">=</span> cartItems<span class="token operator">?.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>cartItem<span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line">        cartItem<span class="token operator">?.</span>product <span class="token operator">===</span> existingCartItem<span class="token punctuation">.</span>product <span class="token operator">?</span> updatedCartItem <span class="token operator">:</span> cartItem</span>
<span class="line">      <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token comment">// save the changes to the state</span></span>
<span class="line">      cart<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>updatedCartItems<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// Cart item is a new item</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>existingCartItem<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// Create a new cart item with data from server and also selected quantity</span></span>
<span class="line">      <span class="token keyword">const</span> newCartItem<span class="token operator">:</span> ICartItem <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">        product<span class="token operator">:</span> productResponse<span class="token operator">?.</span>_id<span class="token punctuation">,</span></span>
<span class="line">        image<span class="token operator">:</span> productResponse<span class="token operator">?.</span>image<span class="token punctuation">,</span></span>
<span class="line">        name<span class="token operator">:</span> productResponse<span class="token operator">?.</span>name<span class="token punctuation">,</span></span>
<span class="line">        price<span class="token operator">:</span> productResponse<span class="token operator">?.</span>price<span class="token punctuation">,</span></span>
<span class="line">        qty<span class="token punctuation">,</span></span>
<span class="line">        countInStock<span class="token operator">:</span> productResponse<span class="token operator">?.</span>countInStock<span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token comment">// Update the list of cart items with the newly added cart items</span></span>
<span class="line">      <span class="token keyword">const</span> updatedCartItems <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>cartItems<span class="token punctuation">,</span> newCartItem<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token comment">// Save the  Update to  the state</span></span>
<span class="line">      cart<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>updatedCartItems<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&#39;cart&#39;</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>cart<span class="token operator">?.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> message <span class="token operator">=</span> error<span class="token punctuation">.</span>response <span class="token operator">&amp;&amp;</span> error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>message <span class="token operator">?</span> error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>message <span class="token operator">:</span> error<span class="token punctuation">.</span>message<span class="token punctuation">;</span></span>
<span class="line">    errorAddCart<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span></span>
<span class="line">    loadingAddCart<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In the <code>addToCart</code> function, we:</p><ul><li>Set initial <code>error</code> and <code>loading</code> states</li><li>Fetch the product details using the <code>getProductRequest</code> function defined earlier</li><li>Confirm that the product is still in stock; if it’s not, we throw an error</li><li>Get the cart items from the <code>cart</code> state defined above</li><li>Check whether the item we want to add to the cart already exists in the cart <ul><li>If it does, we update its quantity to match what we’re passing</li><li>Otherwise, we add the new cart item to the store</li></ul></li><li>Set the cart to <code>localStorage</code></li></ul><p>Next, we will add the code to remove an item from the store and then update the cart in <code>localStorage</code> using the code below:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token comment">// state/cart.ts</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">removeFromCart</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Define cart items from state</span></span>
<span class="line">    <span class="token keyword">const</span> cartItems <span class="token operator">=</span> cart<span class="token operator">?.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> updatedCartItem <span class="token operator">=</span> cartItems<span class="token operator">?.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>cartItem<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> cartItem<span class="token operator">?.</span>product <span class="token operator">!==</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    cart<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>updatedCartItem<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&#39;cart&#39;</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>cart<span class="token operator">?.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">{</span> RemoveFromCartError<span class="token operator">:</span> error <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="creating-the-layout" tabindex="-1"><a class="header-anchor" href="#creating-the-layout"><span>Creating the layout</span></a></h3><p>Let’s work on the <code>layout</code> folder, which will house our <code>header</code>, <code>footer</code>, and <code>layout</code> components. We’ll start with the <code>Header.tsx</code>. file by bringing in the required dependencies and defining our component prop type:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token comment">// layout/Header.tsx</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> useStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nanostores/react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useCallback<span class="token punctuation">,</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> FaCartPlus<span class="token punctuation">,</span> FaSignOutAlt<span class="token punctuation">,</span> FaUser<span class="token punctuation">,</span> FaUsers <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react-icons/fa&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> FaTableList <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react-icons/fa6&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> authInitialState<span class="token punctuation">,</span> authState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../state/auth&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> cart <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../state/cart&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">HeaderProps</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> Header<span class="token operator">:</span> React<span class="token punctuation">.</span><span class="token constant">FC</span><span class="token operator">&lt;</span>HeaderProps<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token comment">// Other codes here</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Stop here</span></span>
<span class="line"><span class="token keyword">return</span> <span class="token operator">&lt;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">&lt;</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Using <code>nanostores</code> for state management is convenient because you can easily use it in a React component with the <code>useStore</code> Hook. We’ll use this tool to access the values in the global states we set up before — <code>authState</code>, <code>cart</code>, and so on. In the <code>Header.tsx</code> file, add the following code:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token comment">// layout/Header.tsx</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> Header<span class="token operator">:</span> React<span class="token punctuation">.</span><span class="token constant">FC</span><span class="token operator">&lt;</span>HeaderProps<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span>authState<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> isLoggedIn <span class="token operator">=</span> <span class="token function">Boolean</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> isAdminLoggedIn <span class="token operator">=</span> <span class="token function">Boolean</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>isAdmin<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> cartItems <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span>cart<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> handleLogout <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    authState<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>authInitialState<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      localStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      localStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span><span class="token string">&#39;shippingAddress&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      localStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span><span class="token string">&#39;paymentMethod&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">&#39;/login&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Set initial auth state data from storage</span></span>
<span class="line">    <span class="token keyword">const</span> authStateStorage <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>authStateStorage<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      authState<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>authStateStorage<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// Set initial cart items if it exists</span></span>
<span class="line">    <span class="token keyword">const</span> cartStorage <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;cart&#39;</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;cart&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>cartStorage<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      cart<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>cartStorage<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">return</span> <span class="token operator">&lt;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">&lt;</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In the code above, we start by extracting the user details from <code>authState</code> to determine whether a user is logged in and whether their role is <code>admin</code>. We also use <code>cartItems</code> from the <code>cart</code> global state to extract the items in a cart.</p><p>The <code>handleLogout</code> callback simply clears the auth state along with the <code>user</code>, <code>shippingAddress</code>, and <code>paymentMethod</code> values that might exist in the <code>localStorage</code>. In <a href="https://blog.logrocket.com/useeffect-react-hook-complete-guide/" target="_blank" rel="noopener noreferrer">the <code>useEffect</code> Hook</a>, we get the <code>user</code> and <code>cart</code> from the <code>localStorage</code> and update the respective states.</p><p>In the <code>jsx</code>, we will simply return a <code>nav</code> with an image and a bunch of links in a <code>&lt;li&gt;</code> tag. You will also notice that when a user isn’t logged in, we display a <code>login</code> link while hiding some other links, like <code>account</code>. Meanwhile, when the logged-in user is an <code>admin</code>, we show some other links, like <code>products</code>. So, our <code>jsx</code> should look like this:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token comment">// layout/Header.tsx</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token operator">&lt;</span>nav className<span class="token operator">=</span><span class="token string">&#39;p-3 bg-slate-100&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&#39;max-w-[1800px] mx-auto flex items-end justify-between&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">&#39;/&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>img</span>
<span class="line">              src<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&#39;/astro.png&#39;</span><span class="token punctuation">}</span></span>
<span class="line">              width<span class="token operator">=</span><span class="token string">&#39;150&#39;</span></span>
<span class="line">              height<span class="token operator">=</span><span class="token string">&#39;50&#39;</span></span>
<span class="line">              alt<span class="token operator">=</span><span class="token string">&#39;Astro ecommerce&#39;</span></span>
<span class="line">              style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> objectFit<span class="token operator">:</span> <span class="token string">&#39;cover&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line">              className<span class="token operator">=</span><span class="token string">&#39;w-[80px] md:w-[100px]&#39;</span></span>
<span class="line">            <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>ul className<span class="token operator">=</span><span class="token string">&#39;flex gap-4&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">&#39;/cart&#39;</span> className<span class="token operator">=</span><span class="token string">&#39;flex items-center gap-1&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">              <span class="token operator">&lt;</span>span className<span class="token operator">=</span><span class="token string">&#39;relative&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">                <span class="token operator">&lt;</span>FaCartPlus size<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">20</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token string">&#39; &#39;</span><span class="token punctuation">}</span></span>
<span class="line">                <span class="token punctuation">{</span>cartItems<span class="token operator">?.</span>length <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span></span>
<span class="line">                  <span class="token operator">&lt;</span>span className<span class="token operator">=</span><span class="token string">&#39;absolute -right-1 -top-1 rounded-full bg-red-600 w-4 h-4  right text-white font-mono text-[10px]  leading-tight text-center flex justify-center items-center&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">                    <span class="token punctuation">{</span>cartItems<span class="token operator">?.</span>length<span class="token punctuation">}</span></span>
<span class="line">                  <span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span></span>
<span class="line">                <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">&#39; &#39;</span><span class="token punctuation">}</span></span>
<span class="line">              <span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span></span>
<span class="line">              Cart</span>
<span class="line">            <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span></span>
<span class="line">          <span class="token punctuation">{</span>isLoggedIn <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span></span>
<span class="line">            <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span></span>
<span class="line">              <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">&#39;/account&#39;</span> className<span class="token operator">=</span><span class="token string">&#39;flex items-center gap-1&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">                <span class="token operator">&lt;</span>FaUser size<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">20</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span> Account</span>
<span class="line">              <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span></span>
<span class="line">          <span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="line">          <span class="token punctuation">{</span>isAdminLoggedIn <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span></span>
<span class="line">            <span class="token operator">&lt;</span><span class="token operator">&gt;</span></span>
<span class="line">              <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span></span>
<span class="line">                <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">&#39;/manage-products&#39;</span> className<span class="token operator">=</span><span class="token string">&#39;flex items-center gap-1&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">                  <span class="token operator">&lt;</span>FaTableList size<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">20</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span> Products</span>
<span class="line">                <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span></span>
<span class="line">              <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span></span>
<span class="line">              <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span></span>
<span class="line">                <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">&#39;/manage-orders&#39;</span> className<span class="token operator">=</span><span class="token string">&#39;flex items-center gap-1&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">                  <span class="token operator">&lt;</span>FaTableList size<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">20</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span> Orders</span>
<span class="line">                <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span></span>
<span class="line">              <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span></span>
<span class="line">              <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span></span>
<span class="line">                <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">&#39;/manage-users&#39;</span> className<span class="token operator">=</span><span class="token string">&#39;flex items-center gap-1&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">                  <span class="token operator">&lt;</span>FaUsers size<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">20</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span> Users</span>
<span class="line">                <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span></span>
<span class="line">              <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">          <span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="line">          <span class="token punctuation">{</span>isLoggedIn <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span></span>
<span class="line">            <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span></span>
<span class="line">              <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>handleLogout<span class="token punctuation">}</span> className<span class="token operator">=</span><span class="token string">&#39;flex items-center gap-1 text-red-500&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">                <span class="token operator">&lt;</span>FaSignOutAlt size<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">20</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span> Logout</span>
<span class="line">              <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span></span>
<span class="line">          <span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="line">          <span class="token punctuation">{</span><span class="token operator">!</span>isLoggedIn <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span></span>
<span class="line">            <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span></span>
<span class="line">              <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">&#39;/login&#39;</span> className<span class="token operator">=</span><span class="token string">&#39;flex items-center gap-1&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">                <span class="token operator">&lt;</span>FaUser size<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">20</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span> Login</span>
<span class="line">              <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span></span>
<span class="line">          <span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="line">        <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">/</span>nav<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Next, we will create the <code>footer</code> component. Since it’s a pure <code>.astro</code> file, we have to open the <code>layout/Footer.astro</code> file and add the following code:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// layout/Footer.astro</span></span>
<span class="line"></span>
<span class="line"><span class="token operator">&lt;</span>footer <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&#39;p-3 bg-slate-400&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&#39;max-w-[1800px]&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span>p <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&#39;text-center&#39;</span><span class="token operator">&gt;</span>Astro ecommerce <span class="token operator">-</span> Lorem<span class="token punctuation">,</span> ipsum dolor sit amet consectetur adipisicing elit<span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line"><span class="token operator">&lt;</span><span class="token operator">/</span>footer<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We can assemble two files in the <code>layout/Layout.astro</code> file like so:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// layout/Layout.astro</span></span>
<span class="line"></span>
<span class="line"><span class="token operator">--</span><span class="token operator">-</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> ViewTransitions <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;astro:transitions&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Header <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./Header&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> Footer <span class="token keyword">from</span> <span class="token string">&#39;./Footer.astro&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">Props</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">title</span><span class="token operator">:</span> string<span class="token punctuation">;</span></span>
<span class="line">  <span class="token literal-property property">description</span><span class="token operator">:</span> string<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span> title<span class="token punctuation">,</span> description <span class="token punctuation">}</span> <span class="token operator">=</span> Astro<span class="token punctuation">.</span>props<span class="token punctuation">;</span></span>
<span class="line"><span class="token operator">--</span><span class="token operator">-</span></span>
<span class="line"></span>
<span class="line"><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">&#39;en&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">  <span class="token operator">&lt;</span>head<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">&#39;utf-8&#39;</span> <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span>link rel<span class="token operator">=</span><span class="token string">&#39;icon&#39;</span> type<span class="token operator">=</span><span class="token string">&#39;image/svg+xml&#39;</span> href<span class="token operator">=</span><span class="token string">&#39;/favicon.svg&#39;</span> <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">&#39;viewport&#39;</span> content<span class="token operator">=</span><span class="token string">&#39;width=device-width&#39;</span> <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">&#39;generator&#39;</span> content<span class="token operator">=</span><span class="token punctuation">{</span>Astro<span class="token punctuation">.</span>generator<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">&#39;description&#39;</span> content<span class="token operator">=</span><span class="token punctuation">{</span>description<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span>title<span class="token operator">&gt;</span><span class="token punctuation">{</span>title<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span>ViewTransitions <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">  <span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token operator">&lt;</span>body<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>Header client<span class="token operator">:</span>load <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">minHeight</span><span class="token operator">:</span> <span class="token string">&#39;calc(100vh - 130px)&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>slot <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>Footer <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span></span>
<span class="line"><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Any code written between the hyphens is assumed to be TypeScript, so we imported the <code>ViewTransitions</code> and other components before defining our <code>props</code> variable, which accepts a title and a description. Note that this is the Astro-recommended pattern for defining types and using the values from the props.</p><p>Since we’re going to use the <code>Layout</code> component in our pages, it will contain the appropriate <code>head</code> and <code>meta</code> tags as well as the <code>ViewTransitions</code> component, which ensures smooth navigation between pages. In the <code>body</code> tag, we render our <code>Header</code> file, <code>slot</code>, and <code>Footer</code>.</p><p>Essentially, you need the <code>client:load</code> prop whenever you use a React component in an Astro file. Also, the <code>slot</code> is used to display whatever content is going to be passed in the <code>Layout</code> component.</p><h3 id="setting-up-message-loader-dialog-heading-and-button-components" tabindex="-1"><a class="header-anchor" href="#setting-up-message-loader-dialog-heading-and-button-components"><span>Setting up message, loader, dialog, heading, and button components</span></a></h3><p>The message, loader, and button components will be heavily used in different parts of the app, so let’s create these essential components now. Add the following code to the <code>components/Message.tsx</code> file:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token comment">// components/Message.tsx</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">MessageProps</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  variant<span class="token operator">:</span> <span class="token string">&#39;danger&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;info&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;success&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;secondary&#39;</span><span class="token punctuation">;</span></span>
<span class="line">  children<span class="token operator">:</span> React<span class="token punctuation">.</span>ReactNode<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> Message<span class="token operator">:</span> React<span class="token punctuation">.</span><span class="token constant">FC</span><span class="token operator">&lt;</span>MessageProps<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> variant<span class="token punctuation">,</span> children <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>variant <span class="token operator">===</span> <span class="token string">&#39;secondary&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&#39;bg-gray-100 border border-gray-400 text-gray-700 px-4 py-3 rounded relative my-2&#39;</span> role<span class="token operator">=</span><span class="token string">&#39;alert&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>span className<span class="token operator">=</span><span class="token string">&#39;block sm:inline&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>variant <span class="token operator">===</span> <span class="token string">&#39;danger&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&#39;bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative my-2&#39;</span> role<span class="token operator">=</span><span class="token string">&#39;alert&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>strong className<span class="token operator">=</span><span class="token string">&#39;font-bold mr-3&#39;</span><span class="token operator">&gt;</span>Error<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>strong<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>span className<span class="token operator">=</span><span class="token string">&#39;block sm:inline&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>variant <span class="token operator">===</span> <span class="token string">&#39;info&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&#39;bg-blue-50 border border-blue-300 text-blue-600 px-4 py-3 rounded relative my-2&#39;</span> role<span class="token operator">=</span><span class="token string">&#39;alert&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>span className<span class="token operator">=</span><span class="token string">&#39;block sm:inline&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&#39;bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative my-2&#39;</span> role<span class="token operator">=</span><span class="token string">&#39;alert&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>strong className<span class="token operator">=</span><span class="token string">&#39;font-bold mr-3&#39;</span><span class="token operator">&gt;</span>Successful<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>strong<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>span className<span class="token operator">=</span><span class="token string">&#39;block sm:inline&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The component above accepts <code>variant</code> and <code>children</code> props. Based on the value of the <code>variant</code>, it also displays a certain <code>jsx</code>.</p><p>We’ll do something similar for the <code>components/Loader.tsx</code> and <code>components/Button.tsx</code> components. However, <code>Loader.tsx</code> accepts just one prop while the <code>Button.tsx</code> accepts multiple props, including <code>onClick</code>, <code>loading</code>, <code>disabled</code>, and others.</p><p>Here’s the code for the <code>Loader.tsx</code> component:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token comment">// components/Loader.tsx</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">LoaderProps</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  variant<span class="token operator">?</span><span class="token operator">:</span> <span class="token string">&#39;small&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;large&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> Loader<span class="token operator">:</span> React<span class="token punctuation">.</span><span class="token constant">FC</span><span class="token operator">&lt;</span>LoaderProps<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> variant <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>variant <span class="token operator">===</span> <span class="token string">&#39;small&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&#39;flex items-center justify-center&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&#39;animate-spin rounded-full h-6 w-6 border-t-4 border-blue-500 border-solid&#39;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&#39;flex items-center justify-center&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&#39;animate-spin rounded-full h-12 w-12 border-t-4 border-blue-500 border-solid&#39;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Here’s the code for the <code>Button.tsx</code> component:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token comment">// components/Button.tsx</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Loader <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./Loader&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">ButtonProps</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  children<span class="token operator">:</span> React<span class="token punctuation">.</span>ReactNode<span class="token punctuation">;</span></span>
<span class="line">  loading<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span></span>
<span class="line">  size<span class="token operator">?</span><span class="token operator">:</span> <span class="token string">&#39;small&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;large&#39;</span><span class="token punctuation">;</span></span>
<span class="line">  onClick<span class="token operator">?</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span></span>
<span class="line">  type<span class="token operator">?</span><span class="token operator">:</span> <span class="token string">&#39;submit&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;button&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;reset&#39;</span><span class="token punctuation">;</span></span>
<span class="line">  disabled<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> Button<span class="token operator">:</span> React<span class="token punctuation">.</span><span class="token constant">FC</span><span class="token operator">&lt;</span>ButtonProps<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  children<span class="token punctuation">,</span></span>
<span class="line">  loading<span class="token punctuation">,</span></span>
<span class="line">  size <span class="token operator">=</span> <span class="token string">&#39;large&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  onClick<span class="token punctuation">,</span></span>
<span class="line">  type <span class="token operator">=</span> <span class="token string">&#39;submit&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  disabled<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">===</span> <span class="token string">&#39;small&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">      <span class="token operator">&lt;</span>button</span>
<span class="line">        className<span class="token operator">=</span><span class="token string">&#39;bg-slate-900 text-white rounded-2xl px-5 py-2 text-lg md:text-xl font-medium w-full max-w-[250px] flex gap-3 justify-center mt-8 cursor-pointer hover:bg-slate-800&#39;</span></span>
<span class="line">        disabled<span class="token operator">=</span><span class="token punctuation">{</span>loading <span class="token operator">||</span> disabled<span class="token punctuation">}</span></span>
<span class="line">        onClick<span class="token operator">=</span><span class="token punctuation">{</span>onClick<span class="token punctuation">}</span></span>
<span class="line">        type<span class="token operator">=</span><span class="token punctuation">{</span>type<span class="token punctuation">}</span></span>
<span class="line">      <span class="token operator">&gt;</span></span>
<span class="line">        <span class="token punctuation">{</span>children<span class="token punctuation">}</span> <span class="token punctuation">{</span>loading <span class="token operator">&amp;&amp;</span> <span class="token operator">&lt;</span>Loader variant<span class="token operator">=</span><span class="token string">&#39;small&#39;</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">}</span></span>
<span class="line">      <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token operator">&lt;</span>button</span>
<span class="line">      className<span class="token operator">=</span><span class="token string">&#39;bg-slate-900 text-white rounded-2xl px-5 py-2 text-lg md:text-xl font-medium w-full max-w-[500px] mx-auto flex gap-3 justify-center mt-8 cursor-pointer hover:bg-slate-800&#39;</span></span>
<span class="line">      disabled<span class="token operator">=</span><span class="token punctuation">{</span>loading <span class="token operator">||</span> disabled<span class="token punctuation">}</span></span>
<span class="line">      onClick<span class="token operator">=</span><span class="token punctuation">{</span>onClick<span class="token punctuation">}</span></span>
<span class="line">      type<span class="token operator">=</span><span class="token punctuation">{</span>type<span class="token punctuation">}</span></span>
<span class="line">    <span class="token operator">&gt;</span></span>
<span class="line">      <span class="token punctuation">{</span>children<span class="token punctuation">}</span> <span class="token punctuation">{</span>loading <span class="token operator">&amp;&amp;</span> <span class="token operator">&lt;</span>Loader variant<span class="token operator">=</span><span class="token string">&#39;small&#39;</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>Button</code> component simply returns a different <code>jsx</code> depending on the <code>size</code> prop. The <code>onClick</code> prop is passed in each <code>button</code> attribute. Also, we use the <code>loading</code> prop to show a loader alongside the text in the button and disable the button based on the value of the <code>loading</code> and <code>disabled</code> props.</p><p>Similar to the components defined above, the <code>components/Heading.tsx</code> component is a simple component that accepts <code>text</code>, <code>variant</code>, and <code>textAlign</code> props and renders different <code>jsx</code> based on the <code>variant</code> like so:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token comment">// components/Heading.tsx</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">HeadingProps</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  text<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  variant<span class="token operator">?</span><span class="token operator">:</span> <span class="token string">&#39;h1&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;h2&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;h3&#39;</span><span class="token punctuation">;</span></span>
<span class="line">  textAlign<span class="token operator">?</span><span class="token operator">:</span> <span class="token string">&#39;center&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;left&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;right&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> Heading<span class="token operator">:</span> React<span class="token punctuation">.</span><span class="token constant">FC</span><span class="token operator">&lt;</span>HeadingProps<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> text<span class="token punctuation">,</span> variant <span class="token operator">=</span> <span class="token string">&#39;h1&#39;</span><span class="token punctuation">,</span> textAlign <span class="token operator">=</span> <span class="token string">&#39;left&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">&gt;</span></span>
<span class="line">      <span class="token punctuation">{</span>variant <span class="token operator">===</span> <span class="token string">&#39;h1&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span></span>
<span class="line">        <span class="token operator">&lt;</span>h1 className<span class="token operator">=</span><span class="token string">&#39;text-xl md:text-3xl font-bold py-6 mx-auto&#39;</span> style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> textAlign <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&gt;</span></span>
<span class="line">          <span class="token punctuation">{</span>text<span class="token punctuation">}</span></span>
<span class="line">        <span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">{</span>variant <span class="token operator">===</span> <span class="token string">&#39;h2&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span></span>
<span class="line">        <span class="token operator">&lt;</span>h2 className<span class="token operator">=</span><span class="token string">&#39;text-lg md:text-2xl font-bold mx-auto&#39;</span> style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> textAlign <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&gt;</span></span>
<span class="line">          <span class="token punctuation">{</span>text<span class="token punctuation">}</span></span>
<span class="line">        <span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">{</span>variant <span class="token operator">===</span> <span class="token string">&#39;h3&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span></span>
<span class="line">        <span class="token operator">&lt;</span>h3 className<span class="token operator">=</span><span class="token string">&#39;text-lg md:text-xl mx-auto&#39;</span> style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> textAlign <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&gt;</span></span>
<span class="line">          <span class="token punctuation">{</span>text<span class="token punctuation">}</span></span>
<span class="line">        <span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Next, we’ll use the <code>components/Dialog.tsx</code> component to display a modal. It will accept <code>children</code>, <code>open</code>, and <code>onClose</code> props. Generally, it will contain a close button that should call <code>onClose</code> when clicked:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token comment">// components/Dialog.tsx</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> FaTimes <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react-icons/fa&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">DialogProps</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  children<span class="token operator">:</span> React<span class="token punctuation">.</span>ReactNode<span class="token punctuation">;</span></span>
<span class="line">  open<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">onClose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> Dialog<span class="token operator">:</span> React<span class="token punctuation">.</span><span class="token constant">FC</span><span class="token operator">&lt;</span>DialogProps<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> children<span class="token punctuation">,</span> open<span class="token punctuation">,</span> onClose <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">&gt;</span></span>
<span class="line">      <span class="token punctuation">{</span>open <span class="token operator">?</span> <span class="token punctuation">(</span></span>
<span class="line">        <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&#39;fixed w-full right-0 left-0 bottom-0 top-0 z-50&#39;</span> style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> backgroundColor<span class="token operator">:</span> <span class="token string">&#39;rgba(0, 0, 0, 0.5)&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&#39;flex justify-center items-center h-full&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&#39;min-h-[700px]  bg-white  w-full max-w-[500px] m-auto py-4&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">              <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&#39;flex justify-end mb-4 px-4&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">                <span class="token operator">&lt;</span>FaTimes className<span class="token operator">=</span><span class="token string">&#39;text-red-500&#39;</span> size<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">20</span><span class="token punctuation">}</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span>onClose<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">              <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">              <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&#39;h-[650px] overflow-y-auto px-4&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="working-on-the-user-registration-and-login-pages" tabindex="-1"><a class="header-anchor" href="#working-on-the-user-registration-and-login-pages"><span>Working on the user registration and login pages</span></a></h3><p>We need to collect the user’s name, email, and password on the registration page. However, we can augment this page’s functionality by writing its core code with React. In the <code>components/RegisterForm.tsx</code> file, add the following code:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token comment">// components/RegisterForm.tsx</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> useStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nanostores/react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> errorRegister<span class="token punctuation">,</span> loadingRegister<span class="token punctuation">,</span> registerRequest <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../state/auth&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Button <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./Button&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Loader <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./Loader&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Message <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./Message&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">RegisterFormProps</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> RegisterForm<span class="token operator">:</span> React<span class="token punctuation">.</span><span class="token constant">FC</span><span class="token operator">&lt;</span>RegisterFormProps<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>name<span class="token punctuation">,</span> setName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useState</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>email<span class="token punctuation">,</span> setEmail<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useState</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>password<span class="token punctuation">,</span> setPassword<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useState</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>confirmPassword<span class="token punctuation">,</span> setConfirmPassword<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useState</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>message<span class="token punctuation">,</span> setMessage<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useState</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> loading <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span>loadingRegister<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> error <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span>errorRegister<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">handleRegister</span> <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> React<span class="token punctuation">.</span>FormEvent<span class="token operator">&lt;</span>HTMLFormElement<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>password <span class="token operator">!==</span> confirmPassword<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token string">&#39;Passwords do not match&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">registerRequest</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> email<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>form onSubmit<span class="token operator">=</span><span class="token punctuation">{</span>handleRegister<span class="token punctuation">}</span> className<span class="token operator">=</span><span class="token string">&#39;max-w-[500px] mx-auto py-6&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token punctuation">{</span>message <span class="token operator">&amp;&amp;</span> <span class="token operator">&lt;</span>Message variant<span class="token operator">=</span><span class="token string">&#39;danger&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>message<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>Message<span class="token operator">&gt;</span><span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">{</span>error <span class="token operator">&amp;&amp;</span> <span class="token operator">&lt;</span>Message variant<span class="token operator">=</span><span class="token string">&#39;danger&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>error<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>Message<span class="token operator">&gt;</span><span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">{</span>loading <span class="token operator">&amp;&amp;</span> <span class="token operator">&lt;</span>Loader <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">}</span></span>
<span class="line">        <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span>label htmlFor<span class="token operator">=</span><span class="token string">&#39;name&#39;</span><span class="token operator">&gt;</span>Name<span class="token operator">:</span><span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span>input</span>
<span class="line">            type<span class="token operator">=</span><span class="token string">&#39;text&#39;</span></span>
<span class="line">            name<span class="token operator">=</span><span class="token string">&#39;name&#39;</span></span>
<span class="line">            id<span class="token operator">=</span><span class="token string">&#39;name&#39;</span></span>
<span class="line">            required</span>
<span class="line">            placeholder<span class="token operator">=</span><span class="token string">&#39;Enter name&#39;</span></span>
<span class="line">            className<span class="token operator">=</span><span class="token string">&#39;border-2 border-slate-400 p-2 rounded-lg w-full&#39;</span></span>
<span class="line">            value<span class="token operator">=</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span>
<span class="line">            onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setName</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="line">          <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span>label htmlFor<span class="token operator">=</span><span class="token string">&#39;email&#39;</span><span class="token operator">&gt;</span> Email<span class="token operator">:</span><span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span>input</span>
<span class="line">            type<span class="token operator">=</span><span class="token string">&#39;email&#39;</span></span>
<span class="line">            name<span class="token operator">=</span><span class="token string">&#39;email&#39;</span></span>
<span class="line">            id<span class="token operator">=</span><span class="token string">&#39;email&#39;</span></span>
<span class="line">            required</span>
<span class="line">            placeholder<span class="token operator">=</span><span class="token string">&#39;Enter email&#39;</span></span>
<span class="line">            className<span class="token operator">=</span><span class="token string">&#39;border-2 border-slate-400 p-2 rounded-lg w-full&#39;</span></span>
<span class="line">            value<span class="token operator">=</span><span class="token punctuation">{</span>email<span class="token punctuation">}</span></span>
<span class="line">            onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setEmail</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="line">          <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span>label htmlFor<span class="token operator">=</span><span class="token string">&#39;password&#39;</span><span class="token operator">&gt;</span> Password<span class="token operator">:</span><span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span>input</span>
<span class="line">            type<span class="token operator">=</span><span class="token string">&#39;password&#39;</span></span>
<span class="line">            name<span class="token operator">=</span><span class="token string">&#39;password&#39;</span></span>
<span class="line">            id<span class="token operator">=</span><span class="token string">&#39;password&#39;</span></span>
<span class="line">            required</span>
<span class="line">            placeholder<span class="token operator">=</span><span class="token string">&#39;Enter password&#39;</span></span>
<span class="line">            className<span class="token operator">=</span><span class="token string">&#39;border-2 border-slate-400 p-2 rounded-lg w-full&#39;</span></span>
<span class="line">            value<span class="token operator">=</span><span class="token punctuation">{</span>password<span class="token punctuation">}</span></span>
<span class="line">            onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setPassword</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="line">          <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span>label htmlFor<span class="token operator">=</span><span class="token string">&#39;confirmPassword&#39;</span><span class="token operator">&gt;</span>Confirm Password<span class="token operator">:</span><span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span>input</span>
<span class="line">            type<span class="token operator">=</span><span class="token string">&#39;password&#39;</span></span>
<span class="line">            name<span class="token operator">=</span><span class="token string">&#39;confirmPassword&#39;</span></span>
<span class="line">            id<span class="token operator">=</span><span class="token string">&#39;confirmPassword&#39;</span></span>
<span class="line">            required</span>
<span class="line">            placeholder<span class="token operator">=</span><span class="token string">&#39;Confirm password&#39;</span></span>
<span class="line">            className<span class="token operator">=</span><span class="token string">&#39;border-2 border-slate-400 p-2 rounded-lg w-full&#39;</span></span>
<span class="line">            value<span class="token operator">=</span><span class="token punctuation">{</span>confirmPassword<span class="token punctuation">}</span></span>
<span class="line">            onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setConfirmPassword</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="line">          <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>p className<span class="token operator">=</span><span class="token string">&#39;my-5 text-right&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">          Already have an account<span class="token operator">?</span><span class="token punctuation">{</span><span class="token string">&#39; &#39;</span><span class="token punctuation">}</span></span>
<span class="line">          <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">&#39;/login&#39;</span> className<span class="token operator">=</span><span class="token string">&#39;text-blue-500 underline&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">            Login</span>
<span class="line">          <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>Button loading<span class="token operator">=</span><span class="token punctuation">{</span>loading<span class="token punctuation">}</span><span class="token operator">&gt;</span>Register<span class="token operator">&lt;</span><span class="token operator">/</span>Button<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In the code above, we define some states for our form inputs, including <code>name</code>, <code>email</code>, <code>password</code>, <code>confirmPassword</code>, and <code>message</code>. Also, we extract the values in the <code>loadingRegister</code> and <code>errorRegister</code> global states and put them in variables.</p><p>We also created the <code>handleRegister</code> function, which accepts a form event and checks that the entered <code>password</code> matches the <code>confirmPassword</code> field. If the passwords match, we call the <code>registerRequest</code> function defined in the <code>state/auth.ts</code> file.</p><p>The <code>jsx</code> returns a form, a bunch of grouped labels and inputs, and a <strong>Submit</strong> button at the end.</p><p>Now, we can use the <code>Heading,</code> <code>Layout</code>, and <code>RegisterForm</code> components in the <code>pages/register.astro</code> file:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// pages/register.astro</span></span>
<span class="line"></span>
<span class="line"><span class="token operator">--</span><span class="token operator">-</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Heading <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../components/Heading&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> Layout <span class="token keyword">from</span> <span class="token string">&#39;../layouts/Layout.astro&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> RegisterForm <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../components/RegisterForm&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token operator">--</span><span class="token operator">-</span></span>
<span class="line"></span>
<span class="line"><span class="token operator">&lt;</span>Layout title<span class="token operator">=</span><span class="token string">&#39;Astro Register&#39;</span> description<span class="token operator">=</span><span class="token string">&#39;Register an account&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&#39;max-w-[1800px] mx-auto&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span>Heading text<span class="token operator">=</span><span class="token string">&#39;Register&#39;</span> variant<span class="token operator">=</span><span class="token string">&#39;h1&#39;</span> textAlign<span class="token operator">=</span><span class="token string">&#39;center&#39;</span> <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span>RegisterForm client<span class="token operator">:</span>load <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line"><span class="token operator">&lt;</span><span class="token operator">/</span>Layout<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The registration page should now look like this:</p><figure><img src="`+x+`" alt="Astro Ecommerce Site User Registration Page Showing Fields For Name, Email, Password, And Password Confirmation Along With A Register Button And Link To Log Into Existing Account" tabindex="0" loading="lazy"><figcaption>Astro Ecommerce Site User Registration Page Showing Fields For Name, Email, Password, And Password Confirmation Along With A Register Button And Link To Log Into Existing Account</figcaption></figure><p>The process for the login page is similar:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token comment">// components/LoginForm.tsx</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> useStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nanostores/react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> errorLogin<span class="token punctuation">,</span> loadingLogin<span class="token punctuation">,</span> loginRequest <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../state/auth&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Button <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./Button&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Message <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./Message&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">LoginFormProps</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> LoginForm<span class="token operator">:</span> React<span class="token punctuation">.</span><span class="token constant">FC</span><span class="token operator">&lt;</span>LoginFormProps<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>email<span class="token punctuation">,</span> setEmail<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useState</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>password<span class="token punctuation">,</span> setPassword<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useState</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> loading <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span>loadingLogin<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> error <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span>errorLogin<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">handleLogin</span> <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> React<span class="token punctuation">.</span>FormEvent<span class="token operator">&lt;</span>HTMLFormElement<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">loginRequest</span><span class="token punctuation">(</span>email<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token operator">&lt;</span>form onSubmit<span class="token operator">=</span><span class="token punctuation">{</span>handleLogin<span class="token punctuation">}</span> className<span class="token operator">=</span><span class="token string">&#39;max-w-[500px] mx-auto py-6&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">      <span class="token punctuation">{</span>error <span class="token operator">&amp;&amp;</span> <span class="token operator">&lt;</span>Message variant<span class="token operator">=</span><span class="token string">&#39;danger&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>error<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>Message<span class="token operator">&gt;</span><span class="token punctuation">}</span></span>
<span class="line">      <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>label htmlFor<span class="token operator">=</span><span class="token string">&#39;email&#39;</span><span class="token operator">&gt;</span> Email<span class="token operator">:</span><span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>input</span>
<span class="line">          type<span class="token operator">=</span><span class="token string">&#39;email&#39;</span></span>
<span class="line">          name<span class="token operator">=</span><span class="token string">&#39;email&#39;</span></span>
<span class="line">          id<span class="token operator">=</span><span class="token string">&#39;email&#39;</span></span>
<span class="line">          required</span>
<span class="line">          placeholder<span class="token operator">=</span><span class="token string">&#39;Enter email&#39;</span></span>
<span class="line">          className<span class="token operator">=</span><span class="token string">&#39;border-2 border-slate-400 p-2 rounded-lg w-full&#39;</span></span>
<span class="line">          value<span class="token operator">=</span><span class="token punctuation">{</span>email<span class="token punctuation">}</span></span>
<span class="line">          onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setEmail</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="line">        <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>label htmlFor<span class="token operator">=</span><span class="token string">&#39;password&#39;</span><span class="token operator">&gt;</span> Password<span class="token operator">:</span><span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>input</span>
<span class="line">          type<span class="token operator">=</span><span class="token string">&#39;password&#39;</span></span>
<span class="line">          name<span class="token operator">=</span><span class="token string">&#39;password&#39;</span></span>
<span class="line">          id<span class="token operator">=</span><span class="token string">&#39;password&#39;</span></span>
<span class="line">          required</span>
<span class="line">          placeholder<span class="token operator">=</span><span class="token string">&#39;Enter password&#39;</span></span>
<span class="line">          className<span class="token operator">=</span><span class="token string">&#39;border-2 border-slate-400 p-2 rounded-lg w-full&#39;</span></span>
<span class="line">          value<span class="token operator">=</span><span class="token punctuation">{</span>password<span class="token punctuation">}</span></span>
<span class="line">          onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setPassword</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="line">        <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>p className<span class="token operator">=</span><span class="token string">&#39;my-5 text-right&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">        Don<span class="token string">&#39;t have an account?{&#39;</span> &#39;<span class="token punctuation">}</span></span>
<span class="line">        <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">&#39;/register&#39;</span> className<span class="token operator">=</span><span class="token string">&#39;text-blue-500 underline&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">          Register</span>
<span class="line">        <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>Button loading<span class="token operator">=</span><span class="token punctuation">{</span>loading<span class="token punctuation">}</span><span class="token operator">&gt;</span>Login<span class="token operator">&lt;</span><span class="token operator">/</span>Button<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Note that in the <code>handleLogin</code> function, we call the <code>loginRequest</code> function to make the API call as we have defined in <code>state/auth.ts</code>.</p><p>We can use the above component in the <code>pages/login.astro</code> file like so:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// pages/login.astro</span></span>
<span class="line"></span>
<span class="line"><span class="token operator">--</span><span class="token operator">-</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Heading <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../components/Heading&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> LoginForm <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../components/LoginForm&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> Layout <span class="token keyword">from</span> <span class="token string">&#39;../layouts/Layout.astro&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token operator">--</span><span class="token operator">-</span></span>
<span class="line"><span class="token operator">&lt;</span>Layout title<span class="token operator">=</span><span class="token string">&#39;Astro Login&#39;</span> description<span class="token operator">=</span><span class="token string">&#39;Login an account&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&#39;max-w-[1800px] mx-auto&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span>Heading text<span class="token operator">=</span><span class="token string">&#39;Login&#39;</span> variant<span class="token operator">=</span><span class="token string">&#39;h1&#39;</span> textAlign<span class="token operator">=</span><span class="token string">&#39;center&#39;</span> <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span>LoginForm client<span class="token operator">:</span>load <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line"><span class="token operator">&lt;</span><span class="token operator">/</span>Layout<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The login page should look like this:</p><figure><img src="`+P+'" alt="Astro Ecommerce Site User Login Page" tabindex="0" loading="lazy"><figcaption>Astro Ecommerce Site User Login Page</figcaption></figure><p>This next part is important! After creating a new user, go to your MongoDB database and update the user to an admin by setting <code>isAdmin</code> to <code>true</code>:</p><figure><img src="'+S+'" alt="Screenshot Showing User Role Being Modified To Admin In Mongodb" tabindex="0" loading="lazy"><figcaption>Screenshot Showing User Role Being Modified To Admin In Mongodb</figcaption></figure><p>After that, you can log out and log in again to see new links on the nav:</p><figure><img src="'+A+`" alt="Astro Ecommerce Site Showing Protected Routes Available For Admins To Access Via Site Menu" tabindex="0" loading="lazy"><figcaption>Astro Ecommerce Site Showing Protected Routes Available For Admins To Access Via Site Menu</figcaption></figure><h3 id="setting-up-the-page-for-creating-and-viewing-products" tabindex="-1"><a class="header-anchor" href="#setting-up-the-page-for-creating-and-viewing-products"><span>Setting up the page for creating and viewing products</span></a></h3><p>The manage products page will contain a <strong>Create Product</strong> button, a dialog to create a product, and a table to view products in the database.</p><p>First, let’s set up the <code>components/CreateProduct.tsx</code> file:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token comment">// components/CreateProduct.tsx</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> useStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nanostores/react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useCallback<span class="token punctuation">,</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> createProductRequest<span class="token punctuation">,</span> errorCreateProduct<span class="token punctuation">,</span> listProductRequest<span class="token punctuation">,</span> loadingCreateProduct <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../state/products&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Button <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./Button&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Heading <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./Heading&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Message <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./Message&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> categoryItems <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;phones&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;computers&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;electronics&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;phone accessories&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;fashion&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bags&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">CreateProductProps</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">onClose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> CreateProduct<span class="token operator">:</span> React<span class="token punctuation">.</span><span class="token constant">FC</span><span class="token operator">&lt;</span>CreateProductProps<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> onClose <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>name<span class="token punctuation">,</span> setName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useState</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>price<span class="token punctuation">,</span> setPrice<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useState</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>brand<span class="token punctuation">,</span> setBrand<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useState</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>category<span class="token punctuation">,</span> setCategory<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useState</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>countInStock<span class="token punctuation">,</span> setCountInStock<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useState</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>description<span class="token punctuation">,</span> setDescription<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useState</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>image<span class="token punctuation">,</span> setImage<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useState</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>message<span class="token punctuation">,</span> setMessage<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useState</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> error <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span>errorCreateProduct<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> loading <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span>loadingCreateProduct<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> handleCreateProduct <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token keyword">async</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> React<span class="token punctuation">.</span>FormEvent<span class="token operator">&lt;</span>HTMLFormElement<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>name <span class="token operator">||</span> <span class="token operator">!</span>price <span class="token operator">||</span> <span class="token operator">!</span>brand <span class="token operator">||</span> <span class="token operator">!</span>category <span class="token operator">||</span> <span class="token operator">!</span>countInStock <span class="token operator">||</span> <span class="token operator">!</span>description <span class="token operator">||</span> <span class="token operator">!</span>image<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token string">&#39;Missing inputs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token keyword">await</span> <span class="token function">createProductRequest</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> price<span class="token punctuation">,</span> brand<span class="token punctuation">,</span> category<span class="token punctuation">,</span> countInStock<span class="token punctuation">,</span> description<span class="token punctuation">,</span> image<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">onClose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">listProductRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">[</span>name<span class="token punctuation">,</span> price<span class="token punctuation">,</span> brand<span class="token punctuation">,</span> category<span class="token punctuation">,</span> countInStock<span class="token punctuation">,</span> description<span class="token punctuation">,</span> image<span class="token punctuation">]</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token operator">&lt;</span>form onSubmit<span class="token operator">=</span><span class="token punctuation">{</span>handleCreateProduct<span class="token punctuation">}</span> className<span class="token operator">=</span><span class="token string">&#39;max-w-[500px] mx-auto py-6 pb-28&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>Heading text<span class="token operator">=</span><span class="token string">&#39;Create Product&#39;</span> variant<span class="token operator">=</span><span class="token string">&#39;h3&#39;</span> textAlign<span class="token operator">=</span><span class="token string">&#39;center&#39;</span> <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">      <span class="token punctuation">{</span>error <span class="token operator">&amp;&amp;</span> <span class="token operator">&lt;</span>Message variant<span class="token operator">=</span><span class="token string">&#39;danger&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>error<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>Message<span class="token operator">&gt;</span><span class="token punctuation">}</span></span>
<span class="line">      <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>label htmlFor<span class="token operator">=</span><span class="token string">&#39;name&#39;</span><span class="token operator">&gt;</span>Product Name<span class="token operator">:</span><span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>input</span>
<span class="line">          type<span class="token operator">=</span><span class="token string">&#39;text&#39;</span></span>
<span class="line">          name<span class="token operator">=</span><span class="token string">&#39;name&#39;</span></span>
<span class="line">          id<span class="token operator">=</span><span class="token string">&#39;name&#39;</span></span>
<span class="line">          required</span>
<span class="line">          placeholder<span class="token operator">=</span><span class="token string">&#39;Enter name&#39;</span></span>
<span class="line">          className<span class="token operator">=</span><span class="token string">&#39;border-2 border-slate-400 p-2 rounded-lg w-full&#39;</span></span>
<span class="line">          value<span class="token operator">=</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span>
<span class="line">          onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">{</span> vall<span class="token operator">:</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token function">setName</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line">        <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>label htmlFor<span class="token operator">=</span><span class="token string">&#39;brand&#39;</span><span class="token operator">&gt;</span>Brand<span class="token operator">:</span><span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>input</span>
<span class="line">          type<span class="token operator">=</span><span class="token string">&#39;text&#39;</span></span>
<span class="line">          name<span class="token operator">=</span><span class="token string">&#39;brand&#39;</span></span>
<span class="line">          id<span class="token operator">=</span><span class="token string">&#39;name&#39;</span></span>
<span class="line">          required</span>
<span class="line">          placeholder<span class="token operator">=</span><span class="token string">&#39;Enter brand&#39;</span></span>
<span class="line">          className<span class="token operator">=</span><span class="token string">&#39;border-2 border-slate-400 p-2 rounded-lg w-full&#39;</span></span>
<span class="line">          value<span class="token operator">=</span><span class="token punctuation">{</span>brand<span class="token punctuation">}</span></span>
<span class="line">          onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">setBrand</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line">        <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>label htmlFor<span class="token operator">=</span><span class="token string">&#39;price&#39;</span><span class="token operator">&gt;</span>Price<span class="token operator">:</span><span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>input</span>
<span class="line">          type<span class="token operator">=</span><span class="token string">&#39;number&#39;</span></span>
<span class="line">          name<span class="token operator">=</span><span class="token string">&#39;price&#39;</span></span>
<span class="line">          id<span class="token operator">=</span><span class="token string">&#39;price&#39;</span></span>
<span class="line">          required</span>
<span class="line">          placeholder<span class="token operator">=</span><span class="token string">&#39;Enter price&#39;</span></span>
<span class="line">          className<span class="token operator">=</span><span class="token string">&#39;border-2 border-slate-400 p-2 rounded-lg w-full&#39;</span></span>
<span class="line">          value<span class="token operator">=</span><span class="token punctuation">{</span>price<span class="token punctuation">}</span></span>
<span class="line">          onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">setPrice</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line">        <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>label htmlFor<span class="token operator">=</span><span class="token string">&#39;category&#39;</span><span class="token operator">&gt;</span>Category<span class="token operator">:</span><span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>select</span>
<span class="line">          name<span class="token operator">=</span><span class="token string">&#39;category&#39;</span></span>
<span class="line">          id<span class="token operator">=</span><span class="token string">&#39;category&#39;</span></span>
<span class="line">          className<span class="token operator">=</span><span class="token string">&#39;border-2 border-slate-400 p-2 rounded-lg w-full capitalize&#39;</span></span>
<span class="line">          value<span class="token operator">=</span><span class="token punctuation">{</span>category<span class="token punctuation">}</span></span>
<span class="line">          onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">setCategory</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line">        <span class="token operator">&gt;</span></span>
<span class="line">          <span class="token punctuation">{</span>categoryItems<span class="token operator">?.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token punctuation">{</span>item<span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>item<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="line">        <span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>label htmlFor<span class="token operator">=</span><span class="token string">&#39;countInStock&#39;</span><span class="token operator">&gt;</span>Count <span class="token keyword">in</span> stock<span class="token operator">:</span><span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>input</span>
<span class="line">          type<span class="token operator">=</span><span class="token string">&#39;number&#39;</span></span>
<span class="line">          name<span class="token operator">=</span><span class="token string">&#39;countInStock&#39;</span></span>
<span class="line">          id<span class="token operator">=</span><span class="token string">&#39;countInStock&#39;</span></span>
<span class="line">          required</span>
<span class="line">          placeholder<span class="token operator">=</span><span class="token string">&#39;Enter count in stock&#39;</span></span>
<span class="line">          className<span class="token operator">=</span><span class="token string">&#39;border-2 border-slate-400 p-2 rounded-lg w-full&#39;</span></span>
<span class="line">          value<span class="token operator">=</span><span class="token punctuation">{</span>countInStock<span class="token punctuation">}</span></span>
<span class="line">          onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">setCountInStock</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line">        <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>label htmlFor<span class="token operator">=</span><span class="token string">&#39;description&#39;</span><span class="token operator">&gt;</span>Description<span class="token operator">:</span><span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>textarea</span>
<span class="line">          name<span class="token operator">=</span><span class="token string">&#39;description&#39;</span></span>
<span class="line">          id<span class="token operator">=</span><span class="token string">&#39;description&#39;</span></span>
<span class="line">          className<span class="token operator">=</span><span class="token string">&#39;border-2 border-slate-400 p-2 rounded-lg w-full&#39;</span></span>
<span class="line">          value<span class="token operator">=</span><span class="token punctuation">{</span>description<span class="token punctuation">}</span></span>
<span class="line">          onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">setDescription</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line">        <span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>textarea<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>label htmlFor<span class="token operator">=</span><span class="token string">&#39;image&#39;</span><span class="token operator">&gt;</span>Image Url<span class="token operator">:</span><span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>input</span>
<span class="line">          type<span class="token operator">=</span><span class="token string">&#39;text&#39;</span></span>
<span class="line">          name<span class="token operator">=</span><span class="token string">&#39;image&#39;</span></span>
<span class="line">          id<span class="token operator">=</span><span class="token string">&#39;image&#39;</span></span>
<span class="line">          required</span>
<span class="line">          placeholder<span class="token operator">=</span><span class="token string">&#39;Enter image url&#39;</span></span>
<span class="line">          className<span class="token operator">=</span><span class="token string">&#39;border-2 border-slate-400 p-2 rounded-lg w-full&#39;</span></span>
<span class="line">          value<span class="token operator">=</span><span class="token punctuation">{</span>image<span class="token punctuation">}</span></span>
<span class="line">          onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">setImage</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line">        <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">      <span class="token punctuation">{</span>image <span class="token operator">&amp;&amp;</span> <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token punctuation">{</span>image<span class="token punctuation">}</span> width<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">300</span><span class="token punctuation">}</span> height<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">300</span><span class="token punctuation">}</span> style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> objectFit<span class="token operator">:</span> <span class="token string">&#39;cover&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span> alt<span class="token operator">=</span><span class="token string">&#39;Product image&#39;</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">{</span>message <span class="token operator">&amp;&amp;</span> <span class="token operator">&lt;</span>Message variant<span class="token operator">=</span><span class="token string">&#39;danger&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>message<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>Message<span class="token operator">&gt;</span><span class="token punctuation">}</span></span>
<span class="line">      <span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>Button loading<span class="token operator">=</span><span class="token punctuation">{</span>loading<span class="token punctuation">}</span><span class="token operator">&gt;</span>Submit<span class="token operator">&lt;</span><span class="token operator">/</span>Button<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This file begins with the usual import statements. Then, we have the list of category items and a prop type for our component containing only an <code>onClose</code> value.</p><p>In the component, we have various states, which — besides the <code>message</code> state — are used directly in the form. We also have the <code>loading</code> and <code>error</code> states derived from their respective global states for this product creation functionality.</p><p>The <code>handleCreateProduct</code> function checks that all the form states are present. If they’re not, we update the <code>message</code> state with an error message. Otherwise, we call the <code>createProductRequest</code> function defined in <code>state/product.ts</code>.</p><p>The <code>createProductRequest</code> function is asynchronous, so we can use <code>.then</code> to detect when the operation is successful. Once it succeeds, we call the <code>onClose</code> and <code>listProductRequest</code> functions defined in <code>state/product.ts</code>.</p><p>You may have noticed that we passed items to the dependency arrays. This is useful because we want the function to be able to run when the value of any of those items changes.</p><p>Now, let’s build the page. Add the following code to the <code>components/AdminManageProducts.tsx</code> file:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token comment">// components/AdminManageProducts.tsx</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> useStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nanostores/react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useCallback<span class="token punctuation">,</span> useEffect<span class="token punctuation">,</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span></span>
<span class="line">  deleteProductRequest<span class="token punctuation">,</span></span>
<span class="line">  errorDeleteProduct<span class="token punctuation">,</span></span>
<span class="line">  errorProductList<span class="token punctuation">,</span></span>
<span class="line">  listProductRequest<span class="token punctuation">,</span></span>
<span class="line">  loadingDeleteProduct<span class="token punctuation">,</span></span>
<span class="line">  loadingProductList<span class="token punctuation">,</span></span>
<span class="line">  productListState<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../state/products&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Button <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./Button&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> CreateProduct <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./CreateProduct&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Dialog <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./Dialog&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Loader <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./Loader&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Message <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./Message&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">ManageProductsProps</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> AdminManageProducts<span class="token operator">:</span> React<span class="token punctuation">.</span><span class="token constant">FC</span><span class="token operator">&lt;</span>ManageProductsProps<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> loadingList <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span>loadingProductList<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> errorList <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span>errorProductList<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> productList <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span>productListState<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> loadingDelete <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span>loadingDeleteProduct<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> errorDelete <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span>errorDeleteProduct<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>openForm<span class="token punctuation">,</span> setOpenForm<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useState</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> handleDelete <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">deleteProductRequest</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">listProductRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">listProductRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&#39;p-6&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>Button size<span class="token operator">=</span><span class="token string">&#39;small&#39;</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setOpenForm</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&gt;</span></span>
<span class="line">        Create Product</span>
<span class="line">      <span class="token operator">&lt;</span><span class="token operator">/</span>Button<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>Dialog open<span class="token operator">=</span><span class="token punctuation">{</span>openForm<span class="token punctuation">}</span> onClose<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setOpenForm</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>CreateProduct onClose<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setOpenForm</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span><span class="token operator">/</span>Dialog<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token punctuation">{</span>errorList <span class="token operator">&amp;&amp;</span> <span class="token operator">&lt;</span>Message variant<span class="token operator">=</span><span class="token string">&#39;danger&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>errorList<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>Message<span class="token operator">&gt;</span><span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">{</span>loadingList <span class="token operator">&amp;&amp;</span> <span class="token operator">&lt;</span>Loader variant<span class="token operator">=</span><span class="token string">&#39;large&#39;</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">{</span>errorDelete <span class="token operator">&amp;&amp;</span> <span class="token operator">&lt;</span>Message variant<span class="token operator">=</span><span class="token string">&#39;danger&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>errorDelete<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>Message<span class="token operator">&gt;</span><span class="token punctuation">}</span></span>
<span class="line">      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&#39;w-full my-8 max-w-[1800px] mx-auto overflow-auto&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>table className<span class="token operator">=</span><span class="token string">&#39;table-auto border-4 w-full whitespace-nowrap&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span>thead className<span class="token operator">=</span><span class="token string">&#39;border-b-2&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>tr className<span class="token operator">=</span><span class="token string">&#39;bg-gray-500 text-white &#39;</span><span class="token operator">&gt;</span></span>
<span class="line">              <span class="token operator">&lt;</span>th className<span class="token operator">=</span><span class="token string">&#39;text-left border-r-2 px-4 py-2&#39;</span><span class="token operator">&gt;</span>Name<span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">&gt;</span></span>
<span class="line">              <span class="token operator">&lt;</span>th className<span class="token operator">=</span><span class="token string">&#39;text-left border-r-2 px-4 py-2&#39;</span><span class="token operator">&gt;</span>Brand<span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">&gt;</span></span>
<span class="line">              <span class="token operator">&lt;</span>th className<span class="token operator">=</span><span class="token string">&#39;text-left border-r-2 px-4 py-2&#39;</span><span class="token operator">&gt;</span>Price<span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">&gt;</span></span>
<span class="line">              <span class="token operator">&lt;</span>th className<span class="token operator">=</span><span class="token string">&#39;text-left border-r-2 px-4 py-2&#39;</span><span class="token operator">&gt;</span>Category<span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">&gt;</span></span>
<span class="line">              <span class="token operator">&lt;</span>th className<span class="token operator">=</span><span class="token string">&#39;text-left border-r-2  px-4 py-2&#39;</span><span class="token operator">&gt;</span>Count <span class="token keyword">in</span> stock<span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">&gt;</span></span>
<span class="line">              <span class="token operator">&lt;</span>th className<span class="token operator">=</span><span class="token string">&#39;text-left border-r-2 px-4 py-2&#39;</span><span class="token operator">&gt;</span>Action<span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span><span class="token operator">/</span>thead<span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span>tbody<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token punctuation">{</span>productList<span class="token operator">?.</span>products<span class="token operator">?.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">              <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">                <span class="token operator">&lt;</span>tr className<span class="token operator">=</span><span class="token string">&#39;capitalize border-b-2&#39;</span> key<span class="token operator">=</span><span class="token punctuation">{</span>product<span class="token operator">?.</span>_id<span class="token punctuation">}</span><span class="token operator">&gt;</span></span>
<span class="line">                  <span class="token operator">&lt;</span>td className<span class="token operator">=</span><span class="token string">&#39;text-left border-r-2 px-4 py-2&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>product<span class="token operator">?.</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span></span>
<span class="line">                  <span class="token operator">&lt;</span>td className<span class="token operator">=</span><span class="token string">&#39;text-left border-r-2 px-4 py-2&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>product<span class="token operator">?.</span>brand<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span></span>
<span class="line">                  <span class="token operator">&lt;</span>td className<span class="token operator">=</span><span class="token string">&#39;text-left border-r-2 px-4 py-2&#39;</span><span class="token operator">&gt;</span>$<span class="token punctuation">{</span>product<span class="token operator">?.</span>price<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span></span>
<span class="line">                  <span class="token operator">&lt;</span>td className<span class="token operator">=</span><span class="token string">&#39;text-left border-r-2 px-4 py-2&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>product<span class="token operator">?.</span>category<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span></span>
<span class="line">                  <span class="token operator">&lt;</span>td className<span class="token operator">=</span><span class="token string">&#39;text-left border-r-2 px-4 py-2&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>product<span class="token operator">?.</span>countInStock<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span></span>
<span class="line">                  <span class="token operator">&lt;</span>td className<span class="token operator">=</span><span class="token string">&#39;text-left border-r-2 px-4 py-2&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">                    <span class="token operator">&lt;</span>span className<span class="token operator">=</span><span class="token string">&#39;flex gap-4&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">                      <span class="token operator">&lt;</span>a</span>
<span class="line">                        href<span class="token operator">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/product/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>product<span class="token operator">?.</span>_id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">}</span></span>
<span class="line">                        className<span class="token operator">=</span><span class="token string">&#39;bg-slate-900 text-white rounded px-4 py-2  w-full max-w-[100px] flex gap-3 justify-center  cursor-pointer hover:bg-slate-800 text-sm&#39;</span></span>
<span class="line">                      <span class="token operator">&gt;</span></span>
<span class="line">                        View</span>
<span class="line">                      <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span></span>
<span class="line">                      <span class="token operator">&lt;</span>button</span>
<span class="line">                        onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">handleDelete</span><span class="token punctuation">(</span>product<span class="token operator">?.</span>_id<span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="line">                        disabled<span class="token operator">=</span><span class="token punctuation">{</span>loadingDelete<span class="token punctuation">}</span></span>
<span class="line">                        className<span class="token operator">=</span><span class="token string">&#39;bg-red-900 text-white rounded px-4 py-2  w-full max-w-[100px] flex gap-3 justify-center  cursor-pointer hover:bg-red-800 text-sm&#39;</span></span>
<span class="line">                      <span class="token operator">&gt;</span></span>
<span class="line">                        Remove <span class="token punctuation">{</span>loadingDelete <span class="token operator">&amp;&amp;</span> <span class="token operator">&lt;</span>Loader variant<span class="token operator">=</span><span class="token string">&#39;small&#39;</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">}</span></span>
<span class="line">                      <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span></span>
<span class="line">                    <span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span></span>
<span class="line">                  <span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span></span>
<span class="line">                <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">&gt;</span></span>
<span class="line">              <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="line">          <span class="token operator">&lt;</span><span class="token operator">/</span>tbody<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span><span class="token operator">/</span>table<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In this component, we extract the states for listing and deleting products using <code>useStore</code> and the appropriate states defined in <code>state/product.ts</code>. Then, we define another state to control opening and closing the dialog.</p><p>We also have a <code>handleDelete</code> function that accepts an <code>id</code> and calls <code>deleteProductRequest</code>. After the <code>delete</code> operation is successful, we call the <code>listProductRequest</code> function. In the <code>useEffect</code> Hook, we call the <code>listProductRequest</code> function when the page loads for the first time.</p><p>In the <code>jsx</code>, we have a <strong>Create Product</strong> button that sets the <code>openForm</code> state to <code>true</code>. Then, we use the <code>component/Dialog.tsx</code> component and pass the <code>CreateProduct</code> component we created earlier as a child component.</p><p>Next, we have two <code>Message</code> components that render the <code>errorList</code> and <code>errorDelete</code> messages. We also have a <code>Loader</code> component controlled by the <code>loadingList</code> variable.</p><p>Lastly, we have a table with <code>name</code>, <code>brand</code>, and other table <code>head</code> values. Meanwhile, as part of the table’s <code>body</code>, we have a link that will navigate the user to a single product screen and a button that calls the <code>handleDelete</code> function.</p><p>With all of that set up, we can use the <code>components/AdminManageProducts.tsx</code> component in the <code>pages/manage-products.astro</code> file:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// pages/manage-products.astro</span></span>
<span class="line"><span class="token operator">--</span><span class="token operator">-</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> AdminManageProducts <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../components/AdminManageProducts&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Heading <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../components/Heading&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> Layout <span class="token keyword">from</span> <span class="token string">&#39;../layouts/Layout.astro&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token operator">--</span><span class="token operator">-</span></span>
<span class="line"></span>
<span class="line"><span class="token operator">&lt;</span>Layout title<span class="token operator">=</span><span class="token string">&#39;Manage Products&#39;</span> description<span class="token operator">=</span><span class="token string">&#39;Manage products&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&#39;max-w-[1800px] mx-auto&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span>Heading text<span class="token operator">=</span><span class="token string">&#39;Manage Products&#39;</span> variant<span class="token operator">=</span><span class="token string">&#39;h1&#39;</span> textAlign<span class="token operator">=</span><span class="token string">&#39;center&#39;</span> <span class="token literal-property property">client</span><span class="token operator">:</span>load <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span>AdminManageProducts client<span class="token operator">:</span>load <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line"><span class="token operator">&lt;</span><span class="token operator">/</span>Layout<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Our <strong>Create Product</strong> dialog and form should work as shown below:</p><figure><img src="`+I+'" alt="Astro Ecommerce Site Showing Popup Dialog With Form For Admin To Create A New Product" tabindex="0" loading="lazy"><figcaption>Astro Ecommerce Site Showing Popup Dialog With Form For Admin To Create A New Product</figcaption></figure><p>After submitting the product, you should see a table with your products, a <strong>View</strong> link, and a <strong>Remove</strong> button:</p><figure><img src="'+C+`" alt="Astro Ecommerce Site Showing Table For Admin To View And Remove Products From List" tabindex="0" loading="lazy"><figcaption>Astro Ecommerce Site Showing Table For Admin To View And Remove Products From List</figcaption></figure><p>Try creating multiple products to test the delete functionality.</p><h3 id="working-on-the-product-details-page" tabindex="-1"><a class="header-anchor" href="#working-on-the-product-details-page"><span>Working on the product details page</span></a></h3><p>At the moment, clicking on the <strong>View</strong> button above might result in an error or show a blank screen. To fix that, let’s update our <code>pages/product/[id].astro</code> file. We also have to implement the <code>Rating</code>, <code>AddReview</code>, <code>Select</code>, and <code>ProductDetails</code> components, since we’ll use them on our page.</p><p>The <code>Rating</code> component will display a five-star rating system. Depending on the average value of all submitted ratings, it will show full, half, or blank stars. This component accepts <code>value</code> and <code>text</code> props:</p><ul><li><code>value</code> will show the item’s rating</li><li><code>text</code> will show any extra info about the rating, such as the review count</li></ul><p>Add the following code inside the <code>components/Rating.tsx</code> file:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token comment">// components/Rating.tsx</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> IoMdStarOutline<span class="token punctuation">,</span> IoMdStar<span class="token punctuation">,</span> IoMdStarHalf <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react-icons/io&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">RatingProps</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  value<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line">  text<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> Rating<span class="token operator">:</span> React<span class="token punctuation">.</span><span class="token constant">FC</span><span class="token operator">&lt;</span>RatingProps<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> value<span class="token punctuation">,</span> text <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&#39;&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&#39;flex  text-yellow-500&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token punctuation">{</span>value <span class="token operator">&gt;=</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token punctuation">(</span></span>
<span class="line">          <span class="token operator">&lt;</span>IoMdStar size<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">20</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token punctuation">)</span> <span class="token operator">:</span> value <span class="token operator">&gt;=</span> <span class="token number">0.5</span> <span class="token operator">?</span> <span class="token punctuation">(</span></span>
<span class="line">          <span class="token operator">&lt;</span>IoMdStarHalf size<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">20</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span></span>
<span class="line">          <span class="token operator">&lt;</span>IoMdStarOutline size<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">20</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">{</span>value <span class="token operator">&gt;=</span> <span class="token number">2</span> <span class="token operator">?</span> <span class="token punctuation">(</span></span>
<span class="line">          <span class="token operator">&lt;</span>IoMdStar size<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">20</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token punctuation">)</span> <span class="token operator">:</span> value <span class="token operator">&gt;=</span> <span class="token number">1.5</span> <span class="token operator">?</span> <span class="token punctuation">(</span></span>
<span class="line">          <span class="token operator">&lt;</span>IoMdStarHalf size<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">20</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span></span>
<span class="line">          <span class="token operator">&lt;</span>IoMdStarOutline size<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">20</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">{</span>value <span class="token operator">&gt;=</span> <span class="token number">3</span> <span class="token operator">?</span> <span class="token punctuation">(</span></span>
<span class="line">          <span class="token operator">&lt;</span>IoMdStar size<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">20</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token punctuation">)</span> <span class="token operator">:</span> value <span class="token operator">&gt;=</span> <span class="token number">2.5</span> <span class="token operator">?</span> <span class="token punctuation">(</span></span>
<span class="line">          <span class="token operator">&lt;</span>IoMdStarHalf size<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">20</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span></span>
<span class="line">          <span class="token operator">&lt;</span>IoMdStarOutline size<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">20</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">{</span>value <span class="token operator">&gt;=</span> <span class="token number">4</span> <span class="token operator">?</span> <span class="token punctuation">(</span></span>
<span class="line">          <span class="token operator">&lt;</span>IoMdStar size<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">20</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token punctuation">)</span> <span class="token operator">:</span> value <span class="token operator">&gt;=</span> <span class="token number">3.5</span> <span class="token operator">?</span> <span class="token punctuation">(</span></span>
<span class="line">          <span class="token operator">&lt;</span>IoMdStarHalf size<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">20</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span></span>
<span class="line">          <span class="token operator">&lt;</span>IoMdStarOutline size<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">20</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">{</span>value <span class="token operator">&gt;=</span> <span class="token number">5</span> <span class="token operator">?</span> <span class="token punctuation">(</span></span>
<span class="line">          <span class="token operator">&lt;</span>IoMdStar size<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">20</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token punctuation">)</span> <span class="token operator">:</span> value <span class="token operator">&gt;=</span> <span class="token number">4.5</span> <span class="token operator">?</span> <span class="token punctuation">(</span></span>
<span class="line">          <span class="token operator">&lt;</span>IoMdStarHalf size<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">20</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span></span>
<span class="line">          <span class="token operator">&lt;</span>IoMdStarOutline size<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">20</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="line">      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token punctuation">{</span>text <span class="token operator">&amp;&amp;</span> <span class="token operator">&lt;</span>span className<span class="token operator">=</span><span class="token string">&#39;text-sm block pl-1 capitalize&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>text<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Next, the <code>Select</code> component returns a <code>select</code> tag that generates an array of numbers based on the <code>length</code> passed as prop. It also accepts <code>value</code>, <code>onChange</code>, and other props:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token comment">// component/Select.tsx</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">SelectProps</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  value<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">onChange</span><span class="token punctuation">(</span>e<span class="token operator">:</span> React<span class="token punctuation">.</span>ChangeEvent<span class="token operator">&lt;</span>HTMLSelectElement<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span></span>
<span class="line">  name<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  length<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line">  maxWidth<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> Select<span class="token operator">:</span> React<span class="token punctuation">.</span><span class="token constant">FC</span><span class="token operator">&lt;</span>SelectProps<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> value<span class="token punctuation">,</span> onChange<span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">&#39;count in stock&#39;</span><span class="token punctuation">,</span> length<span class="token punctuation">,</span> maxWidth <span class="token operator">=</span> <span class="token string">&#39;100px&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token operator">&lt;</span>select</span>
<span class="line">      name<span class="token operator">=</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span>
<span class="line">      onChange<span class="token operator">=</span><span class="token punctuation">{</span>onChange<span class="token punctuation">}</span></span>
<span class="line">      value<span class="token operator">=</span><span class="token punctuation">{</span>value<span class="token punctuation">}</span></span>
<span class="line">      className<span class="token operator">=</span><span class="token string">&#39;border-2 border-slate-400 p-2 rounded-lg w-full&#39;</span></span>
<span class="line">      style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> maxWidth <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token operator">&gt;</span></span>
<span class="line">      <span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token operator">...</span><span class="token builtin">Array</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">{</span> length <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">          <span class="token operator">&lt;</span>option key<span class="token operator">=</span><span class="token punctuation">{</span>num<span class="token punctuation">}</span> value<span class="token operator">=</span><span class="token punctuation">{</span>num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token operator">&gt;</span></span>
<span class="line">            <span class="token punctuation">{</span>num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">}</span></span>
<span class="line">          <span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> Select<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now, let’s work on the <code>addReview</code> component. We want to enable users to select a rating value from one to five and add a comment about a product. After, the <code>rating</code> and <code>comment</code> values stored in the state are submitted to the server using the <code>reviewProductRequest</code> function defined in <code>state/product.ts</code> file.</p><p>This component will contain the <code>loading</code> and <code>error</code> states derived from <code>errorReviewProduct</code> and <code>loadingReviewProduct</code>. The <code>jsx</code> will contain <code>Select</code> and <code>textarea</code> elements for the <code>rating</code> and <code>component</code> inputs, respectively:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token comment">// components/AddReview.tsx</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> useStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nanostores/react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useCallback<span class="token punctuation">,</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> errorReviewProduct<span class="token punctuation">,</span> getProductRequest<span class="token punctuation">,</span> loadingReviewProduct<span class="token punctuation">,</span> reviewProductRequest <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../state/products&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Button <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./Button&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Message <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./Message&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> Select <span class="token keyword">from</span> <span class="token string">&#39;./Select&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">AddReviewProps</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> AddReview<span class="token operator">:</span> React<span class="token punctuation">.</span><span class="token constant">FC</span><span class="token operator">&lt;</span>AddReviewProps<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> id <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> error <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span>errorReviewProduct<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> loading <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span>loadingReviewProduct<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>comment<span class="token punctuation">,</span> setComment<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useState</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>rating<span class="token punctuation">,</span> setRating<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useState</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> handleAddReview <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token punctuation">(</span>e<span class="token operator">:</span> React<span class="token punctuation">.</span>FormEvent<span class="token operator">&lt;</span>HTMLFormElement<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>comment <span class="token operator">||</span> <span class="token operator">!</span>rating<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token function">reviewProductRequest</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> rating<span class="token punctuation">,</span> comment<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">getProductRequest</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">setComment</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">setRating</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">[</span>id<span class="token punctuation">,</span> rating<span class="token punctuation">,</span> comment<span class="token punctuation">]</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&#39;w-full&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>h2 className<span class="token operator">=</span><span class="token string">&#39;text-xl   pt-6 pb-2 mx-auto uppercase&#39;</span><span class="token operator">&gt;</span>Add Reviews<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>form onSubmit<span class="token operator">=</span><span class="token punctuation">{</span>handleAddReview<span class="token punctuation">}</span><span class="token operator">&gt;</span></span>
<span class="line">          <span class="token punctuation">{</span>error <span class="token operator">&amp;&amp;</span> <span class="token operator">&lt;</span>Message variant<span class="token operator">=</span><span class="token string">&#39;danger&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>error<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>Message<span class="token operator">&gt;</span><span class="token punctuation">}</span></span>
<span class="line">          <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&#39;flex flex-col&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>label htmlFor<span class="token operator">=</span><span class="token string">&#39;rating&#39;</span><span class="token operator">&gt;</span>Rating<span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>Select length<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">}</span> onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setRating</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span> value<span class="token operator">=</span><span class="token punctuation">{</span>rating<span class="token punctuation">}</span> name<span class="token operator">=</span><span class="token string">&#39;rating&#39;</span> <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>label htmlFor<span class="token operator">=</span><span class="token string">&#39;comment&#39;</span><span class="token operator">&gt;</span>Comment<span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>textarea</span>
<span class="line">              name<span class="token operator">=</span><span class="token string">&#39;comment&#39;</span></span>
<span class="line">              id<span class="token operator">=</span><span class="token string">&#39;comment&#39;</span></span>
<span class="line">              className<span class="token operator">=</span><span class="token string">&#39;border-2 border-slate-400 p-2 rounded-lg w-full&#39;</span></span>
<span class="line">              value<span class="token operator">=</span><span class="token punctuation">{</span>comment<span class="token punctuation">}</span></span>
<span class="line">              onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token function">setComment</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">              <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line">              required</span>
<span class="line">            <span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>textarea<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>Button size<span class="token operator">=</span><span class="token string">&#39;small&#39;</span> loading<span class="token operator">=</span><span class="token punctuation">{</span>loading<span class="token punctuation">}</span><span class="token operator">&gt;</span></span>
<span class="line">              Submit</span>
<span class="line">            <span class="token operator">&lt;</span><span class="token operator">/</span>Button<span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Next, the <code>components/ProductDetails.tsx</code> component simply accepts an <code>id</code> as its prop. In the component, we’ll define the <code>loadingProduct</code>, <code>errorProduct</code>, and <code>product</code> variables derived from their respective analogs from the <code>state/product.ts</code> file.</p><p>We’ll get the product’s <code>rating</code> and <code>reviewsCount</code> from the <code>product</code> value. Similarly, we’ll get the <code>cartItems</code> from the <code>cart</code> defined in <code>state/cart.ts</code>. We’ll then define a <code>qty</code> state and <code>handleAddToCart</code> function that calls the <code>addToCart</code> function defined in <code>state/cart.ts</code>.</p><p>Our component houses two <code>useEffect</code> Hooks. In the first, we fetch the product details. In the second, we take the <code>cartItem</code> and set the initial value of the cart item’s <code>qty</code> that matches the <code>id</code> passed in. This approach sets any necessary initial data from a single point of truth.</p><p>In the returned <code>jsx</code>, we have some <code>error</code> and <code>loading</code> components, along with some tags to display the information from the fetched product. We also use the <code>Rating</code> and <code>AddReview</code> components we previously created and have a button that calls the <code>handleAddToCart</code> function. Lastly, we have another <code>jsx</code> to return the list of reviews:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token comment">// components/ProductDetails.tsx</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> useStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nanostores/react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useCallback<span class="token punctuation">,</span> useEffect<span class="token punctuation">,</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> FaArrowLeft <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react-icons/fa&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> addToCart<span class="token punctuation">,</span> cart <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../state/cart&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> errorGetProduct<span class="token punctuation">,</span> getProductRequest<span class="token punctuation">,</span> loadingGetProduct<span class="token punctuation">,</span> productGetState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../state/products&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> AddReview <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./AddReview&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Button <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./Button&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Heading <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./Heading&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Loader <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./Loader&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Message <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./Message&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Rating <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./Rating&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> Select <span class="token keyword">from</span> <span class="token string">&#39;./Select&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">ProductDetailsProps</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> ProductDetails<span class="token operator">:</span> React<span class="token punctuation">.</span><span class="token constant">FC</span><span class="token operator">&lt;</span>ProductDetailsProps<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> id <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> loadingProduct <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span>loadingGetProduct<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> errorProduct <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span>errorGetProduct<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> product <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span>productGetState<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> rating <span class="token operator">=</span> product<span class="token operator">?.</span>rating<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> reviewsCount <span class="token operator">=</span> product<span class="token operator">?.</span>reviews<span class="token operator">?.</span>length<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> cartItems <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span>cart<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>qty<span class="token punctuation">,</span> setQty<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useState</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> handleAddToCart <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>quantity<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">await</span> <span class="token function">addToCart</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token function">Number</span><span class="token punctuation">(</span>quantity<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">getProductRequest</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> cartItem <span class="token operator">=</span> cartItems<span class="token operator">?.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span>cartItem<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> cartItem<span class="token operator">?.</span>product <span class="token operator">===</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">setQty</span><span class="token punctuation">(</span>cartItem<span class="token operator">?.</span>qty <span class="token operator">||</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>cartItems<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token operator">&lt;</span>section<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token punctuation">{</span>errorProduct <span class="token operator">&amp;&amp;</span> <span class="token operator">&lt;</span>Message variant<span class="token operator">=</span><span class="token string">&#39;danger&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>errorProduct<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>Message<span class="token operator">&gt;</span><span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">{</span>loadingProduct <span class="token operator">&amp;&amp;</span> <span class="token operator">&lt;</span>Loader variant<span class="token operator">=</span><span class="token string">&#39;large&#39;</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">}</span></span>
<span class="line">      <span class="token operator">&lt;</span>Heading text<span class="token operator">=</span><span class="token punctuation">{</span>product<span class="token operator">?.</span>name <span class="token operator">||</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">}</span> variant<span class="token operator">=</span><span class="token string">&#39;h1&#39;</span> textAlign<span class="token operator">=</span><span class="token string">&#39;center&#39;</span> <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>a</span>
<span class="line">        href<span class="token operator">=</span><span class="token string">&#39;/&#39;</span></span>
<span class="line">        className<span class="token operator">=</span><span class="token string">&#39;bg-slate-900 text-white rounded px-4 py-2  w-full max-w-[100px] flex gap-3 justify-center  cursor-pointer hover:bg-slate-800 text-sm items-center&#39;</span></span>
<span class="line">      <span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>FaArrowLeft size<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">15</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span> Back</span>
<span class="line">      <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&#39;grid grid-cols-1 md:grid-cols-3 gap-8 py-6&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>article<span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token punctuation">{</span>product<span class="token punctuation">.</span>image<span class="token punctuation">}</span> alt<span class="token operator">=</span><span class="token punctuation">{</span>product<span class="token punctuation">.</span>name<span class="token punctuation">}</span> className<span class="token operator">=</span><span class="token string">&#39;w-full h-[500px] object-cover&#39;</span> <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span>h2 className<span class="token operator">=</span><span class="token string">&#39;text-xl md:text-2xl  pt-6 pb-2 mx-auto uppercase&#39;</span><span class="token operator">&gt;</span>Customer Reviews<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span></span>
<span class="line">          <span class="token punctuation">{</span><span class="token operator">!</span>product<span class="token operator">?.</span>reviews<span class="token operator">?.</span>length <span class="token operator">&amp;&amp;</span> <span class="token operator">&lt;</span>Message variant<span class="token operator">=</span><span class="token string">&#39;info&#39;</span><span class="token operator">&gt;</span>There are no Reviews<span class="token operator">&lt;</span><span class="token operator">/</span>Message<span class="token operator">&gt;</span><span class="token punctuation">}</span></span>
<span class="line">          <span class="token punctuation">{</span>product<span class="token operator">?.</span>reviews<span class="token operator">?.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>review<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">              <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&#39;border-2 mb-4 p-2&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">                <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">                  <span class="token operator">&lt;</span>span<span class="token operator">&gt;</span><span class="token punctuation">{</span>review<span class="token operator">?.</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span></span>
<span class="line">                  <span class="token operator">&lt;</span>span<span class="token operator">&gt;</span></span>
<span class="line">                    <span class="token operator">&lt;</span>Rating text<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&#39;&#39;</span><span class="token punctuation">}</span> value<span class="token operator">=</span><span class="token punctuation">{</span>review<span class="token operator">?.</span>rating<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">                  <span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span></span>
<span class="line">                <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">                <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span><span class="token punctuation">{</span>review<span class="token operator">?.</span>comment<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span></span>
<span class="line">              <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="line">        <span class="token operator">&lt;</span><span class="token operator">/</span>article<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>article<span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>h2 className<span class="token operator">=</span><span class="token string">&#39;text-xl md:text-2xl  mx-auto border px-4 pt-4 pb-8 uppercase&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>product<span class="token operator">?.</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&#39;text-xl md:text-2xl  mx-auto border border-t-0 px-4 pt-4 pb-3&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">              <span class="token operator">&lt;</span>Rating value<span class="token operator">=</span><span class="token punctuation">{</span>rating<span class="token punctuation">}</span> text<span class="token operator">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>reviewsCount<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> reviews</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&#39;text-sm block  capitalize mx-auto border border-t-0 px-4 pt-4 pb-3&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">              Price<span class="token operator">:</span> $<span class="token punctuation">{</span>product<span class="token operator">?.</span>price<span class="token punctuation">}</span></span>
<span class="line">            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&#39;text-sm block  mx-auto border border-t-0 px-4 pt-4 pb-3&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">              Description<span class="token operator">:</span> <span class="token punctuation">{</span>product<span class="token operator">?.</span>description<span class="token punctuation">}</span></span>
<span class="line">            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>AddReview id<span class="token operator">=</span><span class="token punctuation">{</span>id<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span><span class="token operator">/</span>article<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>article<span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&#39;text-sm flex gap-4   mx-auto border border-t-0 px-4 pt-4 pb-3&#39;</span><span class="token operator">&gt;</span>Price<span class="token operator">:</span> $<span class="token punctuation">{</span>product<span class="token operator">?.</span>price<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&#39;text-sm flex gap-4   mx-auto border border-t-0 px-4 pt-4 pb-3&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">            Status<span class="token operator">:</span> <span class="token punctuation">{</span>product<span class="token operator">?.</span>countInStock <span class="token operator">?</span> <span class="token string">&#39;In Stock&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;Out of Stock&#39;</span><span class="token punctuation">}</span></span>
<span class="line">          <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&#39;text-sm flex gap-4 items-center  mx-auto border border-t-0 px-4 pt-4 pb-3&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">            Quantity<span class="token operator">:</span></span>
<span class="line">            <span class="token operator">&lt;</span>Select length<span class="token operator">=</span><span class="token punctuation">{</span>product<span class="token operator">?.</span>countInStock<span class="token punctuation">}</span> onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setQty</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span> value<span class="token operator">=</span><span class="token punctuation">{</span>qty<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&#39;text-sm flex gap-4   mx-auto border border-t-0 px-4 pb-3 justify-center&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>Button size<span class="token operator">=</span><span class="token string">&#39;small&#39;</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">handleAddToCart</span><span class="token punctuation">(</span>qty<span class="token punctuation">)</span><span class="token punctuation">}</span> type<span class="token operator">=</span><span class="token string">&#39;button&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">              <span class="token constant">ADD</span> <span class="token constant">TO</span> <span class="token constant">CART</span></span>
<span class="line">            <span class="token operator">&lt;</span><span class="token operator">/</span>Button<span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span><span class="token operator">/</span>article<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">/</span>section<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now, let’s update our <code>product/[id].astro</code> file to match the below:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// product/[id].astro</span></span>
<span class="line"></span>
<span class="line"><span class="token operator">--</span><span class="token operator">-</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> ProductDetails <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../../components/ProductDetails&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> Layout <span class="token keyword">from</span> <span class="token string">&#39;../../layouts/Layout.astro&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> id <span class="token operator">=</span> Astro<span class="token punctuation">.</span>url<span class="token operator">?.</span>pathname<span class="token operator">?.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token operator">--</span><span class="token operator">-</span></span>
<span class="line"></span>
<span class="line"><span class="token operator">&lt;</span>Layout title<span class="token operator">=</span><span class="token string">&#39;Manage Products&#39;</span> description<span class="token operator">=</span><span class="token string">&#39;Manage products&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&#39;max-w-[1800px] mx-auto px-4&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span>ProductDetails client<span class="token operator">:</span>load id<span class="token operator">=</span><span class="token punctuation">{</span>id <span class="token operator">||</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line"><span class="token operator">&lt;</span><span class="token operator">/</span>Layout<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Notice that we’re grabbing the <code>id</code> from the <code>url</code> before passing it as a prop to the <code>ProductDetails.tsx</code> component. Now, navigating to a product screen should result in something like this:</p><figure><img src="`+R+`" alt="Sample Product Details Page On Astro Ecommerce Site Showing Image, Price, And Other Product Info" tabindex="0" loading="lazy"><figcaption>Sample Product Details Page On Astro Ecommerce Site Showing Image, Price, And Other Product Info</figcaption></figure><p>Note that you can now select a quantity and add the item to the cart.</p><h3 id="setting-up-the-cart-page" tabindex="-1"><a class="header-anchor" href="#setting-up-the-cart-page"><span>Setting up the cart page</span></a></h3><p>The cart screen will house the cart items list. First, let’s build the <code>CartItem</code> component that will be responsible for updating the quantity of a cart item or removing the cart item entirely.</p><p>Open <code>components/CartItem.tsx</code> component and add this code:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token comment">// components/CartItem.tsx</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useCallback<span class="token punctuation">,</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> addToCart<span class="token punctuation">,</span> removeFromCart <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../state/cart&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> ICartItem <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../state/cart&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> Select <span class="token keyword">from</span> <span class="token string">&#39;./Select&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> FaTrash <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react-icons/fa&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> CartItem<span class="token operator">:</span> React<span class="token punctuation">.</span><span class="token constant">FC</span><span class="token operator">&lt;</span>ICartItem<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> image<span class="token punctuation">,</span> name<span class="token punctuation">,</span> price<span class="token punctuation">,</span> product<span class="token punctuation">,</span> qty<span class="token punctuation">,</span> countInStock <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>quantity<span class="token punctuation">,</span> setQuantity<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useState</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>qty<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> handleCartQuantityUpdate <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>quantity<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">await</span> <span class="token function">addToCart</span><span class="token punctuation">(</span>product<span class="token punctuation">,</span> <span class="token function">Number</span><span class="token punctuation">(</span>quantity<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> handleRemoveFromCart <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">await</span> <span class="token function">removeFromCart</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&#39; w-full max-w-[600px] border-4 mb-6 mx-auto p-4 bg-slate-50&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>article className<span class="token operator">=</span><span class="token string">&#39;flex gap-6 items-center  w-full  flex-col md:flex-row&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&#39;w-[100px] h-[100px] &#39;</span><span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token punctuation">{</span>image<span class="token punctuation">}</span> className<span class="token operator">=</span><span class="token string">&#39;w-[100px] h-[100px] object-cover&#39;</span> <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&#39;whitespace-nowrap&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>$<span class="token punctuation">{</span>price<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&#39;w-full min-w-[120px] mx-auto flex justify-center&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span>Select</span>
<span class="line">            length<span class="token operator">=</span><span class="token punctuation">{</span>countInStock<span class="token punctuation">}</span></span>
<span class="line">            onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">              <span class="token function">handleCartQuantityUpdate</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">              <span class="token function">setQuantity</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line">            value<span class="token operator">=</span><span class="token punctuation">{</span>quantity<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="line">            maxWidth<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&#39;120px&#39;</span><span class="token punctuation">}</span></span>
<span class="line">          <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span>FaTrash className<span class="token operator">=</span><span class="token string">&#39;text-gray-700 cursor-pointer&#39;</span> size<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">20</span><span class="token punctuation">}</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span>handleRemoveFromCart<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span><span class="token operator">/</span>article<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>CartItem</code> component accepts the <code>ICartItem</code> type we previously defined in the <code>state/cart.ts</code> file. It also contains:</p><ul><li>A <code>quantity</code> state initialized from the product quantity received as a prop</li><li>A <code>handleCartQuantityUpdate</code> function that simply calls the <code>addToCart</code> function to update the quantity of the cart item</li><li>The <code>handleRemoveFromCart</code> function that calls the <code>removeFromCart</code> function</li></ul><p>In the <code>jsx</code>, we simply have a <code>Select</code> component to change the quantity and a trash icon that calls the <code>handleRemoveFromCart</code>, among other markups.</p><p>Next, let’s implement the <code>CartList</code> component. After importing dependencies, we will derive our <code>cartItem</code> from the <code>cart</code> global state. Then, we’ll calculate the <code>subTotalQuantity</code> and <code>subTotalAmount</code>, which we’ll eventually pass to the <code>jsx</code>.</p><p>In the <code>jsx</code>, we have a <code>Message</code> component with a link, which will only be displayed when there are no cart items. The other part of the <code>jsx</code> is the loop for the <code>CartItem</code> and also the link to navigate to the checkout screen. The <code>components/CartList.tsx</code> file should look similar to this:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token comment">// components/CartList.tsx</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> useStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nanostores/react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> useMemo <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> cart <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../state/cart&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> ICartItem <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../state/cart&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> CartItem <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./CartItem&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Message <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./Message&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">CartListProps</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> CartList<span class="token operator">:</span> React<span class="token punctuation">.</span><span class="token constant">FC</span><span class="token operator">&lt;</span>CartListProps<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> cartItems <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span>cart<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> subTotalQuantity <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> cartItems<span class="token operator">?.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>cummulation<span class="token punctuation">,</span> item<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> cummulation <span class="token operator">+</span> item<span class="token punctuation">.</span>qty<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>cartItems<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">//   Total amount of individual items</span></span>
<span class="line">  <span class="token keyword">const</span> subTotalAmount <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> cartItems</span>
<span class="line">      <span class="token operator">?.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>cummulation<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> item<span class="token operator">:</span> ICartItem<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> cummulation <span class="token operator">+</span> item<span class="token punctuation">.</span>qty <span class="token operator">*</span> item<span class="token punctuation">.</span>price<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>cartItems<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token operator">&lt;</span>section className<span class="token operator">=</span><span class="token string">&#39;p-6&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">      <span class="token punctuation">{</span><span class="token operator">!</span>cartItems<span class="token operator">?.</span>length <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span></span>
<span class="line">        <span class="token operator">&lt;</span>Message variant<span class="token operator">=</span><span class="token string">&#39;secondary&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">          You have selected no items<span class="token punctuation">{</span><span class="token string">&#39; &#39;</span><span class="token punctuation">}</span></span>
<span class="line">          <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">&#39;/&#39;</span> className<span class="token operator">=</span><span class="token string">&#39;underline text-blue-500&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">            Go Home</span>
<span class="line">          <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span><span class="token operator">/</span>Message<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">{</span>cartItems<span class="token operator">?.</span>length <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span></span>
<span class="line">        <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&#39;flex gap-10 justify-center&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token punctuation">{</span>cartItems<span class="token operator">?.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>cartItem<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">              <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">                <span class="token operator">&lt;</span>CartItem</span>
<span class="line">                  countInStock<span class="token operator">=</span><span class="token punctuation">{</span>cartItem<span class="token operator">?.</span>countInStock<span class="token punctuation">}</span></span>
<span class="line">                  image<span class="token operator">=</span><span class="token punctuation">{</span>cartItem<span class="token operator">?.</span>image<span class="token punctuation">}</span></span>
<span class="line">                  name<span class="token operator">=</span><span class="token punctuation">{</span>cartItem<span class="token operator">?.</span>name<span class="token punctuation">}</span></span>
<span class="line">                  price<span class="token operator">=</span><span class="token punctuation">{</span>cartItem<span class="token operator">?.</span>price<span class="token punctuation">}</span></span>
<span class="line">                  product<span class="token operator">=</span><span class="token punctuation">{</span>cartItem<span class="token operator">?.</span>product<span class="token punctuation">}</span></span>
<span class="line">                  qty<span class="token operator">=</span><span class="token punctuation">{</span>cartItem<span class="token operator">?.</span>qty<span class="token punctuation">}</span></span>
<span class="line">                <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">              <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="line">          <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>article className<span class="token operator">=</span><span class="token string">&#39; w-full max-w-[600px] border-4 mb-6 mx-auto bg-slate-50 py-4&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">              <span class="token operator">&lt;</span>h2 className<span class="token operator">=</span><span class="token string">&#39;text-xl md:text-2xl  pb-2 px-4 mx-auto uppercase border border-t-0&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">                <span class="token function">Subtotal</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>subTotalQuantity<span class="token punctuation">}</span><span class="token punctuation">)</span> items</span>
<span class="line">              <span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span></span>
<span class="line">              <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&#39;text-sm flex gap-4   mx-auto border border-t-0 px-4 pt-4 pb-3&#39;</span><span class="token operator">&gt;</span>$<span class="token punctuation">{</span>subTotalAmount<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">              <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&#39;text-sm flex gap-4   mx-auto px-4 pb-3 justify-center&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">                <span class="token operator">&lt;</span>a</span>
<span class="line">                  href<span class="token operator">=</span><span class="token string">&#39;/checkout&#39;</span></span>
<span class="line">                  className<span class="token operator">=</span><span class="token string">&#39;bg-slate-900 text-white  px-2 py-2  w-full max-w-[250px] flex gap-3 justify-center mt-8 cursor-pointer hover:bg-slate-800&#39;</span></span>
<span class="line">                <span class="token operator">&gt;</span></span>
<span class="line">                  <span class="token constant">PROCEED</span> <span class="token constant">TO</span> <span class="token constant">CHECKOUT</span></span>
<span class="line">                <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span></span>
<span class="line">              <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span><span class="token operator">/</span>article<span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">/</span>section<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Finally, the <code>pages/cart.astro</code> file will look similar to this:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// pages/cart.astro</span></span>
<span class="line"></span>
<span class="line"><span class="token operator">--</span><span class="token operator">-</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Heading <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../components/Heading&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> Layout <span class="token keyword">from</span> <span class="token string">&#39;../layouts/Layout.astro&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> CartList <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../components/CartList&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token operator">--</span><span class="token operator">-</span></span>
<span class="line"></span>
<span class="line"><span class="token operator">&lt;</span>Layout title<span class="token operator">=</span><span class="token string">&#39;Cart Items&#39;</span> description<span class="token operator">=</span><span class="token string">&#39;Cart Items&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&#39;max-w-[1800px] mx-auto&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span>Heading text<span class="token operator">=</span><span class="token string">&#39;Cart Items&#39;</span> variant<span class="token operator">=</span><span class="token string">&#39;h1&#39;</span> textAlign<span class="token operator">=</span><span class="token string">&#39;center&#39;</span> <span class="token literal-property property">client</span><span class="token operator">:</span>load <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span>CartList client<span class="token operator">:</span>load <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line"><span class="token operator">&lt;</span><span class="token operator">/</span>Layout<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Here’s how the resulting cart component should look now:</p><figure><img src="`+N+`" alt="Sample Cart Details Page For Astro Ecommerce Site Showing Product Preview, Quantity, And Subtotal" tabindex="0" loading="lazy"><figcaption>Sample Cart Details Page For Astro Ecommerce Site Showing Product Preview, Quantity, And Subtotal</figcaption></figure><h3 id="working-on-the-checkout-page" tabindex="-1"><a class="header-anchor" href="#working-on-the-checkout-page"><span>Working on the checkout page</span></a></h3><p>The checkout page contains three subpages: <code>Shipping</code>, <code>Payment</code>, and <code>PlaceOrder</code>. To assemble the pages properly, we’ll start by building the shipping page.</p><h4 id="shipping-page" tabindex="-1"><a class="header-anchor" href="#shipping-page"><span>Shipping page</span></a></h4><p>The shipping page simply contains a form for the user’s shipping address info — including <code>address</code>, <code>city,</code> <code>postalCode</code>, and <code>country</code> — all put in a local state.</p><p>After the form is filled, we simply save the address to the <code>localStorage</code> and redirect the user to a new page. On the initial render of the new page, we get the shipping address from the <code>localStorage</code> and store it to the local state.</p><p>To implement this screen, open the <code>components/Shipping.tsx</code> file and add the following code:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token comment">// components/Shipping.tsx</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useCallback<span class="token punctuation">,</span> useEffect<span class="token punctuation">,</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Button <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./Button&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Heading <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./Heading&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">ShippingProps</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> Shipping<span class="token operator">:</span> React<span class="token punctuation">.</span><span class="token constant">FC</span><span class="token operator">&lt;</span>ShippingProps<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>address<span class="token punctuation">,</span> setAddress<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useState</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>city<span class="token punctuation">,</span> setCity<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useState</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>postalCode<span class="token punctuation">,</span> setPostalCode<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useState</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>country<span class="token punctuation">,</span> setCountry<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useState</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> handleSaveShippingAddress <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token punctuation">(</span>e<span class="token operator">:</span> React<span class="token punctuation">.</span>FormEvent<span class="token operator">&lt;</span>HTMLFormElement<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&#39;shippingAddress&#39;</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span> address<span class="token punctuation">,</span> city<span class="token punctuation">,</span> postalCode<span class="token punctuation">,</span> country <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      window<span class="token punctuation">.</span>location<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&#39;/checkout?segment=payment&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">[</span>address<span class="token punctuation">,</span> city<span class="token punctuation">,</span> postalCode<span class="token punctuation">,</span> country<span class="token punctuation">]</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Once Page loads prefill info from storage</span></span>
<span class="line">    <span class="token keyword">const</span> shippingStorage <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;shippingAddress&#39;</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token operator">?</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;shippingAddress&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>shippingStorage<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">setAddress</span><span class="token punctuation">(</span>shippingStorage<span class="token operator">?.</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token function">setCity</span><span class="token punctuation">(</span>shippingStorage<span class="token operator">?.</span>city<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token function">setPostalCode</span><span class="token punctuation">(</span>shippingStorage<span class="token operator">?.</span>postalCode<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token function">setCountry</span><span class="token punctuation">(</span>shippingStorage<span class="token operator">?.</span>country<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>form onSubmit<span class="token operator">=</span><span class="token punctuation">{</span>handleSaveShippingAddress<span class="token punctuation">}</span> className<span class="token operator">=</span><span class="token string">&#39;max-w-[500px] mx-auto py-6 pb-28&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>Heading text<span class="token operator">=</span><span class="token string">&#39;Shipping Address&#39;</span> variant<span class="token operator">=</span><span class="token string">&#39;h3&#39;</span> <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span>label htmlFor<span class="token operator">=</span><span class="token string">&#39;address&#39;</span><span class="token operator">&gt;</span>Address<span class="token operator">:</span><span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span>input</span>
<span class="line">            type<span class="token operator">=</span><span class="token string">&#39;text&#39;</span></span>
<span class="line">            name<span class="token operator">=</span><span class="token string">&#39;address&#39;</span></span>
<span class="line">            id<span class="token operator">=</span><span class="token string">&#39;address&#39;</span></span>
<span class="line">            required</span>
<span class="line">            placeholder<span class="token operator">=</span><span class="token string">&#39;Enter address&#39;</span></span>
<span class="line">            className<span class="token operator">=</span><span class="token string">&#39;border-2 border-slate-400 p-2 rounded-lg w-full&#39;</span></span>
<span class="line">            value<span class="token operator">=</span><span class="token punctuation">{</span>address<span class="token punctuation">}</span></span>
<span class="line">            onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">              <span class="token function">setAddress</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line">          <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span>label htmlFor<span class="token operator">=</span><span class="token string">&#39;city&#39;</span><span class="token operator">&gt;</span>City<span class="token operator">:</span><span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span>input</span>
<span class="line">            type<span class="token operator">=</span><span class="token string">&#39;text&#39;</span></span>
<span class="line">            name<span class="token operator">=</span><span class="token string">&#39;city&#39;</span></span>
<span class="line">            id<span class="token operator">=</span><span class="token string">&#39;city&#39;</span></span>
<span class="line">            required</span>
<span class="line">            placeholder<span class="token operator">=</span><span class="token string">&#39;Enter city&#39;</span></span>
<span class="line">            className<span class="token operator">=</span><span class="token string">&#39;border-2 border-slate-400 p-2 rounded-lg w-full&#39;</span></span>
<span class="line">            value<span class="token operator">=</span><span class="token punctuation">{</span>city<span class="token punctuation">}</span></span>
<span class="line">            onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">              <span class="token function">setCity</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line">          <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span>label htmlFor<span class="token operator">=</span><span class="token string">&#39;postalCode&#39;</span><span class="token operator">&gt;</span>Postal Code<span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span>input</span>
<span class="line">            type<span class="token operator">=</span><span class="token string">&#39;text&#39;</span></span>
<span class="line">            name<span class="token operator">=</span><span class="token string">&#39;postalCode&#39;</span></span>
<span class="line">            id<span class="token operator">=</span><span class="token string">&#39;postalCode&#39;</span></span>
<span class="line">            required</span>
<span class="line">            placeholder<span class="token operator">=</span><span class="token string">&#39;Enter postal Code&#39;</span></span>
<span class="line">            className<span class="token operator">=</span><span class="token string">&#39;border-2 border-slate-400 p-2 rounded-lg w-full&#39;</span></span>
<span class="line">            value<span class="token operator">=</span><span class="token punctuation">{</span>postalCode<span class="token punctuation">}</span></span>
<span class="line">            onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">              <span class="token function">setPostalCode</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line">          <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span>label htmlFor<span class="token operator">=</span><span class="token string">&#39;country&#39;</span><span class="token operator">&gt;</span>Country<span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span>input</span>
<span class="line">            type<span class="token operator">=</span><span class="token string">&#39;text&#39;</span></span>
<span class="line">            name<span class="token operator">=</span><span class="token string">&#39;country&#39;</span></span>
<span class="line">            id<span class="token operator">=</span><span class="token string">&#39;country&#39;</span></span>
<span class="line">            required</span>
<span class="line">            placeholder<span class="token operator">=</span><span class="token string">&#39;Enter country&#39;</span></span>
<span class="line">            className<span class="token operator">=</span><span class="token string">&#39;border-2 border-slate-400 p-2 rounded-lg w-full&#39;</span></span>
<span class="line">            value<span class="token operator">=</span><span class="token punctuation">{</span>country<span class="token punctuation">}</span></span>
<span class="line">            onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">              <span class="token function">setCountry</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line">          <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>Button<span class="token operator">&gt;</span>Save<span class="token operator">&lt;</span><span class="token operator">/</span>Button<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="payment-page" tabindex="-1"><a class="header-anchor" href="#payment-page"><span>Payment page</span></a></h4><p>The payment page behaves in a similar way to the shipping page, but manages the payment method instead. We can open <code>components/Payment.tsx</code> and add the following code:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token comment">// components/Payment.tsx</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useCallback<span class="token punctuation">,</span> useEffect<span class="token punctuation">,</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Button <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./Button&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Heading <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./Heading&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">PaymentProps</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> Payment<span class="token operator">:</span> React<span class="token punctuation">.</span><span class="token constant">FC</span><span class="token operator">&lt;</span>PaymentProps<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>paymentMethod<span class="token punctuation">,</span> setPaymentMethod<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useState</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#39;paystack&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> handleSavePaymentMethod <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token operator">:</span> React<span class="token punctuation">.</span>FormEvent<span class="token operator">&lt;</span>HTMLFormElement<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&#39;paymentMethod&#39;</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span> paymentMethod <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    window<span class="token punctuation">.</span>location<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&#39;/checkout?segment=place-order&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Once Page loads prefill info from storage</span></span>
<span class="line">    <span class="token keyword">const</span> paymentMethodStorage <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;paymentMethod&#39;</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token operator">?</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;paymentMethod&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>paymentMethodStorage<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">setPaymentMethod</span><span class="token punctuation">(</span>paymentMethodStorage<span class="token operator">?.</span>paymentMethod<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>form onSubmit<span class="token operator">=</span><span class="token punctuation">{</span>handleSavePaymentMethod<span class="token punctuation">}</span> className<span class="token operator">=</span><span class="token string">&#39;max-w-[500px] mx-auto py-6 pb-28&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>Heading text<span class="token operator">=</span><span class="token string">&#39;Payment Method&#39;</span> variant<span class="token operator">=</span><span class="token string">&#39;h3&#39;</span> <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&#39;flex gap-4&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span>label htmlFor<span class="token operator">=</span><span class="token string">&#39;paystack&#39;</span><span class="token operator">&gt;</span>Address<span class="token operator">:</span><span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span>input</span>
<span class="line">            type<span class="token operator">=</span><span class="token string">&#39;radio&#39;</span></span>
<span class="line">            name<span class="token operator">=</span><span class="token string">&#39;paymentMethod&#39;</span></span>
<span class="line">            id<span class="token operator">=</span><span class="token string">&#39;paystack&#39;</span></span>
<span class="line">            required</span>
<span class="line">            className<span class="token operator">=</span><span class="token string">&#39;border-2 border-slate-400 p-2 rounded-lg&#39;</span></span>
<span class="line">            value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&#39;paystack&#39;</span><span class="token punctuation">}</span></span>
<span class="line">            checked<span class="token operator">=</span><span class="token punctuation">{</span>paymentMethod <span class="token operator">===</span> <span class="token string">&#39;paystack&#39;</span><span class="token punctuation">}</span></span>
<span class="line">            onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">              <span class="token function">setPaymentMethod</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line">          <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&#39;flex gap-4&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span>label htmlFor<span class="token operator">=</span><span class="token string">&#39;paypal&#39;</span><span class="token operator">&gt;</span>Paypal<span class="token operator">:</span><span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span>input</span>
<span class="line">            type<span class="token operator">=</span><span class="token string">&#39;radio&#39;</span></span>
<span class="line">            name<span class="token operator">=</span><span class="token string">&#39;paymentMethod&#39;</span></span>
<span class="line">            id<span class="token operator">=</span><span class="token string">&#39;paypal&#39;</span></span>
<span class="line">            className<span class="token operator">=</span><span class="token string">&#39;border-2 border-slate-400 p-2 rounded-lg&#39;</span></span>
<span class="line">            value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&#39;paypal&#39;</span><span class="token punctuation">}</span></span>
<span class="line">            checked<span class="token operator">=</span><span class="token punctuation">{</span>paymentMethod <span class="token operator">===</span> <span class="token string">&#39;paypal&#39;</span><span class="token punctuation">}</span></span>
<span class="line">            disabled</span>
<span class="line">            onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">              <span class="token function">setPaymentMethod</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line">          <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>Button<span class="token operator">&gt;</span>Save<span class="token operator">&lt;</span><span class="token operator">/</span>Button<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="placeorder-page" tabindex="-1"><a class="header-anchor" href="#placeorder-page"><span><code>PlaceOrder</code> page</span></a></h4><p>The code for the <code>components/PlaceOrder.tsx</code> file is as follows:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token comment">// components/PlaceOrder.tsx</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> useStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nanostores/react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> useEffect<span class="token punctuation">,</span> useMemo<span class="token punctuation">,</span> useCallback <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> cart <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../state/cart&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> ICartItem <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../state/cart&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Button <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./Button&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> errorPlaceOrder<span class="token punctuation">,</span> loadingPlaceOrder<span class="token punctuation">,</span> placeOrderRequest <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../state/order&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Loader <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./Loader&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Message <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./Message&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">formatWithDecimals</span> <span class="token operator">=</span> <span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>value <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">PlaceOrderProps</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> PlaceOrder<span class="token operator">:</span> React<span class="token punctuation">.</span><span class="token constant">FC</span><span class="token operator">&lt;</span>PlaceOrderProps<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> cartItems <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span>cart<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> loading <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span>loadingPlaceOrder<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> error <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span>errorPlaceOrder<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>address<span class="token punctuation">,</span> setAddress<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useState</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>city<span class="token punctuation">,</span> setCity<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useState</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>postalCode<span class="token punctuation">,</span> setPostalCode<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useState</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>country<span class="token punctuation">,</span> setCountry<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useState</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>paymentMethod<span class="token punctuation">,</span> setPaymentMethod<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useState</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#39;paystack&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> priceSummation <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> itemsPrice <span class="token operator">=</span> <span class="token function">formatWithDecimals</span><span class="token punctuation">(</span></span>
<span class="line">      <span class="token punctuation">(</span>cartItems <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>cummulation<span class="token punctuation">,</span> item<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> cummulation <span class="token operator">+</span> item<span class="token punctuation">.</span>price <span class="token operator">*</span> item<span class="token punctuation">.</span>qty<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// Calculate shipping fee</span></span>
<span class="line">    <span class="token keyword">const</span> shippingFee <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// calculate tax fee</span></span>
<span class="line">    <span class="token keyword">const</span> taxFee <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> totalPrice <span class="token operator">=</span> <span class="token function">formatWithDecimals</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>itemsPrice<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">Number</span><span class="token punctuation">(</span>shippingFee<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">Number</span><span class="token punctuation">(</span>taxFee<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">      itemsPrice<span class="token punctuation">,</span></span>
<span class="line">      shippingFee<span class="token punctuation">,</span></span>
<span class="line">      taxFee<span class="token punctuation">,</span></span>
<span class="line">      totalPrice<span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>cartItems<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> handlePlaceOrder <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>address <span class="token operator">||</span> <span class="token operator">!</span>city <span class="token operator">||</span> <span class="token operator">!</span>postalCode <span class="token operator">||</span> <span class="token operator">!</span>country <span class="token operator">||</span> <span class="token operator">!</span>paymentMethod<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">const</span> shippingAddress <span class="token operator">=</span> <span class="token punctuation">{</span> address<span class="token punctuation">,</span> city<span class="token punctuation">,</span> postalCode<span class="token punctuation">,</span> country <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">await</span> <span class="token function">placeOrderRequest</span><span class="token punctuation">(</span></span>
<span class="line">      cartItems <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">      shippingAddress<span class="token punctuation">,</span></span>
<span class="line">      paymentMethod<span class="token punctuation">,</span></span>
<span class="line">      <span class="token function">Number</span><span class="token punctuation">(</span>priceSummation<span class="token operator">?.</span>itemsPrice<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      priceSummation<span class="token operator">?.</span>taxFee<span class="token punctuation">,</span></span>
<span class="line">      <span class="token function">Number</span><span class="token punctuation">(</span>priceSummation<span class="token operator">?.</span>totalPrice<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      priceSummation<span class="token operator">?.</span>shippingFee</span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>address<span class="token punctuation">,</span> city<span class="token punctuation">,</span> postalCode<span class="token punctuation">,</span> country<span class="token punctuation">,</span> paymentMethod<span class="token punctuation">,</span> priceSummation<span class="token punctuation">,</span> cartItems<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Once Page loads prefill info from storage</span></span>
<span class="line">    <span class="token keyword">const</span> shippingStorage <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;shippingAddress&#39;</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token operator">?</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;shippingAddress&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>shippingStorage<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">setAddress</span><span class="token punctuation">(</span>shippingStorage<span class="token operator">?.</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token function">setCity</span><span class="token punctuation">(</span>shippingStorage<span class="token operator">?.</span>city<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token function">setPostalCode</span><span class="token punctuation">(</span>shippingStorage<span class="token operator">?.</span>postalCode<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token function">setCountry</span><span class="token punctuation">(</span>shippingStorage<span class="token operator">?.</span>country<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// Once Page loads prefill info from storage</span></span>
<span class="line">    <span class="token keyword">const</span> paymentMethodStorage <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;paymentMethod&#39;</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token operator">?</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;paymentMethod&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>paymentMethodStorage<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">setPaymentMethod</span><span class="token punctuation">(</span>paymentMethodStorage<span class="token operator">?.</span>paymentMethod<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&#39;max-w-[900px] mx-auto py-6 pb-28&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">      <span class="token punctuation">{</span>loading <span class="token operator">&amp;&amp;</span> <span class="token operator">&lt;</span>Loader variant<span class="token operator">=</span><span class="token string">&#39;large&#39;</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">{</span>error <span class="token operator">&amp;&amp;</span> <span class="token operator">&lt;</span>Message variant<span class="token operator">=</span><span class="token string">&#39;danger&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>error<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>Message<span class="token operator">&gt;</span><span class="token punctuation">}</span></span>
<span class="line">      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&#39;flex gap-6 justify-center&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&#39;w-full max-w-[500px] flex-1&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&#39;border-b-2 p-4&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>h2 className<span class="token operator">=</span><span class="token string">&#39;text-xl md:text-2xl  pt-6 pb-2 mx-auto uppercase text-gray-700&#39;</span><span class="token operator">&gt;</span>Shipping Address <span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>p className<span class="token operator">=</span><span class="token string">&#39;text-gray-600&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">              <span class="token punctuation">{</span>address<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>postalCode<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>city<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>country<span class="token punctuation">}</span><span class="token punctuation">.</span></span>
<span class="line">            <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&#39;border-b-2 p-4&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>h2 className<span class="token operator">=</span><span class="token string">&#39;text-xl md:text-2xl  pt-6 pb-2 mx-auto uppercase text-gray-700&#39;</span><span class="token operator">&gt;</span>Payment Method <span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>p className<span class="token operator">=</span><span class="token string">&#39;text-gray-600 capitalize&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>paymentMethod<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&#39;border-b-2 p-4&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>h2 className<span class="token operator">=</span><span class="token string">&#39;text-xl md:text-2xl  pt-6 pb-2 mx-auto uppercase text-gray-700&#39;</span><span class="token operator">&gt;</span>Order Items <span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token punctuation">{</span>cartItems<span class="token operator">?.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>cartItem<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span></span>
<span class="line">              <span class="token operator">&lt;</span>PlaceOrderItem cartItem<span class="token operator">=</span><span class="token punctuation">{</span>cartItem<span class="token punctuation">}</span> key<span class="token operator">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>cartItem<span class="token operator">?.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>index<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">            <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="line">          <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&#39;w-[400px] py-6&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&#39;  text-gray-700&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>h2 className<span class="token operator">=</span><span class="token string">&#39;text-xl md:text-2xl border-2   pb-2 mx-auto uppercase text-gray-700  p-4&#39;</span><span class="token operator">&gt;</span>Order Summary<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&#39;border-2 border-t-0 flex justify-between text-gray-600 p-2 py-4&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>Items Price<span class="token operator">:</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>p className<span class="token operator">=</span><span class="token string">&#39;text-left&#39;</span><span class="token operator">&gt;</span>$<span class="token punctuation">{</span>priceSummation<span class="token operator">?.</span>itemsPrice<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&#39;border-2 border-t-0 flex justify-between text-gray-600 p-2 py-4&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>Shipping fee<span class="token operator">:</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>p className<span class="token operator">=</span><span class="token string">&#39;text-left&#39;</span><span class="token operator">&gt;</span>$<span class="token punctuation">{</span>priceSummation<span class="token operator">?.</span>shippingFee<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&#39;border-2 border-t-0 flex justify-between text-gray-600 p-2 py-4&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>Tax fee<span class="token operator">:</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>p className<span class="token operator">=</span><span class="token string">&#39;text-left&#39;</span><span class="token operator">&gt;</span>$<span class="token punctuation">{</span>priceSummation<span class="token operator">?.</span>taxFee<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&#39;border-2 border-t-0 flex justify-between text-gray-600 p-2 py-4&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>Total fee<span class="token operator">:</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>p className<span class="token operator">=</span><span class="token string">&#39;text-left&#39;</span><span class="token operator">&gt;</span>$<span class="token punctuation">{</span>priceSummation<span class="token operator">?.</span>totalPrice<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&#39;text-sm flex gap-4   mx-auto border-2 border-t-0 px-4 pb-3 justify-center&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>Button</span>
<span class="line">              size<span class="token operator">=</span><span class="token string">&#39;small&#39;</span></span>
<span class="line">              type<span class="token operator">=</span><span class="token string">&#39;button&#39;</span></span>
<span class="line">              disabled<span class="token operator">=</span><span class="token punctuation">{</span><span class="token operator">!</span>address <span class="token operator">||</span> <span class="token operator">!</span>city <span class="token operator">||</span> <span class="token operator">!</span>postalCode <span class="token operator">||</span> <span class="token operator">!</span>country <span class="token operator">||</span> <span class="token operator">!</span>paymentMethod <span class="token operator">||</span> loading<span class="token punctuation">}</span></span>
<span class="line">              onClick<span class="token operator">=</span><span class="token punctuation">{</span>handlePlaceOrder<span class="token punctuation">}</span></span>
<span class="line">            <span class="token operator">&gt;</span></span>
<span class="line">              Place Order <span class="token punctuation">{</span>loading <span class="token operator">&amp;&amp;</span> <span class="token operator">&lt;</span>Loader variant<span class="token operator">=</span><span class="token string">&#39;small&#39;</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">}</span></span>
<span class="line">            <span class="token operator">&lt;</span><span class="token operator">/</span>Button<span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">PlaceOrderItemProps</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  cartItem<span class="token operator">:</span> ICartItem<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> PlaceOrderItem<span class="token operator">:</span> React<span class="token punctuation">.</span><span class="token constant">FC</span><span class="token operator">&lt;</span>PlaceOrderItemProps<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> cartItem <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&#39;text-gray-600 flex justify-between mb-4 items-end&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> width<span class="token operator">:</span> <span class="token string">&#39;50px&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token punctuation">{</span>cartItem<span class="token operator">?.</span>image<span class="token punctuation">}</span> className<span class="token operator">=</span><span class="token string">&#39;w-full h-full object-cover&#39;</span> <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span><span class="token punctuation">{</span>cartItem<span class="token operator">?.</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token punctuation">{</span>cartItem<span class="token operator">?.</span>qty<span class="token punctuation">}</span> x $<span class="token punctuation">{</span>cartItem<span class="token operator">?.</span>price<span class="token punctuation">}</span> <span class="token operator">=</span> $<span class="token punctuation">{</span>cartItem<span class="token operator">?.</span>qty <span class="token operator">*</span> cartItem<span class="token operator">?.</span>price<span class="token punctuation">}</span></span>
<span class="line">      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>PlaceOrder</code> page is where we take the details we have collected so far and save them to the server. After importing variables, we’ll define a utility function to round up numbers to two decimal places.</p><p>Then inside the component, we get:</p><ul><li><code>cartItems</code> from <code>cart</code></li><li><code>loading</code> from <code>loadingPlaceOrder</code></li><li><code>error</code> from <code>errorPlaceOrder</code></li></ul><p>After, we’ll define states to hold the details that we will be fetching from the <code>localStorage</code>. We’ll also have a <code>priceSummation</code> memo to calculate the <code>itemsPrice</code>, <code>shippingFee</code>, <code>taxFee</code>, and <code>totalPrice</code>.</p><p>We’ll set up a <code>handlePlaceOrder</code> function we can use to call the <code>placeOrderRequest</code> function in <code>state/order</code>. In the <code>useEffect</code> Hook, we are simply getting the <code>shippingAddress</code> and <code>paymentMethod</code> from the <code>localStorage</code> and setting it to the local state.</p><p>In the <code>jsx</code>, we’re simply displaying the details of the order items. Notably, we have the <code>PlaceOrderItem</code> component and a <code>Place Order</code> button users can click to place their orders. Now that the order placement logic is done, let’s handle payments in the next section.</p><h3 id="setting-up-the-checkoutcart-component-and-checkout-astro-page" tabindex="-1"><a class="header-anchor" href="#setting-up-the-checkoutcart-component-and-checkout-astro-page"><span>Setting up the <code>CheckoutCart</code> component and <code>checkout.astro</code> page</span></a></h3><p>The <code>CheckoutCart</code> component simply groups the <code>shipping</code>, <code>payment</code>, and <code>place-order</code> pages. It also contains a local navbar for navigating between the pages. Most importantly, it accepts a <code>segment</code> as a prop. The component should now look similar to this:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token comment">// components/CheckoutCart.tsx</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Payment <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./Payment&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> PlaceOrder <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./PlaceOrder&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Shipping <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./Shipping&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">CheckoutCartProps</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  segment<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> CheckoutCart<span class="token operator">:</span> React<span class="token punctuation">.</span><span class="token constant">FC</span><span class="token operator">&lt;</span>CheckoutCartProps<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> segment <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token operator">&lt;</span>section className<span class="token operator">=</span><span class="token string">&#39;px-4 &#39;</span><span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&#39;flex justify-center gap-6 mb-8&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">&#39;/checkout?segment=shipping&#39;</span> className<span class="token operator">=</span><span class="token punctuation">{</span>segment <span class="token operator">!==</span> <span class="token string">&#39;shipping&#39;</span> <span class="token operator">?</span> <span class="token string">&#39;text-gray-500&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;text-gray-800&#39;</span><span class="token punctuation">}</span><span class="token operator">&gt;</span></span>
<span class="line">          Shipping</span>
<span class="line">        <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">&#39;/checkout?segment=payment&#39;</span> className<span class="token operator">=</span><span class="token punctuation">{</span>segment <span class="token operator">!==</span> <span class="token string">&#39;payment&#39;</span> <span class="token operator">?</span> <span class="token string">&#39;text-gray-500&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;text-gray-800&#39;</span><span class="token punctuation">}</span><span class="token operator">&gt;</span></span>
<span class="line">          Payment</span>
<span class="line">        <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>a</span>
<span class="line">          href<span class="token operator">=</span><span class="token string">&#39;/checkout?segment=place-order&#39;</span></span>
<span class="line">          className<span class="token operator">=</span><span class="token punctuation">{</span>segment <span class="token operator">!==</span> <span class="token string">&#39;place-order&#39;</span> <span class="token operator">?</span> <span class="token string">&#39;text-gray-500&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;text-gray-800&#39;</span><span class="token punctuation">}</span></span>
<span class="line">        <span class="token operator">&gt;</span></span>
<span class="line">          Place Order</span>
<span class="line">        <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token punctuation">{</span>segment <span class="token operator">===</span> <span class="token string">&#39;shipping&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">&lt;</span>Shipping <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">{</span>segment <span class="token operator">===</span> <span class="token string">&#39;payment&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">&lt;</span>Payment <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">{</span>segment <span class="token operator">===</span> <span class="token string">&#39;place-order&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">&lt;</span>PlaceOrder <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">}</span></span>
<span class="line">      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">/</span>section<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Meanwhile, the <code>pages/checkout.astro</code> page will extract the <code>segment</code> from the <code>url</code> and pass it to the <code>CheckoutCart</code> component:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// pages/checkout.astro</span></span>
<span class="line"></span>
<span class="line"><span class="token operator">--</span><span class="token operator">-</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Heading <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../components/Heading&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> Layout <span class="token keyword">from</span> <span class="token string">&#39;../layouts/Layout.astro&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> CheckoutCart <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../components/CheckoutCart&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> segment <span class="token operator">=</span> Astro<span class="token punctuation">.</span>url<span class="token operator">?.</span>search<span class="token operator">?.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;=&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token string">&#39;shipping&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token operator">--</span><span class="token operator">-</span></span>
<span class="line"></span>
<span class="line"><span class="token operator">&lt;</span>Layout title<span class="token operator">=</span><span class="token string">&#39;Checkout &#39;</span> description<span class="token operator">=</span><span class="token string">&#39;Checkout&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&#39;max-w-[1800px] mx-auto&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span>Heading text<span class="token operator">=</span><span class="token string">&#39;Checkout&#39;</span> variant<span class="token operator">=</span><span class="token string">&#39;h1&#39;</span> textAlign<span class="token operator">=</span><span class="token string">&#39;center&#39;</span> <span class="token literal-property property">client</span><span class="token operator">:</span>load <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span>CheckoutCart segment<span class="token operator">=</span><span class="token punctuation">{</span>segment<span class="token punctuation">}</span> client<span class="token operator">:</span>load <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line"><span class="token operator">&lt;</span><span class="token operator">/</span>Layout<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The checkout flow should now look similar to the below. First, the user will put in their shipping information:</p><figure><img src="`+L+'" alt="Shipping Page Of Astro Ecommerce Site User Checkout Flow Where User Can Enter Shipment Information" tabindex="0" loading="lazy"><figcaption>Shipping Page Of Astro Ecommerce Site User Checkout Flow Where User Can Enter Shipment Information</figcaption></figure><p>Next up is the payment method:</p><figure><img src="'+M+'" alt="Payment Page Of Astro Ecommerce Site User Checkout Flow Where User Can Enter Payment Information" tabindex="0" loading="lazy"><figcaption>Payment Page Of Astro Ecommerce Site User Checkout Flow Where User Can Enter Payment Information</figcaption></figure><p>Finally, there is the order summary screen where the user can place their order:</p><figure><img src="'+O+`" alt="Order Placement Page Of Astro Ecommerce Site User Checkout Flow Where User Can Check And Place Order" tabindex="0" loading="lazy"><figcaption>Order Placement Page Of Astro Ecommerce Site User Checkout Flow Where User Can Check And Place Order</figcaption></figure><h3 id="working-on-the-order-details-page" tabindex="-1"><a class="header-anchor" href="#working-on-the-order-details-page"><span>Working on the order details page</span></a></h3><p>After clicking on the <strong>Place Order</strong> button in the page above, and once the order is successfully processed, users will be redirected to the <code>order/:order-id</code> page. At the moment, this screen hasn’t been built, so it will throw an error or display a white screen. Let’s add the order details screen now.</p><p>Before we add the <code>components/OrderDetails.tsx</code> screen, we must first implement the <code>components/PaymentProcessor.tsx</code> component. This component will implement our desired payment platform — Paypal, Paystack, etc.</p><p>For this tutorial, we’ll be using Paystack. In the <code>components/PaymentProcessor.tsx</code> file, add the following code:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token comment">// components/PaymentProcessor.tsx</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> useStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nanostores/react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useCallback<span class="token punctuation">,</span> useEffect<span class="token punctuation">,</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> PaystackButton <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react-paystack&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> authState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../state/auth&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> IPaymentResult <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../state/order&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">PaymentResponseType</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  reference<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  trans<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  status<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  message<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  transaction<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  trxref<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  redirecturl<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">PaymentProcessorProps</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  amount<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">onPlaceOrder</span><span class="token punctuation">(</span>paymentResult<span class="token operator">:</span> IPaymentResult<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> PaymentProcessor<span class="token operator">:</span> React<span class="token punctuation">.</span><span class="token constant">FC</span><span class="token operator">&lt;</span>PaymentProcessorProps<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> amount<span class="token punctuation">,</span> onPlaceOrder <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span>authState<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>paymentMethod<span class="token punctuation">,</span> setPaymentMethod<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useState</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#39;paystack&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    reference<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    email<span class="token operator">:</span> user<span class="token operator">?.</span>email<span class="token punctuation">,</span></span>
<span class="line">    amount<span class="token operator">:</span> amount <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token comment">//Amount is in the country&#39;s lowest currency. E.g Kobo, so 20000 kobo = N200</span></span>
<span class="line">    publicKey<span class="token operator">:</span> <span class="token string">&#39;Your public key&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// you can call this function anything</span></span>
<span class="line">  <span class="token keyword">const</span> handlePaystackSuccessAction <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span>reference<span class="token operator">:</span> PaymentResponseType<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Place order here</span></span>
<span class="line">    <span class="token function">onPlaceOrder</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">      message<span class="token operator">:</span> reference<span class="token operator">?.</span>message<span class="token punctuation">,</span></span>
<span class="line">      reference<span class="token operator">:</span> reference<span class="token operator">?.</span>reference<span class="token punctuation">,</span></span>
<span class="line">      status<span class="token operator">:</span> reference<span class="token operator">?.</span>status<span class="token punctuation">,</span></span>
<span class="line">      transactionId<span class="token operator">:</span> reference<span class="token operator">?.</span>transaction<span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Mock payment</span></span>
<span class="line">  <span class="token keyword">const</span> handleMockSuccessAction <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Place order here</span></span>
<span class="line">    <span class="token function">onPlaceOrder</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">      message<span class="token operator">:</span> <span class="token string">&#39;Approved&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      reference<span class="token operator">:</span> <span class="token string">&#39;Mock-1234&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      status<span class="token operator">:</span> <span class="token string">&#39;success&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      transactionId<span class="token operator">:</span> <span class="token string">&#39;Mock-1234&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// you can call this function anything</span></span>
<span class="line">  <span class="token keyword">const</span> handlePaystackCloseAction <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// implementation for  whatever you want to do when the Paystack dialog closed.</span></span>
<span class="line">    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;closed&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> componentProps <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token operator">...</span>config<span class="token punctuation">,</span></span>
<span class="line">    text<span class="token operator">:</span> <span class="token string">&#39;Make Payment&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function-variable function">onSuccess</span><span class="token operator">:</span> <span class="token punctuation">(</span>reference<span class="token operator">:</span> PaymentResponseType<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">handlePaystackSuccessAction</span><span class="token punctuation">(</span>reference<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    onClose<span class="token operator">:</span> handlePaystackCloseAction<span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Once Page loads prefill info from storage</span></span>
<span class="line">    <span class="token keyword">const</span> paymentMethodStorage <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;paymentMethod&#39;</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token operator">?</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;paymentMethod&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>paymentMethodStorage<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">setPaymentMethod</span><span class="token punctuation">(</span>paymentMethodStorage<span class="token operator">?.</span>paymentMethod<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token punctuation">{</span>paymentMethod <span class="token operator">===</span> <span class="token string">&#39;paystack&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span></span>
<span class="line">        <span class="token operator">&lt;</span>PaystackButton</span>
<span class="line">          <span class="token punctuation">{</span><span class="token operator">...</span>componentProps<span class="token punctuation">}</span></span>
<span class="line">          className<span class="token operator">=</span><span class="token string">&#39;bg-slate-900 text-white rounded-2xl px-5 py-2 text-lg md:text-xl font-medium w-full  flex gap-3 justify-center cursor-pointer hover:bg-slate-800&#39;</span></span>
<span class="line">        <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">      <span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">{</span><span class="token comment">/* USe this to mock payment */</span><span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">{</span><span class="token comment">/*       {paymentMethod === &#39;paystack&#39; &amp;&amp; (</span>
<span class="line">        &lt;button</span>
<span class="line">          onClick={handleMockSuccessAction}</span>
<span class="line">          className=&#39;bg-slate-900 text-white rounded-2xl px-5 py-2 text-lg md:text-xl font-medium w-full  flex gap-3 justify-center cursor-pointer hover:bg-slate-800&#39;</span>
<span class="line">        &gt;</span>
<span class="line">          Make payment</span>
<span class="line">        &lt;/button&gt;</span>
<span class="line">      )} */</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>PaymentProcessor</code> component is used to process payment using a given platform. It accepts an <code>amount</code> and an <code>onPlaceOrder</code> callback function as props. The <code>onPlaceOrder</code> callback accepts a payment result type defined in <code>state/order.ts</code> and will be used to pass data back to our component’s parent.</p><p>Inside the <code>PaymentProcessor</code> component, we extract the <code>authState</code> and store it in a <code>user</code> variable. We then define a <code>paymentMethod</code> state, which we will update in the <code>useEffect</code> Hook. We also define a <code>config</code> object which contains the necessary as requested by the <code>react-paystack</code> library.</p><p>Note that the step above might be a different for you if you use another payment platform.</p><p>Then, we define the <code>handlePaystackSuccessAction</code>, which is automatically called when the payment is successful at Paystack. Finally, we assemble the values in the <code>componentProps</code>, which we then pass to the <code>PaystackButton</code> in the <code>jsx</code>.</p><p>You can <a href="https://paystack.com/" target="_blank" rel="noopener noreferrer">head over to Paystack’s website</a> to create a new account, generate a public key, and replace the <code>publicKey</code> placeholder in the <code>config</code> object above. However, if you are having issues using Paystack, you use the <code>handleMockSuccessAction</code> and the commented-out <code>button</code> in the <code>jsx</code>.</p><p>Having implemented the <code>PaymentProcessor.tsx</code> component, we can go ahead and implement the <code>OrderDetails</code> component:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token comment">// components/OrderDetails.tsx</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> useStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nanostores/react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useCallback<span class="token punctuation">,</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span></span>
<span class="line">  deliveryRequest<span class="token punctuation">,</span></span>
<span class="line">  errorDelivery<span class="token punctuation">,</span></span>
<span class="line">  errorGetOrder<span class="token punctuation">,</span></span>
<span class="line">  errorPay<span class="token punctuation">,</span></span>
<span class="line">  getOrderDetailsRequest<span class="token punctuation">,</span></span>
<span class="line">  loadingDelivery<span class="token punctuation">,</span></span>
<span class="line">  loadingGetOrder<span class="token punctuation">,</span></span>
<span class="line">  loadingPay<span class="token punctuation">,</span></span>
<span class="line">  orderGetState<span class="token punctuation">,</span></span>
<span class="line">  payRequest<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../state/order&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> IPaymentResult <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../state/order&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Heading <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./Heading&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Loader <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./Loader&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Message <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./Message&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> PaymentProcessor <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./PaymentProcessor&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> authState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../state/auth&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">OrderDetailsProps</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> OrderDetails<span class="token operator">:</span> React<span class="token punctuation">.</span><span class="token constant">FC</span><span class="token operator">&lt;</span>OrderDetailsProps<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> id <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> loadingOrder <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span>loadingGetOrder<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> errorOrder <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span>errorGetOrder<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> order <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span>orderGetState<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span>authState<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> isAdminLoggedIn <span class="token operator">=</span> <span class="token function">Boolean</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>isAdmin<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> loadingPayment <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span>loadingPay<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> errorPayment <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span>errorPay<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> loadingDeliver <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span>loadingDelivery<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> errorDeliver <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span>errorDelivery<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> handleUpdatePaymentStatus <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token keyword">async</span> <span class="token punctuation">(</span>paymentResult<span class="token operator">:</span> IPaymentResult<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// Make payment here</span></span>
<span class="line">      <span class="token function">payRequest</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> paymentResult<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">getOrderDetailsRequest</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">[</span>id<span class="token punctuation">]</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> handleUpdateDeliveryStatus <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Approved delivery status</span></span>
<span class="line">    <span class="token function">deliveryRequest</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">getOrderDetailsRequest</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">getOrderDetailsRequest</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token operator">&lt;</span>section className<span class="token operator">=</span><span class="token string">&#39;max-w-[1000px] mx-auto&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">      <span class="token punctuation">{</span>errorOrder <span class="token operator">&amp;&amp;</span> <span class="token operator">&lt;</span>Message variant<span class="token operator">=</span><span class="token string">&#39;danger&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>errorOrder<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>Message<span class="token operator">&gt;</span><span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">{</span>loadingOrder <span class="token operator">&amp;&amp;</span> <span class="token operator">&lt;</span>Loader variant<span class="token operator">=</span><span class="token string">&#39;large&#39;</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">}</span></span>
<span class="line">      <span class="token operator">&lt;</span>Heading text<span class="token operator">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Order Details: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>order<span class="token operator">?.</span>_id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">}</span> variant<span class="token operator">=</span><span class="token string">&#39;h1&#39;</span> textAlign<span class="token operator">=</span><span class="token string">&#39;center&#39;</span> <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&#39;grid grid-cols-1 md:grid-cols-2 gap-8 pb-8&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span>article<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>Heading text<span class="token operator">=</span><span class="token string">&#39;Shipping&#39;</span> variant<span class="token operator">=</span><span class="token string">&#39;h2&#39;</span> <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>p className<span class="token operator">=</span><span class="token string">&#39;py-4 text-gray-600&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">              <span class="token operator">&lt;</span>strong<span class="token operator">&gt;</span>Name<span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token operator">/</span>strong<span class="token operator">&gt;</span> <span class="token punctuation">{</span>order<span class="token operator">?.</span>user<span class="token operator">?.</span>name<span class="token punctuation">}</span></span>
<span class="line">            <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>p className<span class="token operator">=</span><span class="token string">&#39;pb-4 text-gray-600&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">              <span class="token operator">&lt;</span>strong<span class="token operator">&gt;</span>Email<span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token operator">/</span>strong<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">mailto:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>order<span class="token operator">?.</span>user<span class="token operator">?.</span>email<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>order<span class="token operator">?.</span>user<span class="token operator">?.</span>email<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>p className<span class="token operator">=</span><span class="token string">&#39;pb-4 text-gray-600&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">              <span class="token operator">&lt;</span>strong<span class="token operator">&gt;</span>Address<span class="token operator">:</span><span class="token operator">&lt;</span><span class="token operator">/</span>strong<span class="token operator">&gt;</span></span>
<span class="line">              <span class="token punctuation">{</span>order<span class="token operator">?.</span>shippingAddress<span class="token operator">?.</span>address<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>order<span class="token operator">?.</span>shippingAddress<span class="token operator">?.</span>city<span class="token punctuation">}</span> <span class="token punctuation">{</span>order<span class="token operator">?.</span>shippingAddress<span class="token operator">?.</span>postalCode<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">&#39; &#39;</span><span class="token punctuation">}</span></span>
<span class="line">              <span class="token punctuation">{</span>order<span class="token operator">?.</span>shippingAddress<span class="token operator">?.</span>country<span class="token punctuation">}</span></span>
<span class="line">            <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token punctuation">{</span>order<span class="token operator">?.</span>isDelivered <span class="token operator">?</span> <span class="token punctuation">(</span></span>
<span class="line">              <span class="token operator">&lt;</span>Message variant<span class="token operator">=</span><span class="token string">&#39;success&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">                <span class="token operator">&lt;</span><span class="token operator">&gt;</span>Delivered on <span class="token punctuation">{</span>order<span class="token operator">?.</span>deliveredAt<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">              <span class="token operator">&lt;</span><span class="token operator">/</span>Message<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span></span>
<span class="line">              <span class="token operator">&lt;</span>Message variant<span class="token operator">=</span><span class="token string">&#39;secondary&#39;</span><span class="token operator">&gt;</span>Not Delivered<span class="token operator">&lt;</span><span class="token operator">/</span>Message<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="line">          <span class="token operator">&lt;</span><span class="token operator">/</span>article<span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span>article className<span class="token operator">=</span><span class="token string">&#39;mt-8&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>Heading text<span class="token operator">=</span><span class="token string">&#39;Payment Method&#39;</span> variant<span class="token operator">=</span><span class="token string">&#39;h2&#39;</span> <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>p className<span class="token operator">=</span><span class="token string">&#39;capitalize&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">              <span class="token operator">&lt;</span>strong<span class="token operator">&gt;</span>Method<span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token operator">/</span>strong<span class="token operator">&gt;</span></span>
<span class="line">              <span class="token punctuation">{</span>order<span class="token punctuation">.</span>paymentMethod<span class="token punctuation">}</span></span>
<span class="line">            <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token punctuation">{</span>order<span class="token punctuation">.</span>isPaid <span class="token operator">?</span> <span class="token punctuation">(</span></span>
<span class="line">              <span class="token operator">&lt;</span>Message variant<span class="token operator">=</span><span class="token string">&#39;success&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">                <span class="token operator">&lt;</span><span class="token operator">&gt;</span>Paid on <span class="token punctuation">{</span>order<span class="token punctuation">.</span>paidAt<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">              <span class="token operator">&lt;</span><span class="token operator">/</span>Message<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span></span>
<span class="line">              <span class="token operator">&lt;</span>Message variant<span class="token operator">=</span><span class="token string">&#39;secondary&#39;</span><span class="token operator">&gt;</span>Not Paid<span class="token operator">&lt;</span><span class="token operator">/</span>Message<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="line">          <span class="token operator">&lt;</span><span class="token operator">/</span>article<span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span>article className<span class="token operator">=</span><span class="token string">&#39;mt-8&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">            <span class="token punctuation">{</span><span class="token operator">!</span>order<span class="token operator">?.</span>orderItems<span class="token operator">?.</span>length <span class="token operator">&amp;&amp;</span> <span class="token operator">&lt;</span>Message variant<span class="token operator">=</span><span class="token string">&#39;danger&#39;</span><span class="token operator">&gt;</span>You have no order items<span class="token operator">&lt;</span><span class="token operator">/</span>Message<span class="token operator">&gt;</span><span class="token punctuation">}</span></span>
<span class="line">            <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&#39;flex flex-col&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">              <span class="token punctuation">{</span><span class="token operator">!</span>order<span class="token operator">?.</span>orderItems<span class="token operator">?.</span>length <span class="token operator">&amp;&amp;</span> <span class="token operator">&lt;</span>Message variant<span class="token operator">=</span><span class="token string">&#39;danger&#39;</span><span class="token operator">&gt;</span>You have no order items<span class="token operator">&lt;</span><span class="token operator">/</span>Message<span class="token operator">&gt;</span><span class="token punctuation">}</span></span>
<span class="line">              <span class="token punctuation">{</span>order<span class="token operator">?.</span>orderItems<span class="token operator">?.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>orderItem<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">                  <span class="token operator">&lt;</span>div key<span class="token operator">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>orderItem<span class="token operator">?.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>index<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">}</span> className<span class="token operator">=</span><span class="token string">&#39;flex gap-6 items-end&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">                    <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> width<span class="token operator">:</span> <span class="token string">&#39;100px&#39;</span><span class="token punctuation">,</span> height<span class="token operator">:</span> <span class="token string">&#39;100px&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&gt;</span></span>
<span class="line">                      <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token punctuation">{</span>orderItem<span class="token operator">?.</span>image<span class="token punctuation">}</span> alt<span class="token operator">=</span><span class="token punctuation">{</span>orderItem<span class="token operator">?.</span>name<span class="token punctuation">}</span> className<span class="token operator">=</span><span class="token string">&#39;w-full h-full object-cover&#39;</span> <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">                    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">                    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">                      <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/product/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>orderItem<span class="token operator">?.</span>product<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>orderItem<span class="token operator">?.</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span></span>
<span class="line">                    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">                    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">                      <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span></span>
<span class="line">                        <span class="token punctuation">{</span>orderItem<span class="token operator">?.</span>qty<span class="token punctuation">}</span> x $<span class="token punctuation">{</span>orderItem<span class="token punctuation">.</span>price<span class="token punctuation">}</span> <span class="token operator">=</span> $<span class="token punctuation">{</span>orderItem<span class="token operator">?.</span>qty <span class="token operator">*</span> orderItem<span class="token operator">?.</span>price<span class="token punctuation">}</span></span>
<span class="line">                      <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span></span>
<span class="line">                    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">                  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">                <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">              <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="line">            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span><span class="token operator">/</span>article<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span>article<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>Heading text<span class="token operator">=</span><span class="token string">&#39;Order Summary&#39;</span> variant<span class="token operator">=</span><span class="token string">&#39;h2&#39;</span> <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&#39;max-w-[300px] border-2 mt-4&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">              <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&#39;p-4 text-gray-600 flex justify-between items-center border-b-2&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">                <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>Items Price<span class="token operator">:</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span></span>
<span class="line">                <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>$<span class="token punctuation">{</span>order<span class="token operator">?.</span>itemsPrice<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span></span>
<span class="line">              <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">              <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&#39;p-4 text-gray-600  flex justify-between items-center  border-b-2&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">                <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>Shipping fee<span class="token operator">:</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span></span>
<span class="line">                <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>$<span class="token punctuation">{</span>order<span class="token operator">?.</span>shippingPrice<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span></span>
<span class="line">              <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">              <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&#39;p-4 text-gray-600 flex justify-between items-center  border-b-2&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">                <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>Tax<span class="token operator">:</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span></span>
<span class="line">                <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>$<span class="token punctuation">{</span>order<span class="token operator">?.</span>taxPrice<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span></span>
<span class="line">              <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">              <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&#39;p-4 text-gray-600 flex justify-between items-center  border-b-2&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">                <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>Total Price<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span></span>
<span class="line">                <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>$<span class="token punctuation">{</span>order<span class="token operator">?.</span>totalPrice<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span></span>
<span class="line">              <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">              <span class="token punctuation">{</span>errorPayment <span class="token operator">&amp;&amp;</span> <span class="token operator">&lt;</span>Message variant<span class="token operator">=</span><span class="token string">&#39;danger&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>errorPayment<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>Message<span class="token operator">&gt;</span><span class="token punctuation">}</span></span>
<span class="line">              <span class="token punctuation">{</span>loadingPayment <span class="token operator">&amp;&amp;</span> <span class="token operator">&lt;</span>Loader variant<span class="token operator">=</span><span class="token string">&#39;small&#39;</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">}</span></span>
<span class="line">              <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&#39;p-4 text-gray-600 flex justify-between items-center  border-b-2&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">                <span class="token punctuation">{</span>order<span class="token operator">?.</span>isPaid <span class="token operator">?</span> <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>Payment Status<span class="token operator">:</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">}</span></span>
<span class="line">                <span class="token operator">&lt;</span>p className<span class="token operator">=</span><span class="token punctuation">{</span><span class="token operator">!</span>order<span class="token operator">?.</span>isPaid <span class="token operator">?</span> <span class="token string">&#39;flex-1&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">}</span><span class="token operator">&gt;</span></span>
<span class="line">                  <span class="token punctuation">{</span>order<span class="token operator">?.</span>isPaid <span class="token operator">?</span> <span class="token punctuation">(</span></span>
<span class="line">                    <span class="token string">&#39;Paid&#39;</span></span>
<span class="line">                  <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span></span>
<span class="line">                    <span class="token operator">&lt;</span>PaymentProcessor amount<span class="token operator">=</span><span class="token punctuation">{</span>order<span class="token operator">?.</span>totalPrice<span class="token punctuation">}</span> onPlaceOrder<span class="token operator">=</span><span class="token punctuation">{</span>handleUpdatePaymentStatus<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">                  <span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="line">                <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span></span>
<span class="line">              <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">              <span class="token punctuation">{</span>errorDeliver <span class="token operator">&amp;&amp;</span> <span class="token operator">&lt;</span>Message variant<span class="token operator">=</span><span class="token string">&#39;danger&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>errorDeliver<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>Message<span class="token operator">&gt;</span><span class="token punctuation">}</span></span>
<span class="line">              <span class="token punctuation">{</span>loadingDeliver <span class="token operator">&amp;&amp;</span> <span class="token operator">&lt;</span>Loader variant<span class="token operator">=</span><span class="token string">&#39;small&#39;</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">}</span></span>
<span class="line">              <span class="token punctuation">{</span>isAdminLoggedIn <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span></span>
<span class="line">                <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&#39;p-4 text-gray-600 flex justify-between items-center  border-b-2&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">                  <span class="token punctuation">{</span>order<span class="token operator">?.</span>isDelivered <span class="token operator">?</span> <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>Delivery Status<span class="token operator">:</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">}</span></span>
<span class="line">                  <span class="token operator">&lt;</span>p className<span class="token operator">=</span><span class="token punctuation">{</span><span class="token operator">!</span>order<span class="token operator">?.</span>isDelivered <span class="token operator">?</span> <span class="token string">&#39;flex-1&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">}</span><span class="token operator">&gt;</span></span>
<span class="line">                    <span class="token punctuation">{</span>order<span class="token operator">?.</span>isDelivered <span class="token operator">?</span> <span class="token punctuation">(</span></span>
<span class="line">                      <span class="token string">&#39;Delivered&#39;</span></span>
<span class="line">                    <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span></span>
<span class="line">                      <span class="token operator">&lt;</span>button</span>
<span class="line">                        onClick<span class="token operator">=</span><span class="token punctuation">{</span>handleUpdateDeliveryStatus<span class="token punctuation">}</span></span>
<span class="line">                        className<span class="token operator">=</span><span class="token string">&#39;bg-slate-900 text-white rounded-2xl px-5 py-2 text-lg md:text-xl font-medium w-full  flex gap-3 justify-center cursor-pointer hover:bg-slate-800&#39;</span></span>
<span class="line">                        disabled<span class="token operator">=</span><span class="token punctuation">{</span><span class="token operator">!</span>order<span class="token operator">?.</span>isPaid <span class="token operator">||</span> order<span class="token operator">?.</span>isDelivered<span class="token punctuation">}</span></span>
<span class="line">                      <span class="token operator">&gt;</span></span>
<span class="line">                        Mark As Delivered</span>
<span class="line">                      <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span></span>
<span class="line">                    <span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="line">                  <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span></span>
<span class="line">                <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">              <span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="line">            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span><span class="token operator">/</span>article<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">/</span>section<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>By this time, you may have noticed a striking pattern that has made creating this site really easy, despite the length of the tutorial. We start by importing dependencies and components, then define the props. Then we define states, create functions, and use the <code>useEffect</code> Hook before rendering our <code>jsx</code>.</p><p>For our current component, we accept an <code>id</code> as part of the prop, then define <code>loadingOrder</code>, <code>errorOrder</code>, <code>order</code> states that derive their values from <code>loadingGetOrder</code>, <code>errorGetOrder</code>, and <code>orderGetState</code>, respectively. Then, we define the <code>user</code> and the <code>isAdminLoggedIn</code> state, among others.</p><p>We also have the <code>handleUpdatePaymentStatus</code> function, which we pass to the <code>PaymentProcessor.tsx</code> component. We then define the <code>handleUpdateDeliveryStatus</code> function, which admins can use to mark an order as delivered. Finally, we use the <code>getOrderDetailsRequest</code> API function in the <code>useEffect</code> Hook.</p><p>In the <code>jsx</code>, we render an error message with a message component and the loading component with a loading indicator. Then, we return the shipping address, payment method, and a list of orders, or an error message when no order item is available.</p><p>We also display the pricing and delivery information alongside the <code>PaymentProcessor</code> and <strong>Mark As Delivered</strong> button that is visible to admins.</p><p>The next step is to use our component in the <code>pages/order/[id].astro</code> component:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// pages/order/[id].astro</span></span>
<span class="line"></span>
<span class="line"><span class="token operator">--</span><span class="token operator">-</span></span>
<span class="line"><span class="token keyword">import</span> Layout <span class="token keyword">from</span> <span class="token string">&#39;../../layouts/Layout.astro&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> OrderDetails <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../../components/OrderDetails&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> id <span class="token operator">=</span> Astro<span class="token punctuation">.</span>url<span class="token operator">?.</span>pathname<span class="token operator">?.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token operator">--</span><span class="token operator">-</span></span>
<span class="line"></span>
<span class="line"><span class="token operator">&lt;</span>Layout title<span class="token operator">=</span><span class="token string">&#39;Manage Order&#39;</span> description<span class="token operator">=</span><span class="token string">&#39;Manage Order&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&#39;max-w-[1800px] mx-auto px-4&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span>OrderDetails client<span class="token operator">:</span>load id<span class="token operator">=</span><span class="token punctuation">{</span>id <span class="token operator">||</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line"><span class="token operator">&lt;</span><span class="token operator">/</span>Layout<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Our order screen should now look like the below:</p><figure><img src="`+j+`" alt="Sample Order Details Page On Astro Ecommerce Site" tabindex="0" loading="lazy"><figcaption>Sample Order Details Page On Astro Ecommerce Site</figcaption></figure><h3 id="setting-up-the-order-management-page" tabindex="-1"><a class="header-anchor" href="#setting-up-the-order-management-page"><span>Setting up the order management page</span></a></h3><p>This admin-only page will contain a table listing all the orders in the system. The table will also contain a link to view an order’s details and another button to mark the order as delivered. Open the <code>components/AdminManageOrder.tsx</code> file and add the following:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> useStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nanostores/react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useCallback<span class="token punctuation">,</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> FaCheck<span class="token punctuation">,</span> FaTimes <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react-icons/fa&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span></span>
<span class="line">  deliveryRequest<span class="token punctuation">,</span></span>
<span class="line">  errorDelivery<span class="token punctuation">,</span></span>
<span class="line">  errorOrderList<span class="token punctuation">,</span></span>
<span class="line">  listOrdersRequest<span class="token punctuation">,</span></span>
<span class="line">  loadingDelivery<span class="token punctuation">,</span></span>
<span class="line">  loadingOrderList<span class="token punctuation">,</span></span>
<span class="line">  orderListState<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../state/order&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Loader <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./Loader&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Message <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./Message&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">AdminManageOrdersProps</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> AdminManageOrders<span class="token operator">:</span> React<span class="token punctuation">.</span><span class="token constant">FC</span><span class="token operator">&lt;</span>AdminManageOrdersProps<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> loadingDeliver <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span>loadingDelivery<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> errorDeliver <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span>errorDelivery<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> loadingList <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span>loadingOrderList<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> errorList <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span>errorOrderList<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> orderList <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span>orderListState<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> handleUpdateDeliveryStatus <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Approved delivery status</span></span>
<span class="line">    <span class="token function">deliveryRequest</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">listOrdersRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">listOrdersRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&#39;p-6&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">      <span class="token punctuation">{</span>errorDeliver <span class="token operator">&amp;&amp;</span> <span class="token operator">&lt;</span>Message variant<span class="token operator">=</span><span class="token string">&#39;danger&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>errorDeliver<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>Message<span class="token operator">&gt;</span><span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">{</span>loadingDeliver <span class="token operator">&amp;&amp;</span> <span class="token operator">&lt;</span>Loader variant<span class="token operator">=</span><span class="token string">&#39;large&#39;</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">{</span>errorList <span class="token operator">&amp;&amp;</span> <span class="token operator">&lt;</span>Message variant<span class="token operator">=</span><span class="token string">&#39;danger&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>errorList<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>Message<span class="token operator">&gt;</span><span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">{</span>loadingList <span class="token operator">&amp;&amp;</span> <span class="token operator">&lt;</span>Loader variant<span class="token operator">=</span><span class="token string">&#39;large&#39;</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">}</span></span>
<span class="line">      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&#39;w-full my-8 max-w-[1800px] mx-auto overflow-auto&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>table className<span class="token operator">=</span><span class="token string">&#39;table-auto border-4 w-full whitespace-nowrap&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span>thead className<span class="token operator">=</span><span class="token string">&#39;border-b-2&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>tr className<span class="token operator">=</span><span class="token string">&#39;bg-gray-500 text-white &#39;</span><span class="token operator">&gt;</span></span>
<span class="line">              <span class="token operator">&lt;</span>th className<span class="token operator">=</span><span class="token string">&#39;text-left border-r-2 px-4 py-2&#39;</span><span class="token operator">&gt;</span><span class="token constant">ID</span><span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">&gt;</span></span>
<span class="line">              <span class="token operator">&lt;</span>th className<span class="token operator">=</span><span class="token string">&#39;text-left border-r-2 px-4 py-2&#39;</span><span class="token operator">&gt;</span>User<span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">&gt;</span></span>
<span class="line">              <span class="token operator">&lt;</span>th className<span class="token operator">=</span><span class="token string">&#39;text-left border-r-2 px-4 py-2&#39;</span><span class="token operator">&gt;</span>Total<span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">&gt;</span></span>
<span class="line">              <span class="token operator">&lt;</span>th className<span class="token operator">=</span><span class="token string">&#39;text-left border-r-2 px-4 py-2 whitespace-nowrap&#39;</span><span class="token operator">&gt;</span>Payment status<span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">&gt;</span></span>
<span class="line">              <span class="token operator">&lt;</span>th className<span class="token operator">=</span><span class="token string">&#39;text-left border-r-2  px-4 py-2 whitespace-nowrap&#39;</span><span class="token operator">&gt;</span>Delivery Status<span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">&gt;</span></span>
<span class="line">              <span class="token operator">&lt;</span>th className<span class="token operator">=</span><span class="token string">&#39;text-left border-r-2 px-4 py-2&#39;</span><span class="token operator">&gt;</span>Action<span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span><span class="token operator">/</span>thead<span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span>tbody<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token punctuation">{</span>orderList<span class="token operator">?.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">              <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">                <span class="token operator">&lt;</span>tr className<span class="token operator">=</span><span class="token string">&#39;capitalize border-b-2&#39;</span> key<span class="token operator">=</span><span class="token punctuation">{</span>order<span class="token operator">?.</span>_id<span class="token punctuation">}</span><span class="token operator">&gt;</span></span>
<span class="line">                  <span class="token operator">&lt;</span>td className<span class="token operator">=</span><span class="token string">&#39;text-left border-r-2 px-4 py-2&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>order<span class="token operator">?.</span>_id<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span></span>
<span class="line">                  <span class="token operator">&lt;</span>td className<span class="token operator">=</span><span class="token string">&#39;text-left border-r-2 px-4 py-2&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>order<span class="token operator">?.</span>user<span class="token operator">?.</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span></span>
<span class="line">                  <span class="token operator">&lt;</span>td className<span class="token operator">=</span><span class="token string">&#39;text-left border-r-2 px-4 py-2&#39;</span><span class="token operator">&gt;</span>$<span class="token punctuation">{</span>order<span class="token operator">?.</span>totalPrice<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span></span>
<span class="line">                  <span class="token operator">&lt;</span>td className<span class="token operator">=</span><span class="token string">&#39;text-left border-r-2 px-4 py-2&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">                    <span class="token punctuation">{</span>order<span class="token operator">?.</span>isPaid <span class="token operator">?</span> <span class="token punctuation">(</span></span>
<span class="line">                      <span class="token operator">&lt;</span>FaCheck className<span class="token operator">=</span><span class="token string">&#39;text-green-500&#39;</span> size<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">20</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">                    <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span></span>
<span class="line">                      <span class="token operator">&lt;</span>FaTimes className<span class="token operator">=</span><span class="token string">&#39;text-red-500&#39;</span> size<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">20</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">                    <span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="line">                  <span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span></span>
<span class="line">                  <span class="token operator">&lt;</span>td className<span class="token operator">=</span><span class="token string">&#39;text-left border-r-2 px-4 py-2&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">                    <span class="token punctuation">{</span>order<span class="token operator">?.</span>isDelivered <span class="token operator">?</span> <span class="token punctuation">(</span></span>
<span class="line">                      <span class="token operator">&lt;</span>FaCheck className<span class="token operator">=</span><span class="token string">&#39;text-green-500&#39;</span> size<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">20</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">                    <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span></span>
<span class="line">                      <span class="token operator">&lt;</span>FaTimes className<span class="token operator">=</span><span class="token string">&#39;text-red-500&#39;</span> size<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">20</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">                    <span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="line">                  <span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span></span>
<span class="line">                  <span class="token operator">&lt;</span>td className<span class="token operator">=</span><span class="token string">&#39;text-left border-r-2 px-4 py-2&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">                    <span class="token operator">&lt;</span>span className<span class="token operator">=</span><span class="token string">&#39;flex gap-4 justify-between&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">                      <span class="token punctuation">{</span>order<span class="token operator">?.</span>isDelivered <span class="token operator">?</span> <span class="token punctuation">(</span></span>
<span class="line">                        <span class="token string">&#39;Delivered&#39;</span></span>
<span class="line">                      <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span></span>
<span class="line">                        <span class="token operator">&lt;</span>button</span>
<span class="line">                          onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">handleUpdateDeliveryStatus</span><span class="token punctuation">(</span>order<span class="token operator">?.</span>_id<span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="line">                          disabled<span class="token operator">=</span><span class="token punctuation">{</span>loadingDeliver <span class="token operator">||</span> order<span class="token operator">?.</span>isDelivered <span class="token operator">||</span> <span class="token operator">!</span>order<span class="token operator">?.</span>isPaid<span class="token punctuation">}</span></span>
<span class="line">                          className<span class="token operator">=</span><span class="token string">&#39;bg-blue-900 text-white rounded px-4 py-2  w-full max-w-[200px] flex gap-3 justify-center  cursor-pointer hover:bg-blue-800 text-sm&#39;</span></span>
<span class="line">                        <span class="token operator">&gt;</span></span>
<span class="line">                          Mark As Delivered</span>
<span class="line">                          <span class="token punctuation">{</span>loadingDeliver <span class="token operator">&amp;&amp;</span> <span class="token operator">&lt;</span>Loader variant<span class="token operator">=</span><span class="token string">&#39;small&#39;</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">}</span></span>
<span class="line">                        <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span></span>
<span class="line">                      <span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="line">                      <span class="token operator">&lt;</span>a</span>
<span class="line">                        href<span class="token operator">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/order/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>order<span class="token operator">?.</span>_id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">}</span></span>
<span class="line">                        className<span class="token operator">=</span><span class="token string">&#39;bg-slate-900 text-white rounded px-4 py-2  w-full max-w-[100px] flex gap-3 justify-center  cursor-pointer hover:bg-slate-800 text-sm&#39;</span></span>
<span class="line">                      <span class="token operator">&gt;</span></span>
<span class="line">                        View</span>
<span class="line">                      <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span></span>
<span class="line">                    <span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span></span>
<span class="line">                  <span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span></span>
<span class="line">                <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">&gt;</span></span>
<span class="line">              <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="line">          <span class="token operator">&lt;</span><span class="token operator">/</span>tbody<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span><span class="token operator">/</span>table<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In the component above, we define the <code>loading</code> and <code>error</code> states for marking an order as delivered and listing the orders. We also have a <code>handleUpdateDeliveryStatus</code> function that we will use to mark an order as delivered. In the <code>useEffect</code> Hook, we call the <code>listOrdersRequest</code> function.</p><p>In the <code>jsx</code>, we return a table that lists the order items we fetched.</p><p>Next, let’s use the <code>components/AdminManageOrder.tsx</code> page in the <code>pages/manage-orders.astro</code> page:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// pages/manage-orders.astro</span></span>
<span class="line"></span>
<span class="line"><span class="token operator">--</span><span class="token operator">-</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> AdminManageOrders <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../components/AdminManageOrders&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Heading <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../components/Heading&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> Layout <span class="token keyword">from</span> <span class="token string">&#39;../layouts/Layout.astro&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token operator">--</span><span class="token operator">-</span></span>
<span class="line"></span>
<span class="line"><span class="token operator">&lt;</span>Layout title<span class="token operator">=</span><span class="token string">&#39;Manage Orders&#39;</span> description<span class="token operator">=</span><span class="token string">&#39;Manage orders&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&#39;max-w-[1800px] mx-auto&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span>Heading text<span class="token operator">=</span><span class="token string">&#39;Manage Orders&#39;</span> variant<span class="token operator">=</span><span class="token string">&#39;h1&#39;</span> textAlign<span class="token operator">=</span><span class="token string">&#39;center&#39;</span> <span class="token literal-property property">client</span><span class="token operator">:</span>load <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span>AdminManageOrders client<span class="token operator">:</span>load <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line"><span class="token operator">&lt;</span><span class="token operator">/</span>Layout<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The page we built should look like the below:</p><figure><img src="`+F+`" alt="Astro Ecommerce Site Admin Page For Order Management" tabindex="0" loading="lazy"><figcaption>Astro Ecommerce Site Admin Page For Order Management</figcaption></figure><h3 id="working-on-the-user-management-page" tabindex="-1"><a class="header-anchor" href="#working-on-the-user-management-page"><span>Working on the user management page</span></a></h3><p>This is another admin page, but one of the <strong>Action</strong> buttons will call a <code>handleMakeAdmin</code> function that calls <code>makeAdminRequest</code> to make a user an admin. Let’s start by building out the <code>AdminManageUsers</code> component before using it in the <code>/manage-users.astro</code> page:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token comment">// components/AdminManageUsers.tsx</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> useStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nanostores/react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useCallback<span class="token punctuation">,</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> FaCheck <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react-icons/fa&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span></span>
<span class="line">  errorUpdateUser<span class="token punctuation">,</span></span>
<span class="line">  errorUsers<span class="token punctuation">,</span></span>
<span class="line">  loadingUpdateUser<span class="token punctuation">,</span></span>
<span class="line">  loadingUsers<span class="token punctuation">,</span></span>
<span class="line">  makeAdminRequest<span class="token punctuation">,</span></span>
<span class="line">  usersRequest<span class="token punctuation">,</span></span>
<span class="line">  usersState<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../state/user&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Loader <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./Loader&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Message <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./Message&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">AdminManageUsersProps</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> AdminManageUsers<span class="token operator">:</span> React<span class="token punctuation">.</span><span class="token constant">FC</span><span class="token operator">&lt;</span>AdminManageUsersProps<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> loadingList <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span>loadingUsers<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> errorList <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span>errorUsers<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> usersList <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span>usersState<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> loadingUpdate <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span>loadingUpdateUser<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> errorUpdate <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span>errorUpdateUser<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> handleMakeAdmin <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">makeAdminRequest</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">usersRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">usersRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&#39;p-6&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">      <span class="token punctuation">{</span>errorList <span class="token operator">&amp;&amp;</span> <span class="token operator">&lt;</span>Message variant<span class="token operator">=</span><span class="token string">&#39;danger&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>errorList<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>Message<span class="token operator">&gt;</span><span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">{</span>loadingList <span class="token operator">&amp;&amp;</span> <span class="token operator">&lt;</span>Loader variant<span class="token operator">=</span><span class="token string">&#39;large&#39;</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">{</span>errorUpdate <span class="token operator">&amp;&amp;</span> <span class="token operator">&lt;</span>Message variant<span class="token operator">=</span><span class="token string">&#39;danger&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>errorUpdate<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>Message<span class="token operator">&gt;</span><span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">{</span>loadingUpdate <span class="token operator">&amp;&amp;</span> <span class="token operator">&lt;</span>Loader variant<span class="token operator">=</span><span class="token string">&#39;large&#39;</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">}</span></span>
<span class="line">      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&#39;w-full my-8 max-w-[1800px] mx-auto overflow-auto&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>table className<span class="token operator">=</span><span class="token string">&#39;table-auto border-4 w-full whitespace-nowrap&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span>thead className<span class="token operator">=</span><span class="token string">&#39;border-b-2&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>tr className<span class="token operator">=</span><span class="token string">&#39;bg-gray-500 text-white &#39;</span><span class="token operator">&gt;</span></span>
<span class="line">              <span class="token operator">&lt;</span>th className<span class="token operator">=</span><span class="token string">&#39;text-left border-r-2 px-4 py-2&#39;</span><span class="token operator">&gt;</span><span class="token constant">ID</span><span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">&gt;</span></span>
<span class="line">              <span class="token operator">&lt;</span>th className<span class="token operator">=</span><span class="token string">&#39;text-left border-r-2 px-4 py-2&#39;</span><span class="token operator">&gt;</span>Name<span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">&gt;</span></span>
<span class="line">              <span class="token operator">&lt;</span>th className<span class="token operator">=</span><span class="token string">&#39;text-left border-r-2 px-4 py-2&#39;</span><span class="token operator">&gt;</span>Email<span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">&gt;</span></span>
<span class="line">              <span class="token operator">&lt;</span>th className<span class="token operator">=</span><span class="token string">&#39;text-left border-r-2 px-4 py-2&#39;</span><span class="token operator">&gt;</span>Admin<span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span><span class="token operator">/</span>thead<span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span>tbody<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token punctuation">{</span>usersList<span class="token operator">?.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">              <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">                <span class="token operator">&lt;</span>tr className<span class="token operator">=</span><span class="token string">&#39;capitalize border-b-2&#39;</span> key<span class="token operator">=</span><span class="token punctuation">{</span>user<span class="token operator">?.</span>_id<span class="token punctuation">}</span><span class="token operator">&gt;</span></span>
<span class="line">                  <span class="token operator">&lt;</span>td className<span class="token operator">=</span><span class="token string">&#39;text-left border-r-2 px-4 py-2&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>user<span class="token operator">?.</span>_id<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span></span>
<span class="line">                  <span class="token operator">&lt;</span>td className<span class="token operator">=</span><span class="token string">&#39;text-left border-r-2 px-4 py-2&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>user<span class="token operator">?.</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span></span>
<span class="line">                  <span class="token operator">&lt;</span>td className<span class="token operator">=</span><span class="token string">&#39;text-left border-r-2 px-4 py-2&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>user<span class="token operator">?.</span>email<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span></span>
<span class="line">                  <span class="token operator">&lt;</span>td className<span class="token operator">=</span><span class="token string">&#39;text-left border-r-2 px-4 py-2&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">                    <span class="token operator">&lt;</span>span className<span class="token operator">=</span><span class="token string">&#39;flex gap-4 justify-between&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">                      <span class="token punctuation">{</span>user<span class="token operator">?.</span>isAdmin <span class="token operator">?</span> <span class="token punctuation">(</span></span>
<span class="line">                        <span class="token operator">&lt;</span>FaCheck className<span class="token operator">=</span><span class="token string">&#39;text-green-500&#39;</span> size<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">20</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">                      <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span></span>
<span class="line">                        <span class="token operator">&lt;</span>button</span>
<span class="line">                          onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">handleMakeAdmin</span><span class="token punctuation">(</span>user<span class="token operator">?.</span>_id <span class="token operator">||</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="line">                          disabled<span class="token operator">=</span><span class="token punctuation">{</span><span class="token boolean">false</span><span class="token punctuation">}</span></span>
<span class="line">                          className<span class="token operator">=</span><span class="token string">&#39;bg-blue-900 text-white rounded px-4 py-2  w-full max-w-[200px] flex gap-3 justify-center  cursor-pointer hover:bg-blue-800 text-sm&#39;</span></span>
<span class="line">                        <span class="token operator">&gt;</span></span>
<span class="line">                          Make Admin</span>
<span class="line">                          <span class="token punctuation">{</span>loadingUpdate <span class="token operator">&amp;&amp;</span> <span class="token operator">&lt;</span>Loader variant<span class="token operator">=</span><span class="token string">&#39;small&#39;</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">}</span></span>
<span class="line">                        <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span></span>
<span class="line">                      <span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="line">                    <span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span></span>
<span class="line">                  <span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span></span>
<span class="line">                <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">&gt;</span></span>
<span class="line">              <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="line">          <span class="token operator">&lt;</span><span class="token operator">/</span>tbody<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span><span class="token operator">/</span>table<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now, let’s add it to the <code>pages/manage-users.astro</code> page:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// pages/manage-users.astro</span></span>
<span class="line"></span>
<span class="line"><span class="token operator">--</span><span class="token operator">-</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> AdminManageUsers <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../components/AdminManageUsers&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Heading <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../components/Heading&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> Layout <span class="token keyword">from</span> <span class="token string">&#39;../layouts/Layout.astro&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token operator">--</span><span class="token operator">-</span></span>
<span class="line"></span>
<span class="line"><span class="token operator">&lt;</span>Layout title<span class="token operator">=</span><span class="token string">&#39;Manage Users&#39;</span> description<span class="token operator">=</span><span class="token string">&#39;Manage Users&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&#39;max-w-[1800px] mx-auto&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span>Heading text<span class="token operator">=</span><span class="token string">&#39;Manage Users&#39;</span> variant<span class="token operator">=</span><span class="token string">&#39;h1&#39;</span> textAlign<span class="token operator">=</span><span class="token string">&#39;center&#39;</span> <span class="token literal-property property">client</span><span class="token operator">:</span>load <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span>AdminManageUsers client<span class="token operator">:</span>load <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line"><span class="token operator">&lt;</span><span class="token operator">/</span>Layout<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The resulting page should now look like this:</p><figure><img src="`+E+`" alt="Astro Ecommerce Site Admin Page For User Management" tabindex="0" loading="lazy"><figcaption>Astro Ecommerce Site Admin Page For User Management</figcaption></figure><h3 id="setting-up-the-account-page" tabindex="-1"><a class="header-anchor" href="#setting-up-the-account-page"><span>Setting up the account page</span></a></h3><p>The account page will contain a form for modifying a user’s profile and listing a user’s orders in a table. Open the <code>components/Profile.tsx</code> file and add the following code:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token comment">// components/Profile.tsx</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> useStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nanostores/react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useCallback<span class="token punctuation">,</span> useEffect<span class="token punctuation">,</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> FaCheck<span class="token punctuation">,</span> FaTimes <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react-icons/fa&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> errorMyOrderList<span class="token punctuation">,</span> listMyOrdersRequest<span class="token punctuation">,</span> loadingMyOrderList<span class="token punctuation">,</span> myOrderListState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../state/order&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span></span>
<span class="line">  errorGetProfile<span class="token punctuation">,</span></span>
<span class="line">  errorUpdateProfile<span class="token punctuation">,</span></span>
<span class="line">  getProfileState<span class="token punctuation">,</span></span>
<span class="line">  loadingGetProfile<span class="token punctuation">,</span></span>
<span class="line">  loadingUpdateProfile<span class="token punctuation">,</span></span>
<span class="line">  profileGetRequest<span class="token punctuation">,</span></span>
<span class="line">  profileUpdateRequest<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../state/user&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Button <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./Button&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Heading <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./Heading&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Loader <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./Loader&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Message <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./Message&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">ProfileProps</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> Profile<span class="token operator">:</span> React<span class="token punctuation">.</span><span class="token constant">FC</span><span class="token operator">&lt;</span>ProfileProps<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> loadingGet <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span>loadingGetProfile<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> errorGet <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span>errorGetProfile<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> profileGet <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span>getProfileState<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> loadingUpdate <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span>loadingUpdateProfile<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> errorUpdate <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span>errorUpdateProfile<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> loadingList <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span>loadingMyOrderList<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> errorList <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span>errorMyOrderList<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> orderList <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span>myOrderListState<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>name<span class="token punctuation">,</span> setName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useState</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>email<span class="token punctuation">,</span> setEmail<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useState</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> handleUpdate <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">profileUpdateRequest</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> email<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">profileGetRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>email<span class="token punctuation">,</span> name<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">profileGetRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">listMyOrdersRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>profileGet<span class="token operator">?.</span>email<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">setEmail</span><span class="token punctuation">(</span>profileGet<span class="token operator">?.</span>email<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token function">setName</span><span class="token punctuation">(</span>profileGet<span class="token operator">?.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>profileGet<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token operator">&lt;</span>section className<span class="token operator">=</span><span class="token string">&#39;p-6&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&#39; mx-auto&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&#39;max-w-[500px] &#39;</span><span class="token operator">&gt;</span></span>
<span class="line">          <span class="token punctuation">{</span>errorGet <span class="token operator">&amp;&amp;</span> <span class="token operator">&lt;</span>Message variant<span class="token operator">=</span><span class="token string">&#39;danger&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>errorGet<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>Message<span class="token operator">&gt;</span><span class="token punctuation">}</span></span>
<span class="line">          <span class="token punctuation">{</span>loadingGet <span class="token operator">&amp;&amp;</span> <span class="token operator">&lt;</span>Loader variant<span class="token operator">=</span><span class="token string">&#39;large&#39;</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">}</span></span>
<span class="line">          <span class="token punctuation">{</span>errorUpdate <span class="token operator">&amp;&amp;</span> <span class="token operator">&lt;</span>Message variant<span class="token operator">=</span><span class="token string">&#39;danger&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>errorUpdate<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>Message<span class="token operator">&gt;</span><span class="token punctuation">}</span></span>
<span class="line">          <span class="token punctuation">{</span>loadingUpdate <span class="token operator">&amp;&amp;</span> <span class="token operator">&lt;</span>Loader variant<span class="token operator">=</span><span class="token string">&#39;large&#39;</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">}</span></span>
<span class="line">          <span class="token operator">&lt;</span>Heading text<span class="token operator">=</span><span class="token string">&#39;Update Profile&#39;</span> variant<span class="token operator">=</span><span class="token string">&#39;h2&#39;</span> <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span>form onSubmit<span class="token operator">=</span><span class="token punctuation">{</span>handleUpdate<span class="token punctuation">}</span> className<span class="token operator">=</span><span class="token string">&#39;max-w-[500px] mx-auto py-6&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">              <span class="token operator">&lt;</span>label htmlFor<span class="token operator">=</span><span class="token string">&#39;name&#39;</span><span class="token operator">&gt;</span>Name<span class="token operator">:</span><span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">&gt;</span></span>
<span class="line">              <span class="token operator">&lt;</span>input</span>
<span class="line">                type<span class="token operator">=</span><span class="token string">&#39;text&#39;</span></span>
<span class="line">                name<span class="token operator">=</span><span class="token string">&#39;name&#39;</span></span>
<span class="line">                id<span class="token operator">=</span><span class="token string">&#39;name&#39;</span></span>
<span class="line">                required</span>
<span class="line">                placeholder<span class="token operator">=</span><span class="token string">&#39;Enter name&#39;</span></span>
<span class="line">                className<span class="token operator">=</span><span class="token string">&#39;border-2 border-slate-400 p-2 rounded-lg w-full&#39;</span></span>
<span class="line">                value<span class="token operator">=</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span>
<span class="line">                onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setName</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="line">              <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">              <span class="token operator">&lt;</span>label htmlFor<span class="token operator">=</span><span class="token string">&#39;email&#39;</span><span class="token operator">&gt;</span> Email<span class="token operator">:</span><span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">&gt;</span></span>
<span class="line">              <span class="token operator">&lt;</span>input</span>
<span class="line">                type<span class="token operator">=</span><span class="token string">&#39;email&#39;</span></span>
<span class="line">                name<span class="token operator">=</span><span class="token string">&#39;email&#39;</span></span>
<span class="line">                id<span class="token operator">=</span><span class="token string">&#39;email&#39;</span></span>
<span class="line">                required</span>
<span class="line">                placeholder<span class="token operator">=</span><span class="token string">&#39;Enter email&#39;</span></span>
<span class="line">                className<span class="token operator">=</span><span class="token string">&#39;border-2 border-slate-400 p-2 rounded-lg w-full&#39;</span></span>
<span class="line">                value<span class="token operator">=</span><span class="token punctuation">{</span>email<span class="token punctuation">}</span></span>
<span class="line">                onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setEmail</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="line">              <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>Button<span class="token operator">&gt;</span>Save Changes<span class="token operator">&lt;</span><span class="token operator">/</span>Button<span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&#39;max-w-[1800px] my-8 &#39;</span><span class="token operator">&gt;</span></span>
<span class="line">          <span class="token punctuation">{</span>errorList <span class="token operator">&amp;&amp;</span> <span class="token operator">&lt;</span>Message variant<span class="token operator">=</span><span class="token string">&#39;danger&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>errorList<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>Message<span class="token operator">&gt;</span><span class="token punctuation">}</span></span>
<span class="line">          <span class="token punctuation">{</span>loadingList <span class="token operator">&amp;&amp;</span> <span class="token operator">&lt;</span>Loader variant<span class="token operator">=</span><span class="token string">&#39;large&#39;</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">}</span></span>
<span class="line">          <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>Heading text<span class="token operator">=</span><span class="token string">&#39;My Orders&#39;</span> variant<span class="token operator">=</span><span class="token string">&#39;h2&#39;</span> <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&#39;w-full py-6  overflow-auto&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">              <span class="token operator">&lt;</span>table className<span class="token operator">=</span><span class="token string">&#39;table-auto border-4 w-full whitespace-nowrap&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">                <span class="token operator">&lt;</span>thead className<span class="token operator">=</span><span class="token string">&#39;border-b-2&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">                  <span class="token operator">&lt;</span>tr className<span class="token operator">=</span><span class="token string">&#39;bg-gray-500 text-white &#39;</span><span class="token operator">&gt;</span></span>
<span class="line">                    <span class="token operator">&lt;</span>th className<span class="token operator">=</span><span class="token string">&#39;text-left border-r-2 px-4 py-2&#39;</span><span class="token operator">&gt;</span><span class="token constant">ID</span><span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">&gt;</span></span>
<span class="line">                    <span class="token operator">&lt;</span>th className<span class="token operator">=</span><span class="token string">&#39;text-left border-r-2 px-4 py-2&#39;</span><span class="token operator">&gt;</span>Total<span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">&gt;</span></span>
<span class="line">                    <span class="token operator">&lt;</span>th className<span class="token operator">=</span><span class="token string">&#39;text-left border-r-2 px-4 py-2 whitespace-nowrap&#39;</span><span class="token operator">&gt;</span>Payment status<span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">&gt;</span></span>
<span class="line">                    <span class="token operator">&lt;</span>th className<span class="token operator">=</span><span class="token string">&#39;text-left border-r-2  px-4 py-2 whitespace-nowrap&#39;</span><span class="token operator">&gt;</span>Delivery Status<span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">&gt;</span></span>
<span class="line">                    <span class="token operator">&lt;</span>th className<span class="token operator">=</span><span class="token string">&#39;text-left border-r-2 px-4 py-2&#39;</span><span class="token operator">&gt;</span>Action<span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">&gt;</span></span>
<span class="line">                  <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">&gt;</span></span>
<span class="line">                <span class="token operator">&lt;</span><span class="token operator">/</span>thead<span class="token operator">&gt;</span></span>
<span class="line">                <span class="token operator">&lt;</span>tbody<span class="token operator">&gt;</span></span>
<span class="line">                  <span class="token punctuation">{</span>orderList<span class="token operator">?.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">                      <span class="token operator">&lt;</span>tr className<span class="token operator">=</span><span class="token string">&#39;capitalize border-b-2&#39;</span> key<span class="token operator">=</span><span class="token punctuation">{</span>order<span class="token operator">?.</span>_id<span class="token punctuation">}</span><span class="token operator">&gt;</span></span>
<span class="line">                        <span class="token operator">&lt;</span>td className<span class="token operator">=</span><span class="token string">&#39;text-left border-r-2 px-4 py-2&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>order<span class="token operator">?.</span>_id<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span></span>
<span class="line">                        <span class="token operator">&lt;</span>td className<span class="token operator">=</span><span class="token string">&#39;text-left border-r-2 px-4 py-2&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>order<span class="token operator">?.</span>totalPrice<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span></span>
<span class="line">                        <span class="token operator">&lt;</span>td className<span class="token operator">=</span><span class="token string">&#39;text-left border-r-2 px-4 py-2&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">                          <span class="token punctuation">{</span>order<span class="token operator">?.</span>isPaid <span class="token operator">?</span> <span class="token punctuation">(</span></span>
<span class="line">                            <span class="token operator">&lt;</span>FaCheck className<span class="token operator">=</span><span class="token string">&#39;text-green-500&#39;</span> size<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">20</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">                          <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span></span>
<span class="line">                            <span class="token operator">&lt;</span>FaTimes className<span class="token operator">=</span><span class="token string">&#39;text-red-500&#39;</span> size<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">20</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">                          <span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="line">                        <span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span></span>
<span class="line">                        <span class="token operator">&lt;</span>td className<span class="token operator">=</span><span class="token string">&#39;text-left border-r-2 px-4 py-2&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">                          <span class="token punctuation">{</span>order<span class="token operator">?.</span>isDelivered <span class="token operator">?</span> <span class="token punctuation">(</span></span>
<span class="line">                            <span class="token operator">&lt;</span>FaCheck className<span class="token operator">=</span><span class="token string">&#39;text-green-500&#39;</span> size<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">20</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">                          <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span></span>
<span class="line">                            <span class="token operator">&lt;</span>FaTimes className<span class="token operator">=</span><span class="token string">&#39;text-red-500&#39;</span> size<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">20</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">                          <span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="line">                        <span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span></span>
<span class="line">                        <span class="token operator">&lt;</span>td className<span class="token operator">=</span><span class="token string">&#39;text-left border-r-2 px-4 py-2&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">                          <span class="token operator">&lt;</span>span className<span class="token operator">=</span><span class="token string">&#39;flex gap-4 justify-between&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">                            <span class="token operator">&lt;</span>a</span>
<span class="line">                              href<span class="token operator">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/order/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>order<span class="token operator">?.</span>_id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">}</span></span>
<span class="line">                              className<span class="token operator">=</span><span class="token string">&#39;bg-slate-900 text-white rounded px-4 py-2  w-full max-w-[100px] flex gap-3 justify-center  cursor-pointer hover:bg-slate-800 text-sm&#39;</span></span>
<span class="line">                            <span class="token operator">&gt;</span></span>
<span class="line">                              View</span>
<span class="line">                            <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span></span>
<span class="line">                          <span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span></span>
<span class="line">                        <span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span></span>
<span class="line">                      <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">&gt;</span></span>
<span class="line">                    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="line">                <span class="token operator">&lt;</span><span class="token operator">/</span>tbody<span class="token operator">&gt;</span></span>
<span class="line">              <span class="token operator">&lt;</span><span class="token operator">/</span>table<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">/</span>section<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In the component above, we extract three categories of global states: <code>GetProfile</code>, <code>UpdateProfile</code>, and <code>MyOrderList</code>. Then, we defined two states for <code>name</code> and <code>email</code>.</p><p>We also created a <code>handleUpdate</code> function that calls the <code>profileUpdateRequest</code>. In the first <code>useEffect</code> Hook, we call <code>profileGetRequest</code> and <code>listMyOrdersRequest</code>. In the second <code>useEffect</code> Hook, we use the fetched profile values to update the <code>name</code> and <code>email</code> states.</p><p>Now, we will include our <code>Profile.tsx</code> component inside our <code>pages/account.astro</code> page:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// pages/account.astro</span></span>
<span class="line"></span>
<span class="line"><span class="token operator">--</span><span class="token operator">-</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Heading <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../components/Heading&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> Layout <span class="token keyword">from</span> <span class="token string">&#39;../layouts/Layout.astro&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Profile <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../components/Profile&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token operator">--</span><span class="token operator">-</span></span>
<span class="line"><span class="token operator">&lt;</span>Layout title<span class="token operator">=</span><span class="token string">&#39;User Profile&#39;</span> description<span class="token operator">=</span><span class="token string">&#39;User Profile&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&#39;max-w-[1800px] mx-auto&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span>Heading text<span class="token operator">=</span><span class="token string">&#39;User Profile&#39;</span> variant<span class="token operator">=</span><span class="token string">&#39;h1&#39;</span> textAlign<span class="token operator">=</span><span class="token string">&#39;center&#39;</span> <span class="token literal-property property">client</span><span class="token operator">:</span>load <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span>Profile client<span class="token operator">:</span>load <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line"><span class="token operator">&lt;</span><span class="token operator">/</span>Layout<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Our account page should now look like the below:</p><figure><img src="`+U+`" alt="Astro Ecommerce Site User Account Management Page" tabindex="0" loading="lazy"><figcaption>Astro Ecommerce Site User Account Management Page</figcaption></figure><h3 id="working-on-the-homepage" tabindex="-1"><a class="header-anchor" href="#working-on-the-homepage"><span>Working on the homepage</span></a></h3><p>Now, we’ve built all the required pages for a functional ecommerce site. However, our site won’t be complete without a homepage.</p><p>Let’s start by updating the <code>Showcase</code>, <code>Product</code>, and <code>ProductList</code> components. Update the <code>components/Showcase.tsx</code> component file like so:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token comment">// components/Showcase.tsx</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">ShowcaseProps</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> ShowCase<span class="token operator">:</span> React<span class="token punctuation">.</span><span class="token constant">FC</span><span class="token operator">&lt;</span>ShowcaseProps<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&#39;border-2 border-slate-400 w-full max-w-[1800px] h-[500px] flex justify-center items-center text-3xl&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">      Showcase top products here or show <span class="token builtin">any</span> special ad here</span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Next, update the <code>components/Product.tsx</code> file:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token comment">// components/Product.tsx</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token keyword">type</span> <span class="token class-name">IProduct</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../state/products&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Rating <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./Rating&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">ProductProps</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  product<span class="token operator">:</span> IProduct<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> Product<span class="token operator">:</span> React<span class="token punctuation">.</span><span class="token constant">FC</span><span class="token operator">&lt;</span>ProductProps<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> product <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token operator">&lt;</span>article className<span class="token operator">=</span><span class="token string">&#39;my-3 p-3 rounded border w-[300px] bg-gray-100&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/product/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>product<span class="token punctuation">.</span>_id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">}</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token punctuation">{</span>product<span class="token punctuation">.</span>image<span class="token punctuation">}</span> alt<span class="token operator">=</span><span class="token punctuation">{</span>product<span class="token punctuation">.</span>name<span class="token punctuation">}</span> className<span class="token operator">=</span><span class="token string">&#39;w-full h-[350px] object-cover&#39;</span> <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&#39;p-3&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/product/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>product<span class="token punctuation">.</span>_id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">}</span> className<span class="token operator">=</span><span class="token string">&#39;text-lg font-semibold text-blue-500 hover:underline&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">          <span class="token punctuation">{</span>product<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span>
<span class="line">        <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&#39;text-gray-500&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span>Rating value<span class="token operator">=</span><span class="token punctuation">{</span>product<span class="token operator">?.</span>rating<span class="token punctuation">}</span> text<span class="token operator">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>product<span class="token operator">?.</span>numReviews<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> reviews</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>h3 className<span class="token operator">=</span><span class="token string">&#39;text-2xl font-bold text-green-600&#39;</span><span class="token operator">&gt;</span>$<span class="token punctuation">{</span>product<span class="token punctuation">.</span>price<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">/</span>article<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now, update the <code>components/ProductList.tsx</code> file:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token comment">// components/ProductList.tsx</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> useStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nanostores/react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> errorProductList<span class="token punctuation">,</span> listProductRequest<span class="token punctuation">,</span> loadingProductList<span class="token punctuation">,</span> productListState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../state/products&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Heading <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./Heading&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Loader <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./Loader&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Message <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./Message&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Product <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./Product&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">ProductListProps</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> ProductList<span class="token operator">:</span> React<span class="token punctuation">.</span><span class="token constant">FC</span><span class="token operator">&lt;</span>ProductListProps<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> loading <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span>loadingProductList<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> error <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span>errorProductList<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> productList <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span>productListState<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">listProductRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token operator">&lt;</span>section className<span class="token operator">=</span><span class="token string">&#39;my-8 px-5&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>Heading text<span class="token operator">=</span><span class="token string">&#39;Amazing Products&#39;</span> <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">      <span class="token punctuation">{</span>loading <span class="token operator">&amp;&amp;</span> <span class="token operator">&lt;</span>Loader variant<span class="token operator">=</span><span class="token string">&#39;large&#39;</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">{</span>error <span class="token operator">&amp;&amp;</span> <span class="token operator">&lt;</span>Message variant<span class="token operator">=</span><span class="token string">&#39;danger&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>error<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>Message<span class="token operator">&gt;</span><span class="token punctuation">}</span></span>
<span class="line">      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&#39;flex justify-center&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&#39;flex flex-wrap gap-8 mx-auto max-w-[1800px] &#39;</span><span class="token operator">&gt;</span></span>
<span class="line">          <span class="token punctuation">{</span>productList<span class="token operator">?.</span>products<span class="token operator">?.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token operator">&lt;</span>Product product<span class="token operator">=</span><span class="token punctuation">{</span>product<span class="token punctuation">}</span> key<span class="token operator">=</span><span class="token punctuation">{</span>product<span class="token operator">?.</span>_id<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="line">        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">/</span>section<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>With that done, we can add the following code to the <code>index.astro</code> file to build our homepage:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// pages/index.astro</span></span>
<span class="line"></span>
<span class="line"><span class="token operator">--</span><span class="token operator">-</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> ProductList <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../components/ProductList&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> ShowCase <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../components/Showcase&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> Layout <span class="token keyword">from</span> <span class="token string">&#39;../layouts/Layout.astro&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token operator">--</span><span class="token operator">-</span></span>
<span class="line"></span>
<span class="line"><span class="token operator">&lt;</span>Layout title<span class="token operator">=</span><span class="token string">&#39;Astro Ecommerce&#39;</span> description<span class="token operator">=</span><span class="token string">&#39;We sell high quality stuff&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&#39;max-w-[1800px] mx-auto&#39;</span><span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span>ShowCase client<span class="token operator">:</span>load <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span>ProductList client<span class="token operator">:</span>load <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line"><span class="token operator">&lt;</span><span class="token operator">/</span>Layout<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Our homepage should now look similar to the below:</p><figure><img src="`+T+'" alt="Final Astro Ecommerce Project Homepage" tabindex="0" loading="lazy"><figcaption>Final Astro Ecommerce Project Homepage</figcaption></figure>',271)),n("p",null,[s[28]||(s[28]=a("You can get the ")),n("a",_,[s[25]||(s[25]=a("source code for the frontend on GitHub (")),p(d,{icon:"iconfont icon-github"}),s[26]||(s[26]=n("code",null,"bonarhyme/astro-ecommerce-frontend",-1)),s[27]||(s[27]=a(")"))]),s[29]||(s[29]=a("."))]),s[34]||(s[34]=n("hr",null,null,-1)),s[35]||(s[35]=n("h2",{id:"conclusion",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#conclusion"},[n("span",null,"Conclusion")])],-1)),s[36]||(s[36]=n("p",null,"In this article, we focused on constructing an ecommerce site using Astro with React and TypeScript integrations. Additionally, we integrated the site with a custom server for a comprehensive understanding. We also delved into the significance of strong and static typings in frontend projects.",-1)),s[37]||(s[37]=n("p",null,"Thanks for reading! I hope you enjoyed this article, and be sure to leave a comment if you have any questions. Happy coding!",-1)),b(" TODO: add ARTICLE CARD "),p(l,i(r({title:"Building high-performance ecommerce sites with Astro",desc:"Learn to set up a completely custom Astro ecommerce implementation that's also highly performant and type-safe in this straightforward guide.",link:"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/building-high-performance-ecommerce-sites-astro.html",logo:"/assets/image/blog.logrocket.com/favicon.png",background:"rgba(112,76,182,0.2)"})),null,16)])}const W=v(D,[["render",z]]),V=JSON.parse('{"path":"/blog.logrocket.com/building-high-performance-ecommerce-sites-astro.html","title":"Building high-performance ecommerce sites with Astro","lang":"en-US","frontmatter":{"lang":"en-US","title":"Building high-performance ecommerce sites with Astro","description":"Article(s) > Building high-performance ecommerce sites with Astro","icon":"iconfont icon-astro","category":["Node.js","Astro.js","Article(s)"],"tag":["blog","blog.logrocket.com","node","nodejs","node-js","astro","astrojs","astro-js"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Building high-performance ecommerce sites with Astro\\",\\"image\\":[\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/building-high-performance-ecommerce-sites-astro/banner.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/building-high-performance-ecommerce-sites-astro/img1-Astro-installation-setup.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/building-high-performance-ecommerce-sites-astro/img2-User-registration-page.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/building-high-performance-ecommerce-sites-astro/img3-User-login-page.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/building-high-performance-ecommerce-sites-astro/img4-Modifying-user-role-admin-MongoDB.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/building-high-performance-ecommerce-sites-astro/img5-Protected-routes-admin-role-UI.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/building-high-performance-ecommerce-sites-astro/img6-Dialog-form-admin-create-new-product.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/building-high-performance-ecommerce-sites-astro/img7-Table-admin-view-remove-products-list.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/building-high-performance-ecommerce-sites-astro/img8-Sample-product-details-page.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/building-high-performance-ecommerce-sites-astro/img9-Sample-cart-details-page.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/building-high-performance-ecommerce-sites-astro/img10-User-checkout-flow-shipping-page.avif\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/building-high-performance-ecommerce-sites-astro/img11-User-checkout-flow-payment-page.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/building-high-performance-ecommerce-sites-astro/img12-User-checkout-flow-place-order.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/building-high-performance-ecommerce-sites-astro/img13-Sample-order-details-page.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/building-high-performance-ecommerce-sites-astro/img14-Admin-order-management-page.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/building-high-performance-ecommerce-sites-astro/img15-Admin-user-management-page.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/building-high-performance-ecommerce-sites-astro/img16-User-account-management-page.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/building-high-performance-ecommerce-sites-astro/img17-Final-Astro-ecommerce-project-homepage.png\\"],\\"datePublished\\":\\"2024-02-28T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Onuorah Bonaventure\\",\\"url\\":\\"https://blog.logrocket.com/author/onuorahbonaventure/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/building-high-performance-ecommerce-sites-astro.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Building high-performance ecommerce sites with Astro"}],["meta",{"property":"og:description","content":"Article(s) > Building high-performance ecommerce sites with Astro"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/building-high-performance-ecommerce-sites-astro/banner.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/building-high-performance-ecommerce-sites-astro/banner.png"}],["meta",{"name":"twitter:image:alt","content":"Building high-performance ecommerce sites with Astro"}],["meta",{"property":"article:author","content":"Onuorah Bonaventure"}],["meta",{"property":"article:tag","content":"astro-js"}],["meta",{"property":"article:tag","content":"astrojs"}],["meta",{"property":"article:tag","content":"astro"}],["meta",{"property":"article:tag","content":"node-js"}],["meta",{"property":"article:tag","content":"nodejs"}],["meta",{"property":"article:tag","content":"node"}],["meta",{"property":"article:tag","content":"blog.logrocket.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2024-02-28T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Building high-performance ecommerce sites with Astro"},{"property":"og:description","content":"Building high-performance ecommerce sites with Astro"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/building-high-performance-ecommerce-sites-astro.html"}]],"prev":"/programming/js-astro/articles/README.md","date":"2024-02-28T00:00:00.000Z","isOriginal":false,"author":[{"name":"Onuorah Bonaventure","url":"https://blog.logrocket.com/author/onuorahbonaventure/"}],"cover":"/assets/image/blog.logrocket.com/building-high-performance-ecommerce-sites-astro/banner.png"},"git":{},"readingTime":{"minutes":54.56,"words":16367},"filePathRelative":"blog.logrocket.com/building-high-performance-ecommerce-sites-astro.md","copyright":{"author":"Onuorah Bonaventure"}}');export{W as comp,V as data};
