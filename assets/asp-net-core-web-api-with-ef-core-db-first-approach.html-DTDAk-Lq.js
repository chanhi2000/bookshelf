import{_ as k}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as m,d as s,f as e,b as o,t as h,n as b,g as v,w as t,e as a,r as i,o as g}from"./app-BVguHYKu.js";const y="/bookshelf/assets/image/code-maze.com/asp-net-core-web-api-with-ef-core-db-first-approach/DB_Diagram.jpg",w="/bookshelf/assets/image/code-maze.com/asp-net-core-web-api-with-ef-core-db-first-approach/Tables_With_Data.jpg",f="/bookshelf/assets/image/code-maze.com/asp-net-core-web-api-with-ef-core-db-first-approach/Generated-Classes.jpg",A="/bookshelf/assets/image/code-maze.com/asp-net-core-web-api-with-ef-core-db-first-approach/GET_All_Authors.jpg",T="/bookshelf/assets/image/code-maze.com/asp-net-core-web-api-with-ef-core-db-first-approach/GetAll_Profiler.jpg",C="/bookshelf/assets/image/code-maze.com/asp-net-core-web-api-with-ef-core-db-first-approach/GET_Book.jpg",E="/bookshelf/assets/image/code-maze.com/asp-net-core-web-api-with-ef-core-db-first-approach/GET_Book_Profiler.jpg",I="/bookshelf/assets/image/code-maze.com/asp-net-core-web-api-with-ef-core-db-first-approach/Get_Author.jpg",B="/bookshelf/assets/image/code-maze.com/asp-net-core-web-api-with-ef-core-db-first-approach/Get_Author_Profiler.jpg",D="/bookshelf/assets/image/code-maze.com/asp-net-core-web-api-with-ef-core-db-first-approach/POST_Author-3.jpg",P="/bookshelf/assets/image/code-maze.com/asp-net-core-web-api-with-ef-core-db-first-approach/INSERT_Profiler.jpg",N="/bookshelf/assets/image/code-maze.com/asp-net-core-web-api-with-ef-core-db-first-approach/DB_Result_After_POST-1.jpg",_="/bookshelf/assets/image/code-maze.com/asp-net-core-web-api-with-ef-core-db-first-approach/POST_Author.jpg",R="/bookshelf/assets/image/code-maze.com/asp-net-core-web-api-with-ef-core-db-first-approach/UPDATE_Profiler.jpg",S="/bookshelf/assets/image/code-maze.com/asp-net-core-web-api-with-ef-core-db-first-approach/DB_Result_After_POST.jpg",x="/bookshelf/assets/image/code-maze.com/asp-net-core-web-api-with-ef-core-db-first-approach/DELETE_Publisher.jpg",L="/bookshelf/assets/image/code-maze.com/asp-net-core-web-api-with-ef-core-db-first-approach/DELETE_Profiler.jpg",z="/bookshelf/assets/image/code-maze.com/asp-net-core-web-api-with-ef-core-db-first-approach/DB_Result_After_DELETE.jpg",q={},O={id:"frontmatter-title-관련",tabindex:"-1"},F={class:"header-anchor",href:"#frontmatter-title-관련"},G={class:"table-of-contents"},M={class:"hint-container info"},j={href:"https://github.com/CodeMazeBlog/ef-db-first",target:"_blank",rel:"noopener noreferrer"},U={class:"hint-container note"},W={class:"hint-container note"};function H(u,n){const r=i("VPCard"),p=i("router-link"),c=i("SiteInfo"),d=i("VPIcon"),l=i("RouteLink");return g(),m("div",null,[s("h1",O,[s("a",F,[s("span",null,h(u.$frontmatter.title)+" 관련",1)])]),e(r,b(v({title:"C# > Article(s)",desc:"Article(s)",link:"/programming/cs/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",G,[s("ul",null,[s("li",null,[e(p,{to:"#creating-a-database-and-tables"},{default:t(()=>n[0]||(n[0]=[a("Creating a Database and Tables")])),_:1,__:[0]}),s("ul",null,[s("li",null,[e(p,{to:"#database-design-explained"},{default:t(()=>n[1]||(n[1]=[a("Database design explained")])),_:1,__:[1]})]),s("li",null,[e(p,{to:"#inserting-test-data"},{default:t(()=>n[2]||(n[2]=[a("Inserting Test Data")])),_:1,__:[2]})])])]),s("li",null,[e(p,{to:"#data-modelling-creating-models-and-a-context"},{default:t(()=>n[3]||(n[3]=[a("Data Modelling - Creating Models and a Context")])),_:1,__:[3]}),s("ul",null,[s("li",null,[e(p,{to:"#creating-models"},{default:t(()=>n[4]||(n[4]=[a("Creating Models")])),_:1,__:[4]})])])]),s("li",null,[e(p,{to:"#creating-a-repository"},{default:t(()=>n[5]||(n[5]=[a("Creating a Repository")])),_:1,__:[5]}),s("ul",null,[s("li",null,[e(p,{to:"#querying-loading-related-data"},{default:t(()=>n[6]||(n[6]=[a("Querying & Loading Related Data")])),_:1,__:[6]})]),s("li",null,[e(p,{to:"#saving-related-data"},{default:t(()=>n[7]||(n[7]=[a("Saving Related Data")])),_:1,__:[7]})])])]),s("li",null,[e(p,{to:"#creating-the-api-controller"},{default:t(()=>n[8]||(n[8]=[a("Creating the API Controller")])),_:1,__:[8]})]),s("li",null,[e(p,{to:"#testing-the-api"},{default:t(()=>n[9]||(n[9]=[a("Testing the API")])),_:1,__:[9]}),s("ul",null,[s("li",null,[e(p,{to:"#loading-the-data"},{default:t(()=>n[10]||(n[10]=[a("Loading the Data")])),_:1,__:[10]})]),s("li",null,[e(p,{to:"#updating-data"},{default:t(()=>n[11]||(n[11]=[a("Updating Data")])),_:1,__:[11]})])])]),s("li",null,[e(p,{to:"#conclusion"},{default:t(()=>n[12]||(n[12]=[a("Conclusion")])),_:1,__:[12]})])])]),n[34]||(n[34]=s("hr",null,null,-1)),e(c,{name:"ASP.NET Core Web API with EF Core DB-First Approach",desc:"In this article, we’ll take a look at the EF Core Database-First approach. In this approach, we create our database first and then model our entities.",url:"https://code-maze.com/asp-net-core-web-api-with-ef-core-db-first-approach/",logo:"/assets/image/code-maze.com/favicon.png",preview:"/assets/image/asp-net-core-web-api-with-ef-core-db-first-approach/banner.png"}),n[35]||(n[35]=o("<p>In this article, we’ll take a look at the EF Core Database-First approach. In this approach, we create our database first. We then model our entities. This approach is useful when we work with an existing database. This is also useful when we migrate from existing applications.</p><p>A relational database deals with related data. So, we’ll also take a look at different types of relationships in the database and how we can represent those while modeling our entities.</p><p>There are 3 types of relationships in relational database design:</p><ul><li><strong>One-to-One</strong> - A row in <strong>Table A</strong> can have only one matching row in <strong>Table B</strong>, and vice versa.</li><li><strong>One-to-Many (or Many-to-One)</strong> - A row in <strong>Table A</strong> can have many matching rows in table B, but a row in table B can have only one matching row in <strong>Table A</strong>.</li><li><strong>Many-to-Many</strong>- A row in <strong>Table A</strong> can have many matching rows in <strong>Table B</strong>, and vice versa.</li></ul>",4)),s("div",M,[n[18]||(n[18]=s("p",{class:"hint-container-title"},"Info",-1)),s("p",null,[n[16]||(n[16]=a("You can download the source code for this article, on the ")),s("a",j,[n[13]||(n[13]=a("EF DB First Approach Source Code repo (")),e(d,{icon:"iconfont icon-github"}),n[14]||(n[14]=s("code",null,'CodeMazeBlog/ef-db-first"',-1)),n[15]||(n[15]=a(")"))]),n[17]||(n[17]=a("."))]),e(c,{name:"CodeMazeBlog/ef-db-first",desc:"This repository contains source code for the ASP.NET Core Web API with EF Core DB-First Approach blog on Code Maze",url:"https://github.com/CodeMazeBlog/ef-db-first",logo:"https://avatars.githubusercontent.com/u/29179238?v=4",preview:"https://opengraph.githubassets.com/1b60911680f18d2b778b30308c1ebb431c3dd53033728154b2dd40e2fb335db4/CodeMazeBlog/ef-db-first"})]),n[36]||(n[36]=o(`<hr><h2 id="creating-a-database-and-tables" tabindex="-1"><a class="header-anchor" href="#creating-a-database-and-tables"><span>Creating a Database and Tables</span></a></h2><p>As the first step, we are going to create the database and tables.</p><p>So for example, let’s create a database to manage books. We are going to create tables for storing information about <code>Books</code>, <code>Authors</code>, <code>Publishers</code> etc. and establish relationships between them.</p><p>This is the complete SQL script for creating database tables and relationships.</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> BookStore </span>
<span class="line"></span>
<span class="line">GO </span>
<span class="line"></span>
<span class="line"><span class="token keyword">USE</span> BookStore </span>
<span class="line"></span>
<span class="line">GO </span>
<span class="line"></span>
<span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> Author </span>
<span class="line">  <span class="token punctuation">(</span> </span>
<span class="line">     Id   <span class="token keyword">BIGINT</span> <span class="token keyword">IDENTITY</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> </span>
<span class="line">     NAME NVARCHAR<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> </span>
<span class="line">     <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>Id<span class="token punctuation">)</span> </span>
<span class="line">  <span class="token punctuation">)</span> </span>
<span class="line"></span>
<span class="line">GO </span>
<span class="line"></span>
<span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> AuthorContact </span>
<span class="line">  <span class="token punctuation">(</span> </span>
<span class="line">     AuthorId      <span class="token keyword">BIGINT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> </span>
<span class="line">     ContactNumber NVARCHAR<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> </span>
<span class="line">     Address       NVARCHAR<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> </span>
<span class="line">     <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>AuthorId<span class="token punctuation">)</span><span class="token punctuation">,</span> </span>
<span class="line">     <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>AuthorId<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> Author<span class="token punctuation">(</span>Id<span class="token punctuation">)</span> </span>
<span class="line">  <span class="token punctuation">)</span> </span>
<span class="line"></span>
<span class="line">GO </span>
<span class="line"></span>
<span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> BookCategory </span>
<span class="line">  <span class="token punctuation">(</span> </span>
<span class="line">     Id   <span class="token keyword">BIGINT</span> <span class="token keyword">IDENTITY</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> </span>
<span class="line">     NAME NVARCHAR<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> </span>
<span class="line">     <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>Id<span class="token punctuation">)</span> </span>
<span class="line">  <span class="token punctuation">)</span> </span>
<span class="line"></span>
<span class="line">GO </span>
<span class="line"></span>
<span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> Publisher </span>
<span class="line">  <span class="token punctuation">(</span> </span>
<span class="line">     Id   <span class="token keyword">BIGINT</span> <span class="token keyword">IDENTITY</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> </span>
<span class="line">     NAME NVARCHAR<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> </span>
<span class="line">     <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>Id<span class="token punctuation">)</span> </span>
<span class="line">  <span class="token punctuation">)</span> </span>
<span class="line"></span>
<span class="line">GO </span>
<span class="line"></span>
<span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> Book </span>
<span class="line">  <span class="token punctuation">(</span> </span>
<span class="line">     Id          <span class="token keyword">BIGINT</span> <span class="token keyword">IDENTITY</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> </span>
<span class="line">     Title       NVARCHAR<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> </span>
<span class="line">     CategoryId  <span class="token keyword">BIGINT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> </span>
<span class="line">     PublisherId <span class="token keyword">BIGINT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> </span>
<span class="line">     <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>Id<span class="token punctuation">)</span><span class="token punctuation">,</span> </span>
<span class="line">     <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>CategoryId<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> BookCategory<span class="token punctuation">(</span>Id<span class="token punctuation">)</span><span class="token punctuation">,</span> </span>
<span class="line">     <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>PublisherId<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> Publisher<span class="token punctuation">(</span>Id<span class="token punctuation">)</span> </span>
<span class="line">  <span class="token punctuation">)</span> </span>
<span class="line"></span>
<span class="line">GO </span>
<span class="line"></span>
<span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> BookAuthors </span>
<span class="line">  <span class="token punctuation">(</span> </span>
<span class="line">     BookId   <span class="token keyword">BIGINT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> </span>
<span class="line">     AuthorId <span class="token keyword">BIGINT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> </span>
<span class="line">     <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>BookId<span class="token punctuation">,</span> AuthorId<span class="token punctuation">)</span><span class="token punctuation">,</span> </span>
<span class="line">     <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>BookId<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> Book<span class="token punctuation">(</span>Id<span class="token punctuation">)</span><span class="token punctuation">,</span> </span>
<span class="line">     <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>AuthorId<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> Author<span class="token punctuation">(</span>Id<span class="token punctuation">)</span> </span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>After running the script, we can see the tables and relationships created as below:</p><figure><img src="`+y+`" alt="DB Diagram" tabindex="0" loading="lazy"><figcaption>DB Diagram</figcaption></figure><h3 id="database-design-explained" tabindex="-1"><a class="header-anchor" href="#database-design-explained"><span>Database design explained</span></a></h3><h4 id="tables" tabindex="-1"><a class="header-anchor" href="#tables"><span>Tables</span></a></h4><ul><li><code>Author</code>- Stores the information about the authors.</li><li><code>AuthorContact</code>- Contains the contact information about the authors.</li><li><code>Book</code>- Stores the information about the books.</li><li><code>Publisher</code>- Keeps the information about the publishers.</li><li><code>BookCategory</code>- Keeps the master list of all the categories.</li><li><code>BookAuthors</code>- Represents the mapping between the books and the authors.</li></ul><h4 id="relationships" tabindex="-1"><a class="header-anchor" href="#relationships"><span>Relationships</span></a></h4><p>Let’s take a look at how we implement the different types of relationships in our database design.</p><h5 id="one-to-one-1-1" tabindex="-1"><a class="header-anchor" href="#one-to-one-1-1"><span>One-to-One(1:1)</span></a></h5><p>In the above design, <code>Author</code>and<code>AuthorContact</code> have a 1:1 relationship between them. Each entry in the<code>Author</code> table has a corresponding entry in the<code>AuthorContact</code> table. They are related by the<code>AuthorId</code> foreign key.</p><p>This type of relationship is not very common. We could also keep the author contact information in the<code>Author</code> table. But in certain scenarios, there could be some valid reasons to split out information into different tables like security, performance etc.</p><h5 id="one-to-many-1-n" tabindex="-1"><a class="header-anchor" href="#one-to-many-1-n"><span>One-to-Many(1:N)</span></a></h5><p>In the above design, <code>Publisher</code>and<code>Book</code> have a 1:N relationship between them. A publisher can publish many books, but a book can have only one publisher. They are related by the<code>PublisherId</code> foreign key.</p><p>This is the most common type of relationship in any database.</p><h5 id="many-to-many-m-n" tabindex="-1"><a class="header-anchor" href="#many-to-many-m-n"><span>Many-to-Many(M:N)</span></a></h5><p>In the above design, <code>Book</code>and<code>Author</code> have an M:N relationships between them. A book can have many authors and at the same time, an author can write many books. They are related by an intermediate table<code>BookAuthors.</code> This is also called an associative or junction table.</p><p>We can translate an M:N relationship to two 1:N relationships, but linked by an intermediary table.</p><h3 id="inserting-test-data" tabindex="-1"><a class="header-anchor" href="#inserting-test-data"><span>Inserting Test Data</span></a></h3><p>Now that we have created our tables and established relationships between them, let’s insert some test data into them. Let’s use the below DB script to insert data:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> BookCategory</span>
<span class="line"><span class="token keyword">VALUES</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token string">&#39;Fantasy Fiction&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token string">&#39;Spirituality&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token string">&#39;Fiction&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token string">&#39;Science Fiction&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> Publisher</span>
<span class="line"><span class="token keyword">VALUES</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token string">&#39;HarperCollins&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token string">&#39;New World Library&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token string">&#39;Oneworld Publications&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> Author</span>
<span class="line"><span class="token keyword">VALUES</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token string">&#39;Paulo Coelho&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token string">&#39;Eckhart Tolle&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token string">&#39;Amie Kaufman&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token string">&#39;Jay Kristoff&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> AuthorContact</span>
<span class="line"><span class="token keyword">VALUES</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;111-222-3333&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;133 salas 601 / 602, Rio de Janeiro 22070-010. BRAZIL&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;444-555-6666&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;933 Seymour St, Vancouver, BC V6B 6L6, Canada&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;777-888-9999&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Mentone 3194. Victoria. AUSTRALIA&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">&#39;222-333-4444&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;234 Collins Street, Melbourne, VIC, AUSTRALIA&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> Book</span>
<span class="line"><span class="token keyword">VALUES</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token string">&#39;The Alchemist&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token string">&#39;The Power of Now&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token string">&#39;Eleven Minutes&#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token string">&#39;Illuminae&#39;</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> BookAuthors</span>
<span class="line"><span class="token keyword">VALUES</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>After running the above insert script, our database tables will look like this</p><figure><img src="`+w+'" alt="Tables With Data" tabindex="0" loading="lazy"><figcaption>Tables With Data</figcaption></figure><hr><h2 id="data-modelling-creating-models-and-a-context" tabindex="-1"><a class="header-anchor" href="#data-modelling-creating-models-and-a-context"><span>Data Modelling - Creating Models and a Context</span></a></h2><p>So, now we have our database tables with data. Let’s model our entities based on those.</p>',30)),s("p",null,[n[20]||(n[20]=a("As a first step, let’s set up an ASP.NET Core Web API Project. We have explained this in detail in one of our other articles: ")),e(l,{to:"/code-maze.com/net-core-web-development-part2.html"},{default:t(()=>n[19]||(n[19]=[a("Creating and configuring a new ASP.NET Core Web API project.")])),_:1,__:[19]})]),n[37]||(n[37]=o(`<p>The article linked above covers a lot of additional topics. You may go through the entire article if you want to, but the section linked above is quite enough to follow along with this article.</p><p>Following the article linked above, let’s create a new project called<code>EFCoreDatabaseFirstSample</code>.</p><h3 id="creating-models" tabindex="-1"><a class="header-anchor" href="#creating-models"><span>Creating Models</span></a></h3><p>Now it’s time to create the EF model based on our existing database.</p><p>Go to <strong>Tools -&gt; NuGet Package Manager -&gt; Package Manager Console</strong></p><p>First, we need to install the following packages :</p><div class="language-powershell line-numbers-mode" data-highlighter="prismjs" data-ext="powershell"><pre><code class="language-powershell"><span class="line"><span class="token function">Install-Package</span> Microsoft<span class="token punctuation">.</span>EntityFrameworkCore<span class="token punctuation">.</span>Tools</span>
<span class="line"><span class="token function">Install-Package</span> Microsoft<span class="token punctuation">.</span>EntityFrameworkCore<span class="token punctuation">.</span>SqlServer</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Then, we can create the models from the existing database using <code>Scaffold-DbContext</code> command:</p><div class="language-powershell line-numbers-mode" data-highlighter="prismjs" data-ext="powershell"><pre><code class="language-powershell"><span class="line">Scaffold-DbContext <span class="token string">&quot;Server=.;Database=BookStore;Trusted_Connection=True;&quot;</span> </span>
<span class="line">Microsoft<span class="token punctuation">.</span>EntityFrameworkCore<span class="token punctuation">.</span>SqlServer <span class="token operator">-</span>OutputDir Models</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>The above command will generate the following classes:</p><figure><img src="`+f+`" alt="Generated Classes" tabindex="0" loading="lazy"><figcaption>Generated Classes</figcaption></figure><p><code>BookStoreContext</code> is the DB context class and other classes are the models.</p><p>Now, let’s look at how EF Core represents the relationships.</p><h4 id="one-to-one-1-1-1" tabindex="-1"><a class="header-anchor" href="#one-to-one-1-1-1"><span>One-to-One (1:1)</span></a></h4><p>Let’s take a look at the <code>Author</code> class:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">partial</span> <span class="token keyword">class</span> <span class="token class-name">Author</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token function">Author</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        BookAuthors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HashSet<span class="token punctuation">&lt;</span> BookAuthors<span class="token punctuation">&gt;</span></span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">long</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token return-type class-name">AuthorContact</span> AuthorContact <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token return-type class-name">ICollection<span class="token punctuation">&lt;</span> BookAuthors<span class="token punctuation">&gt;</span></span>  BookAuthors <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Remember that the<code>Author</code> has a 1:1 relationship with the<code>AuthorContact</code>. To represent this we have an<code>AuthorContact</code>property in the<code>Author</code> class. This is called the <strong>Navigation Property.</strong></p><h4 id="one-to-many-1-n-1" tabindex="-1"><a class="header-anchor" href="#one-to-many-1-n-1"><span>One-to-Many (1:N)</span></a></h4><p>Let’s take a look at the <code>Publisher</code> &amp; <code>Book</code> classes:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">partial</span> <span class="token keyword">class</span> <span class="token class-name">Publisher</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token function">Publisher</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        Books <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HashSet<span class="token punctuation">&lt;</span> Book<span class="token punctuation">&gt;</span></span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">long</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token return-type class-name">ICollection<span class="token punctuation">&lt;</span> Book<span class="token punctuation">&gt;</span></span>  Books <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">partial</span> <span class="token keyword">class</span> <span class="token class-name">Book</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token function">Book</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        BookAuthors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HashSet<span class="token punctuation">&lt;</span> BookAuthors<span class="token punctuation">&gt;</span></span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">long</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Title <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">long</span></span> CategoryId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">long</span></span> PublisherId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token return-type class-name">BookCategory</span> Category <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token return-type class-name">Publisher</span> Publisher <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token return-type class-name">ICollection<span class="token punctuation">&lt;</span> BookAuthors<span class="token punctuation">&gt;</span></span>  BookAuthors <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Remember that the<code>Publisher</code>has a 1:N relationship with the<code>Book</code>.</p><p>Here, the <code>Publisher</code> is called the <strong>Principal Entity</strong> and the <code>Book</code> is called <strong>Dependent Entity</strong>.</p><p><code>Publisher.PublisherId</code> is the <strong>Principal Key</strong> and <code>Book.PublisherId</code> is the <strong>Foreign Key.</strong></p><p><code>Publisher.Books</code> is the <strong>Collection Navigation</strong> property.</p><p><code>Book</code>.Publisher is the <strong>Reference Navigation</strong> property.</p><h4 id="many-to-many-m-n-1" tabindex="-1"><a class="header-anchor" href="#many-to-many-m-n-1"><span>Many-to-Many (M:N)</span></a></h4><div class="hint-container note"><p class="hint-container-title">Note</p><p>As of now, EF Core does not support many-to-many relationships without using an entity class for representing the join table. However, we can represent it by using an entity class for the join table. We could then map two separate one-to-many relationships.</p></div><p>Let’s take a look at the <code>Book</code>, <code>Author</code> &amp; <code>BookAuthors</code> classes. <em>(<code>Book</code> and <code>Author</code> classes are already shown above):</em></p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">partial</span> <span class="token keyword">class</span> <span class="token class-name">BookAuthors</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">long</span></span> BookId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">long</span></span> AuthorId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token return-type class-name">Author</span> Author <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token return-type class-name">Book</span> Book <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We can see that both the <code>Book</code> and the <code>Author</code> has a collection navigation property<code>BookAuthors</code>. We have established the M:N relationship between the<code>Book</code> and the <code>Author</code> by these two 1:N relationships.</p>`,30)),s("div",U,[n[24]||(n[24]=s("p",{class:"hint-container-title"},"Recommendation",-1)),s("p",null,[n[22]||(n[22]=a("For an even better understanding of Entity Framework Core, we strongly suggest reading our ")),e(l,{to:"/code-maze.com/entity-framework-core-series.html"},{default:t(()=>n[21]||(n[21]=[a("Entity Framework Core Series")])),_:1,__:[21]}),n[23]||(n[23]=a(". There, you can find a lot of information related to different EF Core features."))])]),n[38]||(n[38]=s("hr",null,null,-1)),n[39]||(n[39]=s("h2",{id:"creating-a-repository",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#creating-a-repository"},[s("span",null,"Creating a Repository")])],-1)),s("p",null,[n[26]||(n[26]=a("Now that we have successfully created the models and context, let’s implement a simple data repository using the repository pattern. We have explained this pattern in detail in one of our other articles: ")),e(l,{to:"/code-maze.com/net-core-web-development-part4.html"},{default:t(()=>n[25]||(n[25]=[a("Implementing the repository pattern")])),_:1,__:[25]}),n[27]||(n[27]=a(". If you get stuck with the code, you can always refer to the mentioned article and to our source code for this article, as well."))]),n[40]||(n[40]=o(`<p>Let’s add a new folder under Models and name it <code>Repository</code>. We’ll then create a new interface called <code>IDataRepository</code>:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IDataRepository<span class="token punctuation">&lt;</span> TEntity<span class="token punctuation">,</span> TDto<span class="token punctuation">&gt;</span></span> </span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span> TEntity<span class="token punctuation">&gt;</span></span>  <span class="token function">GetAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token return-type class-name">TEntity</span> <span class="token function">Get</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">long</span></span> id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token return-type class-name">TDto</span> <span class="token function">GetDto</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">long</span></span> id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token class-name">TEntity</span> entity<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token class-name">TEntity</span> entityToUpdate<span class="token punctuation">,</span> <span class="token class-name">TEntity</span> entity<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Delete</span><span class="token punctuation">(</span><span class="token class-name">TEntity</span> entity<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We will later inject this interface into our controller. Then the API will communicate with the data context using this interface. Of course, we are going to register all the repo services in the <code>Startup</code> class, as you can find out by your self in our source code.</p><p>Next, let’s create concrete classes that implement the<code>IDataRepository</code> interface. We’ll add a new folder under Models called <code>DataManager</code>.</p><p>Let’s keep things simple and focus on implementing only the required functions.</p><h3 id="querying-loading-related-data" tabindex="-1"><a class="header-anchor" href="#querying-loading-related-data"><span>Querying &amp; Loading Related Data</span></a></h3><p>EF Core uses navigation properties in our model to load related entities. We use three common ORM patterns for loading related data.</p><p>When we use eager loading, we load the related data from the database as part of the initial query.</p><p>Explicit loading means that we load the related data explicitly from the database at a later time.</p><p>Lazy loading is a way of loading the related data from the database when we access the navigation property.</p><h4 id="eager-loading" tabindex="-1"><a class="header-anchor" href="#eager-loading"><span>Eager loading</span></a></h4><p>We can use the<code>Include</code>method to specify related data that need to be included in the query results. In the following example, the <code>Authors</code> that are returned in the results will have their <code>AuthorContacts</code> property auto-populated.</p><p>Let’s add a new class <code>AuthorDataManager</code> which implements the<code>IDataRepository</code> in the <code>DataManager</code> folder, and register it in the <code>Startup</code> class.</p><p>We’ll then implement the <code>GetAll()</code>:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span> Author<span class="token punctuation">&gt;</span></span>  <span class="token function">GetAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> _bookStoreContext<span class="token punctuation">.</span>Author</span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">Include</span><span class="token punctuation">(</span>author <span class="token operator">=&gt;</span>  author<span class="token punctuation">.</span>AuthorContact<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The above code loads all the authors with their contact details at once since we are using eager loading. We shall verify this later when we test it.</p><h4 id="explicit-loading" tabindex="-1"><a class="header-anchor" href="#explicit-loading"><span>Explicit loading</span></a></h4><p>We can explicitly load a navigation property using the <code>DbContext.Entry()</code>.</p><p>Let’s add a new class <code>BookDataManager</code> which implements the <code>IDataRepository</code> interface and register it in the <code>Startup</code> class as well.</p><p>We’ll then implement the <code>Get()</code>method:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token return-type class-name">Book</span> <span class="token function">Get</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">long</span></span> id<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    _bookStoreContext<span class="token punctuation">.</span>ChangeTracker<span class="token punctuation">.</span>LazyLoadingEnabled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> book <span class="token operator">=</span> _bookStoreContext<span class="token punctuation">.</span>Book</span>
<span class="line">          <span class="token punctuation">.</span><span class="token function">SingleOrDefault</span><span class="token punctuation">(</span>b <span class="token operator">=&gt;</span>  b<span class="token punctuation">.</span>Id <span class="token operator">==</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>book <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">       <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    _bookStoreContext<span class="token punctuation">.</span><span class="token function">Entry</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">Collection</span><span class="token punctuation">(</span>b <span class="token operator">=&gt;</span>  b<span class="token punctuation">.</span>BookAuthors<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    _bookStoreContext<span class="token punctuation">.</span><span class="token function">Entry</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">Reference</span><span class="token punctuation">(</span>b <span class="token operator">=&gt;</span>  b<span class="token punctuation">.</span>Publisher<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            </span>
<span class="line">    <span class="token keyword">return</span> book<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The above code is used to get the details of a <code>Book</code>. See how we are explicitly loading the list of <code>BookAuthors</code> and <code>Publisher</code> later. We’ll verify the explicit loading behavior later when we test this functionality.</p><h4 id="lazy-loading" tabindex="-1"><a class="header-anchor" href="#lazy-loading"><span>Lazy loading</span></a></h4><p>The simplest way to use lazy-loading is by installing the <code>Microsoft.EntityFrameworkCore.Proxies</code> package and enabling it with a call to <code>UseLazyLoadingProxies</code>.</p><p>This is shown in the below code</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnConfiguring</span><span class="token punctuation">(</span><span class="token class-name">DbContextOptionsBuilder</span> optionsBuilder<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>optionsBuilder<span class="token punctuation">.</span>IsConfigured<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        optionsBuilder</span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">UseLazyLoadingProxies</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">UseSqlServer</span><span class="token punctuation">(</span><span class="token string">&quot;Server=.;Database=BookStore;Trusted_Connection=True;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>EF Core will then enable lazy loading for any navigation property that can be overridden. Only thing is that it must be virtual and on a class that can be inherited from.</p><p>For example, in the below <code>Author</code>class, the <code>BookAuthors</code> navigation property will be lazy-loaded:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">partial</span> <span class="token keyword">class</span> <span class="token class-name">Author</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">long</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token return-type class-name">AuthorContact</span> AuthorContact <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token return-type class-name">ICollection<span class="token punctuation">&lt;</span> BookAuthors<span class="token punctuation">&gt;</span></span>  BookAuthors <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Let’s then disable lazy-loading at a context level. This helps to avoid circular referencing issues:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token function">BookStoreContext</span><span class="token punctuation">(</span><span class="token class-name">DbContextOptions<span class="token punctuation">&lt;</span> BooksStoreContext<span class="token punctuation">&gt;</span></span>  options<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    ChangeTracker<span class="token punctuation">.</span>LazyLoadingEnabled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We’ll enable lazy-loading explicitly when we need to utilize it.</p><p>Let’s implement the <code>GetDto()</code> method in the <code>AuthorDataManager</code>class:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token return-type class-name">AuthorDto</span> <span class="token function">GetDto</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">long</span></span> id<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    _bookStoreContext<span class="token punctuation">.</span>ChangeTracker<span class="token punctuation">.</span>LazyLoadingEnabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">BookStoreContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">       <span class="token class-name"><span class="token keyword">var</span></span> author <span class="token operator">=</span> context<span class="token punctuation">.</span>Author</span>
<span class="line">           <span class="token punctuation">.</span><span class="token function">SingleOrDefault</span><span class="token punctuation">(</span>b <span class="token operator">=&gt;</span>  b<span class="token punctuation">.</span>Id <span class="token operator">==</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">       <span class="token keyword">return</span> AuthorDtoMapper<span class="token punctuation">.</span><span class="token function">MapToDto</span><span class="token punctuation">(</span>author<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AuthorDto</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token function">AuthorDto</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">long</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">AuthorContactDto</span> AuthorContact <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">AuthorDtoMapper</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">AuthorDto</span> <span class="token function">MapToDto</span><span class="token punctuation">(</span><span class="token class-name">Author</span> author<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AuthorDto</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            Id <span class="token operator">=</span> author<span class="token punctuation">.</span>Id<span class="token punctuation">,</span></span>
<span class="line">            Name <span class="token operator">=</span> author<span class="token punctuation">.</span>Name<span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">            AuthorContact <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AuthorContactDto</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">{</span></span>
<span class="line">                AuthorId <span class="token operator">=</span> author<span class="token punctuation">.</span>Id<span class="token punctuation">,</span></span>
<span class="line">                Address <span class="token operator">=</span> author<span class="token punctuation">.</span>AuthorContact<span class="token punctuation">.</span>Address<span class="token punctuation">,</span></span>
<span class="line">                ContactNumber <span class="token operator">=</span> author<span class="token punctuation">.</span>AuthorContact<span class="token punctuation">.</span>ContactNumber</span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In the code above, since we are using lazy loading, only the <code>Author</code> entity will be loaded initially. Later the <code>AuthorContact</code> property will be loaded only when we reference it inside the DTO mapper. We’ll verify this behavior later when we test this.</p><div class="hint-container note"><p class="hint-container-title">Note</p><p>The referenced property can be lazy-loaded only inside the scope of the data context class. Once the context is out of scope, we will no longer have access to those.</p></div><h3 id="saving-related-data" tabindex="-1"><a class="header-anchor" href="#saving-related-data"><span>Saving Related Data</span></a></h3><p>In this section, we’ll explain how we can <code>Add</code>, <code>Update</code> and <code>Delete</code> related entities.</p><h4 id="add" tabindex="-1"><a class="header-anchor" href="#add"><span>Add</span></a></h4><p>If we create several new related entities, adding one of them to the context will cause the others to be added too.</p><p>For example, in the below code, let’s implement the <code>Add()</code> method in <code>AuthorDataManager</code>.</p><p>This will cause both <code>Author</code> and <code>AuthorContact</code> entities to be created:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token class-name">Author</span> entity<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    _bookStoreContext<span class="token punctuation">.</span>Author<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    _bookStoreContext<span class="token punctuation">.</span><span class="token function">SaveChanges</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="update" tabindex="-1"><a class="header-anchor" href="#update"><span>Update</span></a></h4><p>Now let’s implement the update. The below code implements the <code>Update()</code> method in <code>AuthorDataManager</code> class:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token class-name">Author</span> entityToUpdate<span class="token punctuation">,</span> <span class="token class-name">Author</span> entity<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    entityToUpdate <span class="token operator">=</span> _bookStoreContext<span class="token punctuation">.</span>Author</span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">Include</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span>  a<span class="token punctuation">.</span>BookAuthors<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">Include</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span>  a<span class="token punctuation">.</span>AuthorContact<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">Single</span><span class="token punctuation">(</span>b <span class="token operator">=&gt;</span>  b<span class="token punctuation">.</span>Id <span class="token operator">==</span> entityToUpdate<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    entityToUpdate<span class="token punctuation">.</span>Name <span class="token operator">=</span> entity<span class="token punctuation">.</span>Name<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    entityToUpdate<span class="token punctuation">.</span>AuthorContact<span class="token punctuation">.</span>Address <span class="token operator">=</span> entity<span class="token punctuation">.</span>AuthorContact<span class="token punctuation">.</span>Address<span class="token punctuation">;</span></span>
<span class="line">    entityToUpdate<span class="token punctuation">.</span>AuthorContact<span class="token punctuation">.</span>ContactNumber <span class="token operator">=</span> entity<span class="token punctuation">.</span>AuthorContact<span class="token punctuation">.</span>ContactNumber<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> deletedBooks <span class="token operator">=</span> entityToUpdate<span class="token punctuation">.</span>BookAuthors<span class="token punctuation">.</span><span class="token function">Except</span><span class="token punctuation">(</span>entity<span class="token punctuation">.</span>BookAuthors<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> addedBooks <span class="token operator">=</span> entity<span class="token punctuation">.</span>BookAuthors<span class="token punctuation">.</span><span class="token function">Except</span><span class="token punctuation">(</span>entityToUpdate<span class="token punctuation">.</span>BookAuthors<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    deletedBooks<span class="token punctuation">.</span><span class="token function">ForEach</span><span class="token punctuation">(</span>bookToDelete <span class="token operator">=&gt;</span> </span>
<span class="line">        entityToUpdate<span class="token punctuation">.</span>BookAuthors<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span></span>
<span class="line">            entityToUpdate<span class="token punctuation">.</span>BookAuthors</span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span>b <span class="token operator">=&gt;</span>  b<span class="token punctuation">.</span>BookId <span class="token operator">==</span> bookToDelete<span class="token punctuation">.</span>BookId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> addedBook <span class="token keyword">in</span> addedBooks<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        _bookStoreContext<span class="token punctuation">.</span><span class="token function">Entry</span><span class="token punctuation">(</span>addedBook<span class="token punctuation">)</span><span class="token punctuation">.</span>State <span class="token operator">=</span> EntityState<span class="token punctuation">.</span>Added<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    _bookStoreContext<span class="token punctuation">.</span><span class="token function">SaveChanges</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The above code will cause the <code>Author</code>, <code>AuthorContact</code>and <code>BookAuthors</code> entities to be updated. We’ll verify this later when we test this.</p><h4 id="delete" tabindex="-1"><a class="header-anchor" href="#delete"><span>Delete</span></a></h4><p>Delete operation can be tricky with related entities. There are three actions EF can take when a parent entity is deleted.</p><ul><li>The child can be deleted</li><li>The child’s foreign key values can be set to null</li><li>The child remains unchanged</li></ul><p>We should configure the <code>DeleteBehavior</code> appropriately based on our application logic. In the below example, let’s say when a publisher is deleted, we need the publisher’s book also to be deleted.</p><p>First, let’s configure this in the <code>OnModelCreating</code> method in our context:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">modelBuilder<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Entity</span><span class="token generic class-name"><span class="token punctuation">&lt;</span> Book<span class="token punctuation">&gt;</span></span></span> <span class="token punctuation">(</span>entity <span class="token operator">=&gt;</span> </span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    entity<span class="token punctuation">.</span><span class="token function">Property</span><span class="token punctuation">(</span>e <span class="token operator">=&gt;</span>  e<span class="token punctuation">.</span>Title<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">IsRequired</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">HasMaxLength</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    entity<span class="token punctuation">.</span><span class="token function">HasOne</span><span class="token punctuation">(</span>d <span class="token operator">=&gt;</span>  d<span class="token punctuation">.</span>Publisher<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">WithMany</span><span class="token punctuation">(</span>p <span class="token operator">=&gt;</span>  p<span class="token punctuation">.</span>Books<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">HasForeignKey</span><span class="token punctuation">(</span>d <span class="token operator">=&gt;</span>  d<span class="token punctuation">.</span>PublisherId<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">OnDelete</span><span class="token punctuation">(</span>DeleteBehavior<span class="token punctuation">.</span>Cascade<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">HasConstraintName</span><span class="token punctuation">(</span><span class="token string">&quot;FK_Books_Publishers&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    entity<span class="token punctuation">.</span><span class="token function">HasOne</span><span class="token punctuation">(</span>d <span class="token operator">=&gt;</span>  d<span class="token punctuation">.</span>Category<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">WithMany</span><span class="token punctuation">(</span>p <span class="token operator">=&gt;</span>  p<span class="token punctuation">.</span>Book<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">HasForeignKey</span><span class="token punctuation">(</span>d <span class="token operator">=&gt;</span>  d<span class="token punctuation">.</span>CategoryId<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">OnDelete</span><span class="token punctuation">(</span>DeleteBehavior<span class="token punctuation">.</span>ClientSetNull<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">HasConstraintName</span><span class="token punctuation">(</span><span class="token string">&quot;FK_Books_BookCategory&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now let’s implement the <code>Delete()</code> method in <code>PublisherDataManager</code> class:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Delete</span><span class="token punctuation">(</span><span class="token class-name">Publisher</span> entity<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    _booksStoreContext<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    _booksStoreContext<span class="token punctuation">.</span><span class="token function">SaveChanges</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The above code will delete the <code>Publisher</code>and any related <code>Book</code> entities. We’ll verify this later when we test this functionality.</p><p>Now we have to register our DataManager classes inside the IOC and configure JSONOptions to ignore circular reference loops.</p><p>For that, first, we have to install the NewtonSoftJson package:</p><div class="language-powershell line-numbers-mode" data-highlighter="prismjs" data-ext="powershell"><pre><code class="language-powershell"><span class="line"><span class="token function">Install-Package</span> Microsoft<span class="token punctuation">.</span>AspNetCore<span class="token punctuation">.</span>Mvc<span class="token punctuation">.</span>NewtonsoftJson</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Then, we can configure the services:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ConfigureServices</span><span class="token punctuation">(</span><span class="token class-name">IServiceCollection</span> services<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddDbContext</span><span class="token generic class-name"><span class="token punctuation">&lt;</span> BookStoreContext<span class="token punctuation">&gt;</span></span></span> <span class="token punctuation">(</span>opts <span class="token operator">=&gt;</span>  opts<span class="token punctuation">.</span><span class="token function">UseSqlServer</span><span class="token punctuation">(</span>Configuration<span class="token punctuation">[</span><span class="token string">&quot;ConnectionString:BooksDB&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddScoped</span><span class="token generic class-name"><span class="token punctuation">&lt;</span> IDataRepository<span class="token punctuation">&lt;</span> Author<span class="token punctuation">,</span> AuthorDto<span class="token punctuation">&gt;</span> <span class="token punctuation">,</span> AuthorDataManager<span class="token punctuation">&gt;</span></span></span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddScoped</span><span class="token generic class-name"><span class="token punctuation">&lt;</span> IDataRepository<span class="token punctuation">&lt;</span> Book<span class="token punctuation">,</span> BookDto<span class="token punctuation">&gt;</span> <span class="token punctuation">,</span> BookDataManager<span class="token punctuation">&gt;</span></span></span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddScoped</span><span class="token generic class-name"><span class="token punctuation">&lt;</span> IDataRepository<span class="token punctuation">&lt;</span> Publisher<span class="token punctuation">,</span> PublisherDto<span class="token punctuation">&gt;</span> <span class="token punctuation">,</span> PublisherDataManager<span class="token punctuation">&gt;</span></span></span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    services<span class="token punctuation">.</span><span class="token function">AddControllers</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">AddNewtonsoftJson</span><span class="token punctuation">(</span></span>
<span class="line">            options <span class="token operator">=&gt;</span>  options<span class="token punctuation">.</span>SerializerSettings<span class="token punctuation">.</span>ReferenceLoopHandling <span class="token operator">=</span> Newtonsoft<span class="token punctuation">.</span>Json<span class="token punctuation">.</span>ReferenceLoopHandling<span class="token punctuation">.</span>Ignore</span>
<span class="line">        <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This is the appsettings.json file:</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json"><pre><code class="language-json"><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;Logging&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;LogLevel&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">&quot;Default&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Warning&quot;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;ConnectionString&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;BooksDB&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Server=.;Database=BookStore;Trusted_Connection=True&quot;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;AllowedHosts&quot;</span><span class="token operator">:</span> <span class="token string">&quot;*&quot;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Excellent. Now we can move on.</p><hr><h2 id="creating-the-api-controller" tabindex="-1"><a class="header-anchor" href="#creating-the-api-controller"><span>Creating the API Controller</span></a></h2>`,66)),s("p",null,[n[29]||(n[29]=a("Now that our DataManager is all set, let’s create the API Controller and create the endpoints for handling CRUD operations. This is described in detail in one of our other articles: ")),e(l,{to:"/code-maze.com/net-core-web-development-part5.html"},{default:t(()=>n[28]||(n[28]=[a("Creating a .NET Core Web API Controller")])),_:1,__:[28]})]),n[41]||(n[41]=o(`<p>Following the above article, let’s create the <code>AuthorsController</code>,<code>BooksController</code> and <code>PublishersController</code> class in the <code>Controllers</code> folder as shown below.</p><p>For keeping things simple and focused, we’ll implement only those endpoints required to understand the concepts we discuss in this article.</p><p>Let’s implement the <code>GetAll</code>,<code>Get</code>,<code>Post</code> and <code>Put</code> method in the <code>AuthorsController</code>class:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Route</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;api/authors&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ApiController</span></span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AuthorsController</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ControllerBase</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IDataRepository<span class="token punctuation">&lt;</span> Author<span class="token punctuation">,</span> AuthorDto<span class="token punctuation">&gt;</span></span>  _dataRepository<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token function">AuthorsController</span><span class="token punctuation">(</span><span class="token class-name">IDataRepository<span class="token punctuation">&lt;</span> Author<span class="token punctuation">,</span> AuthorDto<span class="token punctuation">&gt;</span></span>  dataRepository<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        _dataRepository <span class="token operator">=</span> dataRepository<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// GET: api/Authors</span></span>
<span class="line">    <span class="token punctuation">[</span>HttpGet<span class="token punctuation">]</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">IActionResult</span> <span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> authors <span class="token operator">=</span> _dataRepository<span class="token punctuation">.</span><span class="token function">GetAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">Ok</span><span class="token punctuation">(</span>authors<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// GET: api/Authors/5</span></span>
<span class="line">    <span class="token punctuation">[</span><span class="token function">HttpGet</span><span class="token punctuation">(</span><span class="token string">&quot;{id}&quot;</span><span class="token punctuation">,</span> Name <span class="token operator">=</span> <span class="token string">&quot;GetAuthor&quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">IActionResult</span> <span class="token function">Get</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> id<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> author <span class="token operator">=</span> _dataRepository<span class="token punctuation">.</span><span class="token function">GetDto</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>author <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token function">NotFound</span><span class="token punctuation">(</span><span class="token string">&quot;Author not found.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">Ok</span><span class="token punctuation">(</span>author<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// POST: api/Authors</span></span>
<span class="line">    <span class="token punctuation">[</span>HttpPost<span class="token punctuation">]</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">IActionResult</span> <span class="token function">Post</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">FromBody</span></span><span class="token punctuation">]</span> <span class="token class-name">Author</span> author<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>author <span class="token keyword">is</span> <span class="token keyword">null</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token function">BadRequest</span><span class="token punctuation">(</span><span class="token string">&quot;Author is null.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ModelState<span class="token punctuation">.</span>IsValid<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token function">BadRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        _dataRepository<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>author<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">CreatedAtRoute</span><span class="token punctuation">(</span><span class="token string">&quot;GetAuthor&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> Id <span class="token operator">=</span> author<span class="token punctuation">.</span>Id <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// PUT: api/Authors/5</span></span>
<span class="line">    <span class="token punctuation">[</span><span class="token function">HttpPut</span><span class="token punctuation">(</span><span class="token string">&quot;{id}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">IActionResult</span> <span class="token function">Put</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> id<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">FromBody</span></span><span class="token punctuation">]</span> <span class="token class-name">Author</span> author<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>author <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token function">BadRequest</span><span class="token punctuation">(</span><span class="token string">&quot;Author is null.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> authorToUpdate <span class="token operator">=</span> _dataRepository<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>authorToUpdate <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token function">NotFound</span><span class="token punctuation">(</span><span class="token string">&quot;The Employee record couldn&#39;t be found.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ModelState<span class="token punctuation">.</span>IsValid<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token function">BadRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        _dataRepository<span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span>authorToUpdate<span class="token punctuation">,</span> author<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">NoContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then let’s implement the <code>Get()</code> method in the <code>BooksController</code>:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Route</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;api/books&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ApiController</span></span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BooksController</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ControllerBase</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IDataRepository<span class="token punctuation">&lt;</span> Book<span class="token punctuation">,</span> BookDto<span class="token punctuation">&gt;</span></span>  _dataRepository<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token function">BooksController</span><span class="token punctuation">(</span><span class="token class-name">IDataRepository<span class="token punctuation">&lt;</span> Book<span class="token punctuation">,</span> BookDto<span class="token punctuation">&gt;</span></span>  dataRepository<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        _dataRepository <span class="token operator">=</span> dataRepository<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// GET: api/Books/5</span></span>
<span class="line">    <span class="token punctuation">[</span><span class="token function">HttpGet</span><span class="token punctuation">(</span><span class="token string">&quot;{id}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">IActionResult</span> <span class="token function">Get</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> id<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> book <span class="token operator">=</span> _dataRepository<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>book <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token function">NotFound</span><span class="token punctuation">(</span><span class="token string">&quot;Book not found.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">Ok</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Finally, let’s implement the <code>Delete()</code> method in the <code>PublisherController</code>:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Route</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;api/publishers&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ApiController</span></span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PublishersController</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ControllerBase</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IDataRepository<span class="token punctuation">&lt;</span> Publisher<span class="token punctuation">,</span> PublisherDto<span class="token punctuation">&gt;</span></span>  _dataRepository<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token function">PublishersController</span><span class="token punctuation">(</span><span class="token class-name">IDataRepository<span class="token punctuation">&lt;</span> Publisher<span class="token punctuation">,</span> PublisherDto<span class="token punctuation">&gt;</span></span>  dataRepository<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        _dataRepository <span class="token operator">=</span> dataRepository<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// DELETE: api/ApiWithActions/5</span></span>
<span class="line">    <span class="token punctuation">[</span><span class="token function">HttpDelete</span><span class="token punctuation">(</span><span class="token string">&quot;{id}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">IActionResult</span> <span class="token function">Delete</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> id<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> publisher <span class="token operator">=</span> _dataRepository<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>publisher <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token function">NotFound</span><span class="token punctuation">(</span><span class="token string">&quot;The Publisher record couldn&#39;t be found.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        _dataRepository<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span>publisher<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">NoContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8)),s("div",W,[n[33]||(n[33]=s("p",{class:"hint-container-title"},"Recommendation",-1)),s("p",null,[n[31]||(n[31]=a("If you want to learn in great detail about Entity Framework Core and many of its features, we recommend going through our ")),e(l,{to:"/code-maze.com/entity-framework-core-series.html"},{default:t(()=>n[30]||(n[30]=[a("Entity Framework Core series.")])),_:1,__:[30]}),n[32]||(n[32]=a(" Through the entire series, we talk about different EF Core features, from the Context classes and DbSet properties, relationships and none-relational configurations, additional migration information and querying the database. If you want, you have a place to learn a lot more on this topic."))])]),n[42]||(n[42]=o('<hr><h2 id="testing-the-api" tabindex="-1"><a class="header-anchor" href="#testing-the-api"><span>Testing the API</span></a></h2><p>Now we’ll test the controller methods using Postman. We’ll also verify the results in the database. Later, we’ll inspect the actual SQL queries executed in the database using the SQL Server Profiler.</p><h3 id="loading-the-data" tabindex="-1"><a class="header-anchor" href="#loading-the-data"><span>Loading the Data</span></a></h3><p>First, let’s test the <code>GetAll</code> endpoint of <code>Authors:</code></p><figure><img src="'+A+'" alt="GET All Authors" tabindex="0" loading="lazy"><figcaption>GET All Authors</figcaption></figure><p>Remember that we used eager loading for implementing this functionality. If we look at the Profiler, we can see that the query fetches data by joining <code>Author</code> and <code>AuthorContact</code> tables:</p><figure><img src="'+T+'" alt="GetAll Profiler" tabindex="0" loading="lazy"><figcaption>GetAll Profiler</figcaption></figure><p>Next, let’s test the <code>Get</code> endpoint of the <code>Book:</code></p><figure><img src="'+C+'" alt="GET Book" tabindex="0" loading="lazy"><figcaption>GET Book</figcaption></figure><p>Remember that we used explicit loading to implement this functionality. Here note that only those properties that we chose to load explicitly have data. Other related properties are empty.</p><p>In the Profiler, we can see that initially, an SQL query fetches data from the <code>Book</code> table. Later, queries are generated to fetch data from other tables when we explicitly load data from other entities.</p><figure><img src="'+E+'" alt="GET Book Profiler" tabindex="0" loading="lazy"><figcaption>GET Book Profiler</figcaption></figure><p>Now, let’s test the <code>Get</code> endpoint of <code>Author</code>:</p><figure><img src="'+I+'" alt="Get Author" tabindex="0" loading="lazy"><figcaption>Get Author</figcaption></figure><p>Remember that we used lazy loading to implement this functionality. In the Profiler, we can see that initially only data from the <code>Author</code> table is loaded. Later, when we refer the <code>AuthorContact</code> entity inside the DTO Mapper class, another query loads data from the <code>AuthorContact</code> table:</p><figure><img src="'+B+'" alt="Get_Author_Profiler)ads/2018/10" tabindex="0" loading="lazy"><figcaption>Get_Author_Profiler)ads/2018/10</figcaption></figure><h3 id="updating-data" tabindex="-1"><a class="header-anchor" href="#updating-data"><span>Updating Data</span></a></h3><p>Now, let’s test the <code>Add</code> endpoint of <code>Author</code>:</p><figure><img src="'+D+'" alt="POST_Author" tabindex="0" loading="lazy"><figcaption>POST_Author</figcaption></figure><p>We can see that two INSERT queries are generated to insert data into tables <code>Author</code> and <code>AuthorContact</code>:</p><figure><img src="'+P+'" alt="INSERT_Profiler" tabindex="0" loading="lazy"><figcaption>INSERT_Profiler</figcaption></figure><p>We can verify that our Add endpoint inserts data in both tables:</p><figure><img src="'+N+`" alt="DB_Result_After_POST" tabindex="0" loading="lazy"><figcaption>DB_Result_After_POST</figcaption></figure><p>Now let’s test the <code>Update</code> endpoint of <code>Authors</code>.</p><p>We’ll insert some data into <code>Publisher</code>,<code>BookCategory</code> and <code>Book</code> table:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> Publisher</span>
<span class="line"><span class="token keyword">VALUES</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token string">&#39;Simon &amp;amp; Schuster&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token string">&#39;Oxford University Press&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> BookCategory</span>
<span class="line"><span class="token keyword">VALUES</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token string">&#39;Tragedy&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token string">&#39;Romance&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> Book</span>
<span class="line"><span class="token keyword">VALUES</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token string">&#39;Hamlet&#39;</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token string">&#39;Romeo and Juliet&#39;</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Let’s modify the <code>Author</code> we just inserted. Let’s edit the <code>ContactNumber</code> and map the newly added <code>Books</code> to this author:</p><figure><img src="`+_+'" alt="POST_Author" tabindex="0" loading="lazy"><figcaption>POST_Author</figcaption></figure><p>In the Profiler, we can see an <code>UPDATE</code> query for the <code>AuthorContact</code> table and two <code>INSERT</code> queries for the <code>BookAuthors</code> table:</p><figure><img src="'+R+'" alt="UPDATE_Profiler" tabindex="0" loading="lazy"><figcaption>UPDATE_Profiler</figcaption></figure><p>Let’s verify the results in the database:</p><figure><img src="'+S+`" alt="DB_Result_After_PUT" tabindex="0" loading="lazy"><figcaption>DB_Result_After_PUT</figcaption></figure><p>Finally, let’s test the <code>Delete</code> endpoint of <code>Publisher</code>.</p><p>We’ll insert a test publisher and two related books:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">INSERT INTO <span class="token return-type class-name">Publisher</span></span>
<span class="line">VALUES</span>
<span class="line"><span class="token punctuation">(</span>&#39;My Publisher&#39;<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">INSERT INTO <span class="token return-type class-name">Book</span></span>
<span class="line">VALUES</span>
<span class="line"><span class="token punctuation">(</span>&#39;My Publisher Book <span class="token number">1</span>&#39;<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">(</span>&#39;My Publisher Book <span class="token number">2</span>&#39;<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now let’s test the <code>Delete</code> endpoint.</p><figure><img src="`+x+'" alt="DELETE_Publisher" tabindex="0" loading="lazy"><figcaption>DELETE_Publisher</figcaption></figure><p>In the Profiler, we can see that the related data is first removed from the<code>Book</code> table. Then the publisher record is deleted from the<code>Publisher</code> table.</p><figure><img src="'+L+'" alt="DELETE_Profiler" tabindex="0" loading="lazy"><figcaption>DELETE_Profiler</figcaption></figure><p>Let’s verify the changes in the database.</p><figure><img src="'+z+'" alt="DB_Result_After_DELETE" tabindex="0" loading="lazy"><figcaption>DB_Result_After_DELETE</figcaption></figure><hr><h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="#conclusion"><span>Conclusion</span></a></h2><p>In this article, we have covered the following topics.</p><ul><li>EF Core Database-First approach and when to use it.</li><li>Different types of relationships in a database.</li><li>Creating a database and tables with relationships.</li><li>Modeling the entities with relationships.</li><li>Loading and saving related data using the repository pattern.</li><li>Different patterns for loading related data.</li><li>Creating API endpoints for operating on related data.</li><li>Testing the endpoints and inspecting the generated database queries.</li></ul><p>Hope you enjoyed the article. Happy programming!</p>',47))])}const Y=k(q,[["render",H]]),J=JSON.parse('{"path":"/code-maze.com/asp-net-core-web-api-with-ef-core-db-first-approach.html","title":"ASP.NET Core Web API with EF Core DB-First Approach","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"ASP.NET Core Web API with EF Core DB-First Approach","description":"Article(s) > ASP.NET Core Web API with EF Core DB-First Approach","icon":"iconfont icon-csharp","category":["C#","Article(s)"],"tag":["blog","code-maze.com","csharp"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ASP.NET Core Web API with EF Core DB-First Approach\\",\\"image\\":[\\"https://chanhi2000.github.io/bookshelf/assets/image/code-maze.com/asp-net-core-web-api-with-ef-core-db-first-approach/DB_Diagram.jpg\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/code-maze.com/asp-net-core-web-api-with-ef-core-db-first-approach/Tables_With_Data.jpg\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/code-maze.com/asp-net-core-web-api-with-ef-core-db-first-approach/Generated-Classes.jpg\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/code-maze.com/asp-net-core-web-api-with-ef-core-db-first-approach/GET_All_Authors.jpg\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/code-maze.com/asp-net-core-web-api-with-ef-core-db-first-approach/GetAll_Profiler.jpg\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/code-maze.com/asp-net-core-web-api-with-ef-core-db-first-approach/GET_Book.jpg\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/code-maze.com/asp-net-core-web-api-with-ef-core-db-first-approach/GET_Book_Profiler.jpg\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/code-maze.com/asp-net-core-web-api-with-ef-core-db-first-approach/Get_Author.jpg\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/code-maze.com/asp-net-core-web-api-with-ef-core-db-first-approach/Get_Author_Profiler.jpg\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/code-maze.com/asp-net-core-web-api-with-ef-core-db-first-approach/POST_Author-3.jpg\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/code-maze.com/asp-net-core-web-api-with-ef-core-db-first-approach/INSERT_Profiler.jpg\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/code-maze.com/asp-net-core-web-api-with-ef-core-db-first-approach/DB_Result_After_POST-1.jpg\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/code-maze.com/asp-net-core-web-api-with-ef-core-db-first-approach/POST_Author.jpg\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/code-maze.com/asp-net-core-web-api-with-ef-core-db-first-approach/UPDATE_Profiler.jpg\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/code-maze.com/asp-net-core-web-api-with-ef-core-db-first-approach/DB_Result_After_POST.jpg\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/code-maze.com/asp-net-core-web-api-with-ef-core-db-first-approach/DELETE_Publisher.jpg\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/code-maze.com/asp-net-core-web-api-with-ef-core-db-first-approach/DELETE_Profiler.jpg\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/code-maze.com/asp-net-core-web-api-with-ef-core-db-first-approach/DB_Result_After_DELETE.jpg\\"],\\"datePublished\\":\\"2024-01-31T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/code-maze.com/asp-net-core-web-api-with-ef-core-db-first-approach.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"ASP.NET Core Web API with EF Core DB-First Approach"}],["meta",{"property":"og:description","content":"Article(s) > ASP.NET Core Web API with EF Core DB-First Approach"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://chanhi2000.github.io/bookshelf/assets/image/code-maze.com/asp-net-core-web-api-with-ef-core-db-first-approach/banner.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://chanhi2000.github.io/bookshelf/assets/image/code-maze.com/asp-net-core-web-api-with-ef-core-db-first-approach/banner.png"}],["meta",{"name":"twitter:image:alt","content":"ASP.NET Core Web API with EF Core DB-First Approach"}],["meta",{"property":"article:tag","content":"csharp"}],["meta",{"property":"article:tag","content":"code-maze.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2024-01-31T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > ASP.NET Core Web API with EF Core DB-First Approach"},{"property":"og:description","content":"ASP.NET Core Web API with EF Core DB-First Approach"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/code-maze.com/asp-net-core-web-api-with-ef-core-db-first-approach.html"}]],"prev":"/programming/cs/articles/README.md","date":"2024-01-31T00:00:00.000Z","isOriginal":false,"cover":"/assets/image/code-maze.com/asp-net-core-web-api-with-ef-core-db-first-approach/banner.png"},"git":{},"readingTime":{"minutes":13.98,"words":4194},"filePathRelative":"code-maze.com/asp-net-core-web-api-with-ef-core-db-first-approach.md"}');export{Y as comp,J as data};
