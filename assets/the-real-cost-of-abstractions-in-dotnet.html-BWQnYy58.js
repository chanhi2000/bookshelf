import{_ as k}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as m,d as s,f as a,b as h,a as b,t as y,n as l,g as c,w as t,e,r as p,o as v}from"./app-BVguHYKu.js";const g={},f={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},A={class:"table-of-contents"};function T(r,n){const i=p("VPCard"),o=p("router-link"),u=p("SiteInfo"),d=p("RouteLink");return v(),m("div",null,[s("h1",f,[s("a",w,[s("span",null,y(r.$frontmatter.title)+" 관련",1)])]),a(i,l(c({title:"C# > Article(s)",desc:"Article(s)",link:"/programming/cs/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",A,[s("ul",null,[s("li",null,[a(o,{to:"#when-abstractions-pay-off"},{default:t(()=>n[0]||(n[0]=[e("When Abstractions Pay Off")])),_:1,__:[0]}),s("ul",null,[s("li",null,[a(o,{to:"#example-payment-processing"},{default:t(()=>n[1]||(n[1]=[e("Example: Payment Processing")])),_:1,__:[1]})])])]),s("li",null,[a(o,{to:"#when-abstractions-become-technical-debt"},{default:t(()=>n[2]||(n[2]=[e("When Abstractions Become Technical Debt")])),_:1,__:[2]}),s("ul",null,[s("li",null,[a(o,{to:"#the-repository-that-lost-its-way"},{default:t(()=>n[3]||(n[3]=[e("The Repository That Lost Its Way")])),_:1,__:[3]})])])]),s("li",null,[a(o,{to:"#service-wrappers-the-good-and-the-ugly"},{default:t(()=>n[4]||(n[4]=[e("Service Wrappers: The Good and The Ugly")])),_:1,__:[4]})]),s("li",null,[a(o,{to:"#making-better-decisions"},{default:t(()=>n[5]||(n[5]=[e("Making Better Decisions")])),_:1,__:[5]}),s("ul",null,[s("li",null,[a(o,{to:"#abstract-policies-not-mechanics"},{default:t(()=>n[6]||(n[6]=[e("Abstract Policies, Not Mechanics")])),_:1,__:[6]})]),s("li",null,[a(o,{to:"#wait-for-the-second-implementation"},{default:t(()=>n[7]||(n[7]=[e("Wait for the Second Implementation")])),_:1,__:[7]})]),s("li",null,[a(o,{to:"#keep-implementations-inside-abstractions-at-boundaries"},{default:t(()=>n[8]||(n[8]=[e("Keep Implementations Inside, Abstractions at Boundaries")])),_:1,__:[8]})])])]),s("li",null,[a(o,{to:"#refactoring-out-bad-abstractions"},{default:t(()=>n[9]||(n[9]=[e("Refactoring Out Bad Abstractions")])),_:1,__:[9]})]),s("li",null,[a(o,{to:"#the-bottom-line"},{default:t(()=>n[10]||(n[10]=[e("The Bottom Line")])),_:1,__:[10]})])])]),n[14]||(n[14]=s("hr",null,null,-1)),a(u,{name:"The Real Cost of Abstractions in .NET",desc:"Not all abstractions are created equal. Some isolate real volatility and protect your system from change. Others quietly pile up complexity and hide performance problems. Learn when to embrace abstractions versus when they become technical debt that slows down your team.",url:"https://milanjovanovic.tech/blog/the-real-cost-of-abstractions-in-dotnet",logo:"https://milanjovanovic.tech/profile_favicon.png",preview:"https://milanjovanovic.tech/blog-covers/mnw_156.png"}),n[15]||(n[15]=h(`<p>As developers, we love abstractions. Repositories, services, mappers, wrappers. They make our code look &quot;clean,&quot; they promise testability, and they give us the sense that we&#39;re building something flexible.</p><p><strong>Every abstraction is a loan. You pay interest the moment you write it.</strong></p><p>Some abstractions earn their keep by isolating real volatility and protecting your system from change. Others quietly pile up complexity, slow down onboarding, and hide performance problems behind layers of indirection.</p><p>Let&#39;s explore when abstractions pay dividends and when they become technical debt.</p><hr><h2 id="when-abstractions-pay-off" tabindex="-1"><a class="header-anchor" href="#when-abstractions-pay-off"><span>When Abstractions Pay Off</span></a></h2><p>The best abstractions <strong>isolate true volatility</strong>, the parts of your system that you genuinely expect to change.</p><h3 id="example-payment-processing" tabindex="-1"><a class="header-anchor" href="#example-payment-processing"><span>Example: Payment Processing</span></a></h3><p>Your core business logic shouldn&#39;t depend directly on Stripe&#39;s SDK. If you ever switch to Adyen or Braintree, you don&#39;t want that decision rippling through every corner of your codebase. Here, an abstraction makes perfect sense:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IPaymentProcessor</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token return-type class-name">Task</span> <span class="token function">ProcessAsync</span><span class="token punctuation">(</span><span class="token class-name">Order</span> order<span class="token punctuation">,</span> <span class="token class-name">CancellationToken</span> ct<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StripePaymentProcessor</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IPaymentProcessor</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">ProcessAsync</span><span class="token punctuation">(</span><span class="token class-name">Order</span> order<span class="token punctuation">,</span> <span class="token class-name">CancellationToken</span> ct<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// Stripe-specific implementation</span></span>
<span class="line">        <span class="token comment">// Handle webhooks, error codes, etc.</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AdyenPaymentProcessor</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IPaymentProcessor</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">ProcessAsync</span><span class="token punctuation">(</span><span class="token class-name">Order</span> order<span class="token punctuation">,</span> <span class="token class-name">CancellationToken</span> ct<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// Adyen-specific implementation</span></span>
<span class="line">        <span class="token comment">// Different API, same business outcome</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now your business logic can stay focused on the domain:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CheckoutService</span><span class="token punctuation">(</span><span class="token class-name">IPaymentProcessor</span> processor<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">Task</span> <span class="token function">CheckoutAsync</span><span class="token punctuation">(</span><span class="token class-name">Order</span> order<span class="token punctuation">,</span> <span class="token class-name">CancellationToken</span> cancellationToken<span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line">        processor<span class="token punctuation">.</span><span class="token function">ProcessAsync</span><span class="token punctuation">(</span>order<span class="token punctuation">,</span> cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This abstraction isolates a genuinely unstable dependency (the payment provider) while keeping checkout logic independent. When Stripe changes their API or you switch providers, only one class needs to change.</p><p><strong>That&#39;s a good abstraction</strong>. It buys you optionality where you actually need it.</p><hr><h2 id="when-abstractions-become-technical-debt" tabindex="-1"><a class="header-anchor" href="#when-abstractions-become-technical-debt"><span>When Abstractions Become Technical Debt</span></a></h2><p>Problems arise when we abstract things that aren&#39;t actually volatile. We end up wrapping stable libraries or creating layers that don&#39;t add real value. The &quot;clean&quot; layer you added today becomes tomorrow&#39;s maintenance burden.</p><h3 id="the-repository-that-lost-its-way" tabindex="-1"><a class="header-anchor" href="#the-repository-that-lost-its-way"><span>The Repository That Lost Its Way</span></a></h3><p>Most teams start with something reasonable:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IUserRepository</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>IEnumerable<span class="token punctuation">&lt;</span>User<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">GetAllAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>But as requirements evolve, so does the interface:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IUserRepository</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>IEnumerable<span class="token punctuation">&lt;</span>User<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">GetAllAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>User<span class="token punctuation">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">GetByEmailAsync</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> email<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>IEnumerable<span class="token punctuation">&lt;</span>User<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">GetActiveUsersAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>IEnumerable<span class="token punctuation">&lt;</span>User<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">GetUsersByRoleAsync</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> role<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>IEnumerable<span class="token punctuation">&lt;</span>User<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">SearchAsync</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> keyword<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> page<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>IEnumerable<span class="token punctuation">&lt;</span>User<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">GetUsersWithRecentActivityAsync</span><span class="token punctuation">(</span><span class="token class-name">DateTime</span> since<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// ...and it keeps growing</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Suddenly, the repository is leaking <strong>query logic into its interface</strong>. Every new way of fetching users means another method, and your &quot;abstraction&quot; becomes a grab bag of every possible query.</p><p>Meanwhile, Entity Framework already gives you all of this through LINQ: strongly typed queries that map directly to SQL. Instead of leveraging that power, you&#39;ve introduced an indirection layer that hides query performance characteristics and often performs worse. The repository pattern made sense when ORMs were immature. Today, it&#39;s often just ceremony.</p><p>I&#39;ve been guilty of this myself. But part of maturing as a developer is recognizing when patterns become anti-patterns. Repositories make sense when they encapsulate complex query logic or provide a unified API over multiple data sources. But you should strive to keep them focused on domain logic. As soon as they explode into a myriad of methods for every possible query, it&#39;s a sign that the abstraction has failed.</p><hr><h2 id="service-wrappers-the-good-and-the-ugly" tabindex="-1"><a class="header-anchor" href="#service-wrappers-the-good-and-the-ugly"><span>Service Wrappers: The Good and The Ugly</span></a></h2><p>Not all service wrappers are problematic. Context matters.</p><div class="hint-container tip"><p class="hint-container-title">✅ Good Example: External API Integration</p><p>When integrating with external APIs, a wrapper provides genuine value by centralizing concerns:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IGitHubClient</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>UserDto<span class="token punctuation">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">GetUserAsync</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> username<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>IReadOnlyList<span class="token punctuation">&lt;</span>RepoDto<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">GetRepositoriesAsync</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> username<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GitHubClient</span><span class="token punctuation">(</span><span class="token class-name">HttpClient</span> httpClient<span class="token punctuation">)</span> <span class="token punctuation">:</span> IGitHubClient</span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>UserDto<span class="token punctuation">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">GetUserAsync</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> username<span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line">        httpClient<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetFromJsonAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>UserDto<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;/users/</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">username</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>IReadOnlyList<span class="token punctuation">&lt;</span>RepoDto<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">GetRepositoriesAsync</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> username<span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line">        httpClient<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetFromJsonAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IReadOnlyList<span class="token punctuation">&lt;</span>RepoDto<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;/users/</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">username</span><span class="token punctuation">}</span></span><span class="token string">/repos&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This wrapper isolates GitHub&#39;s API details. When authentication changes or endpoints evolve, you update one place. Your business logic never needs to know about HTTP headers, base URLs, or JSON serialization.</p></div><div class="hint-container warning"><p class="hint-container-title">❌ Bad Example: Pass-Through Services</p><p>The trouble starts when we wrap our own stable services without adding business value:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span><span class="token punctuation">(</span><span class="token class-name">IUserRepository</span> userRepository<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Just forwarding calls with no added value</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>User<span class="token punctuation">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">GetByIdAsync</span><span class="token punctuation">(</span><span class="token class-name">Guid</span> id<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> userRepository<span class="token punctuation">.</span><span class="token function">GetByIdAsync</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>IEnumerable<span class="token punctuation">&lt;</span>User<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">GetAllAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> userRepository<span class="token punctuation">.</span><span class="token function">GetAllAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">Task</span> <span class="token function">SaveAsync</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> userRepository<span class="token punctuation">.</span><span class="token function">SaveAsync</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This <code>UserService</code> is pure indirection. All it does is forward calls to the <code>IUserRepository</code>. It doesn&#39;t enforce business rules, add validation, implement caching, or provide any real functionality. It&#39;s a layer that exists only because &quot;services are good architecture.&quot;</p><p>As these anemic wrappers multiply, your codebase becomes a maze. Developers waste time navigating layers instead of focusing on where business logic actually lives.\\</p></div><hr><h2 id="making-better-decisions" tabindex="-1"><a class="header-anchor" href="#making-better-decisions"><span>Making Better Decisions</span></a></h2><p>Here&#39;s how to think about when abstractions are worth the investment:</p><h3 id="abstract-policies-not-mechanics" tabindex="-1"><a class="header-anchor" href="#abstract-policies-not-mechanics"><span>Abstract Policies, Not Mechanics</span></a></h3><ul><li><strong>Policies</strong> are decisions that might change: which payment provider to use, how to handle caching, retry strategies for external calls</li><li><strong>Mechanics</strong> are stable implementation details: EF Core&#39;s LINQ syntax, <code>HttpClient</code> configuration, JSON serialization</li></ul><p>Abstract policies because they give you flexibility. Don&#39;t abstract mechanics, they&#39;re already stable APIs that rarely change in breaking ways.</p><h3 id="wait-for-the-second-implementation" tabindex="-1"><a class="header-anchor" href="#wait-for-the-second-implementation"><span>Wait for the Second Implementation</span></a></h3><p>If you only have one implementation, resist the interface urge. A single implementation doesn&#39;t justify abstraction, it&#39;s premature generalization that adds complexity without benefit.</p><p>Consider this evolution:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token comment">// Step 1: Start concrete</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmailNotifier</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">SendAsync</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> to<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> subject<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> body<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// SMTP implementation</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Step 2: Need SMS? Now abstract</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">INotifier</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token return-type class-name">Task</span> <span class="token function">SendAsync</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> to<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> subject<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> body<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmailNotifier</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">INotifier</span></span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SmsNotifier</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">INotifier</span></span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The abstraction emerges naturally when you actually need it. The interface reveals itself through real requirements, not imaginary ones.</p><h3 id="keep-implementations-inside-abstractions-at-boundaries" tabindex="-1"><a class="header-anchor" href="#keep-implementations-inside-abstractions-at-boundaries"><span>Keep Implementations Inside, Abstractions at Boundaries</span></a></h3><p>Inside your application, prefer <strong>concrete types</strong>. Use Entity Framework directly, configure <code>HttpClient</code> as typed clients, work with domain entities. Only introduce abstractions where your system meets the outside world: external APIs, third-party SDKs, infrastructure services.</p><p>That&#39;s where change is most likely, and where abstractions earn their keep.</p><hr><h2 id="refactoring-out-bad-abstractions" tabindex="-1"><a class="header-anchor" href="#refactoring-out-bad-abstractions"><span>Refactoring Out Bad Abstractions</span></a></h2><p>Regularly review your abstractions with this question: If I removed this abstraction, would the code become simpler or more complex?</p><p>If removing an interface or service layer would make the code clearer and more direct, that abstraction is probably costing more than it&#39;s worth. Don&#39;t be afraid to delete unnecessary layers. Simpler code is often better code.</p><p>When you identify problematic abstractions, here&#39;s how to safely remove them:</p><ol><li><strong>Identify the real consumers</strong>. Who actually needs the abstraction?</li><li><strong>Inline the interface</strong>. Replace abstract calls with concrete implementations.</li><li><strong>Delete the wrapper</strong>. Remove the unnecessary indirection.</li><li><strong>Simplify the calling code</strong>. Take advantage of the concrete API&#39;s features.</li></ol><p>For example, replacing a repository with direct EF Core usage:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token comment">// Before: Hidden behind repository</span></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> users <span class="token operator">=</span> <span class="token keyword">await</span> _userRepo<span class="token punctuation">.</span><span class="token function">GetActiveUsersWithRecentOrders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// After: Direct, optimized query</span></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> users <span class="token operator">=</span> <span class="token keyword">await</span> _context<span class="token punctuation">.</span>Users</span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>u <span class="token operator">=&gt;</span> u<span class="token punctuation">.</span>IsActive<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>u <span class="token operator">=&gt;</span> u<span class="token punctuation">.</span>Orders<span class="token punctuation">.</span><span class="token function">Any</span><span class="token punctuation">(</span>o <span class="token operator">=&gt;</span> o<span class="token punctuation">.</span>CreatedAt <span class="token operator">&gt;</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">AddDays</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">Include</span><span class="token punctuation">(</span>u <span class="token operator">=&gt;</span> u<span class="token punctuation">.</span>Orders<span class="token punctuation">.</span><span class="token function">Take</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">ToListAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The concrete version is more explicit about what data it fetches and how, making performance characteristics visible and optimization possible. If you need the same query in multiple places, you could move it into an extension method to make it shareable.</p><hr><h2 id="the-bottom-line" tabindex="-1"><a class="header-anchor" href="#the-bottom-line"><span>The Bottom Line</span></a></h2><p>Abstractions are powerful tools for managing complexity and change, but they&#39;re not free. Each one adds indirection, cognitive overhead, and maintenance burden.</p>`,56)),s("p",null,[n[12]||(n[12]=e("The ")),a(d,{to:"/milanjovanovic.tech/pragmatic-clean-architecture/"},{default:t(()=>n[11]||(n[11]=[s("strong",null,"cleanest architecture",-1)])),_:1,__:[11]}),n[13]||(n[13]=e(" isn't the one with the most layers. It's the one where each layer has a clear, justified purpose."))]),n[16]||(n[16]=s("p",null,"Before adding your next abstraction, ask yourself:",-1)),n[17]||(n[17]=s("ul",null,[s("li",null,"Am I abstracting a policy or just a mechanic?"),s("li",null,"Do I have two implementations, or am I speculating about future needs?"),s("li",null,"Will this make my system more adaptable, or just harder to follow?"),s("li",null,"If I removed this layer, would the code become simpler?")],-1)),n[18]||(n[18]=s("div",{class:"hint-container note"},[s("p",{class:"hint-container-title"},"Remember"),s("p",null,"abstractions are loans that accrue interest over time. Make sure you're borrowing for the right reasons, not just out of habit.")],-1)),n[19]||(n[19]=s("p",null,"The goal is to use abstractions intentionally, where they solve real problems and protect against genuine volatility. Build abstractions that earn their keep. Delete the ones that don't.",-1)),n[20]||(n[20]=s("hr",null,null,-1)),b(" TODO: add ARTICLE CARD "),a(i,l(c({title:"The Real Cost of Abstractions in .NET",desc:"Not all abstractions are created equal. Some isolate real volatility and protect your system from change. Others quietly pile up complexity and hide performance problems. Learn when to embrace abstractions versus when they become technical debt that slows down your team.",link:"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/the-real-cost-of-abstractions-in-dotnet.html",logo:"https://milanjovanovic.tech/profile_favicon.png",background:"rgba(79,70,229,0.2)"})),null,16)])}const R=k(g,[["render",T]]),P=JSON.parse('{"path":"/milanjovanovic.tech/the-real-cost-of-abstractions-in-dotnet.html","title":"The Real Cost of Abstractions in .NET","lang":"en-US","frontmatter":{"lang":"en-US","title":"The Real Cost of Abstractions in .NET","description":"Article(s) > The Real Cost of Abstractions in .NET","icon":"iconfont icon-csharp","category":["C#","DotNet","Article(s)"],"tag":["blog","milanjovanovic.tech","cs","c#","csharp","dotnet"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"The Real Cost of Abstractions in .NET\\",\\"image\\":[\\"https://milanjovanovic.tech/blog-covers/mnw_156.png\\"],\\"datePublished\\":\\"2025-08-23T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Milan Jovanović\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/the-real-cost-of-abstractions-in-dotnet.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"The Real Cost of Abstractions in .NET"}],["meta",{"property":"og:description","content":"Article(s) > The Real Cost of Abstractions in .NET"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://milanjovanovic.tech/blog-covers/mnw_156.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://milanjovanovic.tech/blog-covers/mnw_156.png"}],["meta",{"name":"twitter:image:alt","content":"The Real Cost of Abstractions in .NET"}],["meta",{"property":"article:author","content":"Milan Jovanović"}],["meta",{"property":"article:tag","content":"dotnet"}],["meta",{"property":"article:tag","content":"csharp"}],["meta",{"property":"article:tag","content":"c#"}],["meta",{"property":"article:tag","content":"cs"}],["meta",{"property":"article:tag","content":"milanjovanovic.tech"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2025-08-23T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > The Real Cost of Abstractions in .NET"},{"property":"og:description","content":"The Real Cost of Abstractions in .NET"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/the-real-cost-of-abstractions-in-dotnet.html"}]],"prev":"/programming/cs/articles/README.md","date":"2025-08-23T00:00:00.000Z","isOriginal":false,"author":"Milan Jovanović","cover":"https://milanjovanovic.tech/blog-covers/mnw_156.png"},"git":{},"readingTime":{"minutes":5.43,"words":1630},"filePathRelative":"milanjovanovic.tech/the-real-cost-of-abstractions-in-dotnet.md","copyright":{"author":"Milan Jovanović"}}');export{R as comp,P as data};
