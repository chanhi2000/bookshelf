import{_ as g}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as v,d as s,f as t,b as k,a as y,t as b,n as r,g as c,w as d,e as a,r as e,o as f}from"./app-BVguHYKu.js";const w={},E={id:"frontmatter-title-관련",tabindex:"-1"},x={class:"header-anchor",href:"#frontmatter-title-관련"},A={class:"table-of-contents"},T={href:"https://web.dev/blog/baseline-entry-animations?hl=en#enabling_discrete_animations_with_allow-discrete",target:"_blank",rel:"noopener noreferrer"};function C(i,n){const l=e("VPCard"),p=e("router-link"),u=e("SiteInfo"),m=e("VPIcon"),o=e("CodePen"),h=e("VidStack");return f(),v("div",null,[s("h1",E,[s("a",x,[s("span",null,b(i.$frontmatter.title)+" 관련",1)])]),t(l,r(c({title:"CSS > Article(s)",desc:"Article(s)",link:"/programming/css/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",A,[s("ul",null,[s("li",null,[t(p,{to:"#both-entry-and-exit"},{default:d(()=>n[0]||(n[0]=[a("Both Entry and Exit")])),_:1,__:[0]})]),s("li",null,[t(p,{to:"#usage-with-popovers"},{default:d(()=>n[1]||(n[1]=[a("Usage with Popovers")])),_:1,__:[1]})])])]),n[13]||(n[13]=s("hr",null,null,-1)),t(u,{name:"The Dialog Element with Entry *and* Exit Animations",desc:"Now that we're starting to see better support for @starting-style and the allow-discrete keyword, we've got a pretty straightforward way for defining *different* entry and exit states.",url:"https://frontendmasters.com/blog/the-dialog-element-with-entry-and-exit-animations/",logo:"https://frontendmasters.com/favicon.ico",preview:"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/3559"}),s("p",null,[n[3]||(n[3]=a("Una Kravets blogged the other day that ")),s("a",T,[t(m,{icon:"fas fa-globe"}),n[2]||(n[2]=a("animating entry effects are now supported"))]),n[4]||(n[4]=a(" in the latest stable version of all major browsers. The ")),n[5]||(n[5]=s("em",null,"new cool",-1)),n[6]||(n[6]=a(" way to do it, that is. We’ve long had trickery like applying a ")),n[7]||(n[7]=s("code",null,"@keyframe",-1)),n[8]||(n[8]=a(" animation with a ")),n[9]||(n[9]=s("code",null,"to",-1)),n[10]||(n[10]=a(" frame that would behave like an “entry effect”, but it was a bit awkward and didn’t work in all situations. Specifically one like using the new and very useful ")),n[11]||(n[11]=s("code",null,"<dialog>",-1)),n[12]||(n[12]=a(" element."))]),n[14]||(n[14]=k(`<p>This bit of code says a lot:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">dialog[open]</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">transition</span><span class="token punctuation">:</span> </span>
<span class="line">    translate 0.7s ease-out<span class="token punctuation">,</span> </span>
<span class="line">    display 0.7s ease-out allow-discrete<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">/* Post-Entry (Normal) State */</span></span>
<span class="line">  <span class="token property">translate</span><span class="token punctuation">:</span> 0 0<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">/* Pre-Entry State */</span></span>
<span class="line">  <span class="token atrule"><span class="token rule">@starting-style</span></span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">translate</span><span class="token punctuation">:</span> 0 100vh<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>There are two big things at work there:</p><ol><li>The <code>display</code> property is listed in the transitions, with the keyword <code>allow-discrete</code>. The code for it is hidden in User-Agent stylesheets, but when a <code>&lt;dialog&gt;</code> moves from close (default) to open, the <code>display</code> goes from <code>none</code> to <code>block</code>. Using this keyword means that the <code>display</code> property is changed <em>after</em> the animation timing, so animations can actually happen.</li><li>The <code>@starting-style</code> gives us an opportunity to apply styling to the element <em>just as it’s entering it’s current state</em>, meaning the transition will happen between the styles declared inside and outside that block.</li></ol><p>Golf clap. Everything is awesome.</p><p>What Una <em>didn’t</em> cover, on purpose surely, was <em>exit</em> animations (because they aren’t in “Baseline” yet, meaning not supported across browsers). But they <em>are</em> supported in Chrome-n-friends land, so I thought it was worth looking at. To me, they are just as interesting, cool, and useful as the entry kind.</p><hr><h2 id="both-entry-and-exit" tabindex="-1"><a class="header-anchor" href="#both-entry-and-exit"><span>Both Entry and Exit</span></a></h2><p>The trick isn’t terribly different than the code above, it’s just to have very specific styles for both the open and closed (<em>i.e.</em> <code>:not([open]</code>) states. Like this:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">dialog</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">--duration</span><span class="token punctuation">:</span> 0.34s<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">transition</span><span class="token punctuation">:</span> </span>
<span class="line">    translate <span class="token function">var</span><span class="token punctuation">(</span>--duration<span class="token punctuation">)</span> ease-in-out<span class="token punctuation">,</span> </span>
<span class="line">    scale <span class="token function">var</span><span class="token punctuation">(</span>--duration<span class="token punctuation">)</span> ease-in-out<span class="token punctuation">,</span> </span>
<span class="line">    filter <span class="token function">var</span><span class="token punctuation">(</span>--duration<span class="token punctuation">)</span> ease-in-out<span class="token punctuation">,</span> </span>
<span class="line highlighted">    display <span class="token function">var</span><span class="token punctuation">(</span>--duration<span class="token punctuation">)</span> ease-in-out allow-discrete<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token selector">&amp;[open]</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">/* Post-Entry (Normal) State */</span></span>
<span class="line">    <span class="token property">translate</span><span class="token punctuation">:</span> 0 0<span class="token punctuation">;</span></span>
<span class="line">    <span class="token property">scale</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span></span>
<span class="line">    <span class="token property">filter</span><span class="token punctuation">:</span> <span class="token function">blur</span><span class="token punctuation">(</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/* Pre-Entry State */</span></span>
<span class="line">    <span class="token atrule"><span class="token rule">@starting-style</span></span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">translate</span><span class="token punctuation">:</span> 0 8vh<span class="token punctuation">;</span></span>
<span class="line">      <span class="token property">scale</span><span class="token punctuation">:</span> 1.15<span class="token punctuation">;</span></span>
<span class="line">      <span class="token property">filter</span><span class="token punctuation">:</span> <span class="token function">blur</span><span class="token punctuation">(</span>8px<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">/* Exiting State */</span></span>
<span class="line">  <span class="token selector">&amp;:not([open])</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">translate</span><span class="token punctuation">:</span> 0 -8vh<span class="token punctuation">;</span></span>
<span class="line">    <span class="token property">scale</span><span class="token punctuation">:</span> 1.15<span class="token punctuation">;</span></span>
<span class="line">    <span class="token property">filter</span><span class="token punctuation">:</span> <span class="token function">blur</span><span class="token punctuation">(</span>8px<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Check it out:</p>`,11)),t(o,{user:"chriscoyier","slug-hash":"xxoPzEZ",title:"Dialog Animate In — Fly from Above","default-tab":["css","result"],theme:i.$isDarkmode?"dark":"light"},null,8,["theme"]),n[15]||(n[15]=s("p",null,"And a video in case you’re in a browser that doesn’t support it yet:",-1)),t(h,{src:"https://videos.files.wordpress.com/puie9YCG/cleanshot-2024-08-28-at-09.34.50_mp4_hd_1080p.mp4"}),n[16]||(n[16]=s("p",null,[a("Note that not only does it "),s("em",null,"have"),a(" entry and exit animations, but those states are "),s("em",null,"different"),a(" —which is very cool! Emphasizing that, here’s one where I move the dialog along an "),s("code",null,"offset-path"),a(" so the exit is really a continuation of the path:")],-1)),t(o,{user:"chriscoyier","slug-hash":"rNErmmz",title:"Dialog Entry and Exit along a Path","default-tab":["css","result"],theme:i.$isDarkmode?"dark":"light"},null,8,["theme"]),n[17]||(n[17]=s("hr",null,null,-1)),n[18]||(n[18]=s("h2",{id:"usage-with-popovers",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#usage-with-popovers"},[s("span",null,"Usage with Popovers")])],-1)),n[19]||(n[19]=s("p",null,"This isn’t exclusively for dialogs, you can make it work with whatever. But naturally open-closable things make the most sense. Like native popovers! Nils Riedemann has a nice demo here:",-1)),t(o,{user:"chriscoyier","slug-hash":"jOjLjYw",title:"Popover and Backdrop with Enter and Leave Transition using only CSS","default-tab":["css","result"],theme:i.$isDarkmode?"dark":"light"},null,8,["theme"]),y(" TODO: add ARTICLE CARD "),t(l,r(c({title:"The Dialog Element with Entry *and* Exit Animations",desc:"Now that we're starting to see better support for @starting-style and the allow-discrete keyword, we've got a pretty straightforward way for defining *different* entry and exit states.",link:"https://chanhi2000.github.io/bookshelf/frontendmasters.com/the-dialog-element-with-entry-and-exit-animations.html",logo:"https://frontendmasters.com/favicon.ico",background:"rgba(188,75,52,0.2)"})),null,16)])}const P=g(w,[["render",C]]),j=JSON.parse('{"path":"/frontendmasters.com/the-dialog-element-with-entry-and-exit-animations.html","title":"The Dialog Element with Entry *and* Exit Animations","lang":"en-US","frontmatter":{"lang":"en-US","title":"The Dialog Element with Entry *and* Exit Animations","description":"Article(s) > The Dialog Element with Entry *and* Exit Animations","icon":"fa-brands fa-css3-alt","category":["CSS","Article(s)"],"tag":["blog","frontendmasters.com","css"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"The Dialog Element with Entry *and* Exit Animations\\",\\"image\\":[\\"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/3559\\"],\\"datePublished\\":\\"2024-08-28T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Chris Coyier\\",\\"url\\":\\"https://frontendmasters.com/blog/author/chriscoyier/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/frontendmasters.com/the-dialog-element-with-entry-and-exit-animations.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"The Dialog Element with Entry *and* Exit Animations"}],["meta",{"property":"og:description","content":"Article(s) > The Dialog Element with Entry *and* Exit Animations"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/3559"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/3559"}],["meta",{"name":"twitter:image:alt","content":"The Dialog Element with Entry *and* Exit Animations"}],["meta",{"property":"article:author","content":"Chris Coyier"}],["meta",{"property":"article:tag","content":"css"}],["meta",{"property":"article:tag","content":"frontendmasters.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2024-08-28T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > The Dialog Element with Entry *and* Exit Animations"},{"property":"og:description","content":"The Dialog Element with Entry *and* Exit Animations"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/frontendmasters.com/the-dialog-element-with-entry-and-exit-animations.html"}]],"prev":"/programming/css/articles/README.md","date":"2024-08-28T00:00:00.000Z","isOriginal":false,"author":[{"name":"Chris Coyier","url":"https://frontendmasters.com/blog/author/chriscoyier/"}],"cover":"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/3559"},"git":{},"readingTime":{"minutes":2.79,"words":838},"filePathRelative":"frontendmasters.com/the-dialog-element-with-entry-and-exit-animations.md","copyright":{"author":"Chris Coyier"}}');export{P as comp,j as data};
